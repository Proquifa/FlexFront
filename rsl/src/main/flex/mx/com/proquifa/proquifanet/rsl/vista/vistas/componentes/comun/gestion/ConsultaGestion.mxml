<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:otros="skins.otros.*"
		 xmlns:label="skins.skin.label.*"
		 creationComplete="init()"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:pqNet="skins.skin.datagrid.pqNet.*" xmlns:graficas="skins.skin.graficas.*" 
		 xmlns:sinicono="skins.botones.largocolor.sinicono.*" xmlns:pqNet1="skins.botones.pqNet.*" xmlns:flechasiguiente="skins.botones.flechasiguiente.*" 
		 xmlns:flecharegresa="skins.botones.flecharegresa.*" xmlns:salir="skins.botones.salir.*" xmlns:guardar="skins.botones.guardar.*" xmlns:finalizar="skins.botones.finalizar.*"
		 xmlns:pruebas = "mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.gestion.*"
		 xmlns:reporte="mx.com.proquifa.proquifanet.rsl.vista.vistas.*" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Resize target="{this.lista}" effectEnd="{this.lista.percentHeight = 100 ; this.lista.percentWidth = 100}" id="muestraResize" duration="250"/> <!--460-->
		<s:Resize target="{this.lista}" effectEnd="{this.lista.percentHeight = 100 ; this.lista.percentWidth = 0}" id="muestraResizeEnd" duration="250"/> <!--460-->
		<s:Resize target="{this.qdcResize}"  effectEnd="{this.qdcResize.percentHeight = 100 ; this.qdcResize.percentWidth = 75}" id="muestraQdc" duration="250"/> <!--460-->
		<s:Resize target="{this.qdcResize}" effectEnd="{this.qdcResize.percentHeight = 100 ; this.qdcResize.percentWidth = 10}" id="muestraQdcEnd" duration="250"/> <!--460-->
		<s:Fade duration="1000" alphaFrom="0" alphaTo="1" id="fadeIn" />
		<s:Resize target="{this.impactoResize}"  effectEnd="{this.impactoResize.percentHeight = 100 ; this.impactoResize.percentWidth = 75}"  id="muestraImpacto" duration="400"/> <!--460-->
		<s:Resize target="{this.impactoResize}" effectEnd="{this.impactoResize.percentHeight = 100 ; this.impactoResize.percentWidth = 10}"  id="muestraImpactoEnd" duration="400"/> <!--460-->
		<s:Resize target="{this.botonesTodoDesmarcar}" heightFrom="0" heightTo="60" id="muestraBotones" duration="300"/>
		<s:Resize target="{this.botonesTodoDesmarcar}" heightFrom="60" heightTo="0" id="ocultaBotones" duration="300"/>
		
		<mx:StringValidator id="validaproblema" source="{problemaqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionProblema}" />
		<mx:StringValidator id="validaque" source="{queinspectorqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionQue}"/>
		<mx:StringValidator id="validaquien" source="{quieninspectorqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionQuien}" />
		<mx:StringValidator id="validadonde" source="{dondeinspectorqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionDonde}" />
		<mx:StringValidator id="validacuando" source="{cuandoinspectorqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionCuando}" />
		<mx:StringValidator id="validacomo" source="{comoinspectorqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionComo}"/>
		<mx:StringValidator id="validaporque" source="{porqueinspectorqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionPorQue}"/>
		<mx:StringValidator id="validasolucion" source="{solucioninspectorqqdccp}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.GESTION_ADV_descripcionSolucion}" />
		
		<mx:StringValidator id="validaquemultiple" source="{queinspector}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.ADV_que}"/>
		<mx:StringValidator id="validadondemultiple" source="{dondeinspector}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.ADV_donde}" />
		<mx:StringValidator id="validacuandomultiple" source="{cuandoinspector}" property="text" minLength="2" requiredFieldError="{catalogoAlertas.ADV_cuando}"/>
		<mx:NumberValidator id="validacheckorigen" source="{areasOrigenIncidente}" property="selectedIndex" minValue="0" lowerThanMinError="{catalogoAlertas.GESTION_ADV_seleccionaOrigen}" />
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.net.dns.AAAARecord;
			import flash.sampler.NewObjectSample;
			
			import flashx.textLayout.elements.BreakElement;
			
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.items.PieSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoParaContactoService;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoAnalisisincidente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoGestionIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidenteProgramarAccion;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoReferencias;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoReformulaIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.alertPqNet.ResultAlert;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.CatalogoItem;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Empleado;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Gestion;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.pieChartDinamico.PieDinamico;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.incidente.ProgramacionAccionIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.incidente.vistaincidente.CargaReferencias;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.incidente.vistaincidente.LineaDelTiempo;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.pieChartDinamico.pqNetPiesChartDinamico;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.comun.contactos.ObtenerContacto;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.ChannelSet;
			import mx.messaging.Consumer;
			import mx.messaging.Producer;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.events.MessageFaultEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.utils.ObjectUtil;
			import mx.utils.object_proxy;
			import mx.validators.Validator;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotones;
			import skins.catalogos.catalogoIconosEtiquetas;
			import skins.catalogos.catalogoIconosGrid;
			import skins.catalogos.catalogoInfoGraficas;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var datosGraficaETvsFT:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var datosGraficaUbicacion:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var datosGraficaRedacto:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var datosGraficaMarcador:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var datosGraficaUbicacionAnalisis:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var datosGraficaRedactoAnalisis:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var datosGraficaSMvsCM:ArrayCollection;
			[Bindable]
			private var datosGraficaTiempoSM:ArrayCollection;
			[Bindable]
			private var datosGraficaTiempoCM:ArrayCollection;
			[Bindable]
			private var _boolPanelEdicionDesplegado:Boolean = true;
			[Bindable]
			private var _botonesActivos:Boolean = false;
			[Bindable]
			private var _totalET:int;
			[Bindable]
			private var _totalFT:int;
			[Bindable]
			private var _totalAnalisisET:int;
			[Bindable]
			private var _totalAnalisisFT:int;			
			[Bindable]
			public var _botoneraGestionIncidente:ArrayCollection = new ArrayCollection([{icono:"registrarIncidente", bandera:false},
				{icono:"marcadores", bandera:false},
				{icono:"graficaPie", bandera:false}]);
			[Bindable]
			private var analisisGestion:Gestion;
			[Bindable]
			private var fechaHoy:Date = new Date();
			[Bindable]
			private var _numIncidente:int;
			[Bindable]
			private var _numIncidenteMultiple:int;
			[Bindable]
			private var _listaTipo:ArrayCollection = new ArrayCollection( [{id:0, tipo:"Operativo"},
				{id:2, tipo:"GestiÃ³n"},
				{id:3, tipo:"Herramienta"},
				{id:4, tipo:"Criterio"},
				{id:5, tipo:"Queja"}]);
			[Bindable]
			private var _listaIncidenteAnalisis:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _listaIncidente:ArrayCollection;
			[Bindable]
			private var _arregloIncidente:ArrayCollection;
			[Bindable]
			private var _listaIncidenteMarcadores:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _listaMarcadores:ArrayCollection;
			[Bindable]
			private var _listaIncidenteXMarcador:ArrayCollection;
			[Bindable]
			private var _listaProcedimientos:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _listaProcedimientosAsociados:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _listaReferencias:ArrayCollection;
			[Bindable]
			private var _listaReferenciasMultiple:ArrayCollection;
			[Bindable]
			private var _listaOrigenMultiple:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _listaFinalOrigenMultiple:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _listaMarcadoresAgrupados:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _universoAreaOrigen:ArrayCollection;
			[Bindable]
			private var _areaOrigen:ArrayCollection = new ArrayCollection(); 
			[Bindable]
			private var copiaSeguridadGrid:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var copiaSeguridadLista:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _listaMarcadoresDragDrop:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _arrayCollectionMarcador:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _arrayMarcador:Array = new Array();
			[Bindable]
			private var _idProveedor:int;
			[Bindable]
			private var _idProducto:int;
			[Bindable]
			private var _idGestion:int;
			[Bindable]
			private var _idPendiente:int;
			[Bindable]
			private var _idContacto:int;
			[Bindable]
			private var _descripcionProducto:String;
			[Bindable]
			private var _nombreProveedor:String;
			[Bindable]
			private var _nombreCliente:String;
			[Bindable]
			private var _nombreContacto:String;
			[Bindable]
			private var _popContactoSeleccionado:Contacto = new Contacto();
			[Bindable]
			private var usuarioGerente:String;
			[Bindable]
			private var _selectItemValor:String;
			[Bindable]
			private var _selectItemSubProceso:String;
			[Bindable]
			private var nuevoMarcadorAsignado:String;
			[Bindable]
			private var _subproceso:String;
			[Bindable]
			private var _idEmpleadoMultiple:int;
			[Bindable]
			public var validarArr:Array;
			[Bindable]
			public var validarArrMultiple:Array;
			[Bindable]
			public var _incidente:Incidente = null;
			[Bindable]
			private var mensajerror:ArrayCollection;
			[Bindable]
			private var _folioIncidente:String;
			[Bindable]
			private var banderaAlert:Boolean = false;
			[Bindable]
			private var banderaCheckTodo:Boolean = false;
			[Bindable]
			private var _actualiza:Boolean = false;
			[Bindable]
			private var registrado:Boolean = false;
			[Bindable]
			private var nuevoInc:Boolean = false;
			[Bindable]
			private var validaQDC:Boolean =  false;
			[Bindable]
			private var qdcCorrecto:Boolean = false;
			[Bindable]
			private var existeProveedor:Boolean = false;
			[Bindable]
			private var _revisarComponente:Boolean = false;
			[Bindable]
			private var vieneDNuevoOrigenMultiple:Boolean = false;
			[Bindable]
			private var existeCliente:Boolean = false;
			[Bindable]
			private var nuevoMarcador:Boolean = false;;
			[Bindable]
			private var actualizarMarcador:Boolean = false;
			[Bindable]
			private var viejoSubproceso:String;
			[Bindable]
			private var idViejoMultiple:int;
			[Bindable]
			private var valorViejo:int;
			[Bindable]
			private var contador:int;
			[Bindable]
			private var valorViejo2:String;
			[Bindable] private var _componenteArregloPies:pqNetPiesChartDinamico = null;
			[Bindable] private var _componenteArregloPiesGestion:pqNetPiesChartDinamico = null;
			[Bindable]
			private var imagenDMarcador:Class;
			[Bindable]
			private var nombreMarcador:String;
			[Bindable]
			private var numeroDIncidentes:int;
			[Bindable]
			private var marcadorET:int;
			[Bindable]
			private var marcadorFT:int;
			[Bindable]
			private var marcadorNumeroIncidente:int;
			[Bindable]
			private var marcadorPrincipalET:int;
			[Bindable]
			private var marcadorPrincipalFT:int;
			[Bindable]
			private var botoneraPrincipal:ArrayCollection;
			[Bindable] private var _imagenTab:Class = catalogoIconosBotones.getInstance().tabalreves;
			[Bindable] private var _imagenTabQDC:Class = catalogoIconosBotones.getInstance().tabGrisDer;
			[Bindable] private var  _imagenTabImpacto:Class = catalogoIconosBotones.getInstance().tabGrisDer;
			private var verColumna:Boolean = false;
			private var validarTextArea:Array;
			private var cambioTipo:Boolean = false;
			private var palabrasinspector:uint;
			private var lineaDTiempo:LineaDelTiempo = null;
			private var programaAccionIncidente:ProgramacionAccionIncidente = null; 
			private var popReformulacion:PopUpReformulacion = new PopUpReformulacion();
			private var popCambioOrigen:PopUpCambioDOrigen = new PopUpCambioDOrigen();
			private var popUpAsociacion:PopUpVistaAsociacion = new PopUpVistaAsociacion();
			private var popProveedores:PopUpProveedores = new PopUpProveedores();
			private var popMarcadores:PopUpMarcadores = new PopUpMarcadores();
			public var imgCls:Class = catalogoIconosGrid.getInstance().render_clipsitonegro;
			private var _procedimientosAsociados:String = "";
			private var popReferencias:CargaReferencias = new CargaReferencias();
			private var eliminar:String = new String();
			private var compresorActivo:Boolean = false;
			
			private var canalP:AMFChannel;
			private var canalesP:ChannelSet;
			
			private var consumidorDocSalientes:Consumer= new Consumer();
			private var canalVerificacion:AMFChannel;
			private var canalesVerificacion:ChannelSet;
			private var productorDocSalientes:Producer = new Producer();
			
			private function falloconsumidor(event:MessageFaultEvent):void{
				//alertaSingleton.show(catalogoAlertas.ERR_channelConsumidor, catalogoAlertas.TIT_ERR);
			}
			
			private function recibirMensajePendientes(mensajeRecibido:MessageEvent):void{
				//if(mensajeRecibido.message.headers.Usuario != DatosGlobales.getInstance()._usuario.usuario ){
				if(mensajeRecibido.message.body == "eventoCambioDeOrigen"){
					//Alert.show("d cambio de Origen");
					var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
					evt.usuario = DatosGlobales.getInstance()._usuario.usuario; 
					dispatchEvent(evt);
					this.actualizarMarcador = true;
					this.nuevoMarcador = true;
				}
				if(mensajeRecibido.message.body == "eventoReformulacion"){ 
					//Alert.show("d reformulacion");
					var evto:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
					evto.usuario = DatosGlobales.getInstance()._usuario.usuario;   
					dispatchEvent(evto);
					this.actualizarMarcador = true;
					this.nuevoMarcador = true;
				}
				if(mensajeRecibido.message.body == "eventoPopReformulacion"){
					//Alert.show("del pop reformulacion");
					var event:EventoReformulaIncidente = new EventoReformulaIncidente(EventoReformulaIncidente.REFORMULA_INCIDENTE);
					event.usuario = DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
					dispatchEvent(event);
				}
				if(mensajeRecibido.message.body == "eventoIncidente"){ 
					//Alert.show("d incindete");
					var evento:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
					evento.usuario = DatosGlobales.getInstance()._usuario.usuario;   
					dispatchEvent(evento);
					this.actualizarMarcador = true;
					this.nuevoMarcador = true;
				}
				//}
			}
			
			private function falloproductor(event:MessageFaultEvent):void{
				//Alert.show("Se ha producido un error en el Productor","Error");
				alertaSingleton.show( catalogoAlertas.ERR_channelProductor, catalogoAlertas.TIT_ERR);
			}
			
			
			private function init():void{
				//var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
				//evt.usuario = "OCardona" //DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
				//dispatchEvent(evt);
				this.consumidorDocSalientes.destination = "actualizacionService";
				Â Â Â Â this.consumidorDocSalientes.addEventListener("fault",falloconsumidor);
				Â Â Â Â this.consumidorDocSalientes.addEventListener(MessageEvent.MESSAGE, recibirMensajePendientes);
				Â Â Â Â this.canalVerificacion = new AMFChannel("my-polling-amf", Destinos.END_POINT_MENSAJERIA);
				Â Â Â Â this.canalesVerificacion = new ChannelSet();
				Â Â Â Â this.canalesVerificacion.addChannel(canalVerificacion);
				Â Â Â Â this.consumidorDocSalientes.channelSet = this.canalesVerificacion;
				Â Â Â Â this.consumidorDocSalientes.subscribe();
				
				this.canalVerificacion = new AMFChannel("my-polling-amf", Destinos.END_POINT_MENSAJERIA);
				//this.canalesVerificacion = new ChannelSet();
				//this.canalesVerificacion.addChannel(canalVerificacion); 
				this.productorDocSalientes.destination = "actualizacionService";
				this.productorDocSalientes.addEventListener(MessageFaultEvent.FAULT,falloproductor);
				this.productorDocSalientes.channelSet = this.canalesVerificacion;
				
				this.listadoGestion.selectedIndex = 5;
				
				this.addEventListener(EventoIncidente.CERRAR_COMPONENTE, cerrarComponente);
				this.addEventListener(EventoGestionIncidente.OBTENER_UBICACION_DROP,recibeUbicaionDrop);
				tiempo.addEventListener(TimerEvent.TIMER,paraReloj);
				
				validarArr = new Array();
				validarArr.push(validaproblema);
				validarArr.push(validaque);
				validarArr.push(validaquien);
				validarArr.push(validadonde);
				validarArr.push(validacuando);
				validarArr.push(validacomo);
				validarArr.push(validaporque);
				validarArr.push(validasolucion);
				
				/* validarArr.push(validaquemultiple);
				validarArr.push(validadondemultiple);
				validarArr.push(validacuandomultiple);
				validarArr.push(validacheckorigen); */
				
				validarArrMultiple = new Array();
				validarArrMultiple.push(validaquemultiple);
				validarArrMultiple.push(validadondemultiple);
				validarArrMultiple.push(validacuandomultiple);
				validarArrMultiple.push(validacheckorigen);
				
				var evto:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_CONTACTOS_GESTION_INCIDENTE);
				evto.nivel = "Gerente";
				evto.valorAdicional = "";
				dispatchEvent(evto);
				
			}
			
			private function recibeUbicaionDrop(evt:EventoGestionIncidente):void{
				//this.lblpruebadrop.text = evt.itemDrop;
				this.nuevoMarcadorAsignado = evt.itemDrop
			}
			
			private function cambiaQDC(event:IndexChangeEvent):void{
				var i:int=0; 
				var j:int = 0
				
				if(event.currentTarget.selectedIndex == this._listaOrigenMultiple.length - 1 ){
					return;
				}
				if(vieneDNuevoOrigenMultiple == true ){
					//this.registrado = false;
					this.nuevoInc = false;
				} 
				
				//////////////////////////////////////// Actualiza Incidente ///////////////////////////////////////////
				if(registrado == true){
					if(viejoSubproceso != "Origen Pendiente"){
						
						for( d=0 ; d<_listaFinalOrigenMultiple.length ; d++){
							if(_listaFinalOrigenMultiple[d].idEmpleado == idViejoMultiple && _listaFinalOrigenMultiple[d].idIncidente == valorViejo || _listaFinalOrigenMultiple[d].valor == valorViejo2 ){
								
								for( var m:int = 0 ; m<_universoAreaOrigen.length ; m++){
									if(_universoAreaOrigen[m].subproceso == this.areasOrigenIncidente.selectedItem){
										this.nombreGerenteIncidente.text = _universoAreaOrigen[m].nombre;
										this.usuarioGerente = _universoAreaOrigen[m].valor;
										this._subproceso = _universoAreaOrigen[m].subproceso;
										this._idEmpleadoMultiple = _universoAreaOrigen[m].llave;
									}
								}
								
								this._listaFinalOrigenMultiple[d].descripcion = this.queinspector.text;
								this._listaFinalOrigenMultiple[d].lugar = this.dondeinspector.text;
								this._listaFinalOrigenMultiple[d].cuando = this.cuandoinspector.text;
								this._listaFinalOrigenMultiple[d].comentarios = this.comentariosinspector.text;
								this._listaFinalOrigenMultiple[d].situacionIdentificada = this.situacioninspector.text;
								this._listaFinalOrigenMultiple[d].fecha = this.fechaHoy;
								this._listaFinalOrigenMultiple[d].idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
								this._listaFinalOrigenMultiple[d].incidenteRelacionado = _numIncidente;
								
								for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
									if(_listaReferenciasMultiple[i].ultimo != ""){
										this._listaReferenciasMultiple.removeItemAt(i);
										i = i - 1;
									}
								}
								
								if(_listaReferenciasMultiple == null){					
									this._listaFinalOrigenMultiple[d].referencias = new ArrayCollection();
								}else{					
									this._listaFinalOrigenMultiple[d].referencias = this._listaReferenciasMultiple;
								} 
								
								if(nombreGerenteIncidente.text == ""){
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
											this._listaOrigenMultiple[j].nombre = " Pendiente";
											viejoSubproceso = " Origen Pendiente";
										}
									}	
								}else{
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
											this._listaOrigenMultiple[j].subproceso = _subproceso;
											viejoSubproceso = _subproceso;
										}
									}	
								}
							}
						}
					}	
					registrado = false;
					if(vieneDNuevoOrigenMultiple == true ){
						nuevoInc = false;
					}else{
						nuevoInc = true;	
					}
					//viejoSubproceso = event.currentTarget.selectedItem.subproceso;
				}
				
				//////////////////////////////////////// Registra nuevo onÂ¡bjeto incidente ///////////////////////////////////////////
				if( nuevoInc == false && registrado == false && _selectItemSubProceso == "Origen Pendiente"){
					
					/* validarTextArea = []; 
					validarTextArea =  Validator.validateAll(validarArrMultiple) ;
					var textAreaCompleto:Boolean = validarTextArea.length == 0;
					if(textAreaCompleto){ */
					
					this._incidente = new Incidente();
					this._incidente.valor = _selectItemValor;
					this._incidente.descripcion = this.queinspector.text;
					this._incidente.lugar = this.dondeinspector.text;
					this._incidente.cuando = this.cuandoinspector.text;
					this._incidente.comentarios = this.comentariosinspector.text;
					this._incidente.situacionIdentificada = this.situacioninspector.text;
					this._incidente.fecha = this.fechaHoy;
					this._incidente.idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
					this._incidente.incidenteRelacionado = _numIncidente;
					
					for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
						if(_listaReferenciasMultiple[i].ultimo != ""){
							this._listaReferenciasMultiple.removeItemAt(i);
							i = i - 1;
						}
					}
					
					if(_listaReferenciasMultiple == null){					
						this._incidente.referencias = new ArrayCollection();
					}else{					
						this._incidente.referencias = this._listaReferenciasMultiple;
					}  
					
					this._listaFinalOrigenMultiple.addItem(_incidente);
					
					if(nombreGerenteIncidente.text == ""){
						for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
							if(this._listaOrigenMultiple[j].valor == _selectItemValor){
								this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
								this._listaOrigenMultiple[j].nombre = " Pendiente";
							}
						}	
					}else{
						for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
							if(this._listaOrigenMultiple[j].valor == _selectItemValor){
								this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
								this._listaOrigenMultiple[j].subproceso = _subproceso;
							}
						}	
					}
					
					
					this.situacioninspector.text = "";
					this.queinspector.text = "";
					this.dondeinspector.text = "";
					this.cuandoinspector.text = "";
					this.comentariosinspector.text = "";
					this.areasOrigenIncidente.selectedIndex = -1;
					this.nombreGerenteIncidente.text = "";
					this.vieneDNuevoOrigenMultiple = false;
					this._listaReferenciasMultiple = new ArrayCollection();
					
					/*}else{
					var error:ValidationResultEvent;
					mensajerror = new ArrayCollection();
					
					for(var n:int = 0 ; n<validarTextArea.length ; n++){
					mensajerror.addItem(validarTextArea[n].message);	
					}
					event.newIndex = event.oldIndex
					trace(listaincidente.selectedIndex.toString() + " viejo: " + event.oldIndex);
					listaincidente.selectedIndex = event.newIndex;
					trace(listaincidente.selectedIndex.toString()); */
					//var evento:IndexChangeEvent = new IndexChangeEvent(IndexChangeEvent.CHANGE);
					//evento.target = listaincidente;
					/* this.dispatchEvent(evento); */
					//alertaSingleton.show("","Â¡AtenciÃ³n ...!","","","","","",mensajerror); 
					//Alert.show("error");
					//this.prueba();
					//tiempo.addEventListener(TimerEvent.TIMER,paraReloj);
					//tiempo.addEventListener(TimerEvent.TIMER,paraReloj);
					/* tiempo.start();
					return; 
					}*/
				}	
				
				//////////////////////////////////////// Carga informaciÃ³n de incidente ///////////////////////////////////////////
				for(var d:int = 0; d<_listaFinalOrigenMultiple.length ; d++){
					if(_listaFinalOrigenMultiple[d].idIncidente == event.currentTarget.selectedItem.idIncidente || _listaFinalOrigenMultiple[d].valor  == event.currentTarget.selectedItem.valor){//_listaFinalOrigenMultiple[d].idEmpleado  == event.currentTarget.selectedItem.llave || _listaFinalOrigenMultiple[d].valor  == event.currentTarget.selectedItem.valor || 
						this.situacioninspector.text = "";
						this.queinspector.text = "";
						this.dondeinspector.text = "";
						this.cuandoinspector.text = "";
						this.comentariosinspector.text = "";
						this.areasOrigenIncidente.selectedIndex = -1;
						
						this.nombreGerenteIncidente.text = "";
						this.usuarioGerente = "";
						this._subproceso = "";
						this._idEmpleadoMultiple = 0;
						this._listaReferenciasMultiple = new ArrayCollection();
						
						this.queinspector.text = _listaFinalOrigenMultiple[d].descripcion ;
						this.dondeinspector.text = _listaFinalOrigenMultiple[d].lugar ;
						this.cuandoinspector.text = _listaFinalOrigenMultiple[d].cuando ;
						this.comentariosinspector.text = _listaFinalOrigenMultiple[d].comentarios ;
						this.situacioninspector.text = _listaFinalOrigenMultiple[d].situacionIdentificada ;
						this.areasOrigenIncidente.selectedItem = event.currentTarget.selectedItem.subproceso
						this._listaReferenciasMultiple = _listaFinalOrigenMultiple[d].referencias ;
						for( var a:int = 0 ; a<_universoAreaOrigen.length ; a++){
							if(_universoAreaOrigen[a].subproceso == this.areasOrigenIncidente.selectedItem){
								this.nombreGerenteIncidente.text = _universoAreaOrigen[a].nombre;
							}
						}
						registrado = true ;
						this._numIncidenteMultiple = _listaFinalOrigenMultiple[d].idIncidente;
						//this.idViejoMultiple = event.currentTarget.selectedItem.llave;
						this.idViejoMultiple = _listaFinalOrigenMultiple[d].idEmpleado;
						this.valorViejo2 = event.currentTarget.selectedItem.valor;
						this.valorViejo = listaincidente.selectedItem.idIncidente
						
						cuantasPalabrasInspec(event);
					}
				}					
				
				//////////////////////////////////////// CLimpiaformulario QDC y situaciÃ³n ///////////////////////////////////////////
				if(event.currentTarget.selectedItem.subproceso == "Origen Pendiente"){
					this.situacioninspector.text = "";
					this.queinspector.text = "";
					this.dondeinspector.text = "";
					this.cuandoinspector.text = "";
					this.comentariosinspector.text = "";
					this.areasOrigenIncidente.selectedIndex = -1;
					this.nombreGerenteIncidente.text = "";
					this.usuarioGerente = "";
					this._subproceso = "";
					this._idEmpleadoMultiple = 0;
					this.registrado = false;
					this._listaReferenciasMultiple = new ArrayCollection();
				}
				
				if(event.currentTarget.selectedIndex > 0 && event.currentTarget.selectedItem.ultimo != 1 ){
					this.incidentemultiple.selectedIndex = 1;	
					this.viewsReferencias.selectedIndex = 1;
					this._selectItemValor = event.currentTarget.selectedItem.valor;
					this._selectItemSubProceso = event.currentTarget.selectedItem.subproceso;
					/////////
					this.qdcResize.percentWidth = 0;
					this.impactoResize.percentWidth = 0;
					this.qdcResize.visible = false;
					this.impactoResize.visible = false;
					this.botonQDCResize.visible = false;
					this.botonImpactoResize.visible = false;
					this.botonOrigenMultipleResize.visible = false;
					//////////////
				}else{
					this.incidentemultiple.selectedIndex = 0;
					this.viewsReferencias.selectedIndex = 0;
					this.listaincidente.selectedIndex = 0;
					//////////////////
					//this.qdcResize.percentWidth = 90;
					//this.impactoResize.percentWidth = 90;
					this.muestraImpacto.play();
					this.muestraQdc.play();
					this.qdcResize.visible = true;
					this.impactoResize.visible = true;
					this.botonQDCResize.visible = true;
					this.botonImpactoResize.visible = true;
					this.botonOrigenMultipleResize.visible = true;
					this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisDer;
					this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisDer;
					/////////////////////
				}
				
			}
			
			public var tiempo:Timer = new Timer(200);
			
			
			public function paraReloj(event:TimerEvent):void{
				tiempo.stop();
				//Alert.show("djfaldjf");
				alertaSingleton.show("",catalogoAlertas.TIT_ADV_atencion,"","","","","",mensajerror); 
			}
			
			public function cambioComboTipo():void{
				this.cambioTipo = true;
			}
			
			private function borrarReferencia():void{
				for(var d:int = 0; d<_listaOrigenMultiple.length; d++){
					if(_listaOrigenMultiple[d].ultimo != ""){
						this._listaOrigenMultiple.removeItemAt(d);
						d = d - 1; 
					}
				}
				
				if(eliminar == "borrar"){
					
					for(var m:int = 0; m<_listaFinalOrigenMultiple.length ; m++){
						if(_listaFinalOrigenMultiple[m].idIncidente == this.listaincidente.selectedItem.idIncidente){
							_listaFinalOrigenMultiple[m].eliminado = this.listaincidente.selectedItem.eliminado;							
						} 
					}
					this._listaOrigenMultiple.removeItemAt(this.listaincidente.selectedIndex);	
					eliminar = new String();
					
					this.registrado = false;
					this.situacioninspector.text = "";
					this.queinspector.text = "";
					this.dondeinspector.text = "";
					this.cuandoinspector.text = "";
					this.comentariosinspector.text = "";
					this.areasOrigenIncidente.selectedIndex = -1;
					this.nombreGerenteIncidente.text = "";
					this._listaReferenciasMultiple = new ArrayCollection();
				}	
				
				
				var objeto:CatalogoItem = new CatalogoItem();
				objeto.ultimo = (_listaOrigenMultiple.length - 1).toString();
				if(objeto.ultimo == "0"){
					this.incidentemultiple.selectedIndex = 0;
					this.viewsReferencias.selectedIndex = 0;
					for(var a:int = 0 ; a<=3 ; a++){
						this.validarArr.pop();	
					}
				}//else{
				//this.listaincidente.selectedIndex = 1;
				/* var event:IndexChangeEvent = this.listaincidente.selectedIndex = 1; 
				cambiaQDC( event as IndexChangeEvent ); */
				//}
				this._listaOrigenMultiple.addItem(objeto);
				
				for(var h:int = 1 ; h<_listaOrigenMultiple.length ; h++){
					_listaOrigenMultiple[h].valor = "INC-" + h;
				}
				
			}
			
			private function validarTapNavigator(evt:MouseEvent):void{
				validarTextArea = []; 
				validarTextArea =  Validator.validateAll(validarArr) ;
				var textAreaCompleto:Boolean = validarTextArea.length == 0;
				if(this.validaQDC == true ){
					validarTapQDC();
				}
				if(textAreaCompleto){
					if(this.validaQDC == false){
						var events:Event;
						guardaAnalisis();	
					}else{
						if(this.qdcCorrecto == true){
							events:Event;
							guardaAnalisis();
							this.qdcCorrecto = false;
							this.validaQDC = false;
						}
					}
				}else{
					var error:ValidationResultEvent;
					var mensajerror:ArrayCollection = new ArrayCollection();
					
					for(var n:int = 0 ; n<validarTextArea.length ; n++){
						mensajerror.addItem(validarTextArea[n].message);	
					}
					alertaSingleton.show("",catalogoAlertas.TIT_ADV_atencion,"","","","","",mensajerror);
				}
			}
			
			private function validarTapQDC():void{
				validarTextArea = []; 
				validarTextArea =  Validator.validateAll(validarArrMultiple) ;
				var textAreaCompleto:Boolean = validarTextArea.length == 0;
				if(textAreaCompleto){
					var events:Event;
					this.qdcCorrecto = true;
					//guardaAnalisis();
				}else{
					var error:ValidationResultEvent;
					var mensajerror:ArrayCollection = new ArrayCollection();
					
					for(var n:int = 0 ; n<validarTextArea.length ; n++){
						mensajerror.addItem(validarTextArea[n].message);	
					}
					alertaSingleton.show("",catalogoAlertas.TIT_ADV_atencion,"","","","","",mensajerror);
				}
			}
			
			private function validarFinalizar(evt:MouseEvent):void{
				validarTextArea = []; 
				validarTextArea =  Validator.validateAll(validarArr) ;
				var textAreaCompleto:Boolean = validarTextArea.length == 0;
				if(textAreaCompleto){
					var events:Event;
					alertaFinalizar();
					//finalizarAnalisis();
				}else{
					var error:ValidationResultEvent;
					var mensajerror:ArrayCollection = new ArrayCollection();
					
					for(var n:int = 0 ; n<validarTextArea.length ; n++){
						mensajerror.addItem(validarTextArea[n].message);	
					}
					alertaSingleton.show("",catalogoAlertas.TIT_ADV_atencion,"","","","","",mensajerror);
				}
			}
			
			//efecto para grafica Pie , cuando se selecciona algun sector del pie
			/* private function pieChart_itemClick(evt:ChartItemEvent):void {
			var item:PieSeriesItem = evt.hitData.chartItem as PieSeriesItem;
			var degrees:Number = radiansToDegrees(item.startAngle);
			var arr:Array = [];
			
			pieVsCMvsSM.perWedgeExplodeRadius = arr;
			pieTiempoCM.perWedgeExplodeRadius = arr;
			pieTiempoSM.perWedgeExplodeRadius = arr;
			
			arr[item.index] = 0.1;
			
			if( evt.currentTarget.id == "graficoPieCMvsSM"){
			pieVsCMvsSM.perWedgeExplodeRadius = arr;
			pieVsCMvsSM.startAngle -= degrees;
			}else if( evt.currentTarget.id == "graficoPieTiempoCM"){
			pieTiempoCM.perWedgeExplodeRadius = arr;
			pieTiempoCM.startAngle -= degrees;
			}else if( evt.currentTarget.id == "graficoPieTiempoSM"){
			pieTiempoSM.perWedgeExplodeRadius = arr;
			pieTiempoSM.startAngle -= degrees;
			}
			datosGraficaETvsFT.refresh();
			datosGraficaUbicacion.refresh();
			datosGraficaRedacto.refresh();
			datosGraficaMarcador.refresh();
			datosGraficaRedactoAnalisis.refresh();
			datosGraficaUbicacionAnalisis.refresh();
			datosGraficaSMvsCM.refresh();
			datosGraficaTiempoCM.refresh();
			datosGraficaTiempoSM.refresh();
			} */
			
			private function radiansToDegrees(radians:Number):Number {
				return radians * (180 / Math.PI);
			}
			
			public static function cuentaPalabras(txt:String):uint {
				var cuenta:uint = 0;
				if (txt != null) {
					//txt = StringUtil.trim(txt);
					if (txt.length > 0 ) {
						cuenta = txt.split(/\s+/g).length;
					}	
				}
				return cuenta;
			}
			
			private function cambiaView(stack:String,guardar:String):void{
				
				if(stack == "gestion" && guardar == "guarda"){
					alertaSingleton.show(catalogoAlertas.GESTION_ADV_guardarCambio,catalogoAlertas.TIT_ADV_atencion,"salInspector","","","SI","NO");	
				}
				
				if(stack == "gestion" && guardar == ""){
					
					this.viewS.selectedChild = this.incidenteGestion;
					_listaIncidenteAnalisis = new ArrayCollection();
					_totalAnalisisET = 0;
					_totalAnalisisFT = 0;
					var et:int= new int();
					var ft:int= new int();
					
					for(var d:int = 0; d<_listaIncidente.length ; ++d ){
						if(_listaIncidente[d].ubicacion == "AnÃ¡lisis" && _listaIncidente[d].marcador == "ANÃLISIS"){
							_listaIncidenteAnalisis.addItem(_listaIncidente.getItemAt(d));
							
							if(_listaIncidente[d].enTiempo == "ET"){
								et = et + 1;
							}
							if(_listaIncidente[d].enTiempo == "FT"){
								ft = ft + 1;
							}
						}
					}
					_totalAnalisisET = et;
					_totalAnalisisFT = ft;
					//this.totalIncidente.text = this._listaIncidenteAnalisis.length.toString();
					for(var i:int = 0 ; i<_listaIncidenteAnalisis.length ; i++){
						_listaIncidenteAnalisis[i].numFila = i + 1 ;
					}
					
					this.grdIncidentesGestion.dataProvider = _listaIncidenteAnalisis;
					
					_botoneraGestionIncidente[0].bandera = UtilsGrid.conteoCampoX(this._listaIncidenteAnalisis, "marcador", "ANÃLISIS") > 0 ? true:false;
					_botoneraGestionIncidente[1].bandera = this._listaIncidenteMarcadores.length > 0 ? true:false;
					
					if(this.buttonBarIncidente.selectedIndex == 0){
						this._botoneraGestionIncidente.refresh();	
						this.buttonBarIncidente.selectedIndex = 0;
					}else if (this.buttonBarIncidente.selectedIndex == 1){
						this._botoneraGestionIncidente.refresh();	
						this.buttonBarIncidente.selectedIndex = 1;
					}else{
						this._botoneraGestionIncidente.refresh();	
						this.buttonBarIncidente.selectedIndex = 2;
					}
					/* var evto:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_CONTACTOS_GESTION_INCIDENTE);
					evto.nivel = "Gerente";
					evto.valorAdicional = "";
					dispatchEvent(evto); */
				}
				
				if(stack == "incidenteGestion"){
					this.viewS.selectedChild = this.gestion;
					
					var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
					evt.usuario = DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
					dispatchEvent(evt);
				}
			}
			
			private function verListaIncidenteXMarcador(event:IndexChangeEvent):void{
				if(event.currentTarget.selectedIndex == this._listaMarcadores.length - 1 ){
					return;
				}
				
				if(event.currentTarget.selectedItem.folio == null){
					this.nombreMarcador = this.listaMarcadores.selectedItem.marcador;
					this.numeroDIncidentes = 0;
					this.marcadorET = 0;
					this.marcadorFT = 0;
					this._listaIncidenteXMarcador =  new ArrayCollection();
					this._listaIncidenteXMarcador.refresh();
					
					this.cambiodeorigen.visible = true;
					this.reformulacion.visible = true;
					this.checkbox.visible = true;
					this.verColumna = true; //antes false
					
					if(event.currentTarget.selectedItem.marcador == "PROGRAMACIÃN" || event.currentTarget.selectedItem.marcador == "CAMBIO DE ORIGEN" || event.currentTarget.selectedItem.marcador == "REFORMULACIÃN"){
						if(this._botonesActivos == true){  
							this.ocultaBotones.play();
							this.botonesTodoDesmarcar.visible = false;
							this._botonesActivos = false;	
						}
					}else{
						if(this._botonesActivos == false){  
							this.muestraBotones.play();
							this.botonesTodoDesmarcar.visible = true;
							this._botonesActivos = true;
						}
					}
					
					this.grdIncidentesMarcador.porcentajesColumnasPq = [1,3,4,12,10,13,12,12,5,5,5,5,5,5];
					/* tablaGrid_resizeHandler_Marcador();
					(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);
					(this.grdIncidentesMarcador.columns[2] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10); */
					
					if((event.currentTarget.selectedItem as Incidente).marcador == "REFORMULACIÃN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_reformulacion; // agrega imagen reformulacion
					else if((event.currentTarget.selectedItem).marcador == "PROGRAMACIÃN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_programaciondecision; // agrega imagen programacion
					else if((event.currentTarget.selectedItem).marcador == "CAMBIO DE ORIGEN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_cambioorigen	;	// agrega imagen  cambio de origen	
					else if((event.currentTarget.selectedItem).marcador == "CORTO PLAZO" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorverde;
					else if((event.currentTarget.selectedItem).marcador == "MEDIANO PLAZO" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorverde;
					else if((event.currentTarget.selectedItem).marcador == "LARGO PLAZO" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorverde	;
					else  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorazul;
					return;
				}
				
				this.nombreMarcador = this.listaMarcadores.selectedItem.marcador;
				this.numeroDIncidentes = this.listaMarcadores.selectedItem.numIncidentes;
				this.marcadorET = this.listaMarcadores.selectedItem.numMarcadoresET;
				this.marcadorFT = this.listaMarcadores.selectedItem.numMarcadoresFT;
				
				if((event.currentTarget.selectedItem as Incidente).marcador == "PROGRAMACIÃN"){
					this.cambiodeorigen.visible = false;
					this.reformulacion.visible = false;
					this.checkbox.visible = false;
					if(this.verColumna == true){
						this.grdIncidentesMarcador.porcentajesColumnasPq = [1,0,4,15,15,18,10,10,9,5,5,0,0,5];
					}else{
						(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.01);
						(this.grdIncidentesMarcador.columns[1] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);
						(this.grdIncidentesMarcador.columns[2] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);
						(this.grdIncidentesMarcador.columns[3] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.15);
						(this.grdIncidentesMarcador.columns[4] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.15);
						(this.grdIncidentesMarcador.columns[5] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.18);
						(this.grdIncidentesMarcador.columns[6] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);
						(this.grdIncidentesMarcador.columns[7] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);
						(this.grdIncidentesMarcador.columns[8] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.09);
						(this.grdIncidentesMarcador.columns[9] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[10] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[11] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);
						(this.grdIncidentesMarcador.columns[12] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);
						(this.grdIncidentesMarcador.columns[13] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
					}
					this.verColumna = false;//antes true
					//tablaGrid_resizeHandler_Marcador();
					if(this._botonesActivos != false){
						this.ocultaBotones.play();	
						this.botonesTodoDesmarcar.visible = false;
						this._botonesActivos = false;
					}
				}else if((event.currentTarget.selectedItem as Incidente).marcador == "CAMBIO DE ORIGEN"){
					this.cambiodeorigen.visible = true;
					this.reformulacion.visible = true;
					this.checkbox.visible = false;
					//tablaGrid_resizeHandler_Marcador();
					if(this.verColumna == true){
						this.grdIncidentesMarcador.porcentajesColumnasPq = [1,0,4,13,13,13,13,10,5,5,5,5,5,5];	
					}else{
						(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.01);
						(this.grdIncidentesMarcador.columns[1] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);
						(this.grdIncidentesMarcador.columns[2] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);
						(this.grdIncidentesMarcador.columns[3] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[4] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[5] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[6] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[7] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);
						(this.grdIncidentesMarcador.columns[8] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[9] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[10] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[11] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[12] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[13] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);	
					}
					this.verColumna = false;
					if(this._botonesActivos != false){
						this.ocultaBotones.play();	
						this.botonesTodoDesmarcar.visible = false;
						this._botonesActivos = false;
					}
				}else if((event.currentTarget.selectedItem as Incidente).marcador == "REFORMULACIÃN"){
					this.cambiodeorigen.visible = true;
					this.reformulacion.visible = true;
					this.checkbox.visible = false; 
					//tablaGrid_resizeHandler_Marcador();
					if(this.verColumna == true){
						this.grdIncidentesMarcador.porcentajesColumnasPq = [1,0,4,13,13,13,13,10,5,5,5,5,5,5];	
					}else{
						(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.01);
						(this.grdIncidentesMarcador.columns[1] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);
						(this.grdIncidentesMarcador.columns[2] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);
						(this.grdIncidentesMarcador.columns[3] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[4] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[5] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[6] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.13);
						(this.grdIncidentesMarcador.columns[7] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);
						(this.grdIncidentesMarcador.columns[8] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[9] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[10] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[11] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[12] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);
						(this.grdIncidentesMarcador.columns[13] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);	
					}
					this.verColumna = false;
					if(this._botonesActivos !=  false){
						this.ocultaBotones.play();
						this.botonesTodoDesmarcar.visible = false;
						this._botonesActivos = false;
					}
				}else{
					this.cambiodeorigen.visible = true;
					this.reformulacion.visible = true;
					this.checkbox.visible = true;
					this.verColumna = true; //antes false
					//tablaGrid_resizeHandler();
					//tablaGrid_resizeHandler_Marcador();
					this.grdIncidentesMarcador.porcentajesColumnasPq = [1,3,4,12,10,13,12,12,5,5,5,5,5,5];
					if(this._botonesActivos != true){
						this.muestraBotones.play();
						this.botonesTodoDesmarcar.visible = true;
						this._botonesActivos = true;
					}
				}
				
				this._listaIncidenteXMarcador = UtilsGrid.queryCampoX(this._listaIncidenteMarcadores, "marcador", (event.currentTarget.selectedItem as Incidente).marcador); // carga lista del marcador seleccionado  
				
				if((event.currentTarget.selectedItem as Incidente).marcador == "REFORMULACIÃN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_reformulacion; // agrega imagen reformulacion
				else if((event.currentTarget.selectedItem).marcador == "PROGRAMACIÃN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_programaciondecision; // agrega imagen programacion					
				else if((event.currentTarget.selectedItem).marcador == "CAMBIO DE ORIGEN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_cambioorigen	;	// agrega imagen  cambio de origen
				else if((event.currentTarget.selectedItem).marcador == "CORTO PLAZO" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorverde;
				else if((event.currentTarget.selectedItem).marcador == "MEDIANO PLAZO" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorverde;
				else if((event.currentTarget.selectedItem).marcador == "LARGO PLAZO" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorverde	;
					
				else  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorazul;
			}
			
			private function funcionCargaMarcadores():void{
				this.marcadorNumeroIncidente = new int();
				this.marcadorPrincipalET = new int();
				this.marcadorPrincipalFT = new int();
				this._listaMarcadores = new ArrayCollection();
				this._listaMarcadores = UtilsGrid.queryQuitarRepetidos(_listaIncidenteMarcadores, "marcador");
				for(var d:int = 0; d<_listaMarcadores.length ; d++){
					if(_listaMarcadores[d].marcador == "ANÃLISIS"){
						this._listaMarcadores.removeItemAt(d);
						d = d - 1;
					} else{						
						var arrMarcadorTemp:ArrayCollection = UtilsGrid.queryCampoX(_listaIncidenteMarcadores,"marcador",(this._listaMarcadores[d] as Incidente).marcador);
						if(arrMarcadorTemp[0].folio == null){
							(this._listaMarcadores[d] as Incidente).numIncidentes = 0;//UtilsGrid.conteoCampoX(arrMarcadorTemp, "marcador",(this._listaMarcadores[d] as Incidente).marcador);
							(this._listaMarcadores[d] as Incidente).numMarcadoresET = 0; //UtilsGrid.conteoCampoX(arrMarcadorTemp, "enTiempo","ET");
							(this._listaMarcadores[d] as Incidente).numMarcadoresFT = 0; //UtilsGrid.conteoCampoX(arrMarcadorTemp, "enTiempo","FT");
						}else{
							(this._listaMarcadores[d] as Incidente).numIncidentes = arrMarcadorTemp.length;//UtilsGrid.conteoCampoX(arrMarcadorTemp, "marcador",(this._listaMarcadores[d] as Incidente).marcador);
							(this._listaMarcadores[d] as Incidente).numMarcadoresET = UtilsGrid.conteoCampoX(arrMarcadorTemp, "enTiempo","ET");
							(this._listaMarcadores[d] as Incidente).numMarcadoresFT = UtilsGrid.conteoCampoX(arrMarcadorTemp, "enTiempo","FT");
							
							this.marcadorNumeroIncidente = this.marcadorNumeroIncidente + arrMarcadorTemp.length;
						}
						
						this.marcadorPrincipalET = this.marcadorPrincipalET + (this._listaMarcadores[d] as Incidente).numMarcadoresET;
						this.marcadorPrincipalFT = this.marcadorPrincipalFT + (this._listaMarcadores[d] as Incidente).numMarcadoresFT;	
					}
				} 
				
				var finalLista:Incidente = new Incidente();
				this.totalmarcadores.text = this._listaMarcadores.length.toString();
				finalLista.ultimo = this._listaMarcadores.length.toString();
				this._listaMarcadores.addItem(finalLista);	
				
				this._listaIncidenteXMarcador = UtilsGrid.queryCampoX(this._listaIncidenteMarcadores, "marcador", (this._listaIncidenteMarcadores[0] as Incidente).marcador);
			}
			
			private function cambiaGraficas(event:IndexChangeEvent):void{
				//event.newIndex == 2
				if(buttonBarIncidente.selectedItem.icono == "registrarIncidente" ){ 
					this.viewStackincidente.selectedIndex = 0;
					tablaGrid_resizeHandler();
				}
				if(buttonBarIncidente.selectedItem.icono == "marcadores" ){ 
					this.actualizarMarcador = true;
					this._listaIncidenteXMarcador = new ArrayCollection();
					this.viewStackincidente.selectedIndex = 1;
					
					funcionCargaMarcadores();
					
					this.listaMarcadores.selectedIndex = 0;
					
					if((this._listaIncidenteMarcadores[0] as Incidente).marcador == "PROGRAMACIÃN"){
						this.cambiodeorigen.visible = false;
						this.reformulacion.visible = false;
						this.checkbox.visible = false;
						this.verColumna = false; //antes true
					}else{
						this.cambiodeorigen.visible = true;
						this.reformulacion.visible = true;
						this.checkbox.visible = true;
						this.verColumna = false;
					}
					
					//tablaGrid_resizeHandler_Marcador();
					this.grdIncidentesMarcador.porcentajesColumnasPq = [1,0,4,15,15,18,10,10,9,5,5,0,0,5];
					
					if((this._listaIncidenteMarcadores[0] as Incidente).marcador == "PROGRAMACIÃN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_programaciondecision; 
					
					this.nombreMarcador = this.listaMarcadores.selectedItem.marcador;
					this.numeroDIncidentes = this.listaMarcadores.selectedItem.numIncidentes;
					this.marcadorET = this.listaMarcadores.selectedItem.numMarcadoresET;
					this.marcadorFT = this.listaMarcadores.selectedItem.numMarcadoresFT;
					if(this._botonesActivos != false){
						this.ocultaBotones.play();
						this.botonesTodoDesmarcar.visible = false;
						this._botonesActivos = false;
					}
				}
				if(buttonBarIncidente.selectedItem.icono == "graficaPie" ){ 
					this.viewStackincidente.selectedIndex = 2;
					datosGraficaMarcador = new ArrayCollection();
					datosGraficaUbicacionAnalisis = new ArrayCollection();
					datosGraficaRedactoAnalisis = new ArrayCollection();
					//totalIncidente = new Label();
					var _etSM:int = 0;
					var _ftSM:int = 0;
					var _etCM:int = 0;
					var _ftCM:int = 0;
					var _SM:int = 0; 
					var _CM:int = 0; 
					/* var temp1Marcador:ArrayCollection = ObjectUtil.copy(_listaIncidente) as ArrayCollection;
					var temp2Ubica:ArrayCollection = ObjectUtil.copy(_listaIncidente) as ArrayCollection;
					var temp3Redac:ArrayCollection = ObjectUtil.copy(_listaIncidente) as ArrayCollection; */
					
					var objeto:Object = new Object();
					// para el tipo
					var m:int = 0;
					for(m = 0; m<_listaIncidente.length ; m++){
						if(_listaIncidente[m].marcador == "AnÃ¡lisis" || _listaIncidente[m].marcador == "DECISÃN" || _listaIncidente[m].marcador == "PROGRAMACIÃN" || _listaIncidente[m].marcador == "ANÃLISIS" ){
							_SM = _SM + 1;
							_listaIncidente[m].enTiempo == "ET" ? _etSM = _etSM + 1 : _ftSM = _ftSM + 1 ;
							
						}else{
							if(_listaIncidente[m].folio != null){
								_CM = _CM + 1;
								_listaIncidente[m].enTiempo == "ET" ? _etCM = _etCM + 1 : _ftCM = _ftCM + 1 ;	
							}
						}
					}
					datosGraficaSMvsCM = new ArrayCollection([{tipo:"CM",total:_CM},
						{tipo:"SM",total:_SM}]);
					
					datosGraficaTiempoCM = new ArrayCollection([{tipo:"ET",total:_etCM},
						{tipo:"FT",total:_ftCM}]);
					
					datosGraficaTiempoSM = new ArrayCollection([{tipo:"ET",total:_etSM},
						{tipo:"FT",total:_ftSM}]);
					
					var _listaGraficas:ArrayCollection = new ArrayCollection();
					
					//var arrCMvsSM:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo($lista, "tipoFlete");
					_listaGraficas.addItem( setearGraficaTablero("CMvsSM", datosGraficaSMvsCM,1,0, "horizontal", 0, 0, "right", "top"));
					
					//var arrCM:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo($lista, "tipoFlete");
					_listaGraficas.addItem( setearGraficaTablero("Tiempos CM", datosGraficaTiempoCM,1,0, "horizontal", 0, 0, "right", "top"));
					
					//var arrSM:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo($lista, "tipoFlete");
					_listaGraficas.addItem( setearGraficaTablero("Tiempos SM", datosGraficaTiempoSM,1,0, "horizontal", 0, 150, "right", "top"));
					
					var arrMarcador:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo(_listaIncidente,"marcador");
					_listaGraficas.addItem( setearGraficaTablero("Marcadores", arrMarcador,0,1, "horizontal", 0, 0, "right", "bottom"));
					
					var arrRedacto:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo(_listaIncidente,"redacto");
					_listaGraficas.addItem( setearGraficaTablero("RedactÃ³", arrRedacto,0,1, "horizontal", 0, 0, "right", "bottom"));
					
					var arrUbicacion:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo(_listaIncidente,"ubicacion");
					_listaGraficas.addItem( setearGraficaTablero("UbicaciÃ³n", arrUbicacion,0,1, "horizontal", 150, 0, "right", "bottom"));
					
					/* var graficaCMvsSM:PieDinamico = new PieDinamico();
					graficaCMvsSM.lblTitulo = "CMvsSM ";
					graficaCMvsSM.tipoPie = 1;
					graficaCMvsSM.verticalAlign = "top";
					graficaCMvsSM.horizontalAlign = "right";
					graficaCMvsSM.orientacion = "horizontal";
					graficaCMvsSM.filaMargenDerecho = 200;
					graficaCMvsSM.arregloAlimentador = datosGraficaSMvsCM;
					
					_listaGraficas.addItem(graficaCMvsSM);
					
					var graficaTiempoCM:PieDinamico = new PieDinamico();
					graficaTiempoCM.lblTitulo = "Tiempos CM ";
					graficaTiempoCM.tipoPie = 1;
					graficaTiempoCM.verticalAlign = "top";
					graficaTiempoCM.horizontalAlign = "right";
					graficaTiempoCM.orientacion = "horizontal";
					graficaTiempoCM.arregloAlimentador = datosGraficaTiempoCM;
					
					_listaGraficas.addItem(graficaTiempoCM);
					
					var graficaTiempoSM:PieDinamico = new PieDinamico();
					graficaTiempoSM.lblTitulo = "Tiempos SM ";
					graficaTiempoSM.tipoPie = 1;
					graficaTiempoSM.verticalAlign = "top";
					graficaTiempoSM.horizontalAlign = "right";
					graficaTiempoSM.orientacion = "horizontal";
					graficaTiempoSM.arregloAlimentador = datosGraficaTiempoSM;
					
					_listaGraficas.addItem(graficaTiempoSM);
					
					var graficaMarcadores:PieDinamico = new PieDinamico();
					graficaMarcadores.lblTitulo = "Marcadores";
					graficaMarcadores.verticalAlign = "bottom";
					graficaMarcadores.horizontalAlign = "right";
					graficaMarcadores.fila = 1;
					graficaMarcadores.filaMargenIzquierdo = 200;
					graficaMarcadores.orientacion = "horizontal";
					//graficaMarcadores.tipoPie = 1;
					graficaMarcadores.arregloAlimentador = Util.getInstance().consultaPieChartConteoXCampo(_listaIncidente,"marcador");
					
					_listaGraficas.addItem(graficaMarcadores);
					
					var graficaRedacto:PieDinamico = new PieDinamico();
					graficaRedacto.lblTitulo = "RedactÃ³";
					graficaRedacto.verticalAlign = "bottom";
					graficaRedacto.horizontalAlign = "right";
					graficaRedacto.fila = 1;
					graficaRedacto.orientacion = "horizontal";
					//graficaMarcadores.tipoPie = 1;
					graficaRedacto.arregloAlimentador = Util.getInstance().consultaPieChartConteoXCampo(_listaIncidente,"redacto");
					
					_listaGraficas.addItem(graficaRedacto);
					
					var graficaUbicacion:PieDinamico = new PieDinamico();
					graficaUbicacion.lblTitulo = "UbicaciÃ³n";
					graficaUbicacion.verticalAlign = "bottom";
					graficaUbicacion.horizontalAlign = "right";
					graficaUbicacion.fila = 1;
					graficaUbicacion.orientacion = "horizontal";
					//graficaMarcadores.tipoPie = 1;
					graficaUbicacion.arregloAlimentador = Util.getInstance().consultaPieChartConteoXCampo(_listaIncidente,"ubicacion"); */
					
					//_listaGraficas.addItem(graficaUbicacion);
					if(_componenteArregloPiesGestion == null){
						_componenteArregloPiesGestion = new pqNetPiesChartDinamico();
						this.grpGraficaGestion.addElement(_componenteArregloPiesGestion);	
					}
					
					_componenteArregloPiesGestion.iniciarGraficas( _listaGraficas );
					
					// while para grafica Marcador
					/* while(temp1Marcador.length > 0 ){
					objeto = new Object();
					objeto.marcador = temp1Marcador[0].marcador;
					objeto.total = 0;
					for( m = 0; m<temp1Marcador.length; m++){
					if( objeto.marcador == temp1Marcador[m].marcador){
					objeto.total = objeto.total + 1;
					temp1Marcador.removeItemAt(m);
					m = m-1;
					}
					}
					datosGraficaMarcador.addItem(objeto);
					} */
					
					// while para grafica ubicaciÃ³n 
					/* while(temp2Ubica.length > 0 ){
					objeto = new Object();
					objeto.ubicacion = temp2Ubica[0].ubicacion;
					objeto.total = 0;
					for( m = 0; m<temp2Ubica.length; m++){
					if( objeto.ubicacion == temp2Ubica[m].ubicacion){
					objeto.total = objeto.total + 1;
					temp2Ubica.removeItemAt(m);
					m = m-1;
					}
					}
					datosGraficaUbicacionAnalisis.addItem(objeto);
					} */
					
					// while para grafica Redacto 
					/* while(temp3Redac.length > 0 ){
					objeto = new Object();
					objeto.redacto = temp3Redac[0].redacto;
					objeto.total = 0;
					for( m = 0; m<temp3Redac.length; m++){
					if( objeto.redacto == temp3Redac[m].redacto){
					objeto.total = objeto.total + 1;
					temp3Redac.removeItemAt(m);
					m = m-1;
					}
					}
					datosGraficaRedactoAnalisis.addItem(objeto);
					} */
					
					/* _totalFT = UtilsGrid.conteoCampoX(_listaIncidente,"enTiempo","FT");
					_totalET = UtilsGrid.conteoCampoX(_listaIncidente,"enTiempo","ET");	 */
					//this.totalIncidente.text = this._listaIncidente.length.toString();
					//delayedAlert();
					
				}
			}
			
			/* private function delayedAlert():void {
			setTimeout(iniciaGraficas, 400);
			
			}
			private function iniciaGraficas():void { 
			this.graficoPieCMvsSM.dataProvider = this.datosGraficaSMvsCM;
			this.graficoPieTiempoCM.dataProvider = this.datosGraficaTiempoCM;
			this.graficoPieTiempoSM.dataProvider = this.datosGraficaTiempoSM;
			this.graficoPieMarcadorAnalisis.dataProvider = this.datosGraficaMarcador;
			this.graficoPieUbicacionAnalisis.dataProvider = this.datosGraficaUbicacionAnalisis;
			this.graficoPieRedactoAnalisis.dataProvider = this.datosGraficaRedactoAnalisis; 
			}  */
			
			//funcion para agregar lista cuando son de multiples origenes 
			private function itemClickEvent():void{
				//this.vistaModificaciones._DocumentoR = event.itemRenderer.data as DocumentoRecibido;
				if(checkOrigen.selected == true && isNaN(lista.percentWidth) || lista.percentWidth == 0){
					this.lista.percentWidth = 100; //460;
					this.lista.visible = true;
					
					if(this._boolPanelEdicionDesplegado == true){
						muestraResize.play();
						this._boolPanelEdicionDesplegado = false;
					}else{
						muestraResize.play();
					}	
					
					this._imagenTab = catalogoIconosBotones.getInstance().tabalreves;
					this.botonOrigenMultipleResize.visible = true;
					this.botonQDCResize.visible = true;
					this.botonImpactoResize.visible = true;
					
					this.servicio.text = "MÃLTIPLES";
					this.origen.text = "Origenes";
					this.nuevoincidente.visible = true;
					
					//this.incidentemultiple.selectedIndex = 1;
				}
				else if(checkOrigen.selected == false && lista.percentWidth == 100){
					if(lista.visible != false){
						this.lista.percentWidth = 0; //0
						this.lista.visible = false;
						
						if(this._boolPanelEdicionDesplegado == true){
							muestraResize.play();
							this._boolPanelEdicionDesplegado = false;
						}else{
							muestraResizeEnd.play();
							
							this.muestraImpacto.play();
							this.muestraQdc.play();
							this.qdcResize.visible = true;
							this.impactoResize.visible = true;
							this.botonQDCResize.visible = true;
							this.botonImpactoResize.visible = true;
							this.botonOrigenMultipleResize.visible = true;
							this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisDer;
							this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisDer;
						}	
						
						this._imagenTab = catalogoIconosBotones.getInstance().tab;
						
						this.servicio.text = "SERVICIO A CLIENTES";
						this.origen.text = "Origen";
						this.nuevoincidente.visible = false;
						
						this.incidentemultiple.selectedIndex = 0;
						this.viewsReferencias.selectedIndex = 0;
						this.listaincidente.selectedIndex = 0;
					}
					this.botonOrigenMultipleResize.visible = false;
					this.botonQDCResize.visible = false;
					this.botonImpactoResize.visible = false;
				}
				else if(lista.percentWidth == 100){
					this.lista.percentWidth = 10; //460;
					this.lista.visible = false;
					
					if(this._boolPanelEdicionDesplegado == true){
						muestraResize.play();
						this._boolPanelEdicionDesplegado = false;
					}else{
						muestraResizeEnd.play();
					}	
					
					this._imagenTab = catalogoIconosBotones.getInstance().tab;
					
					this.servicio.text = "SERVICIO A CLIENTES";
					this.origen.text = "Origen";
					this.nuevoincidente.visible = false;
					
					this.incidentemultiple.selectedIndex = 0;
					this.viewsReferencias.selectedIndex = 0;
					this.listaincidente.selectedIndex = 0;
				}else if(lista.percentWidth == 10){
					this.lista.percentWidth = 100; //460;
					this.lista.visible = true;
					
					if(this._boolPanelEdicionDesplegado == true){
						muestraResize.play();
						this._boolPanelEdicionDesplegado = false;
					}else{
						muestraResize.play();
					}	
					
					this._imagenTab = catalogoIconosBotones.getInstance().tabalreves;
					
					this.servicio.text = "MÃLTIPLES";
					this.origen.text = "Origenes";
					this.nuevoincidente.visible = true;
				}
				
			}
			
			private function resizeQDC():void{
				if(this.qdcResize.percentWidth == 75){
					//this.qdcResize.visible = false;
					
					if(this.impactoResize.percentWidth == 10){
						this.impactoResize.visible = true;
						this.impactoResize.percentWidth = 75;
						this.muestraImpacto.play();
						this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisDer;
						this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisDer;
						
					}else{
						this.impactoResize.visible = true;
						this.impactoResize.percentWidth = 10;
						this.muestraImpactoEnd.play();
						this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisDer;
						this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisIzq;
					}
				}else{
					this.qdcResize.visible = true;
					this.qdcResize.percentWidth = 75; 
					this.muestraQdc.play();
					this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisIzq;
					
					this.impactoResize.visible = true;
					this.impactoResize.percentWidth = 10;
					this.muestraImpactoEnd.play();
					this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisDer;
				}
			}
			
			private function resizeImpacto():void{
				if(this.impactoResize.percentWidth == 75){
					//this.impactoResize.visible = false;
					
					if(this.qdcResize.percentWidth == 10){
						this.qdcResize.percentWidth = 75; 
						this.muestraQdc.play();
						this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisDer;
						this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisDer;
						
					}else{
						this.qdcResize.percentWidth = 10; 
						this.muestraQdcEnd.play();
						this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisDer;
						this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisIzq;
					}
					
				}else{
					this.impactoResize.visible = true;
					this.impactoResize.percentWidth = 75;
					this.muestraImpacto.play();
					this._imagenTabImpacto = catalogoIconosBotones.getInstance().tabGrisIzq;
					
					this.qdcResize.percentWidth = 10; 
					this.muestraQdcEnd.play();
					this._imagenTabQDC = catalogoIconosBotones.getInstance().tabGrisDer;	
				}
			}
			
			private function verlineaDTiempo():void{
				this.espacioLineaDeTiempo.removeAllElements();
				if(this.lineaDTiempo == null){
					this.lineaDTiempo = new LineaDelTiempo();
				}
				this.espacioLineaDeTiempo.addChild(this.lineaDTiempo);
				
				var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.OBTENER_LINEA_DE_TIEMPO_X_INCIDENTE);
				evt.idIncidente = this._numIncidente;	
				dispatchEvent(evt);
				
				this.viewS.selectedIndex = 3;
			}
			
			/* protected function tablaGrid_itemClickHandler():void
			{
			if( (this._listaPartidaInspeccionTrabajo[this.tablaGrid.selectedIndex ] as PartidaInspeccion).numFila > 0){
			(this._listaPartidaInspeccionTrabajo[this.tablaGrid.selectedIndex ] as PartidaInspeccion).numFila = (this.tablaGrid.selectedIndex +1 )* -1;
			}
			if(_ultimoIndiceTablaGrid != this.tablaGrid.selectedIndex ){
			(this._listaPartidaInspeccionTrabajo[_ultimoIndiceTablaGrid] as PartidaInspeccion).numFila = (_ultimoIndiceTablaGrid +1 );
			_ultimoIndiceTablaGrid = this.tablaGrid.selectedIndex;
			}
			this._listaPartidaInspeccionTrabajo.refresh();
			} */
			
			private var _ultimoIndiceTablaGrid:int=0;
			public function itemSeleccionado(renglon:ListEvent):void{
				this._ultimoIndiceTablaGrid = new int();
				if(renglon.currentTarget.id == "grdIncidentesGestion" ){
					if( (this._listaIncidenteAnalisis[this.grdIncidentesGestion.selectedIndex ] as Incidente).numFila > 0){
						(this._listaIncidenteAnalisis[this.grdIncidentesGestion.selectedIndex ] as Incidente).numFila = (this.grdIncidentesGestion.selectedIndex +1 )* -1;
					}
					if(_ultimoIndiceTablaGrid != this.grdIncidentesGestion.selectedIndex ){
						(this._listaIncidenteAnalisis[_ultimoIndiceTablaGrid] as Incidente).numFila = (_ultimoIndiceTablaGrid +1 );
						_ultimoIndiceTablaGrid = this.grdIncidentesGestion.selectedIndex;
					}
					this._listaIncidenteAnalisis.refresh();	
				}
				if(renglon.currentTarget.id == "grdIncidentesMarcador" ){
					if( (this._listaIncidenteXMarcador[this.grdIncidentesMarcador.selectedIndex ] as Incidente).numFila > 0){
						(this._listaIncidenteXMarcador[this.grdIncidentesMarcador.selectedIndex ] as Incidente).numFila = (this.grdIncidentesMarcador.selectedIndex +1 )* -1;
					}
					if(_ultimoIndiceTablaGrid != this.grdIncidentesMarcador.selectedIndex ){
						(this._listaIncidenteXMarcador[_ultimoIndiceTablaGrid] as Incidente).numFila = (_ultimoIndiceTablaGrid +1 );
						_ultimoIndiceTablaGrid = this.grdIncidentesMarcador.selectedIndex;
					}
					this._listaIncidenteXMarcador.refresh();	
				}
				
				//////////////////////
				var d:int = 0;
				var m:int = 0;
				if(renglon.columnIndex == 1 ){
					if(renglon.currentTarget.id == "grdIncidentesGestion" ){
						if(renglon.currentTarget.selectedItem.checkBox == false){
							this._arrayMarcador = new Array();
							renglon.currentTarget.selectedItem.checkBox = true;
							this._listaMarcadoresAgrupados.addItem(renglon.currentTarget.selectedItem);	
							for(d = 0 ; d<_listaIncidenteAnalisis.length ; d++){
								if(_listaIncidenteAnalisis[d].checkBox == true){
									this._arrayMarcador.push(_listaIncidenteMarcadores[d].numFila - 1);
								}
							}
						}else{
							this._arrayMarcador = new Array();
							renglon.currentTarget.selectedItem.checkBox = false;
							for(d = 0 ; d<_listaIncidenteAnalisis.length ; d++){
								if(_listaIncidenteAnalisis[d].checkBox == true){
									this._arrayMarcador.push(_listaIncidenteMarcadores[d].numFila - 1);
								}
							}
							for(m = 0 ; m<_listaMarcadoresAgrupados.length ; m++){
								if(_listaMarcadoresAgrupados[m].folio == renglon.currentTarget.selectedItem.folio){
									this._listaMarcadoresAgrupados.removeItemAt(m);	
								}
							}
						}	
						this.grdIncidentesGestion.selectedIndices = this._arrayMarcador;
					}
					if(renglon.currentTarget.id == "grdIncidentesMarcador" ){
						if(renglon.currentTarget.selectedItem.checkBox == false){
							this._arrayMarcador = new Array();
							renglon.currentTarget.selectedItem.checkBox = true;
							this._listaMarcadoresDragDrop.addItem(renglon.currentTarget.selectedItem);
							for(d = 0 ; d<_listaIncidenteXMarcador.length ; d++){    //_listaIncidenteXMarcador
								if(_listaIncidenteXMarcador[d].checkBox == true){	
									//this._arrayMarcador.push(_listaIncidenteXMarcador[d].numFila - 1);
									this._arrayMarcador.push(d);
								}	
							}
						}else{
							this._arrayMarcador = new Array();
							renglon.currentTarget.selectedItem.checkBox = false;
							for(d = 0 ; d<_listaIncidenteXMarcador.length ; d++){
								if(_listaIncidenteXMarcador[d].checkBox == true){
									//this._arrayMarcador.push(_listaIncidenteXMarcador[d].numFila - 1);
									this._arrayMarcador.push(d);
								}
							}
							for(m = 0 ; m<_listaMarcadoresDragDrop.length ; m++){
								if(_listaMarcadoresDragDrop[m].folio == renglon.currentTarget.selectedItem.folio){
									this._listaMarcadoresDragDrop.removeItemAt(m);
								}
							}
						}
						this.grdIncidentesMarcador.selectedIndices = this._arrayMarcador;
					} 
				}
				
				if(renglon.columnIndex == 2){
					if(renglon.currentTarget.id == "grdIncidentesMarcador" && this.checkbox.visible == false){
						this.espacioLineaDeTiempo.removeAllElements();
						if(this.lineaDTiempo == null){
							this.lineaDTiempo = new LineaDelTiempo();
						}
						this.espacioLineaDeTiempo.addChild(this.lineaDTiempo);
						
						var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.OBTENER_LINEA_DE_TIEMPO_X_INCIDENTE);
						if(renglon.currentTarget.id == "grdIncidentesGestion" ){
							evt.idIncidente = grdIncidentesGestion.selectedItem.idIncidente;	
						}
						if(renglon.currentTarget.id == "grdIncidentesMarcador" ){
							evt.idIncidente = grdIncidentesMarcador.selectedItem.idIncidente;	
						} 
						dispatchEvent(evt);
						
						this.viewS.selectedIndex = 3;	
					}
				}
				
				if(renglon.columnIndex == 3){
					var evto:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.OBTENER_LINEA_DE_TIEMPO_X_INCIDENTE);
					if(renglon.currentTarget.id == "grdIncidentesMarcador" && this.checkbox.visible == true){
						this.espacioLineaDeTiempo.removeAllElements();
						if(this.lineaDTiempo == null){
							this.lineaDTiempo = new LineaDelTiempo();
						}
						this.espacioLineaDeTiempo.addChild(this.lineaDTiempo);
						
						evto.idIncidente = grdIncidentesMarcador.selectedItem.idIncidente;	 
						
						this.viewS.selectedIndex = 3;
					}else if(renglon.currentTarget.id == "grdIncidentesGestion"){
						this.espacioLineaDeTiempo.removeAllElements();
						if(this.lineaDTiempo == null){
							this.lineaDTiempo = new LineaDelTiempo();
						}
						this.espacioLineaDeTiempo.addChild(this.lineaDTiempo);
						
						evto.idIncidente = grdIncidentesGestion.selectedItem.idIncidente;	
						
						this.viewS.selectedIndex = 3;
					}
					dispatchEvent(evto);
				}
				
				if(renglon.columnIndex == 10 ){ //acciones
					if(renglon.currentTarget.id == "grdIncidentesMarcador" && renglon.currentTarget.selectedItem.marcador == "PROGRAMACIÃN" ){
						this.espacioLineaDeTiempo.removeAllElements();
						if(this.programaAccionIncidente == null){
							this.programaAccionIncidente = new ProgramacionAccionIncidente();
							//this.programaAccionIncidente.iniciaModoLectura(this);
						}
						this.espacioLineaDeTiempo.addChild(this.programaAccionIncidente);
						this.programaAccionIncidente._incidente = renglon.currentTarget.selectedItem;
						this.programaAccionIncidente._empleado = DatosGlobales.getInstance()._usuario;
						this.programaAccionIncidente.inicia();
						this.viewS.selectedIndex = 3;
					}else{
						if(renglon.currentTarget.id == "grdIncidentesMarcador" && this.checkbox.visible == false ){
							popReformulacion = PopUpManager.createPopUp(alertaSingleton.elDisplayObject, PopUpReformulacion,true) as PopUpReformulacion;
							/* PopUpManager.centerPopUp(popReformulacion); */
							popReformulacion._reformulacion = renglon.itemRenderer.data;
							popReformulacion._folioIncidente = renglon.itemRenderer.data.folio;	
						}	
					}
				}
				
				if(renglon.columnIndex == 11 ){
					if(renglon.currentTarget.id == "grdIncidentesMarcador" && (renglon.currentTarget.selectedItem.marcador == "REFORMULACIÃN" || renglon.currentTarget.selectedItem.marcador == "CAMBIO DE ORIGEN") ){
						popCambioOrigen = PopUpManager.createPopUp( alertaSingleton.elDisplayObject, PopUpCambioDOrigen,true) as PopUpCambioDOrigen;
						/* PopUpManager.centerPopUp(popCambioOrigen); */
						popCambioOrigen._reformulacion = renglon.itemRenderer.data;
						popCambioOrigen._folioIncidente = renglon.itemRenderer.data.folio;	
					}else{
						popReformulacion = PopUpManager.createPopUp(alertaSingleton.elDisplayObject, PopUpReformulacion,true) as PopUpReformulacion;
						/* PopUpManager.centerPopUp(popReformulacion); */
						popReformulacion._reformulacion = renglon.itemRenderer.data;
						popReformulacion._folioIncidente = renglon.itemRenderer.data.folio;	
					}
				}
				if(renglon.columnIndex == 12 ){
					if(renglon.currentTarget.id == "grdIncidentesMarcador" && (renglon.currentTarget.selectedItem.marcador == "REFORMULACIÃN" || renglon.currentTarget.selectedItem.marcador == "CAMBIO DE ORIGEN") ){
						this._listaReferencias = new ArrayCollection();
						this._listaOrigenMultiple = new ArrayCollection();
						this.analisisGestion = null;
						this.folioIncidente.label = renglon.itemRenderer.data.folio;
						this.folioIncidente2.label = renglon.itemRenderer.data.folio;
						this._folioIncidente = renglon.itemRenderer.data.folio;
						
						this.situacion.text = renglon.itemRenderer.data.situacionIdentificada;
						this.que.text = renglon.itemRenderer.data.descripcion;
						this.done.text = renglon.itemRenderer.data.lugar;
						this.cuando.text = renglon.itemRenderer.data.cuando;
						this.comentario.text = renglon.itemRenderer.data.comentarios;
						this._listaReferencias = renglon.itemRenderer.data.referencias;
						
						this._numIncidente = renglon.itemRenderer.data.idIncidente;
						this._idPendiente = renglon.itemRenderer.data.idPendiente;
						
						this.viewS.selectedChild = this.inspector; 
						this.comboxtipo.selectedIndex = 0 ;
						
						for(d = 0 ; d<_universoAreaOrigen.length ; d++){  
							if(_universoAreaOrigen[d].valor == DatosGlobales.getInstance()._usuario.usuario){
								var objeto:CatalogoItem  = new CatalogoItem();
								objeto.valor = renglon.itemRenderer.data.folio;
								objeto.subproceso = _universoAreaOrigen[d].subproceso;
								objeto.nombre = _universoAreaOrigen[d].nombre;
								objeto.primero = true;
								this._listaOrigenMultiple.addItem(objeto);
							}
						}
						
						objeto = new CatalogoItem();
						objeto.ultimo = (_listaOrigenMultiple.length - 1).toString();
						this._listaOrigenMultiple.addItem(objeto);
						
						var evento:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_GESTION);
						evento.idIncidente = renglon.itemRenderer.data.idIncidente;
						dispatchEvent(evento);	
					}else{
						popCambioOrigen = PopUpManager.createPopUp(alertaSingleton.elDisplayObject, PopUpCambioDOrigen,true) as PopUpCambioDOrigen;
						/* PopUpManager.centerPopUp(popCambioOrigen); */
						popCambioOrigen._reformulacion = renglon.itemRenderer.data;
						popCambioOrigen._folioIncidente = renglon.itemRenderer.data.folio;	
					}	
				}
				if( renglon.columnIndex == 13 ){
					this._listaReferencias = new ArrayCollection();
					this._listaOrigenMultiple = new ArrayCollection();
					this.analisisGestion = null;
					this.folioIncidente.label = renglon.itemRenderer.data.folio;
					this.folioIncidente2.label = renglon.itemRenderer.data.folio;
					this._folioIncidente = renglon.itemRenderer.data.folio;
					
					this.situacion.text = renglon.itemRenderer.data.situacionIdentificada;
					this.que.text = renglon.itemRenderer.data.descripcion;
					this.done.text = renglon.itemRenderer.data.lugar;
					this.cuando.text = renglon.itemRenderer.data.cuando;
					this.comentario.text = renglon.itemRenderer.data.comentarios;
					this._listaReferencias = renglon.itemRenderer.data.referencias;
					
					this._numIncidente = renglon.itemRenderer.data.idIncidente;
					this._idPendiente = renglon.itemRenderer.data.idPendiente;
					
					this.viewS.selectedChild = this.inspector; 
					this.comboxtipo.selectedIndex = 0 ;
					
					for(d = 0 ; d<_universoAreaOrigen.length ; d++){  
						if(_universoAreaOrigen[d].valor == DatosGlobales.getInstance()._usuario.usuario){
							var objetos:CatalogoItem  = new CatalogoItem();
							objetos.valor = renglon.itemRenderer.data.folio;
							objetos.subproceso = _universoAreaOrigen[d].subproceso;
							objetos.nombre = _universoAreaOrigen[d].nombre;
							objetos.primero = true;
							this._listaOrigenMultiple.addItem(objetos);
						}
					}
					
					objetos = new CatalogoItem();
					objetos.ultimo = (_listaOrigenMultiple.length - 1).toString();
					this._listaOrigenMultiple.addItem(objetos);
					
					var event:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_GESTION);
					event.idIncidente = renglon.itemRenderer.data.idIncidente;
					dispatchEvent(event);	
					
					this.muestraQdc.play();
					this.muestraImpacto.play();
					/* var componentes:ArrayCollection = new ArrayCollection();
					if(compresorActivo == false){
					componentes.addItem(qdcResize);
					componentes.addItem(impactoResize);
					compresorVentas.agregarComponentes(componentes);
					compresorActivo = true;
					} */
				}
			}
			
			
			private function origenMultimple():void{
				
				for(var d:int = 0; d<_listaOrigenMultiple.length; d++){
					if(_listaOrigenMultiple[d].ultimo != ""){
						this._listaOrigenMultiple.removeItemAt(d);
						d = d - 1; 
					}
				}
				this.contador = contador - 1;
				
				var objeto:CatalogoItem  = new CatalogoItem();
				objeto.primero = new Boolean();
				objeto.valor = "INC-" + _listaOrigenMultiple.length.toString() ;
				objeto.subproceso = "Origen Pendiente";
				objeto.nombre = "Pendiente";
				objeto.idIncidente = contador;
				objeto.primero = false;
				
				this._listaOrigenMultiple.addItem(objeto);
				
				objeto = new CatalogoItem();
				objeto.ultimo = (_listaOrigenMultiple.length - 1).toString();
				this._listaOrigenMultiple.addItem(objeto);
				
				this.vieneDNuevoOrigenMultiple = true;
				this.validaQDC = true;
				
				validarArr.push(validaquemultiple);
				validarArr.push(validadondemultiple);
				validarArr.push(validacuandomultiple);
				validarArr.push(validacheckorigen);
				
				/* this.situacioninspector.text = "";
				this.queinspector.text = "";
				this.dondeinspector.text = "";
				this.cuandoinspector.text = "";
				this.comentariosinspector.text = "";
				this.areasOrigenIncidente.selectedIndex = -1;
				this.nombreGerenteIncidente.text = "";  */
			}
			
			private function mostrarBoton():void{
				
				if(this.clienteasociado.selected == true){
					this.asociarcliente.visible = true;
					this.asociarcliente.percentWidth = 100;
				}else{
					this.asociarcliente.visible = false;
					this.asociarcliente.percentWidth = 0;
				}
				
				if(this.proveedorasociado.selected == true){
					this.asociarproveedor.visible = true;
					this.asociarproveedor.percentWidth = 100;
				}else{
					this.asociarproveedor.visible = false;
					this.asociarproveedor.percentWidth = 0;
				}	
				
				if(this.procedimientoasociado.selected == true){
					this.asociarprocedimiento.visible = true;
					this.asociarprocedimiento.percentWidth= 100;
				}else{
					this.asociarprocedimiento.visible = false;
					this.asociarprocedimiento.percentWidth= 0;
				}	
			}
			
			private function seleccionaTodoCheckBox(vieneD:String):void{
				var d:int = 0;
				var m:int = 0;
				this._arrayMarcador = new Array();
				if(vieneD == "incidente"){
					if(banderaCheckTodo == false ){
						for(d = 0; d<_listaIncidenteAnalisis.length ; d++){
							if(_listaIncidenteAnalisis[d].checkBox != true){
								this._listaIncidenteAnalisis[d].checkBox = true ;
								this._listaMarcadoresAgrupados.addItem(_listaIncidenteAnalisis[d]);	
							}
							this._arrayMarcador.push(d);	
						}
						
						this.grdIncidentesGestion.selectedIndices = this._arrayMarcador;
						banderaCheckTodo = true;
					}else{
						for(m = 0; m<_listaIncidenteAnalisis.length ; m++){
							if(_listaIncidenteAnalisis[m].checkBox == true){
								this._listaIncidenteAnalisis[m].checkBox = false ;
								this._listaMarcadoresAgrupados.removeItemAt(_listaIncidenteAnalisis[m]);	
							}	
						}
						banderaCheckTodo = false;
						this.grdIncidentesGestion.selectedIndex = -1;
					}	
				}
				
				if(vieneD == "marcador"){
					for(d = 0; d<_listaIncidenteXMarcador.length ; d++){
						if(_listaIncidenteXMarcador[d].checkBox != true){
							this._listaIncidenteXMarcador[d].checkBox = true ;
							this._listaMarcadoresDragDrop.addItem(_listaIncidenteXMarcador[d]);
						}
						this._arrayMarcador.push(d);
						//this._arrayMarcador.push(_listaIncidenteXMarcador[d].numFila - 1);
					}
					this.grdIncidentesMarcador.selectedIndices = ObjectUtil.copy(this._arrayMarcador) as Array;
				}
				if(vieneD == 'desmarcar'){
					for(m = 0; m<_listaIncidenteXMarcador.length ; m++){
						if(_listaIncidenteXMarcador[m].checkBox == true){
							this._listaIncidenteXMarcador[m].checkBox = false ;
							this._listaMarcadoresDragDrop.removeItemAt(_listaIncidenteXMarcador[m]);
						}	
					}
					this.grdIncidentesMarcador.selectedIndex = -1;
				}
			}
			
			private function mostrarPopUp(tipoPop:String):void{
				if(tipoPop == "cliente"){
					if(this.existeCliente == true){
						
						var trivent:EventoParaContactoService = new EventoParaContactoService(EventoParaContactoService.HAS_VISIBLE_POPUP_CONTACTOS);
						trivent.asociar = true;
						trivent.consulta = "cliente";
						trivent.vieneD = "AnalisisGestion";
						trivent.idContacto = this._idContacto;
						dispatchEvent(trivent);
						
					}else{						
						var evt:EventoParaContactoService = new EventoParaContactoService(EventoParaContactoService.HAS_VISIBLE_POPUP_CONTACTOS);
						evt.asociar = true;
						evt.consulta = "cliente";
						evt.vieneD = "AnalisisGestion";
						dispatchEvent(evt);
					} 
				}
				
				if(tipoPop == "asociacion"){
					_listaProcedimientosAsociados = new ArrayCollection();
					popUpAsociacion = PopUpVistaAsociacion(PopUpManager.createPopUp(alertaSingleton.elDisplayObject, PopUpVistaAsociacion,true));
					for(var d:int = 0 ; d<_listaProcedimientos.length ; d++){
						_listaProcedimientosAsociados.addItem(_listaProcedimientos[d].nombre);
					}
					popUpAsociacion._listaProcedimiento = this._listaProcedimientosAsociados;
					popUpAsociacion._cliente = _nombreCliente;
					popUpAsociacion._proveedor = this._nombreProveedor;
					popUpAsociacion._descripcion = this._descripcionProducto;
					/* PopUpManager.centerPopUp(popUpAsociacion); */
				}
				
				if(tipoPop == 'proveedor'){
					popProveedores = PopUpManager.createPopUp(alertaSingleton.elDisplayObject,PopUpProveedores,true) as PopUpProveedores;
					/* PopUpManager.centerPopUp(popProveedores); */
					popProveedores._pkProducto = this._idProducto;
					popProveedores.addEventListener(EventoAnalisisincidente.REGRESA_VALORES_POP_PROVEEDORES,obtenerValoresPopProveedores);
					/*popProveedores.addEventListener(EventoAnalisisincidente.REGRESA_ID_PRODUCTO.obtenerIdProducto); */
					
					if(this.existeProveedor == true){
						var evetto:EventoAnalisisincidente = new EventoAnalisisincidente( EventoAnalisisincidente.CARGA_PROVEEDORES_EN_ELCOMBO );
						evetto.patron = _nombreProveedor ;
						evetto.valorAdicional = "";
						dispatchEvent(evetto);
					}else{
						var eveto:EventoAnalisisincidente = new EventoAnalisisincidente( EventoAnalisisincidente.CARGA_PROVEEDORES_EN_ELCOMBO );
						eveto.patron = "";
						eveto.valorAdicional = "";
						dispatchEvent(eveto);	
					}
				}
				
				if(tipoPop == 'procedimiento'){
					this.agregarAcordeon();
					var evento:EventoAnalisisincidente = new EventoAnalisisincidente( EventoAnalisisincidente.CARGAR_PROCEMIENTOS_SGC );
					evento.listaProcedimientos = ObjectUtil.copy(this._listaProcedimientos) as ArrayCollection;
					dispatchEvent( evento );	
				}
				
				if(tipoPop ==  'marcadores'){
					popMarcadores = PopUpMarcadores(PopUpManager.createPopUp(alertaSingleton.elDisplayObject,PopUpMarcadores,true));
					PopUpManager.centerPopUp(popMarcadores);
					popMarcadores._listaDMarcadores = this._listaMarcadoresAgrupados;
					
					var event:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_MARCADORES_POR_ID_USUARIO);
					event.idUsuario = DatosGlobales.getInstance()._usuario.idEmpleado;
					dispatchEvent(event);
				}
			}
			
			private function obtenerValoresPopProveedores(event:EventoAnalisisincidente):void{
				this._idProveedor = event.idProveedor;
				this._idProducto = event.idProducto;
				this._descripcionProducto = event.valorAdicional;
				this._nombreProveedor = event.patron;
			}
			
			private function agregarAcordeon():void{
				var acordeon:PopUpProcedimientoAsociado = new PopUpProcedimientoAsociado();
				//acordeon.procedimientosSeleccionados = this._procedimientosAsociados;
				acordeon = PopUpManager.createPopUp(alertaSingleton.elDisplayObject,PopUpProcedimientoAsociado,true) as PopUpProcedimientoAsociado;
				acordeon.procedimientosSeleccionados = this._procedimientosAsociados;
				acordeon.addEventListener(EventoAnalisisincidente.REGRESA_LISTA_PROCEDIMIENTOS,recibeListaDeProcedimeintos);
			}
			
			/**
			 * Metodo que recibe la ListaCargada  de Procedimientos del PopUp 
			 */ 
			private function recibeListaDeProcedimeintos(evento:EventoAnalisisincidente):void{
				this._listaProcedimientos = ObjectUtil.copy(evento.listaProcedimientos) as ArrayCollection;
				this._procedimientosAsociados = evento.procesosAsociados;
				//designaProcedimientos();
			}
			/**
			 * Metodo para designar los procedimientos a el texto
			 */
			/*  private function designaProcedimientos():void{
			this.txtProcedimientos.text = "";
			for( var i:int = 0; i < this._listaProcedimientos.length; i++ ){
			if( this._listaProcedimientos[i].activaProcedimiento == true ){
			this.txtProcedimientos.text = this.txtProcedimientos.text + this._listaProcedimientos[i].nombre + "\n";
			}
			}
			} */
			
			//funciÃ³n para agregar datos a graficas
			private function alertaFinalizar():void{
				this.banderaAlert = true;
				alertaSingleton.show(catalogoAlertas.GESTION_ADV_finalizarAnalisis, catalogoAlertas.TIT_ADV_atencion,"finalizarGestion","","","SI","NO");
			}
			
			private function finalizarAnalisis(event:String):void{
				if(event == "SI"){
					var i:int = 0;
					var j:int = 0;
					var m:int = 0;
					var d:int = 0;
					
					if(registrado == true){
						//	if(viejoSubproceso != "Origen Pendiente"){
						
						for( d=0 ; d<_listaFinalOrigenMultiple.length ; d++){
							if(_listaFinalOrigenMultiple[d].idEmpleado == idViejoMultiple && _listaFinalOrigenMultiple[d].idIncidente == listaincidente.selectedItem.idIncidente){
								
								for( m = 0 ; m<_universoAreaOrigen.length ; m++){
									if(_universoAreaOrigen[m].subproceso == this.areasOrigenIncidente.selectedItem){
										this.nombreGerenteIncidente.text = _universoAreaOrigen[m].nombre;
										this.usuarioGerente = _universoAreaOrigen[m].valor;
										this._subproceso = _universoAreaOrigen[m].subproceso;
										this._idEmpleadoMultiple = _universoAreaOrigen[m].llave;
									}
								}
								
								this._listaFinalOrigenMultiple[d].descripcion = this.queinspector.text;
								this._listaFinalOrigenMultiple[d].lugar = this.dondeinspector.text;
								this._listaFinalOrigenMultiple[d].cuando = this.cuandoinspector.text;
								this._listaFinalOrigenMultiple[d].comentarios = this.comentariosinspector.text;
								this._listaFinalOrigenMultiple[d].situacionIdentificada = this.situacioninspector.text;
								this._listaFinalOrigenMultiple[d].fecha = this.fechaHoy;
								this._listaFinalOrigenMultiple[d].idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
								this._listaFinalOrigenMultiple[d].incidenteRelacionado = _numIncidente;
								
								for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
									if(_listaReferenciasMultiple[i].ultimo != ""){
										this._listaReferenciasMultiple.removeItemAt(i);
										i = i - 1;
									}
								}
								
								if(_listaReferenciasMultiple == null){					
									this._listaFinalOrigenMultiple[d].referencias = new ArrayCollection();
								}else{					
									this._listaFinalOrigenMultiple[d].referencias = this._listaReferenciasMultiple;
								} 
								
								if(nombreGerenteIncidente.text == ""){
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
											this._listaOrigenMultiple[j].nombre = " Pendiente";
										}
									}	
								}else{
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
											this._listaOrigenMultiple[j].subproceso = _subproceso;
										}
									}	
								}
							}
						}
						//}	
						registrado = false;
						if(vieneDNuevoOrigenMultiple == true ){
							nuevoInc = false;
						}else{
							nuevoInc = true;	
						}
						viejoSubproceso = listaincidente.selectedItem.subproceso;
					}
					
					//////////////////////////////////////// Registra nuevo onÂ¡bjeto incidente ///////////////////////////////////////////
					if( nuevoInc == false && registrado == false && _selectItemSubProceso == "Origen Pendiente"){
						
						this._incidente = new Incidente();
						this._incidente.valor = _selectItemValor;
						this._incidente.descripcion = this.queinspector.text;
						this._incidente.lugar = this.dondeinspector.text;
						this._incidente.cuando = this.cuandoinspector.text;
						this._incidente.comentarios = this.comentariosinspector.text;
						this._incidente.situacionIdentificada = this.situacioninspector.text;
						this._incidente.fecha = this.fechaHoy;
						this._incidente.idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
						this._incidente.incidenteRelacionado = _numIncidente;
						
						for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
							if(_listaReferenciasMultiple[i].ultimo != ""){
								this._listaReferenciasMultiple.removeItemAt(i);
								i = i - 1;
							}
						}
						
						if(_listaReferenciasMultiple == null){					
							this._incidente.referencias = new ArrayCollection();
						}else{					
							this._incidente.referencias = this._listaReferenciasMultiple;
						}  
						
						this._listaFinalOrigenMultiple.addItem(_incidente);
						
						if(nombreGerenteIncidente.text == ""){
							for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
								if(this._listaOrigenMultiple[j].valor == _selectItemValor){
									this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
									this._listaOrigenMultiple[j].nombre = " Pendiente";
								}
							}	
						}else{
							for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
								if(this._listaOrigenMultiple[j].valor == _selectItemValor){
									this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
									this._listaOrigenMultiple[j].subproceso = _subproceso;
								}
							}	
						}
						
						this.situacioninspector.text = "";
						this.queinspector.text = "";
						this.dondeinspector.text = "";
						this.cuandoinspector.text = "";
						this.comentariosinspector.text = "";
						this.areasOrigenIncidente.selectedIndex = -1;
						this.nombreGerenteIncidente.text = "";
						this.vieneDNuevoOrigenMultiple = false;
						this._listaReferenciasMultiple = new ArrayCollection();
						
					}
					
					for( d = 0 ; d<_listaFinalOrigenMultiple.length ; d++){
						if(_listaFinalOrigenMultiple[d].descripcion == "" || _listaFinalOrigenMultiple[d].lugar == "" || _listaFinalOrigenMultiple[d].cuando == "" || _listaFinalOrigenMultiple[d].idEmpleado == 0  ){
							for(m = 0 ; m<_listaOrigenMultiple.length ; m++){
								if(_listaOrigenMultiple[m].idIncidente == _listaFinalOrigenMultiple[d].idIncidente){
									listaincidente.selectedIndex = m;
									this._revisarComponente = true;
									for(j = 0; j<_listaFinalOrigenMultiple.length ; j++){
										if(_listaFinalOrigenMultiple[j].idIncidente == _listaOrigenMultiple[m].idIncidente){
											this.situacioninspector.text = "";
											this.queinspector.text = "";
											this.dondeinspector.text = "";
											this.cuandoinspector.text = "";
											this.comentariosinspector.text = "";
											this.areasOrigenIncidente.selectedIndex = -1;
											
											this.nombreGerenteIncidente.text = "";
											this.usuarioGerente = "";
											this._subproceso = "";
											this._idEmpleadoMultiple = 0;
											this._listaReferenciasMultiple = new ArrayCollection();
											
											this.queinspector.text = _listaFinalOrigenMultiple[j].descripcion ;
											this.dondeinspector.text = _listaFinalOrigenMultiple[j].lugar ;
											this.cuandoinspector.text = _listaFinalOrigenMultiple[j].cuando ;
											this.comentariosinspector.text = _listaFinalOrigenMultiple[j].comentarios ;
											this.situacioninspector.text = _listaFinalOrigenMultiple[j].situacionIdentificada ;
											this._listaReferenciasMultiple = _listaFinalOrigenMultiple[j].referencias ;
											for( var a:int = 0 ; a<_universoAreaOrigen.length ; a++){
												if(_universoAreaOrigen[a].llave == _listaOrigenMultiple[m].llave){
													this.nombreGerenteIncidente.text = _universoAreaOrigen[a].nombre;
													this.areasOrigenIncidente.selectedItem = _universoAreaOrigen[a].subproceso;
												}
											}
											registrado = true ;
											this._numIncidenteMultiple = _listaFinalOrigenMultiple[j].idIncidente;
											//this.idViejoMultiple = event.currentTarget.selectedItem.llave;
											this.idViejoMultiple = _listaFinalOrigenMultiple[j].idEmpleado;
											//this.valorViejo = event.currentTarget.selectedItem.valor;
											//this.valorViejo = _listaFinalOrigenMultiple[j].idIncidente
											this.valorViejo2 = listaincidente.selectedItem.valor;
											this.valorViejo = listaincidente.selectedItem.idIncidente
											this._selectItemValor = listaincidente.selectedItem.valor;
											this._selectItemSubProceso = listaincidente.selectedItem.subproceso;
										}
									}
									return;
								}
							}
							//this.listaincidente.selectedItem.idIncidente = Â _listaFinalOrigenMultiple[d].idIncidente;
						}
					}
					
					for( d = 0; d<_listaReferencias.length ; d++){
						if(_listaReferencias[d].ultimo != ""){
							this._listaReferencias.removeItemAt(d);
							d = d - 1;
						}
					}
					
					this.analisisGestion = new Gestion();
					analisisGestion.fecha = this.fechaHoy;
					analisisGestion.analisis = true;
					analisisGestion.incidentesRelacionados = this._listaFinalOrigenMultiple;
					analisisGestion.idGestion = this._idGestion;
					analisisGestion.idPendiente = this._idPendiente;
					analisisGestion.impactoCliente = this.cliente.selected;
					analisisGestion.impactoProducto = this.producto.selected;
					analisisGestion.impactoSistema = this.sistema.selected;
					analisisGestion.nombreContacto = this._popContactoSeleccionado.nombre;////
					if(this.cambioTipo == false){
						analisisGestion.tipo = "Operativo";
					}else{
						analisisGestion.tipo = this.comboxtipo.selectedItem.tipo;
						this.cambioTipo = false;
					}	
					analisisGestion.incidente = _numIncidente;
					analisisGestion.procedimientos = this._listaProcedimientos;  ///
					if(_listaProcedimientos.length > 0){
						analisisGestion.procedimientosAsociados = "verdadero";
					}else{
						analisisGestion.procedimientosAsociados = "nulo";	
					}
					analisisGestion.empleado = DatosGlobales.getInstance()._usuario.idEmpleado; //91
					analisisGestion.contacto = _popContactoSeleccionado.idContacto; //
					analisisGestion.cliente = 0; //id cliente de popProveedor
					analisisGestion.proveedor = this._idProveedor; //
					analisisGestion.producto = this._idProducto;   //
					analisisGestion.referencias = this._listaReferencias;  ////
					analisisGestion.problema = this.problemaqqdccp.text;
					analisisGestion.descripcion = this.queinspectorqqdccp.text;
					analisisGestion.quien = this.quieninspectorqqdccp.text;
					analisisGestion.lugar = this.dondeinspectorqqdccp.text;
					analisisGestion.cuando = this.cuandoinspectorqqdccp.text;
					analisisGestion.como = this.comoinspectorqqdccp.text;
					analisisGestion.causa = this.porqueinspectorqqdccp.text;
					analisisGestion.solucion = this.solucioninspectorqqdccp.text;
					analisisGestion.justificacion = this.justificaciondecision.text;
					analisisGestion.nombre_Cliente = this._popContactoSeleccionado.empresa;
					analisisGestion.nombre_Proveedor = this._nombreProveedor;
					analisisGestion.nombre_Producto = this._descripcionProducto;
					analisisGestion.decision = true;
					analisisGestion.enviarCorreo = "enviar";
					if(aceptar.selected == true ){
						analisisGestion.aceptado = true;
						analisisGestion.aceptadoString = "verdadero";
					}else if (rechazar.selected == true){
						analisisGestion.aceptado = false;
						analisisGestion.aceptadoString = "falso";
					}else{
						analisisGestion.aceptadoString = "nulo";
					}
					
					this.banderaAlert = true;
					this.registrado = false;
					this.nuevoInc = false;
					
					var evto:EventoAnalisisincidente = new EventoAnalisisincidente(EventoAnalisisincidente.GUARDA_ANALISIS_INCIDENTE);
					evto.gestion = this.analisisGestion;
					dispatchEvent(evto);	
					
					//cambiaView('gestion','');
				}
			}
			
			public function guardaAnalisis():void{
				var i:int = 0 ;
				var j:int = 0 ;
				var m:int = 0 ;
				if(vieneDNuevoOrigenMultiple == true){
					this.registrado = false;
					this.nuevoInc = false;
				}		
				
				if(analisisGestion == null){
					//////////////////////////////////////// Actualiza Incidente ///////////////////////////////////////////
					if(registrado == true){
						//if(viejoSubproceso != "Origen Pendiente"){
						
						for( d=0 ; d<_listaFinalOrigenMultiple.length ; d++){
							//if(_listaFinalOrigenMultiple[d].idEmpleado == idViejoMultiple && _listaFinalOrigenMultiple[d].valor == valorViejo ){
							if(_listaFinalOrigenMultiple[d].idEmpleado == idViejoMultiple && _listaFinalOrigenMultiple[d].idIncidente == listaincidente.selectedItem.idIncidente ){
								
								for( m = 0 ; m<_universoAreaOrigen.length ; m++){
									if(_universoAreaOrigen[m].subproceso == this.areasOrigenIncidente.selectedItem){
										this.nombreGerenteIncidente.text = _universoAreaOrigen[m].nombre;
										this.usuarioGerente = _universoAreaOrigen[m].valor;
										this._subproceso = _universoAreaOrigen[m].subproceso;
										this._idEmpleadoMultiple = _universoAreaOrigen[m].llave;
									}
								}
								
								this._listaFinalOrigenMultiple[d].descripcion = this.queinspector.text;
								this._listaFinalOrigenMultiple[d].lugar = this.dondeinspector.text;
								this._listaFinalOrigenMultiple[d].cuando = this.cuandoinspector.text;
								this._listaFinalOrigenMultiple[d].comentarios = this.comentariosinspector.text;
								this._listaFinalOrigenMultiple[d].situacionIdentificada = this.situacioninspector.text;
								this._listaFinalOrigenMultiple[d].fecha = this.fechaHoy;
								this._listaFinalOrigenMultiple[d].idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
								this._listaFinalOrigenMultiple[d].incidenteRelacionado = _numIncidente;
								
								for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
									if(_listaReferenciasMultiple[i].ultimo != ""){
										this._listaReferenciasMultiple.removeItemAt(i);
										i = i - 1;
									}
								}
								
								if(_listaReferenciasMultiple == null){					
									this._listaFinalOrigenMultiple[d].referencias = new ArrayCollection();
								}else{					
									this._listaFinalOrigenMultiple[d].referencias = this._listaReferenciasMultiple;
								} 
								
								if(nombreGerenteIncidente.text == ""){
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
											this._listaOrigenMultiple[j].nombre = " Pendiente";
											viejoSubproceso = " Origen Pendiente";
										}
									}	
								}else{
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
											this._listaOrigenMultiple[j].subproceso = _subproceso;
											viejoSubproceso = _subproceso;
										}
									}	
								}
							}
						}
						//}	
						registrado = false;
						if(vieneDNuevoOrigenMultiple == true ){
							nuevoInc = false;
						}else{
							nuevoInc = true;	
						}
						//viejoSubproceso = listaincidente.selectedItem.subproceso;
					}
					
					//////////////////////////////////////// Registra nuevo onÂ¡bjeto incidente ///////////////////////////////////////////
					if( nuevoInc == false && registrado == false && _selectItemSubProceso == "Origen Pendiente"){
						
						this._incidente = new Incidente();
						this._incidente.valor = _selectItemValor;
						this._incidente.descripcion = this.queinspector.text;
						this._incidente.lugar = this.dondeinspector.text;
						this._incidente.cuando = this.cuandoinspector.text;
						this._incidente.comentarios = this.comentariosinspector.text;
						this._incidente.situacionIdentificada = this.situacioninspector.text;
						this._incidente.fecha = this.fechaHoy;
						this._incidente.idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
						this._incidente.incidenteRelacionado = _numIncidente;
						
						for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
							if(_listaReferenciasMultiple[i].ultimo != ""){
								this._listaReferenciasMultiple.removeItemAt(i);
								i = i - 1;
							}
						}
						
						if(_listaReferenciasMultiple == null){					
							this._incidente.referencias = new ArrayCollection();
						}else{					
							this._incidente.referencias = this._listaReferenciasMultiple;
						}  
						
						this._listaFinalOrigenMultiple.addItem(_incidente);
						
						if(nombreGerenteIncidente.text == ""){
							for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
								if(this._listaOrigenMultiple[j].valor == _selectItemValor){
									this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
									this._listaOrigenMultiple[j].nombre = " Pendiente";
								}
							}	
						}else{
							for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
								if(this._listaOrigenMultiple[j].valor == _selectItemValor){
									this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
									this._listaOrigenMultiple[j].subproceso = _subproceso;
								}
							}	
						}
						
						
						this.situacioninspector.text = "";
						this.queinspector.text = "";
						this.dondeinspector.text = "";
						this.cuandoinspector.text = "";
						this.comentariosinspector.text = "";
						this.areasOrigenIncidente.selectedIndex = -1;
						this.nombreGerenteIncidente.text = "";
						this.vieneDNuevoOrigenMultiple = false;
						this._listaReferenciasMultiple = new ArrayCollection();
						
					}	
					
					for( j = 0; j<_listaOrigenMultiple.length ; j ++ ){
						if(this._listaOrigenMultiple[j].valor == _selectItemValor){
							this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
							this._listaOrigenMultiple[j].subproceso = _subproceso;
						}
					}
					
					for(var d:int = 0; d<_listaReferencias.length ; d++){
						if(_listaReferencias[d].ultimo != ""){
							this._listaReferencias.removeItemAt(d);
							d = d - 1;
						}
					}
					this.analisisGestion = new Gestion();
					analisisGestion.incidentesRelacionados = this._listaFinalOrigenMultiple;
					analisisGestion.fecha = this.fechaHoy;
					analisisGestion.impactoCliente = this.cliente.selected;
					analisisGestion.impactoProducto = this.producto.selected;
					analisisGestion.impactoSistema = this.sistema.selected;
					analisisGestion.nombreContacto = this._popContactoSeleccionado.nombre;////
					if(this.cambioTipo == false){
						analisisGestion.tipo = "Operativo";
					}else{
						analisisGestion.tipo = this.comboxtipo.selectedItem.tipo;
						this.cambioTipo = false;
					}	
					analisisGestion.incidente = _numIncidente;
					analisisGestion.procedimientos = this._listaProcedimientos; 
					if(_listaProcedimientos.length > 0){
						analisisGestion.procedimientosAsociados = "verdadero";
					}else{
						analisisGestion.procedimientosAsociados = "nulo";	
					}
					analisisGestion.empleado = DatosGlobales.getInstance()._usuario.idEmpleado; //91
					analisisGestion.contacto = _popContactoSeleccionado.idContacto; //
					analisisGestion.cliente = _popContactoSeleccionado.idEmpresa;; //id cliente de popProveedor
					analisisGestion.proveedor = this._idProveedor; //
					analisisGestion.producto = this._idProducto;   //
					analisisGestion.referencias = this._listaReferencias;  ////
					analisisGestion.problema = this.problemaqqdccp.text;
					analisisGestion.descripcion = this.queinspectorqqdccp.text;
					analisisGestion.quien = this.quieninspectorqqdccp.text;
					analisisGestion.lugar = this.dondeinspectorqqdccp.text;
					analisisGestion.cuando = this.cuandoinspectorqqdccp.text;
					analisisGestion.como = this.comoinspectorqqdccp.text;
					analisisGestion.causa = this.porqueinspectorqqdccp.text;
					analisisGestion.solucion = this.solucioninspectorqqdccp.text;
					analisisGestion.justificacion = this.justificaciondecision.text;
					analisisGestion.nombre_Cliente = this._popContactoSeleccionado.empresa;
					analisisGestion.nombre_Proveedor = this._nombreProveedor;
					analisisGestion.nombre_Producto = this._descripcionProducto;
					
					if(aceptar.selected == true ){
						analisisGestion.aceptado = true;
						analisisGestion.aceptadoString = "verdadero";
					}else if (rechazar.selected == true){
						analisisGestion.aceptado = false;
						analisisGestion.aceptadoString = "falso";
					}else{
						analisisGestion.aceptadoString = "nulo";
					}
					
					this.registrado = false;
					this.nuevoInc = false;
					
					var evt:EventoAnalisisincidente = new EventoAnalisisincidente(EventoAnalisisincidente.REGISTRA_ANALISIS_INSIDENTE);
					evt.gestion = this.analisisGestion;
					dispatchEvent(evt);
					
				}else{
					//////////////////////////////////////// Actualiza Incidente ///////////////////////////////////////////
					if(registrado == true){
						//	if(viejoSubproceso != "Origen Pendiente"){
						
						for( d=0 ; d<_listaFinalOrigenMultiple.length ; d++){
							if(_listaFinalOrigenMultiple[d].idEmpleado == idViejoMultiple && _listaFinalOrigenMultiple[d].idIncidente == listaincidente.selectedItem.idIncidente){
								
								for( m = 0 ; m<_universoAreaOrigen.length ; m++){
									if(_universoAreaOrigen[m].subproceso == this.areasOrigenIncidente.selectedItem){
										this.nombreGerenteIncidente.text = _universoAreaOrigen[m].nombre;
										this.usuarioGerente = _universoAreaOrigen[m].valor;
										this._subproceso = _universoAreaOrigen[m].subproceso;
										this._idEmpleadoMultiple = _universoAreaOrigen[m].llave;
									}
								}
								
								this._listaFinalOrigenMultiple[d].descripcion = this.queinspector.text;
								this._listaFinalOrigenMultiple[d].lugar = this.dondeinspector.text;
								this._listaFinalOrigenMultiple[d].cuando = this.cuandoinspector.text;
								this._listaFinalOrigenMultiple[d].comentarios = this.comentariosinspector.text;
								this._listaFinalOrigenMultiple[d].situacionIdentificada = this.situacioninspector.text;
								this._listaFinalOrigenMultiple[d].fecha = this.fechaHoy;
								this._listaFinalOrigenMultiple[d].idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
								this._listaFinalOrigenMultiple[d].incidenteRelacionado = _numIncidente;
								
								for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
									if(_listaReferenciasMultiple[i].ultimo != ""){
										this._listaReferenciasMultiple.removeItemAt(i);
										i = i - 1;
									}
								}
								
								if(_listaReferenciasMultiple == null){					
									this._listaFinalOrigenMultiple[d].referencias = new ArrayCollection();
								}else{					
									this._listaFinalOrigenMultiple[d].referencias = this._listaReferenciasMultiple;
								} 
								
								if(nombreGerenteIncidente.text == ""){
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
											this._listaOrigenMultiple[j].nombre = " Pendiente";
										}
									}	
								}else{
									for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
										if(this._listaOrigenMultiple[j].valor == _selectItemValor){
											this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
											this._listaOrigenMultiple[j].subproceso = _subproceso;
										}
									}	
								}
							}
						}
						//}	
						registrado = false;
						if(vieneDNuevoOrigenMultiple == true ){
							nuevoInc = false;
						}else{
							nuevoInc = true;	
						}
						viejoSubproceso = listaincidente.selectedItem.subproceso;
					}
					
					//////////////////////////////////////// Registra nuevo onÂ¡bjeto incidente ///////////////////////////////////////////
					if( nuevoInc == false && registrado == false && _selectItemSubProceso == "Origen Pendiente"){
						
						this._incidente = new Incidente();
						this._incidente.valor = _selectItemValor;
						this._incidente.descripcion = this.queinspector.text;
						this._incidente.lugar = this.dondeinspector.text;
						this._incidente.cuando = this.cuandoinspector.text;
						this._incidente.comentarios = this.comentariosinspector.text;
						this._incidente.situacionIdentificada = this.situacioninspector.text;
						this._incidente.fecha = this.fechaHoy;
						this._incidente.idEmpleado = this._idEmpleadoMultiple;   /*91 this._incidente.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado; */  
						this._incidente.incidenteRelacionado = _numIncidente;
						
						for( i=0 ; i<_listaReferenciasMultiple.length ; i++){
							if(_listaReferenciasMultiple[i].ultimo != ""){
								this._listaReferenciasMultiple.removeItemAt(i);
								i = i - 1;
							}
						}
						
						if(_listaReferenciasMultiple == null){					
							this._incidente.referencias = new ArrayCollection();
						}else{					
							this._incidente.referencias = this._listaReferenciasMultiple;
						}  
						
						this._listaFinalOrigenMultiple.addItem(_incidente);
						
						if(nombreGerenteIncidente.text == ""){
							for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
								if(this._listaOrigenMultiple[j].valor == _selectItemValor){
									this._listaOrigenMultiple[j].subproceso = " Origen Pendiente";
									this._listaOrigenMultiple[j].nombre = " Pendiente";
								}
							}	
						}else{
							for(j = 0; j<_listaOrigenMultiple.length ; j ++ ){
								if(this._listaOrigenMultiple[j].valor == _selectItemValor){
									this._listaOrigenMultiple[j].nombre = nombreGerenteIncidente.text;
									this._listaOrigenMultiple[j].subproceso = _subproceso;
								}
							}	
						}
						
						
						this.situacioninspector.text = "";
						this.queinspector.text = "";
						this.dondeinspector.text = "";
						this.cuandoinspector.text = "";
						this.comentariosinspector.text = "";
						this.areasOrigenIncidente.selectedIndex = -1;
						this.nombreGerenteIncidente.text = "";
						this.vieneDNuevoOrigenMultiple = false;
						this._listaReferenciasMultiple = new ArrayCollection();
						
					}	
					
					for( m = 0; m<_listaReferencias.length ; m++){
						if(_listaReferencias[m].ultimo != ""){
							this._listaReferencias.removeItemAt(m);
							m = m - 1;
						}
					}
					
					this.analisisGestion = new Gestion();
					analisisGestion.fecha = this.fechaHoy;
					analisisGestion.incidentesRelacionados = this._listaFinalOrigenMultiple;
					analisisGestion.idGestion = this._idGestion;
					analisisGestion.impactoCliente = this.cliente.selected;
					analisisGestion.impactoProducto = this.producto.selected;
					analisisGestion.impactoSistema = this.sistema.selected;
					analisisGestion.nombreContacto = this._popContactoSeleccionado.nombre;////
					if(this.cambioTipo == false){
						analisisGestion.tipo = "Operativo";
					}else{
						analisisGestion.tipo = this.comboxtipo.selectedItem.tipo;
						this.cambioTipo = false;
					}	
					analisisGestion.incidente = _numIncidente;
					analisisGestion.procedimientos = this._listaProcedimientos;  
					if(_listaProcedimientos.length > 0){
						analisisGestion.procedimientosAsociados = "verdadero";
					}else{
						analisisGestion.procedimientosAsociados = "nulo";	
					}
					analisisGestion.empleado = DatosGlobales.getInstance()._usuario.idEmpleado; //91
					analisisGestion.contacto = _popContactoSeleccionado.idContacto; //
					analisisGestion.cliente = _popContactoSeleccionado.idEmpresa;
					analisisGestion.proveedor = this._idProveedor; //
					analisisGestion.producto = this._idProducto;   //
					analisisGestion.referencias = this._listaReferencias;  ////
					analisisGestion.problema = this.problemaqqdccp.text;
					analisisGestion.descripcion = this.queinspectorqqdccp.text;
					analisisGestion.quien = this.quieninspectorqqdccp.text;
					analisisGestion.lugar = this.dondeinspectorqqdccp.text;
					analisisGestion.cuando = this.cuandoinspectorqqdccp.text;
					analisisGestion.como = this.comoinspectorqqdccp.text;
					analisisGestion.causa = this.porqueinspectorqqdccp.text;
					analisisGestion.solucion = this.solucioninspectorqqdccp.text;
					analisisGestion.justificacion = this.justificaciondecision.text;
					analisisGestion.nombre_Cliente = this._popContactoSeleccionado.empresa;
					analisisGestion.nombre_Proveedor = this._nombreProveedor;
					analisisGestion.nombre_Producto = this._descripcionProducto;	
					if(aceptar.selected == true ){
						analisisGestion.aceptado = true;
						analisisGestion.aceptadoString = "verdadero";
					}else if (rechazar.selected == true){
						analisisGestion.aceptado = false;
						analisisGestion.aceptadoString = "falso";
					}else{
						analisisGestion.aceptadoString = "nulo";
					}
					//analisisGestion.aceptado = false;
					this.banderaAlert = false;
					this.registrado = false;
					this.nuevoInc = false;
					
					var evto:EventoAnalisisincidente = new EventoAnalisisincidente(EventoAnalisisincidente.GUARDA_ANALISIS_INCIDENTE);
					evto.gestion = this.analisisGestion;
					dispatchEvent(evto);
				}
				
				//this.checkOrigen.selected = false;
				//muestraResizeEnd.play();
				//this.incidentemultiple.selectedIndex = 0;
				//this.viewsReferencias.selectedIndex = 0;
				this.situacioninspector.text = "";
				this.queinspector.text = "";
				this.dondeinspector.text = "";
				this.cuandoinspector.text = "";
				this.comentariosinspector.text = "";
				this.areasOrigenIncidente.selectedIndex = -1;
				this.nombreGerenteIncidente.text = "";
				this.existeProveedor = false;
				this.existeCliente = false;
				this.nuevoInc = true;
				this._listaReferenciasMultiple = new ArrayCollection();
			}
			
			private function cargaReferencias(evt:String):void{
				if(evt == "analisis"){
					popReferencias = PopUpManager.createPopUp(alertaSingleton.elDisplayObject, CargaReferencias,true) as CargaReferencias ; 
					popReferencias.vieneD = "Gestion";
					//popReferencias._idIncidente = this._numIncidente;
					/* PopUpManager.centerPopUp(popReferencias); */
					var evto:EventoReferencias = new EventoReferencias(EventoReferencias.CARGA_LISTA_REFERENCIA);
					evto.listaReferencia = this._listaReferencias;
					evto.vieneD = "Gestion";
					dispatchEvent(evto);	
					
					var event:EventoReferencias = new EventoReferencias(EventoReferencias.OBTENER_ID_INCIDENTE);
					event.idIncidente = this._numIncidente;
					dispatchEvent(event);
				}	
				
				if(evt == "incMultiple"){
					popReferencias = PopUpManager.createPopUp(alertaSingleton.elDisplayObject, CargaReferencias,true) as CargaReferencias; 
					popReferencias.vieneD = "Registro";
					//popReferencias._idIncidente = this._numIncidenteMultiple;
					/* PopUpManager.centerPopUp(popReferencias); */
					var evento:EventoReferencias = new EventoReferencias(EventoReferencias.CARGA_LISTA_REFERENCIA);
					evento.listaReferencia = this._listaReferenciasMultiple;
					evento.vieneD = "Registro";
					dispatchEvent(evento);
					
					var even:EventoReferencias = new EventoReferencias(EventoReferencias.OBTENER_ID_INCIDENTE);
					even.idIncidente = this._numIncidenteMultiple;
					dispatchEvent(even);
				}
			}
			
			private function origenSeleccionado(event:IndexChangeEvent):void{
				for(var m:int = 0 ; m<_universoAreaOrigen.length ; m++){
					if(_universoAreaOrigen[m].subproceso == event.currentTarget.selectedItem){
						this.nombreGerenteIncidente.text = _universoAreaOrigen[m].nombre;
						this.usuarioGerente = _universoAreaOrigen[m].valor;
						this._subproceso = _universoAreaOrigen[m].subproceso;
						this._idEmpleadoMultiple = _universoAreaOrigen[m].llave;
					}
				}	
			}
			
			private function copiaSeguridadDataGrid():void{
				this.copiaSeguridadGrid = ObjectUtil.copy(this.grdIncidentesMarcador) as ArrayCollection;
				this.copiaSeguridadLista = ObjectUtil.copy(this.listaMarcadores) as ArrayCollection;
			}
			
			private function cerrarComponente(evt:EventoIncidente):void{
				this.espacioLineaDeTiempo.removeAllChildren();
				this.viewS.selectedIndex = 1;
			}
			
			private function setearGraficaTablero(
				$lblTitulo:String,
				$arregloAlimentador:ArrayCollection = null,
				$tipoPie:int=0, 
				$fila:int=0, 
				$orientacion:String="vertical", 
				$filaMargenLeft:int=0, 
				$filaMargenRight:int=0, 
				$horizontalAlign:String="center", 
				$verticalAlign:String="middle",
				$margenLeft:int=0,
				$margenRight:int=0,
				$margenTop:int=0,
				$tamanioLetra:int=15,
				$margenBottom:int=0):PieDinamico{
				var pie:PieDinamico = new PieDinamico();
				pie.lblTitulo = $lblTitulo;
				pie.arregloAlimentador = limpiaNulosOVaciosEnArregloPie( $arregloAlimentador );
				pie.tipoPie = $tipoPie;
				pie.fila = $fila;
				pie.orientacion = $orientacion;
				pie.filaMargenIzquierdo = $filaMargenLeft;
				pie.filaMargenDerecho = $filaMargenRight;
				pie.horizontalAlign = $horizontalAlign;
				pie.verticalAlign = $verticalAlign;
				pie.margenLeft = $margenLeft;
				pie.margenRight = $margenRight;
				pie.margenBottom = $margenBottom;
				pie.margenTop = $margenTop;
				pie.tituloSize = 20;
				return pie;
			}
			
			private function limpiaNulosOVaciosEnArregloPie($lista:ArrayCollection):ArrayCollection{
				var arrRegreso:ArrayCollection = new ArrayCollection();
				for(var t:int = 0; t < $lista.length; t++){
					if($lista[t].tipo != "null" && 
						$lista[t].tipo != null && 
						$lista[t].tipo != "unset" && 
						$lista[t].tipo !=  "") arrRegreso.addItem($lista[t]);
					if($lista[t].tipo == null){
						$lista[t].tipo = "Pendiente";
						arrRegreso.addItem($lista[t]);
					}
					if($lista[t].tipo == "ND"){
						$lista[t].tipo = "No definido";
						arrRegreso.addItem($lista[t]);
					}
				}
				arrRegreso = UtilsGrid.queryQuitarRepetidos( arrRegreso, "tipo");
				return arrRegreso;
			}
			
			private function setearGrafica(
				$titulo:String, 
				$subTitulo:String, 
				$info:String, 
				$dataProvider:ArrayCollection, 
				$tipo:int = 0, 
				$popUp:Boolean = true
			):PieDinamico{
				var pieRegreso:PieDinamico = new PieDinamico();
				pieRegreso.lblTitulo = $titulo;
				pieRegreso.subTitulo = $subTitulo;
				pieRegreso.infoGeneralDeLaGrafica = $info;
				pieRegreso.tipoPie = $tipo;
				pieRegreso.arregloAlimentador = $dataProvider;
				pieRegreso.popUpHabilitado = $popUp;
				pieRegreso.ordenTitulo = 1;
				return pieRegreso;
			}
			
			public function set recibirListaIncidentes(incidente:ArrayCollection):void{
				this._arregloIncidente = new ArrayCollection();
				for(var d:int = 0 ; d<incidente.length ; d++){	
					if(incidente[d].folio != null){
						this._arregloIncidente.addItem(incidente.getItemAt(d));
					}
				}
				this.grdGestion.dataProvider = _arregloIncidente;
				_listaIncidente = new ArrayCollection();
				_listaIncidenteMarcadores = new ArrayCollection();
				_listaIncidente = incidente;
				_listaIncidenteMarcadores = incidente;
				/* var temp1ETvsFT:ArrayCollection = ObjectUtil.copy(incidente) as ArrayCollection;
				var temp2Ubicacion:ArrayCollection = ObjectUtil.copy(incidente) as ArrayCollection;
				var temp3Redacto:ArrayCollection = ObjectUtil.copy(incidente) as ArrayCollection; */
				
				var usu:Empleado = DatosGlobales.getInstance()._usuario;
				if(DatosGlobales.getInstance()._usuario.esGerente == true && DatosGlobales.getInstance()._usuario.usuario == "PLozada"){
					botoneraPrincipal = new ArrayCollection([{label:"GestiÃ³n", bandera:false},{label:"AcciÃ³n", bandera:false},{label:"VerificaciÃ³n", bandera:false},{label:"PonderaciÃ³n", bandera:false},{label:"RECHAZOS", bandera:false}]);
					this.botoneraPrincipal[0].bandera = this._arregloIncidente.length > 0 ? true:false;
					this.botoneraPrincipal.refresh();
					this.miButtonBar.selectedIndex = 0;
					this.listadoGestion.selectedIndex = 0;
				}else if(DatosGlobales.getInstance()._usuario.esGerente == true){
					botoneraPrincipal = new ArrayCollection([{label:"GestiÃ³n", bandera:false},{label:"AcciÃ³n", bandera:false},{label:"VerificaciÃ³n", bandera:false}]);
					this.botoneraPrincipal[0].bandera = this._arregloIncidente.length > 0 ? true:false;
					this.botoneraPrincipal.refresh();
					this.miButtonBar.selectedIndex = 0;
					this.listadoGestion.selectedIndex = 0;
				}else{
					botoneraPrincipal = new ArrayCollection([{label:"AcciÃ³n", bandera:false}]); 
					this.miButtonBar.selectedIndex = 0;
					this.listadoGestion.selectedIndex = 1;
				}
				
				var objeto:Object = new Object();
				// para el tipo
				var m:int = 0;
				
				var _listaGraficas:ArrayCollection = new ArrayCollection();
				var subtituloAllCharts:String = "GESTIÃN";
				
				var arrETVSFT:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo(_arregloIncidente,"enTiempo");
				_listaGraficas.addItem( setearGrafica("ET VS FT", subtituloAllCharts, catalogoInfoGraficas.ET_VS_FT, arrETVSFT,1) );
				
				var arrUbicacion:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo(_arregloIncidente,"ubicacion");
				_listaGraficas.addItem( setearGrafica("UBICACIÃN", subtituloAllCharts, catalogoInfoGraficas.UBICACION_PARTIDAS, arrUbicacion) );
				
				var arrRedacto:ArrayCollection = Util.getInstance().consultaPieChartConteoXCampo(_arregloIncidente,"redacto");
				_listaGraficas.addItem( setearGrafica("REDACTÃ", subtituloAllCharts, catalogoInfoGraficas.REDACTO, arrRedacto) );
				/* var graficaFTvsET:PieDinamico = new PieDinamico();
				graficaFTvsET.lblTitulo = "ET VS FT ";
				graficaFTvsET.tipoPie = 1;
				graficaFTvsET.ordenTitulo = 1;
				graficaFTvsET.arregloAlimentador = Util.getInstance().consultaPieChartConteoXCampo(incidente,"enTiempo");
				
				_listaGraficas.addItem(graficaFTvsET);
				
				var graficaUbicacion:PieDinamico = new PieDinamico();
				graficaUbicacion.lblTitulo = "UBICACIÃN";
				graficaUbicacion.ordenTitulo = 1;
				//graficaFTvsET.tipoPie = ;
				graficaUbicacion.arregloAlimentador = Util.getInstance().consultaPieChartConteoXCampo(incidente,"ubicacion");
				
				_listaGraficas.addItem(graficaUbicacion);
				
				var graficaRedacto:PieDinamico = new PieDinamico();
				graficaRedacto.lblTitulo = "REDACTÃ";
				//graficaFTvsET.tipoPie = ;
				graficaRedacto.ordenTitulo = 1;
				graficaRedacto.arregloAlimentador = Util.getInstance().consultaPieChartConteoXCampo(incidente,"redacto");
				
				_listaGraficas.addItem(graficaRedacto); */
				if(this.actualizarMarcador == true || this.nuevoMarcador == true ){
					funcionCargaMarcadores();	
					this.listaMarcadores.selectedIndex = 0;
					this.ocultaBotones.play();
					this.botonesTodoDesmarcar.visible = false;
					this._botonesActivos = false;
					this.verColumna = true;
					tablaGrid_resizeHandler_Marcador();
					this.reformulacion.visible = false;
					this.cambiodeorigen.visible = false;
					this.checkbox.visible = false;
					this.nombreMarcador = this.listaMarcadores.selectedItem.marcador;
					this.numeroDIncidentes = this.listaMarcadores.selectedItem.numIncidentes;
					this.marcadorET = this.listaMarcadores.selectedItem.numMarcadoresET;
					this.marcadorFT = this.listaMarcadores.selectedItem.numMarcadoresFT;
					this.actualizarMarcador = false;
					this.nuevoMarcador = false;
				}
				
				/* if(this.nuevoMarcador == true ){
				this._listaMarcadores = UtilsGrid.queryQuitarRepetidos(_listaIncidenteMarcadores, "marcador");
				for(var d:int = 0; d<_listaMarcadores.length ; d++){
				if(_listaMarcadores[d].marcador == "ANÃLISIS"){
				this._listaMarcadores.removeItemAt(d);
				d = d - 1;
				}
				var arrMarcadorTemp:ArrayCollection = UtilsGrid.queryCampoX(_listaIncidenteMarcadores,"marcador",(this._listaMarcadores[d] as Incidente).marcador);
				(this._listaMarcadores[d] as Incidente).numIncidentes = arrMarcadorTemp.length;//UtilsGrid.conteoCampoX(arrMarcadorTemp, "marcador",(this._listaMarcadores[d] as Incidente).marcador);
				(this._listaMarcadores[d] as Incidente).numMarcadoresET = UtilsGrid.conteoCampoX(arrMarcadorTemp, "enTiempo","ET");
				(this._listaMarcadores[d] as Incidente).numMarcadoresFT = UtilsGrid.conteoCampoX(arrMarcadorTemp, "enTiempo","FT");
				
				if(_listaMarcadores[d].marcador == this.nuevoMarcadorAsignado){
				this.listaMarcadores.selectedIndex = d;
				this._listaIncidenteXMarcador = UtilsGrid.queryCampoX(this._listaIncidenteMarcadores, "marcador", nuevoMarcadorAsignado);
				
				if(nuevoMarcadorAsignado == "REFORMULACIÃN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_reformulacion;
				else if(nuevoMarcadorAsignado == "PROGRAMACIÃN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_programaciondecision;
				else if(nuevoMarcadorAsignado == "CAMBIO DE ORIGEN" )  imagenDMarcador = catalogoIconosGrid.getInstance().render_cambioorigen	;				
				else  imagenDMarcador = catalogoIconosGrid.getInstance().render_marcadorazul;
				
				}
				} 
				
				var finalLista:Incidente = new Incidente();
				this.totalmarcadores.text = this._listaMarcadores.length.toString();
				finalLista.ultimo = this._listaMarcadores.length.toString();
				this._listaMarcadores.addItem(finalLista);
				
				this.nuevoMarcador == false;
				} */
				
				if(_componenteArregloPies == null){
					_componenteArregloPies = new pqNetPiesChartDinamico();
					this.grpGraficas.addElement(_componenteArregloPies);
				}
				_componenteArregloPies.iniciarGraficas( _listaGraficas );
				
				
				// while para grafiva FT y ET
				/* while(temp1ETvsFT.length > 0 ){
				objeto = new Object();
				objeto.origen = temp1ETvsFT[0].enTiempo;
				objeto.total = 0;
				for( m = 0; m<temp1ETvsFT.length; m++){
				if( objeto.origen == temp1ETvsFT[m].enTiempo){
				objeto.total = objeto.total + 1;
				temp1ETvsFT.removeItemAt(m);
				m = m-1;
				}
				}
				datosGraficaETvsFT.addItem(objeto);
				} */
				
				// while para grafica ubicaciÃ³n 
				/* while(temp2Ubicacion.length > 0 ){
				objeto = new Object();
				objeto.ubicacion = temp2Ubicacion[0].ubicacion;
				objeto.total = 0;
				for( m = 0; m<temp2Ubicacion.length; m++){
				if( objeto.ubicacion == temp2Ubicacion[m].ubicacion){
				objeto.total = objeto.total + 1;
				temp2Ubicacion.removeItemAt(m);
				m = m-1;
				}
				}
				datosGraficaUbicacion.addItem(objeto);
				} */
				
				// while para grafica Redacto 
				/* while(temp3Redacto.length > 0 ){
				objeto = new Object();
				objeto.redacto = temp3Redacto[0].redacto;
				objeto.total = 0;
				for( m = 0; m<temp3Redacto.length; m++){
				if( objeto.redacto == temp3Redacto[m].redacto){
				objeto.total = objeto.total + 1;
				temp3Redacto.removeItemAt(m);
				m = m-1;
				}
				}
				datosGraficaRedacto.addItem(objeto);
				} */
				
				_totalFT = UtilsGrid.conteoCampoX(_arregloIncidente,"enTiempo","FT");
				_totalET = UtilsGrid.conteoCampoX(_arregloIncidente,"enTiempo","ET");
				
				if(_actualiza == true){
					_actualiza = false;
					cambiaView('gestion','');
				}
			}
			
			/// funcion que trae la informacioin para inspector
			public function set recibirGestion(_gestion:Gestion):void{
				var m:int = 0;
				if(_gestion != null){
					
					analisisGestion = new Gestion();
					analisisGestion = _gestion;
					existeProveedor = false;
					existeCliente = false;
					
					_listaFinalOrigenMultiple = new ArrayCollection();
					_listaOrigenMultiple = new ArrayCollection();
					
					this.cliente.selected = _gestion.impactoCliente;
					this.producto.selected = _gestion.impactoProducto;
					this.sistema.selected = _gestion.impactoSistema;
					this.comboxtipo.selectedItem = _gestion.tipo;
					this.problemaqqdccp.text = _gestion.problema;
					this.queinspectorqqdccp.text = _gestion.descripcion;
					this.quieninspectorqqdccp.text = _gestion.quien;
					this.dondeinspectorqqdccp.text = _gestion.lugar;
					this.cuandoinspectorqqdccp.text = _gestion.cuando;
					this.comoinspectorqqdccp.text = _gestion.como;
					this.porqueinspectorqqdccp.text = _gestion.causa;
					this.solucioninspectorqqdccp.text = _gestion.solucion;
					this.justificaciondecision.text =_gestion.justificacion;
					
					if(_gestion.procedimientos.length > 0){
						this.procedimientoasociado.selected = true;
						mostrarBoton();
					}else{
						this.procedimientoasociado.selected = false;
						this.asociarprocedimiento.width = 0 ;
					}
					if(_gestion.nombre_Proveedor != "ND"){
						this.proveedorasociado.selected = true;
						mostrarBoton();
						this.existeProveedor = true;
					}else{
						this.proveedorasociado.selected = false;
						this.asociarproveedor.width = 0;
					}
					if(_gestion.nombre_Cliente != "ND"){
						this.clienteasociado.selected = true;
						mostrarBoton();
						this.existeCliente = true;
					}else{
						this.clienteasociado.selected = false;
						this.asociarcliente.width = 0;
					}
					this._listaProcedimientos = _gestion.procedimientos;
					this._nombreProveedor = _gestion.nombre_Proveedor;
					this._nombreCliente = _gestion.nombre_Cliente;	
					this._nombreContacto = _gestion.nombreContacto;
					this._idContacto = _gestion.contacto;
					this._descripcionProducto = _gestion.nombre_Producto
					
					this._listaReferencias = _gestion.referencias;
					this._idGestion = _gestion.idGestion;
					this._idProveedor = _gestion.proveedor; 
					this._idProducto = _gestion.producto;
					
					if(_gestion.incidentesRelacionados.length >= 1){
						this.checkOrigen.selected = true;
						itemClickEvent();
					}
					
					this._listaFinalOrigenMultiple = _gestion.incidentesRelacionados;
					
					for(var d:int = 0 ; d<_universoAreaOrigen.length ; d++){  
						if(_universoAreaOrigen[d].valor == DatosGlobales.getInstance()._usuario.usuario){
							var objeto:CatalogoItem  = new CatalogoItem();
							objeto.valor = this._folioIncidente;
							objeto.subproceso = _universoAreaOrigen[d].subproceso;
							objeto.nombre = _universoAreaOrigen[d].nombre;
							objeto.primero = true;
							this._listaOrigenMultiple.addItem(objeto);
						}
					}
					
					for( d = 0 ; d<_universoAreaOrigen.length ; d++){
						for(m = 0 ; m<_gestion.incidentesRelacionados.length ; m++){
							if(_universoAreaOrigen[d].llave == _gestion.incidentesRelacionados[m].idEmpleado){
								objeto = new CatalogoItem();
								objeto.primero = new Boolean();
								objeto.llave = _universoAreaOrigen[d].llave;
								objeto.valor = "INC-" + _listaOrigenMultiple.length.toString() ;
								objeto.subproceso = _universoAreaOrigen[d].subproceso;
								objeto.nombre = _universoAreaOrigen[d].nombre; 
								objeto.idIncidente = _gestion.incidentesRelacionados[m].idIncidente;
								objeto.primero = false;
								this._listaOrigenMultiple.addItem(objeto);
							}
						}
					}
					
					for( m = 0 ; m<_gestion.incidentesRelacionados.length ; m++){
						if(_gestion.incidentesRelacionados[m].idEmpleado == 0){
							objeto = new CatalogoItem();
							objeto.primero = new Boolean();
							//objeto.llave = _universoAreaOrigen[d].llave;
							objeto.valor = "INC-" + _listaOrigenMultiple.length.toString() ;
							objeto.subproceso = " Origen Pendiente";
							objeto.nombre = " Pendiente"; 
							objeto.idIncidente = _gestion.incidentesRelacionados[m].idIncidente;
							objeto.primero = false;
							this._listaOrigenMultiple.addItem(objeto);
						}
					}
					
					objeto = new CatalogoItem();
					objeto.ultimo = (_listaOrigenMultiple.length - 1).toString();
					this._listaOrigenMultiple.addItem(objeto);
					
					/* analisisGestion.nombreContacto = this._popContactoSeleccionado.nombre;
					analisisGestion.contacto = _popContactoSeleccionado.idContacto; 
					*/   
					
					if(_gestion.aceptado == true){
						this.aceptar.selected = true;	
					}else{
						this.rechazar.selected = true;	
					}
				}else{
					//this.analisisGestion = new Gestion();
					this.cliente.selected = false;
					this.producto.selected = false;
					this.sistema.selected = false;
					this.comboxtipo.selectedIndex = 0;
					this.problemaqqdccp.text = "";
					this.queinspectorqqdccp.text = "";
					this.quieninspectorqqdccp.text = "";
					this.dondeinspectorqqdccp.text = "";
					this.cuandoinspectorqqdccp.text = "";
					this.comoinspectorqqdccp.text = "";
					this.porqueinspectorqqdccp.text = "";
					this.solucioninspectorqqdccp.text = "";
					this.justificaciondecision.text = "";
					this.procedimientoasociado.selected = false;
					this.asociarprocedimiento.width = 0 ;
					this.proveedorasociado.selected = false;
					this.asociarproveedor.width = 0;
					this.clienteasociado.selected = false;
					this.asociarcliente.width = 0;
					this.situacioninspector.text = "";
					this.queinspector.text = "";
					this.dondeinspector.text = "";
					this.cuandoinspector.text = "";
					this.comentariosinspector.text = "";
					this.areasOrigenIncidente.selectedIndex = -1;
					this.nombreGerenteIncidente.text = "";
					this.aceptar.selected = false;
					this.rechazar.selected = false;
					this._listaProcedimientos = new ArrayCollection();
					this._listaReferenciasMultiple = new ArrayCollection();
					
				}
			} 
			
			public function set recibeConfirmacionRegistro(registro:Number):void{
				if(banderaAlert != true ){
					alertaSingleton.show(catalogoAlertas.GESTION_CONF_guardoExitoso,catalogoAlertas.TIT_ADV_atencion,"salir","","","Continuar","Salir");	
				}
				this.banderaAlert = false;
			}
			
			public function set  recibeDelAlert(respuestaAlert:ResultAlert):void{
				if(respuestaAlert.botonSeleccionado == "Salir"){
					this.viewS.selectedChild = this.incidenteGestion;
					
					var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
					evt.usuario = DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
					dispatchEvent(evt);
					_actualiza = true;
					cambiaView('gestion','');
					this.incidentemultiple.selectedIndex = 0;	
					this.viewsReferencias.selectedIndex = 0;
					this.checkOrigen.selected = false;
					_boolPanelEdicionDesplegado = false;
					itemClickEvent();
				}
				if(respuestaAlert.botonSeleccionado == "Continuar" && respuestaAlert.vieneD == "salir"){
					for(var d:int = 0; d<_listaFinalOrigenMultiple.length ; d++){
						if(_listaFinalOrigenMultiple[d].idIncidente == listaincidente.selectedItem.idIncidente || _listaFinalOrigenMultiple[d].valor  == listaincidente.selectedItem.valor){
							
							this.queinspector.text = _listaFinalOrigenMultiple[d].descripcion ;
							this.dondeinspector.text = _listaFinalOrigenMultiple[d].lugar ;
							this.cuandoinspector.text = _listaFinalOrigenMultiple[d].cuando ;
							this.comentariosinspector.text = _listaFinalOrigenMultiple[d].comentarios ;
							this.situacioninspector.text = _listaFinalOrigenMultiple[d].situacionIdentificada ;
							this.areasOrigenIncidente.selectedItem = listaincidente.selectedItem.subproceso
							this._listaReferenciasMultiple = _listaFinalOrigenMultiple[d].referencias ;
							for( var a:int = 0 ; a<_universoAreaOrigen.length ; a++){
								if(_universoAreaOrigen[a].subproceso == this.areasOrigenIncidente.selectedItem){
									this.nombreGerenteIncidente.text = _universoAreaOrigen[a].nombre;
								}
							}
							registrado = false ;
							//this._numIncidenteMultiple = _listaFinalOrigenMultiple[d].idIncidente;
							//this.idViejoMultiple = event.currentTarget.selectedItem.llave;
							//this.idViejoMultiple = _listaFinalOrigenMultiple[d].idEmpleado;
							//this.valorViejo2 = listaincidente.selectedItem.valor;
							//this.valorViejo = listaincidente.selectedItem.idIncidente
						}
					}		
				}
				if(respuestaAlert.botonSeleccionado == "SI" && respuestaAlert.vieneD == "finalizarGestion"){
					finalizarAnalisis(respuestaAlert.botonSeleccionado);
					this.banderaAlert = true;
					if(_revisarComponente == true){
						_revisarComponente = false;
						alertaSingleton.show(catalogoAlertas.GESTION_ADV_faltaCompletarInformacion,catalogoAlertas.TIT_ADV_atencion,"","","","","");
						return;
					}else{
						var evto:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
						evto.usuario = DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
						dispatchEvent(evto);
						_actualiza = true;
						cambiaView('gestion','');
						this.incidentemultiple.selectedIndex = 0;	
						this.viewsReferencias.selectedIndex = 0;
						this.checkOrigen.selected = false;
						_boolPanelEdicionDesplegado = false;
						itemClickEvent();
					}
				}
				
				if(respuestaAlert.vieneD == "eliminarIncidenteMultiple" && respuestaAlert.botonSeleccionado == "SI"){
					this.eliminar = "borrar";
					this.listaincidente.selectedItem.eliminado = true;
					borrarReferencia();
				}
				
				if(respuestaAlert.vieneD == "salInspector" && respuestaAlert.botonSeleccionado == "SI"){
					guardaAnalisis();
					//cambiaView('gestion','');
				}
				if(respuestaAlert.vieneD == "salInspector" && respuestaAlert.botonSeleccionado == "NO"){
					cambiaView('gestion','');
					this.incidentemultiple.selectedIndex = 0;	
					this.viewsReferencias.selectedIndex = 0;
					this.checkOrigen.selected = false;
					_boolPanelEdicionDesplegado = false;
					this.existeProveedor = false;
					this.existeCliente = false;
					itemClickEvent();
				}
			}
			
			public function set recibeConfirmacion(dato:Number):void{
				if( isNaN( dato ) ){
					return;
				}else{				
					if(banderaAlert != true ){
						alertaSingleton.show(catalogoAlertas.GESTION_CONF_guardoExitoso,catalogoAlertas.TIT_ADV_atencion,"salir","","","Continuar","Salir");
					}
					this.banderaAlert = false;
				}
			}
			
			public function set contactoSeleccionado(contacto:Object):void{
				this._popContactoSeleccionado = contacto.seleccion[0];
				this._nombreCliente = contacto.seleccion[0].empresa; 	
			}
			
			public function set recibeEmpleadosHablitados(lista:ArrayCollection):void{
				_universoAreaOrigen = lista;
				for(var d:int = 0; d<lista.length ; d++){
					_areaOrigen.addItem(lista[d].subproceso);	
				}
				this.areasOrigenIncidente.dataProvider = this._areaOrigen; 
			}
			
			public function set recibeListaReferencia(referencias:Object):void{
				
				if(referencias.vieneD == "Registro"){
					_listaReferenciasMultiple = new ArrayCollection();
					this._listaReferenciasMultiple = referencias.referencia;
				}else if(referencias.vieneD == "Analisis"){
					_listaReferencias = new ArrayCollection();
					this._listaReferencias = referencias.referencia;
				}
			}
			
			public function set recibirCambioOrigen(cambioDORigen:Number):void{
				if( isNaN( cambioDORigen ) ){
					return;
					Alert("Error");
				}else{
					PopUpManager.removePopUp(popCambioOrigen);	
					this._actualiza = true;
					var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
					evt.usuario = DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
					dispatchEvent(evt);
					
					var mensaje:AsyncMessage = new AsyncMessage();
					mensaje.headers["Usuario"] = DatosGlobales.getInstance()._usuario.usuario;
					mensaje.body = "eventoCambioDeOrigen";
					this.productorDocSalientes.send( mensaje );
					
					if(this.grdIncidentesMarcador.selectedIndex > 0){
						this.actualizarMarcador = true;
						this.verColumna = true;
					}
					
				} 
			}
			
			public function set registroReformulacion(registro:int):void{
				if(registro > 0){
					this._actualiza = true;
					this.actualizarMarcador = true;
					this.verColumna = true;
					var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
					evt.usuario = DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
					dispatchEvent(evt);
					
					var mensaje:AsyncMessage = new AsyncMessage();
					mensaje.headers["Usuario"] = DatosGlobales.getInstance()._usuario.usuario;
					mensaje.body = "eventoPopReformulacion";
					this.productorDocSalientes.send( mensaje );
				}
			}
			
			public function set recibirMarcadoresAgrupados(marcador:Boolean):void{
				this._listaMarcadoresAgrupados = new ArrayCollection();
				this._listaMarcadoresDragDrop = new ArrayCollection();
				//this._listaMarcadores = new ArrayCollection();
				
				var evt:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.CARGA_LISTA_DE_INCIDENTES);
				evt.usuario = DatosGlobales.getInstance()._usuario.usuario; //"OCardona";  
				dispatchEvent(evt); 
				
				cambiaView('gestion','');
				
				this.nuevoMarcador = true;
			}
			
			private function cuantasPalabrasInspec(event:Event):void {
				this.situacioninspector.maxChars = new int();
				//var caracteres:uint = event.target.length;
				var caracteres:uint = situacioninspector.text.length;
				palabrasinspector = cuentaPalabras(situacioninspector.text);
				if(palabrasinspector == 51){
					this.situacioninspector.maxChars = caracteres;
				}else{
					this.contadordpalabras2.text = palabrasinspector.toString(10);
				} 
			}
			
			protected function listaMarcadoresDragDrop(event:DragEvent):void{
				if(_listaMarcadoresDragDrop.length == 0){
					_listaMarcadoresDragDrop = new ArrayCollection(this.grdIncidentesMarcador.selectedItems);
				}	
				for(var d:int = 0 ; d<_listaMarcadoresDragDrop.length ; d++){
					if(this.listaMarcadores.selectedItem.marcador != this.nuevoMarcadorAsignado ){  // "REFORMULACIÃ³N" "PROGRAMACIÃN" "CAMBIO DE ORIGEN"
						if(this._listaMarcadoresDragDrop[d].marcador == "REFORMULACIÃN" || this._listaMarcadoresDragDrop[d].marcador == "PROGRAMACIÃN" || this._listaMarcadoresDragDrop[d].marcador == "CAMBIO DE ORIGEN" ){
							alertaSingleton.show(catalogoAlertas.GESTION_ERR_operacioErronea,catalogoAlertas.TIT_ADV_atencion,"","","","","");
						}else{
							if(nuevoMarcadorAsignado == "PROGRAMACIÃN" || nuevoMarcadorAsignado == "REFORMULACIÃN" || nuevoMarcadorAsignado == "CAMBIO DE ORIGEN" ){
								alertaSingleton.show(catalogoAlertas.GESTION_ERR_operacioErronea,catalogoAlertas.TIT_ADV_atencion,"","","","","");
							}else{
								event.preventDefault();
								this._listaMarcadoresDragDrop[d].marcador = this.nuevoMarcadorAsignado;	
							}
						}
					}
				}
				
				var evto:EventoGestionIncidente = new EventoGestionIncidente(EventoGestionIncidente.GUARDA_LISTA_MARCADORES);
				evto.listaMarcadores = _listaMarcadoresDragDrop;
				dispatchEvent(evto);
				
			}
			
			protected function tablaGrid_resizeHandler_Marcador():void
			{
				if(verColumna == true){
					
					this.grdIncidentesMarcador.porcentajesColumnasPq = [1,0,4,15,15,18,10,10,9,5,5,0,0,5];
					//(this.grdIncidentesMarcador.columns[4] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.20);//situacion identificada
					//(this.grdIncidentesMarcador.columns[2] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.15);//folio
					//(this.grdIncidentesMarcador.columns[10] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);//reformulacion
					//(this.grdIncidentesMarcador.columns[11] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);//cambio de origen
					//(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);//check
				}else{
					this.grdIncidentesMarcador.porcentajesColumnasPq = [1,3,4,8,8,8,8,9,5,5,5,5,5,5];
					//(this.grdIncidentesMarcador.columns[4] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.15);//situacion identificada
					//(this.grdIncidentesGestion.columns[2] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.15);//folio   ************
					//(this.grdIncidentesMarcador.columns[10] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);//reformulacion
					//(this.grdIncidentesMarcador.columns[11] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);//cambio de origen
					//(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);//check  ***********
					
				}
				//(this.grdIncidentesMarcador.columns[1] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);//#
				//(this.grdIncidentesMarcador.columns[3] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.12);//incidente asociado
				//(this.grdIncidentesMarcador.columns[5] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);//redacto
				//(this.grdIncidentesMarcador.columns[6] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);//en espera desde
				//(this.grdIncidentesMarcador.columns[7] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);//dias de atraso
				//(this.grdIncidentesGestion.columns[8] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.05);//situacion
				//(this.grdIncidentesMarcador.columns[9] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);//referencia
				//(this.grdIncidentesMarcador.columns[12] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.05);//inspector
				//(this.grdIncidentesMarcador.columns[8] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);//situacion
				//(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);//check
				//(this.grdIncidentesMarcador.columns[2] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);//folio
				//(this.grdIncidentesMarcador.columns[0] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);//check
				//(this.grdIncidentesMarcador.columns[2] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.10);//folio
				//(this.grdIncidentesMarcador.columns[4] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.20);//situacion
				//(this.grdIncidentesMarcador.columns[10] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.00);//reformulacion
				//(this.grdIncidentesMarcador.columns[11] as DataGridColumn).width = (this.grdIncidentesMarcador.width * 0.04);//cambio de origen
			}
			
			protected function tablaGrid_resizeHandler():void
			{
				(this.grdIncidentesGestion.columns[0] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.01);//check
				(this.grdIncidentesGestion.columns[1] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.04);//check
				(this.grdIncidentesGestion.columns[2] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.04);//#
				(this.grdIncidentesGestion.columns[3] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.10);//folio
				(this.grdIncidentesGestion.columns[4] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.10);//incidente asociado
				(this.grdIncidentesGestion.columns[5] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.14);//situacion antes 16
				(this.grdIncidentesGestion.columns[6] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.10);//redacto
				(this.grdIncidentesGestion.columns[7] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.10);//en espera desde
				(this.grdIncidentesGestion.columns[8] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.10);//dias de atraso
				(this.grdIncidentesGestion.columns[9] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.10);//situacion
				(this.grdIncidentesGestion.columns[10] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.04);//referencia
				(this.grdIncidentesGestion.columns[11] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.04);//reformulacion
				(this.grdIncidentesGestion.columns[12] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.04);//cambio de origen
				(this.grdIncidentesGestion.columns[13] as DataGridColumn).width = (this.grdIncidentesGestion.width * 0.03);//inspector
			}
			
			protected function tablaGestion_resizeHandler():void
			{
				(this.grdGestion.columns[0] as DataGridColumn).width = (this.grdGestion.width * 0.05);//#
				(this.grdGestion.columns[1] as DataGridColumn).width = (this.grdGestion.width * 0.10);//foio
				(this.grdGestion.columns[2] as DataGridColumn).width = (this.grdGestion.width * 0.10);//ultimo incidente
				(this.grdGestion.columns[3] as DataGridColumn).width = (this.grdGestion.width * 0.25);//situacion identificada
				(this.grdGestion.columns[4] as DataGridColumn).width = (this.grdGestion.width * 0.10);//redacto
				(this.grdGestion.columns[5] as DataGridColumn).width = (this.grdGestion.width * 0.10);//ubicacion 
				(this.grdGestion.columns[6] as DataGridColumn).width = (this.grdGestion.width * 0.10);//en espera desde
				(this.grdGestion.columns[7] as DataGridColumn).width = (this.grdGestion.width * 0.10);//dias de atraso
				(this.grdGestion.columns[8] as DataGridColumn).width = (this.grdGestion.width * 0.05);//situacion
			}
			
			private function CambioBoton(event:IndexChangeEvent):void{
				if(this.miButtonBar.selectedItem.label == "GestiÃ³n"){
					this.listadoGestion.selectedIndex = 0;
				}
				if(this.miButtonBar.selectedItem.label == "AcciÃ³n"){
					this.listadoGestion.selectedIndex = 1;
				}
				if(this.miButtonBar.selectedItem.label == "VerificaciÃ³n"){
					this.listadoGestion.selectedIndex = 2;
				}
				if(this.miButtonBar.selectedItem.label == "PonderaciÃ³n"){
					this.listadoGestion.selectedIndex = 3;
				}
				if(this.miButtonBar.selectedItem.label == "RECHAZOS"){
					this.listadoGestion.selectedIndex = 4;
				}
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" paddingLeft="20" paddingBottom="10" paddingRight="20" paddingTop="-10">
		<mx:ViewStack id="viewS" width="100%" height="100%" creationPolicy="all">	
			
			<s:NavigatorContent id="gestion" width="100%" height="100%">
				<s:VGroup width="100%" height="100%">
					<s:HGroup width="100%">
						<s:Spacer width="100%"/>
						<!--<s:TabBar dataProvider="{this.listadoGestion}" id="tabBarGestion" />-->
						<s:ButtonBar change="CambioBoton(event)" id="miButtonBar" height="36" width="100%" skinClass="skins.botoneras.botoneraBandera.skinBotoneraBandera" dataProvider="{this.botoneraPrincipal}">
							<!--	<s:ArrayCollection source="{this.botoneraPrincipal}"/>-->
							<!--	<s:ArrayCollection>
							<fx:String>GestiÃ³n</fx:String>
							<fx:String>AcciÃ³n</fx:String>
							<fx:String>VerificaciÃ³n</fx:String>
							<fx:String>PonderaciÃ³n</fx:String>
							<fx:String>RECHAZOS</fx:String>
							</s:ArrayCollection>-->
						</s:ButtonBar>
						<s:Spacer width="100%"/>
					</s:HGroup>	
					<otros:divisionHueca width="100%"/>
					
					<mx:ViewStack id="listadoGestion" width="100%" height="100%" creationPolicy="all">
						
						<s:NavigatorContent label="GestiÃ³n" width="100%" height="100%" >
							<s:VGroup height="100%" width="100%" id="gestionPrueba">
								<s:HGroup width="100%" >
									<label:labelTitulo_Otros text="GestiÃ³n" paddingTop="13"/>	
									<s:Spacer width="100%"/>
									<!--<s:Button styleName="botonNegroOld" label="Gestion" click="cambiaView('gestion','')"/>-->
									<flechasiguiente:botonFlechaSiguiente click="cambiaView('gestion','')"/> 
								</s:HGroup>
								<otros:divisionHueca width="100%"/>
								<s:HGroup width="100%">
									<label:labelSubtitulo text="Listado"/>
									<s:Spacer width="100%"/>
									<s:Label fontWeight="bold" text="{this._arregloIncidente.length.toString()} {this._arregloIncidente.length == 1 ? 'Incidente' : 'Incidentes'}  .  {_totalET} ET  .   {_totalFT} FT" 
											 verticalAlign="bottom" fontFamily="Bank Gothic" fontSize="20"/>
								</s:HGroup>	
								<otros:divisionGruesa width="100%"/>
								<s:HGroup width="100%" height="100%">
									<pqNet:dataGridPqNet width="100%" height="100%" id="grdGestion" resize="tablaGestion_resizeHandler()" horizontalScrollPolicy="auto" variableRowHeight="true">
										<pqNet:columns>
											<mx:DataGridColumn headerText="#" dataField="numFila" fontSize="12"/>
											<mx:DataGridColumn headerText="FOLIO" dataField="folio" fontSize="12"/>
											<mx:DataGridColumn headerText="Ãltimo incidente asociado" dataField="folioIncidenteRelacionado" textAlign="center"  fontSize="12" >
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																	
																	import skins.catalogos.catalogoColores;
																]]>
															</fx:Script>
															<s:Label text="{(data as Incidente).folioIncidenteRelacionado}" color="0x{catalogoColores.LABEL_ROJO}" horizontalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="SituaciÃ³n identificada" dataField="situacionIdentificada"  textAlign="center"  fontSize="12"/>
											<mx:DataGridColumn headerText="RedactÃ³" dataField="redacto" fontSize="12"/>
											<mx:DataGridColumn headerText="UbicaciÃ³n" dataField="ubicacion"  />
											<mx:DataGridColumn headerText="En espera desde" dataField="fechaFormato"  fontSize="12"/>
											<mx:DataGridColumn headerText="DÃ­as de atraso" dataField="diasAtraso"  fontSize="12"/>
											<mx:DataGridColumn headerText="SituaciÃ³n" id="situacionGestion" dataField="enTiempo"  fontSize="12">
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																	[Bindable]
																	private var colorVerde:uint = 0x70a047;
																	[Bindable]
																	private var colorRojo:uint = 0xd10c0c;
																	
																]]>
															</fx:Script>
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<s:Label text="{(data as Incidente).enTiempo}" color="{(data as Incidente).enTiempo == 'ET'? this.colorVerde: this.colorRojo}"  horizontalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<!--<mx:DataGridColumn headerText="idGestion" dataField="idGestiono" width="220"/>-->
										</pqNet:columns>
									</pqNet:dataGridPqNet>
								</s:HGroup>
								<otros:divisionGruesa width="100%"/>
								<s:HGroup width="100%" height="100%" paddingTop="35" id="grpGraficas" >
									
									<!--<s:VGroup width="100%" height="100%">
									<mx:PieChart width="100%" height="100%" showDataTips="true" id="graficoPieETvsFT"  dataProvider="{this.datosGraficaETvsFT}" itemClick="pieChart_itemClick(event)">
									<mx:series>
									<graficas:pieSeriesVS field="total" id="pieVsETvsFT" nameField="origen" explodeRadius="0"/>
									</mx:series>
									</mx:PieChart>
									<label:labelSubtitulo textAlign="center" text="ET vs FT" width="100%" height="30%" verticalAlign="middle"/>
									</s:VGroup>
									
									<s:VGroup width="100%" height="100%">
									<mx:PieChart id="graficoPieUbicacion" dataProvider="{this.datosGraficaUbicacion}" showDataTips="true" width="100%" height="100%" itemClick="pieChart_itemClick(event)">
									<mx:series>
									<graficas:pieSeriesPqNet field="total" id="pieUbicacion" nameField="ubicacion" explodeRadius="0" />
									</mx:series>
									</mx:PieChart>
									<label:labelSubtitulo textAlign="center" text="UbicaciÃ³n" width="100%" height="30%" verticalAlign="middle"/>
									</s:VGroup>
									
									<s:VGroup width="100%" height="100%">
									<mx:PieChart showDataTips="true" width="100%" height="100%" id="graficoPieRedacto" dataProvider="{this.datosGraficaRedacto}" itemClick="pieChart_itemClick(event)">
									<mx:series>
									<graficas:pieSeriesPqNet field="total" id="pieOrigenRedacto" nameField="redacto" explodeRadius="0" />
									</mx:series>
									</mx:PieChart>
									<label:labelSubtitulo  textAlign="center" text="RedactÃ³" width="100%" height="30%" verticalAlign="middle"/>
									</s:VGroup>-->
								</s:HGroup>
								<otros:divisionHueca width="100%"/>
							</s:VGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="AcciÃ³n" width="100%" height="100%"  id="viewAccion" visible="false"> 
							
						</s:NavigatorContent>
						<s:NavigatorContent label="VerificaciÃ³n" width="100%" height="100%"  visible="false"> 
							
						</s:NavigatorContent>
						<s:NavigatorContent label="PonderaciÃ³n" width="100%" height="100%" > 
							
						</s:NavigatorContent>
						<s:NavigatorContent label="RECHAZOS" width="100%" height="100%" > 
							
						</s:NavigatorContent>
						<s:NavigatorContent  width="100%" height="100%" > 
							
						</s:NavigatorContent>
						
					</mx:ViewStack>
				</s:VGroup>	
			</s:NavigatorContent>	
			
			<s:NavigatorContent id="incidenteGestion"  width="100%" height="100%">
				<s:VGroup width="100%" height="100%">
					<s:HGroup width="100%">
						<!--<s:Button styleName="botonNegroOld" label="salir" click="cambiaView('incidenteGestion','')"/>-->
						<flecharegresa:botonFlechaRegresa click="cambiaView('incidenteGestion','')" />
						<s:Spacer width="100%"/>
						<!--<s:TabBar dataProvider="{this.incidente}" change="cambiaGraficas(event)"  />-->
						<s:ButtonBar id="buttonBarIncidente" change="cambiaGraficas(event)" skinClass="skins.botoneras.botoneraGris.skinbotoneraGris" dataProvider="{_botoneraGestionIncidente}" selectedIndex="0"/>
						
					</s:HGroup >	
					<otros:divisionHueca width="100%"/>
					
					<mx:ViewStack id="viewStackincidente" width="100%" height="100%" creationPolicy="all">				
						
						<s:NavigatorContent label="Incidentes" width="100%" height="100%" >
							<s:VGroup width="100%" height="100%" >
								<s:HGroup width="100%" paddingTop="5" paddingBottom="10">
									<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_folder}"/>
									<label:labelTitulo_Otros text="Incidentes a gestionar"/>
									<s:Spacer width="100%"/>
									<label:labelSubtitulo text="[ GestiÃ³n ]" color="#999999" fontFamily="Bank Gothic" fontSize="25"/> 
								</s:HGroup>
								<otros:divisionHueca width="100%"/>
								<s:HGroup width="100%" paddingTop="5" paddingBottom="10">
									<label:labelSubtitulo text="Listado"/>
									<s:Spacer width="100%"/>
									<s:Label fontFamily="Bank Gothic" fontSize="20" fontWeight="bold" text="{this._listaIncidenteAnalisis.length.toString()} {this._listaIncidenteAnalisis.length == 1 ? 'Incidente' : 'Incidentes'}  .   {_totalAnalisisET} ET  .   {_totalAnalisisFT} FT" verticalAlign="bottom"/>
								</s:HGroup>	
								<otros:divisionGruesa width="100%"/>
								<s:HGroup width="100%" height="100%">
									<pqNet:dataGridPqNet width="100%" height="100%" id="grdIncidentesGestion" itemClick="itemSeleccionado(event)" 
														 horizontalScrollPolicy="auto" resize="tablaGrid_resizeHandler()" variableRowHeight="true">
										<pqNet:columns>
											<mx:DataGridColumn />
											
											<mx:DataGridColumn headerText="CheckBox" dataField="checkBox" width="110" >
												<mx:headerRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable] public var normalIcon:Class;            
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_checkboxgrande;
																	}
																]]>
															</fx:Script>
															<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable]
																	private var normalIcon:Class;
																	[Bindable]
																	private var hoveredIcon:Class;
																	[Bindable]
																	private var seleccionado:Boolean;
																	
																	override public function set data(value:Object):void{
																		super.data = value;
																		if(data.checkBox == false){
																			this.seleccionado = false;
																		}else{
																			this.seleccionado = true;
																		}		
																	}
																]]>
															</fx:Script>
															
															<!--<s:states>
															<s:State name="normal"/>
															<s:State name="hovered"/>
															<s:State name="selected"/>
															</s:states>-->
															<s:CheckBox id="marcadorCheck" selected="{this.seleccionado}" horizontalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="#" dataField="numFila">
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<s:Label text="{(this.data.numFila > 0 ? this.data.numFila: this.data.numFila * -1)}" horizontalCenter="0" />
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="FOLIO" dataField="folio" width="220" fontFamily="Tahoma" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce">
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																	
																	import skins.catalogos.catalogoIconosGrid;
																]]>
															</fx:Script>
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<s:HGroup horizontalAlign="right" horizontalCenter="0" verticalAlign="middle">
																<s:Label text="{(data as Incidente).folio}" />
																<s:Image source="{catalogoIconosGrid.getInstance().render_relijitonegro}" />
															</s:HGroup>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Ãltimo incidente asociado" dataField="folioIncidenteRelacionado" width="220" fontFamily="Tahoma" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce" >
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																	
																	import skins.catalogos.catalogoColores;
																]]>
															</fx:Script>
															<s:Label text="{(data as Incidente).folioIncidenteRelacionado}" color="0x{catalogoColores.LABEL_ROJO}" horizontalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="SituaciÃ³n identificada" dataField="situacionIdentificada"  fontFamily="Tahoma" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce" itemRenderer="skins.skin.datagrid.pqNet.componentes.VerMasRenderer"/>
											<mx:DataGridColumn headerText="RedactÃ³" dataField="redacto" fontFamily="Tahoma" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce"/>
											<mx:DataGridColumn headerText="En espera desde" dataField="fechaFormato" width="150" fontFamily="Tahoma" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce"/>
											<mx:DataGridColumn headerText="DÃ­as de atraso" dataField="diasAtraso" width="140" fontFamily="Tahoma" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce"/>
											<mx:DataGridColumn headerText="SituaciÃ³n" dataField="enTiempo" width="140" fontFamily="Tahoma" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce">
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																	
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable]
																	private var colorVerde:uint = 0x70a047;
																	[Bindable]
																	private var colorRojo:uint = 0xd10c0c;
																	
																]]>
															</fx:Script>
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<s:Label text="{(data as Incidente).enTiempo}" color="{(data as Incidente).enTiempo == 'ET'? colorVerde: colorRojo}" horizontalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Clip" dataField="origen" width="90" >
												<mx:headerRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable] public var normalIcon:Class;            
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_clipsitonegro;
																	}
																]]>
															</fx:Script>
															<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable]
																	private var normalIcon:Class;
																	[Bindable]
																	private var hoveredIcon:Class;
																	
																	override public function set data(value:Object):void{
																		super.data = value;
																		if(data.referencias == null || data.referencias.length == 0){
																			this.normalIcon = catalogoIconosGrid.getInstance().render_clipsitonegro;																	
																		}else{
																			this.normalIcon = catalogoIconosGrid.getInstance().render_clipsito;	
																		}
																		
																	}
																]]>
															</fx:Script>
															
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<mx:Image source="{normalIcon}"    horizontalCenter="0" />
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Reformulacion" dataField="origen" width="90">
												<mx:headerRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable] public var normalIcon:Class;            
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_reformulacionnegro;
																	}
																]]>
															</fx:Script>
															<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable]
																	private var normalIcon:Class;
																	[Bindable]
																	private var hoveredIcon:Class;
																	
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_reformulacion;
																		
																	}
																]]>
															</fx:Script>
															
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<mx:Image source="{normalIcon}"  horizontalCenter="0" />
															<!--<s:Button styleName="botonNegroOld" label="reformulacion"/>-->
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="CambiodeOrigen" dataField="origen" width="90">
												<mx:headerRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable] public var normalIcon:Class;            
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_cambioorigennegro;
																	}
																]]>
															</fx:Script>
															<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable]
																	private var normalIcon:Class;
																	[Bindable]
																	private var hoveredIcon:Class;
																	
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_cambioorigen;
																		
																	}
																]]>
															</fx:Script>
															
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<mx:Image source="{normalIcon}"  horizontalCenter="0" />
															<!--<s:Button styleName="botonNegroOld" label="cambioDeOrigen"/>-->
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Inspector" dataField="origen" >
												<mx:headerRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable] public var normalIcon:Class;            
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_inspectornegro;
																	}
																]]>
															</fx:Script>
															<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
														</s:MXItemRenderer>
													</fx:Component>
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<s:MXItemRenderer autoDrawBackground="false">
															<fx:Script>
																<![CDATA[
																	
																	import skins.catalogos.catalogoIconosGrid;
																	[Bindable]
																	private var normalIcon:Class;
																	[Bindable]
																	private var hoveredIcon:Class;
																	
																	override public function set data(value:Object):void{
																		super.data = value;
																		this.normalIcon = catalogoIconosGrid.getInstance().render_inspector;
																	}
																	
																]]>
															</fx:Script>
															
															<s:states>
																<s:State name="normal"/>
																<s:State name="hovered"/>
																<s:State name="selected"/>
															</s:states>
															<mx:Image source="{normalIcon}"  horizontalCenter="0" />
															<!--<s:Button styleName="botonNegroOld" label="inspector" />-->
														</s:MXItemRenderer>
													</fx:Component>
												</mx:itemRenderer>
											</mx:DataGridColumn>
										</pqNet:columns>	
									</pqNet:dataGridPqNet>
								</s:HGroup>
								<otros:divisionGruesa width="100%"/>
								<s:HGroup width="100%"  height="8%">
									<!--<s:Button styleName="botonNegroOld" label="Todo"/>-->
									<pqNet1:botonPqNetLargo label="Todo"  icono="todo" click="seleccionaTodoCheckBox('incidente')"/>
									<s:Spacer width="100%"/>
									<!--<s:Button styleName="botonNegroOld" label="Agrupar"/>-->
									<pqNet1:botonPqNetLargo label="Agrupar" icono="marcadoresAgrupar" click="mostrarPopUp('marcadores')"/>
								</s:HGroup>
							</s:VGroup>
						</s:NavigatorContent>
						
						<s:NavigatorContent label="Marcadores" width="100%" height="100%" >
							<s:VGroup width="100%" height="100%">
								<s:HGroup width="100%" paddingTop="10" paddingBottom="10">
									<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_marcadores}"/>
									<label:labelTitulo_Otros text="Marcadores"/>
									<s:Spacer width="100%"/>
									<label:labelTitulo_Otros text="[ GestiÃ³n ]" color="#999999"/> 
								</s:HGroup>
								<otros:divisionHueca width="100%"/>
								<s:HGroup width="100%" paddingTop="5" paddingBottom="5">
									<s:Label id="totalmarcadores" textAlign="right" fontWeight="bold" fontFamily="Bank Gothic" fontSize="20"/>
									<label:labelSubtitulo text="MARCADORES" />
									<s:Label id="lblpruebadrop" fontFamily="Tahoma" fontWeight="bold" fontSize="15"/>
									<s:Spacer width="100%"/>
									<!--<s:Label fontFamily="Bank Gothic" fontSize="20" fontWeight="bold" text="{this._listaIncidenteAnalisis.length.toString()} Incidentes  .   {_totalET} ET  .   {_totalFT} FT"  verticalAlign="bottom"/>-->
									<s:Label fontWeight="bold" fontFamily="Bank Gothic" fontSize="20" text="{this.marcadorNumeroIncidente} {this.marcadorNumeroIncidente == 1 ? 'Incidente': 'Incidentes'}  Â·  {this.marcadorPrincipalET} ET  Â·   {this.marcadorPrincipalFT} FT"  verticalAlign="bottom" />
								</s:HGroup>	
								<otros:divisionGruesa width="100%"/>
								<s:HGroup width="100%" height="100%">
									<s:List height="100%" width="30%" id="listaMarcadores" borderVisible="false" dataProvider="{_listaMarcadores}"  change="verListaIncidenteXMarcador(event)" dragDrop="listaMarcadoresDragDrop(event)"
											dropEnabled="true" fontFamily="Bank Gothic" fontSize="12"
											itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.gestion.ListaMarcadores"/>
									<otros:VDivisionHueca height="100%"/>
									<s:VGroup width="100%" height="100%" paddingLeft="10">
										<s:HGroup width="100%" paddingTop="5" paddingBottom="5" >
											<s:Label fontFamily="Tahoma" fontSize="20" fontStyle="normal" fontWeight="bold" color="0x{catalogoColores.LABEL_CASI_NEGRO}" id="marcadorseleccionado"
													 text="{this.nombreMarcador}   :   {this.numeroDIncidentes} {this.numeroDIncidentes == 1 ? 'Incidente' : 'Incidentes'}  Â·   {this.marcadorET}   ET  Â·   {this.marcadorFT}   FT "/>
											<s:Spacer width="100%"/>	
											<s:Image source="{this.imagenDMarcador}"  id="imagenMarcador"/>
										</s:HGroup>	
										<otros:divisionHueca width="100%"/>
										
										<pqNet:dataGridPqNet width="100%" height="100%" id="grdIncidentesMarcador" itemClick="itemSeleccionado(event)" dataProvider="{_listaIncidenteXMarcador}" horizontalScrollPolicy="auto" 
															 dragEnabled="true" dragMoveEnabled="true" dragStart="copiaSeguridadDataGrid()" allowDragSelection="true" allowMultipleSelection="true" variableRowHeight="true">  <!--resize="tablaGrid_resizeHandler_Marcador()"-->
											<pqNet:columns>
												<mx:DataGridColumn/>
												<mx:DataGridColumn headerText="CheckBox" dataField="checkBox" id="checkbox">
													<mx:headerRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable] public var normalIcon:Class;            
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_checkboxgrande;
																		}
																	]]>
																</fx:Script>
																<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:headerRenderer>
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable]
																		private var normalIcon:Class;
																		[Bindable]
																		private var hoveredIcon:Class;
																		[Bindable]
																		private var seleccionado:Boolean;
																		
																		override public function set data(value:Object):void{
																			super.data = value;
																			if(data.checkBox == false){
																				this.seleccionado = false;
																			}else{
																				this.seleccionado = true;
																			}		
																		}
																	]]>
																</fx:Script>
																
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<s:CheckBox id="marcadorCheck" selected="{this.seleccionado}" horizontalCenter="0"/>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="#" dataField="numFila" fontSize="12" >
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<s:Label text="{(this.data.numFila > 0 ? this.data.numFila: this.data.numFila * -1)}"  horizontalCenter="0" />
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="FOLIO" dataField="folio" fontFamily="Bank Gothic" fontSize="12">
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																		
																		import skins.catalogos.catalogoIconosGrid;
																	]]>
																</fx:Script>
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<s:HGroup horizontalAlign="right" horizontalCenter="0" verticalAlign="middle">
																	<s:Label text="{(data as Incidente).folio}" />
																	<s:Image source="{catalogoIconosGrid.getInstance().render_relijitonegro}" />
																</s:HGroup>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="Ãltimo incidente asociado" dataField="folioIncidenteRelacionado" fontSize="12"  headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce">
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																		
																		import skins.catalogos.catalogoColores;
																	]]>
																</fx:Script>
																<s:Label text="{(data as Incidente).folioIncidenteRelacionado}" color="0x{catalogoColores.LABEL_ROJO}" horizontalCenter="0"/>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="SituaciÃ³n identificada" dataField="situacionIdentificada" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce" itemRenderer="skins.skin.datagrid.pqNet.componentes.VerMasRenderer"/>
												<mx:DataGridColumn headerText="RedactÃ³" dataField="redacto" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce"/>
												<mx:DataGridColumn headerText="En espera desde" dataField="fechaFormato" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce"/>
												<mx:DataGridColumn headerText="DÃ­as de atraso" dataField="diasAtraso" fontSize="12" headerRenderer="skins.skin.datagrid.pqNet.componentes.HeaderRendererCatorce"/>
												<mx:DataGridColumn headerText="SituaciÃ³n" dataField="enTiempo" fontSize="12">
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.Incidente;
																		
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable]
																		private var colorVerde:uint = 0x70a047;
																		[Bindable]
																		private var colorRojo:uint = 0xd10c0c;
																		
																	]]>
																</fx:Script>
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<s:Label text="{(data as Incidente).enTiempo}" color="{(data as Incidente).enTiempo == 'ET'? colorVerde: colorRojo}"  horizontalCenter="0"/>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="Clip" dataField="origen" >
													<mx:headerRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable] public var normalIcon:Class;
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_clipsitonegro;
																		}
																	]]>
																</fx:Script>
																<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:headerRenderer>
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable]
																		private var normalIcon:Class;
																		[Bindable]
																		private var hoveredIcon:Class;
																		
																		override public function set data(value:Object):void{
																			super.data = value;
																			if(data.referencias == null || data.referencias.length == 0){
																				this.normalIcon = catalogoIconosGrid.getInstance().render_clipsitonegro;																	
																			}else{
																				this.normalIcon = catalogoIconosGrid.getInstance().render_clipsito;	
																			}	
																			this.hoveredIcon = catalogoIconosGrid.getInstance().render_clipsitoblanco;// cambiar
																		}
																	]]>
																</fx:Script>
																
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<mx:Image source="{normalIcon}" horizontalCenter="0" />
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="Reformulacion" dataField="origen" id="reformulacion">
													<mx:headerRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable] public var normalIcon:Class;            
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_reformulacionnegro;
																		}
																	]]>
																</fx:Script>
																<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0" />
															</s:MXItemRenderer>
														</fx:Component>
													</mx:headerRenderer>
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable]
																		private var normalIcon:Class;
																		[Bindable]
																		private var hoveredIcon:Class;
																		
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_reformulacion;
																			this.hoveredIcon = catalogoIconosGrid.getInstance().render_reformulacionblanco;
																		}
																	]]>
																</fx:Script>
																
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<mx:Image source="{normalIcon}"  horizontalCenter="0" />
																<!--<s:Button styleName="botonNegroOld" label="reformulacion"/>-->
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="CambiodeOrigen" dataField="origen" id="cambiodeorigen">
													<mx:headerRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable] public var normalIcon:Class;            
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_cambioorigennegro;
																		}
																	]]>
																</fx:Script>
																<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:headerRenderer>
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable]
																		private var normalIcon:Class;
																		[Bindable]
																		private var selectedIcon:Class;
																		[Bindable]
																		private var hoveredIcon:Class;
																		
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_cambioorigen;
																			this.selectedIcon = catalogoIconosGrid.getInstance().render_cambioorigenblanco;
																		}
																	]]>
																</fx:Script>
																
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<mx:Image source="{normalIcon}" horizontalCenter="0" />
																<!--<s:Button styleName="botonNegroOld" label="cambioDeOrigen"/>-->
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="Inspector" dataField="origen" >
													<mx:headerRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable] public var normalIcon:Class;   
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_inspectornegro;
																		}
																	]]>
																</fx:Script>
																<mx:Image source="{normalIcon}" horizontalCenter="0" verticalCenter="0"/>
															</s:MXItemRenderer>
														</fx:Component>
													</mx:headerRenderer>
													<mx:itemRenderer>
														<fx:Component>
															<s:MXItemRenderer autoDrawBackground="false">
																<fx:Script>
																	<![CDATA[
																		
																		import skins.catalogos.catalogoIconosGrid;
																		[Bindable]
																		private var normalIcon:Class;
																		[Bindable]
																		private var hoveredIcon:Class;
																		
																		override public function set data(value:Object):void{
																			super.data = value;
																			this.normalIcon = catalogoIconosGrid.getInstance().render_inspector;
																			this.hoveredIcon = catalogoIconosGrid.getInstance().render_inspecblanco;
																		}
																		
																	]]>
																</fx:Script>
																
																<s:states>
																	<s:State name="normal"/>
																	<s:State name="hovered"/>
																	<s:State name="selected"/>
																</s:states>
																<mx:Image source="{normalIcon}"  horizontalCenter="0" />
																<!--<s:Button styleName="botonNegroOld" label="inspector" />-->
															</s:MXItemRenderer>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
											</pqNet:columns>	
										</pqNet:dataGridPqNet>	
										
										<otros:divisionGruesa width="100%"/>
										<s:HGroup width="100%"  height="0" id="botonesTodoDesmarcar">
											<!--<s:Button styleName="botonNegroOld" label="Todo"/>-->
											<pqNet1:botonPqNetLargo label="Todo"  icono="todo" click="seleccionaTodoCheckBox('marcador')"/>
											<s:Spacer width="100%"/>
											<!--<s:Button styleName="botonNegroOld" label="Agrupar"/>-->
											<pqNet1:botonPqNetLargo label="Desmarcar" icono="marcadoresAgrupar" click="seleccionaTodoCheckBox('desmarcar')"/>
										</s:HGroup>
										
									</s:VGroup>
								</s:HGroup>
							</s:VGroup>
						</s:NavigatorContent>
						
						<s:NavigatorContent label="EstÃ¡distica" width="100%" height="100%" >
							<s:VGroup width="100%" height="100%">
								
								<s:HGroup width="100%">
									<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_folder}"/>
									<label:labelTitulo_Otros text="EstÃ¡distica"/>
									<s:Spacer width="100%"/>
									
									<label:labelTitulo_Otros text="[ GestiÃ³n ]" color="#999999"/> 
								</s:HGroup>
								
								<otros:divisionGruesa width="100%"/>
								
								<s:HGroup width="100%">
									<label:labelSubtitulo text="General"/>
									<s:Spacer width="100%"/>
									<s:Label text="{this._arregloIncidente.length.toString()} {this._arregloIncidente.length == 1 ? 'Incidente' : 'Incidentes'}  .  {_totalET} ET  .   {_totalFT} FT"  verticalAlign="bottom" fontFamily="Bank Gothic" fontSize="20" fontWeight="bold"/>
								</s:HGroup>
								
								<otros:divisionGruesa width="100%"/>
								
								<s:HGroup width="100%" height="100%" id="grpGraficaGestion">
									
								</s:HGroup>
								
							</s:VGroup>
						</s:NavigatorContent>
						
					</mx:ViewStack>
				</s:VGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent  id="inspector" width="100%" height="100%">
				
				<s:VGroup height="100%" width="100%" >
					
					<s:HGroup width="100%">
						<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_inspector}"/>
						<label:labelTitulo_Otros text="Inspector"/>
						<s:Spacer width="100%"/>
						<label:labelSubtitulo text="[ GestiÃ³n ]" color="#999999"/> 
					</s:HGroup>
					
					<otros:divisionHueca width="100%"/>
					<s:HGroup width="100%">
						<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_analisis}"/>
						<label:labelSubtitulo text="AnÃ¡lisis &amp; toma de decisiÃ³n"/>
					</s:HGroup>
					<otros:divisionHueca width="100%"/>
					
					<s:HGroup width="100%" >	 
						<s:VGroup width="100%" height="100%">
							<!--<s:FormItem>-->
							<s:Label id="servicio" text="SERVICIO A CLIENTES" fontWeight="bold" fontFamily="Bank Gothic" fontSize="15"/>  
							<!--</s:FormItem>
							<s:FormItem>-->
							<s:Label  id="origen" text="Origen" fontFamily="Bank Gothic" fontSize="15" fontWeight="bold" color="0x{catalogoColores.LABEL_GRIS}"/>
							<!--</s:FormItem>-->
						</s:VGroup>
						<s:Spacer width="100%"/>
						<s:FormItem>
							<s:CheckBox label="Origen mÃºltiple" click="itemClickEvent()" id="checkOrigen" fontWeight="bold" fontFamily="Bank Gothic" fontSize="15"/>
						</s:FormItem>
					</s:HGroup>
					
					<otros:divisionHueca width="100%"/>
					
					<s:HGroup width="100%" height="100%">
						
						<s:VGroup height="100%" width="100%">
							
							<mx:ViewStack width="100%" creationPolicy="all" id="viewsReferencias">
								<s:NavigatorContent width="100%" height="100%">
									<s:HGroup width="100%" paddingBottom="5"> <!--paddingTop="10"-->
										<pqNet1:botonPqNetLargo  id="folioIncidente" width="200" fontFamily="Bank Gothic" fontSize="15" click="verlineaDTiempo()" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL}" botonRedondo="true" sombraPq="false"/>
										<!--<s:Button styleName="botonNegroOld" id="folioIncidente"  width="200" fontFamily="Bank Gothic" fontSize="15" click="verlineaDTiempo()"/>-->
										<s:Spacer width="100%"/>
										<s:VGroup paddingTop="5">
											<pqNet1:botonPqNetLargo colorBase="FF9900" label="Referencias" click="cargaReferencias('analisis')" height="100%"/>
										</s:VGroup>
									</s:HGroup>								 
								</s:NavigatorContent>
								<s:NavigatorContent width="100%" >
									<s:HGroup width="100%" paddingBottom="5"> <!--paddingTop="10"-->
										<pqNet1:botonPqNetLargo id="folioIncidente2" width="200" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL}" click="verlineaDTiempo()" botonRedondo="true" sombraPq="false"/>
										<s:Spacer width="100%"/>
										<s:VGroup paddingTop="5">
											<pqNet1:botonPqNetLargo colorBase="FF9900" label="Referencias" click="cargaReferencias('incMultiple')"/>
										</s:VGroup>
									</s:HGroup>
								</s:NavigatorContent>
							</mx:ViewStack>
							
							<!--<s:Spacer width="100%" height="2%"/>-->
							<otros:divisionGruesa width="100%" height="2%"/>
							
							<s:HGroup width="100%" height="90%" paddingBottom="5">
								<s:HGroup width="67%" height="100%"> <!--67 de width para ver completo botonera-->
									<s:VGroup height="100%" width="0" id="lista" showEffect="fadeIn">						<!--click="borrarReferencia(event)"-->
										<s:List height="100%" width="100%" id="listaincidente" borderVisible="false" dataProvider="{this._listaOrigenMultiple}"  change="cambiaQDC(event)" 
												itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.gestion.ListaIncidenteInspector"/>  
										<!-- <s:Button styleName="botonNegroOld" label="Nuevo Incidente" width="100%" id="nuevoincidente" click="origenMultimple()"/>-->   <!--validarTapNavigatorMultiple(event)-->
										<pqNet1:botonPqNetLargo label="Nuevo incidente" width="100%" id="nuevoincidente" click="origenMultimple()" icono="agregar" colorBase="0x26B357" visible="false" fontFamily="Bank Gothic" fontSize="15"/>
									</s:VGroup>
									
									<otros:VDivisionClaro height="100%"/>
									
									<s:Group width="1" height="100%" id="grpTab" depth="5000">
										<s:Image source="{this._imagenTab}" horizontalCenter="-3" verticalCenter="0" id="botonOrigenMultipleResize" click="itemClickEvent()" visible="false"/>
									</s:Group>
									
									<!--<reporte:CompresorVentanas width="100%" height="100%" id="compresorVentas"/>-->
									
									<s:VGroup height="100%" width="100%" id="qdcResize" showEffect="fadeIn"> <!--460-->
										<!--<s:HGroup width="100%" height="100%">-->
										<s:Scroller width="100%" height="100%">
											<!--<s:Group>
											
											<s:Label x="5" y="0" width="100%" fontWeight="bold" text="QDC" fontSize="20" fontFamily="Tahoma"/>
											
											<s:Label  y="61" text="SITUACIÃN IDENTIFICADA" textAlign="right" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="#0b4d98"/>
											<s:RichEditableText  y="87" width="445" height="145" id="situacion" fontStyle="normal" editable="false"  />
											<otros:division width="100%" y="233"/>
											<s:Label  y="259" text="Â¿QuÃ©?" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="#0b4d98"/>
											<s:RichEditableText  y="285" width="445" height="145" id="que" fontStyle="normal" editable="false" />
											<otros:division width="100%" y="431"/>
											<s:Label  y="457" text="Â¿DÃ³nde?" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="#0b4d98"/>
											<s:RichEditableText  y="483" width="445" height="145" id="done" fontStyle="normal" editable="false" />
											<otros:division width="100%" y="629"/>
											<s:Label  y="655" text="Â¿CuÃ¡ndo?" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="#0b4d98"/>
											<s:RichEditableText  y="681" width="445" height="145" id="cuando" fontStyle="normal" editable="false" />
											<otros:division width="100%" y="827"/>
											<s:Label  y="853" text="COMENTARIOS ADICIONALES" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="#0b4d98"/>
											<s:RichEditableText  y="879" width="445" height="145" id="comentario" fontStyle="normal" editable="false" />
											
											</s:Group>-->
											<s:Group height="100%" width="100%">
												<s:VGroup width="100%" height="100%">
													
													<s:Label width="100%" fontWeight="bold" text="QDC" fontSize="20" fontFamily="Tahoma"/>
													
													<s:Label  text="SITUACIÃN IDENTIFICADA" textAlign="right" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="0x{catalogoColores.LABEL_VERDE_AZUL}" paddingTop="10" paddingBottom="10"/>
													<s:RichEditableText   width="100%" id="situacion" fontStyle="normal" editable="false" paddingBottom="10" />
													<otros:division width="100%" />
													<s:Label  text="Â¿QuÃ©?" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="0x{catalogoColores.LABEL_VERDE_AZUL}" paddingTop="10" paddingBottom="10"/>
													<s:RichEditableText  width="100%"  id="que" fontStyle="normal" editable="false" paddingBottom="10"/>
													<otros:division width="100%" />
													<s:Label  text="Â¿DÃ³nde?" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="0x{catalogoColores.LABEL_VERDE_AZUL}" paddingTop="10" paddingBottom="10"/>
													<s:RichEditableText width="100%" id="done" fontStyle="normal" editable="false" paddingBottom="10"/>
													<otros:division width="100%" />
													<s:Label text="Â¿CuÃ¡ndo?" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="0x{catalogoColores.LABEL_VERDE_AZUL}" paddingTop="10" paddingBottom="10"/>
													<s:RichEditableText width="100%" id="cuando" fontStyle="normal" editable="false" paddingBottom="10"/>
													<otros:division width="100%" />
													<s:Label text="COMENTARIOS ADICIONALES" textAlign="left" fontWeight="bold" fontStyle="normal" fontFamily="Tahoma" fontSize="12" color="0x{catalogoColores.LABEL_VERDE_AZUL}" paddingTop="10" paddingBottom="10"/>
													<s:RichEditableText width="100%" id="comentario" fontStyle="normal" editable="false" paddingBottom="10"/>
													
												</s:VGroup>
											</s:Group>	
										</s:Scroller>
										<!--</s:HGroup>-->
									</s:VGroup>
									
									<otros:VDivisionClaro height="100%"/>
									
									<s:Group width="1" height="100%" id="grpTabQDC" depth="5000">
										<s:Image source="{this._imagenTabQDC}" horizontalCenter="-13" verticalCenter="-80" id="botonQDCResize" click="resizeQDC()" visible="false"/>
									</s:Group>
									
									<s:VGroup width="100%" height="100%" id="impactoResize" showEffect="fadeIn"> <!--290 25%-->
										<s:Scroller width="100%" height="100%">	
											<s:Group height="100%" width="100%">
												<s:VGroup width="100%" height="100%"> <!--290-->	
													<s:Label text="Impacto:" fontFamily="Tahoma" fontSize="15" fontWeight="bold" width="100%"/>
													<s:FormItem width="100%" fontFamily="Tahoma" fontSize="15">
														<s:CheckBox label="Cliente" id="cliente"/>
													</s:FormItem>
													<s:FormItem width="100%" fontFamily="Tahoma" fontSize="15">
														<s:CheckBox label="Producto" id="producto"/>
													</s:FormItem>
													<s:FormItem width="100%" fontFamily="Tahoma" fontSize="15">
														<s:CheckBox label="Sistema" id="sistema"/>
													</s:FormItem>
													
													<otros:division width="100%"/>
													
													<s:FormItem width="100%">
														<s:VGroup width="100%">
															<s:Label text="Tipo:" fontFamily="Tahoma" fontSize="15" fontWeight="bold" width="120"/>
															<s:ComboBox  width="100%" dataProvider="{this._listaTipo}" id="comboxtipo" labelField="tipo" selectedIndex="0" close="cambioComboTipo()" fontFamily="Tahoma"/>
														</s:VGroup>													
													</s:FormItem>
													
													<otros:division width="100%"/>
													
													<s:FormItem width="100%">
														<s:HGroup width="100%">
															<s:VGroup width="100%">
																<s:Label text="Cliente" fontFamily="Tahoma" fontSize="15" fontWeight="bold" width="100%"/><!--120-->
																<s:Label text="Asociado" fontFamily="Tahoma" fontSize="15" color="0x{catalogoColores.LABEL_GRIS}" width="100%"/>
															</s:VGroup>
															<!--<s:Spacer width="100%"/>-->
															<s:CheckBox id="clienteasociado" click="mostrarBoton()"/>
															<s:Image source="{catalogoIconosGrid.getInstance().render_flechitacirculo}" id="asociarcliente" visible="false" click="mostrarPopUp('cliente')" width="0"/>
															<!--<s:Button styleName="botonNegroOld" id="asociarcliente" visible="false" click="mostrarPopUp('cliente')" width="0"/>-->
														</s:HGroup>
													</s:FormItem>
													<otros:division width="100%"/>
													
													<s:FormItem width="100%">
														<s:HGroup width="100%">
															<s:VGroup width="100%">
																<s:Label text="Proveedor" fontFamily="Tahoma" fontSize="15" fontWeight="bold" width="100%"/> <!--120-->
																<s:Label text="Asociado" fontFamily="Tahoma" fontSize="15" color="0x{catalogoColores.LABEL_GRIS}" width="100%"/>
															</s:VGroup>
															<!--<s:Spacer width="100%"/>-->
															<s:CheckBox id="proveedorasociado" click="mostrarBoton()" />
															<s:Image source="{catalogoIconosGrid.getInstance().render_flechitacirculo}" id="asociarproveedor" visible="false" click="mostrarPopUp('proveedor')" width="0"/>
															<!--<s:Button styleName="botonNegroOld" id="asociarproveedor" visible="false" click="mostrarPopUp('proveedor')" width="0"/>-->
														</s:HGroup>
													</s:FormItem>
													
													<otros:division width="100%"/>
													
													<s:FormItem width="100%">
														<s:HGroup width="100%">
															<s:VGroup width="100%">
																<s:Label text="Procedimientos" fontFamily="Tahoma" fontSize="15" fontWeight="bold" width="100%"/> <!--120--> 
																<s:Label text="Asociado" fontFamily="Tahoma" fontSize="15" color="0x{catalogoColores.LABEL_GRIS}" width="100%"/>
															</s:VGroup>
															<!--<s:Spacer width="100%"/>-->
															<s:CheckBox id="procedimientoasociado" click="mostrarBoton()" />
															<s:Image source="{catalogoIconosGrid.getInstance().render_flechitacirculo}" id="asociarprocedimiento" visible="false" click="mostrarPopUp('procedimiento')" width="0"/>
															<!--<s:Button styleName="botonNegroOld" id="asociarprocedimiento" visible="false" click="mostrarPopUp('procedimiento')" width="0"/>-->
														</s:HGroup>
													</s:FormItem>
													
													<otros:division width="100%"/>
													
													<!--<s:Button styleName="botonNegroOld" id="vistaasociacion" label="Vista asociaciÃ³n" width="100%" click="mostrarPopUp('asociacion')"/>-->
													<pqNet1:botonPqNetLargo id="vistaasociacion" label="Vista asociaciÃ³n" width="100%" click="mostrarPopUp('asociacion')" icono="ojoblanco" fontFamily="Bank Gothic" fontSize="15"/>
												</s:VGroup>	
											</s:Group>
										</s:Scroller>	
									</s:VGroup>
									
									<otros:VDivisionClaro height="100%"/>
									
									<s:Group width="1" height="100%" id="grpTabImpacto" depth="5000">
										<s:Image source="{this._imagenTabImpacto}" horizontalCenter="-13" verticalCenter="-150" id="botonImpactoResize" click="resizeImpacto()" visible="false"/>
									</s:Group>
									
								</s:HGroup>
								
								<s:HGroup width="100%" height="100%">
									
									<mx:ViewStack width="100%" height="100%" creationPolicy="all" id="incidentemultiple">
										<s:NavigatorContent id="qqdccp" width="100%" height="100%">
											<s:HGroup width="100%" height="100%">
												
												
												
												<s:VGroup width="100%" height="100%" >
													<s:Label text="QQDCCP" fontSize="20" fontFamily="Tahoma" fontWeight="bold"/>
													
													<s:VGroup width="100%" gap="0">
														<s:HGroup width="100%">
															<s:Spacer width="100%"/>										
															<s:TabBar dataProvider="{this.qqdccpinspector}"/>
														</s:HGroup>
														<otros:division width="100%"/>
													</s:VGroup>
													
													<mx:ViewStack width="100%" height="90%" id="qqdccpinspector" creationPolicy="all">
														
														<s:NavigatorContent label="PROBLEMA" width="100%" height="100%"> 
															<s:RichEditableText id="problemaqqdccp" width="100%" height="100%" fontFamily="Tahoma" fontSize="12"/> 
														</s:NavigatorContent>
														
														<s:NavigatorContent label="Â¿QuÃ©?" width="100%" height="100%"> 
															<s:RichEditableText id="queinspectorqqdccp" width="100%" height="100%" fontFamily="Tahoma" fontSize="12"/> 
														</s:NavigatorContent>
														
														<s:NavigatorContent label="Â¿QuiÃ©n?" width="100%" height="100%"> 
															<s:RichEditableText id="quieninspectorqqdccp" width="100%" height="100%" fontFamily="Tahoma" fontSize="12"/> 
														</s:NavigatorContent>
														
														<s:NavigatorContent label="Â¿DÃ³nde?" width="100%" height="100%">
															<s:RichEditableText width="100%" height="100%"  id="dondeinspectorqqdccp" fontFamily="Tahoma" fontSize="12"/> 
														</s:NavigatorContent>
														
														<s:NavigatorContent label="Â¿CuÃ¡ndo?" width="100%" height="100%" >
															<s:RichEditableText width="100%" height="100%"  id="cuandoinspectorqqdccp" fontFamily="Tahoma" fontSize="12"/>
														</s:NavigatorContent>
														
														<s:NavigatorContent label="Â¿Como?" width="100%" height="100%" >
															<s:RichEditableText width="100%" height="100%"  id="comoinspectorqqdccp" fontFamily="Tahoma" fontSize="12"/>
														</s:NavigatorContent>
														
														<s:NavigatorContent label="Â¿Por quÃ©?" width="100%" height="100%" >  
															<s:RichEditableText width="100%" height="100%"  id="porqueinspectorqqdccp" fontFamily="Tahoma" fontSize="12"/> 
														</s:NavigatorContent>
														
														<s:NavigatorContent label="SOLUCIÃN" width="100%" height="100%" >  
															<s:RichEditableText width="100%" height="100%"  id="solucioninspectorqqdccp" fontFamily="Tahoma" fontSize="12"/> 
														</s:NavigatorContent>
														
													</mx:ViewStack>
													
													<otros:division width="100%"/>
													
													<s:HGroup width="100%" paddingBottom="15">
														<s:Label text="DECISIÃN" fontSize="20" fontFamily="Tahoma" fontWeight="bold"/>
														<s:Spacer width="100%"/>
														<s:RadioButton id="aceptar" />
														<s:Image id="aceptado" source="{catalogoIconosGrid.getInstance().render_palomita}"/>
														<s:RadioButton id="rechazar" />
														<s:Image id="rechazado" source="{catalogoIconosGrid.getInstance().render_tache}" />
													</s:HGroup>
													
													
													<s:TextArea width="100%" height="100%" id="justificaciondecision"
																prompt="ESCRIBE AQUI TU JUSTIFICACIÃN A lA DECISIÃN QUE TOMASTE" 
																skinClass="skins.skin.textarea.TextAreaPunteadoAlargadoSkin"/>
													
													<!--<s:Group width="100%" height="100%">
													<pruebas:xRecuadroPrueba borderThickness="2" width="100%" height="100%" borderColor="0x{catalogoColores.LABEL_GRIS}"
													backgroundColor="0xFFFFFF" cornerRadius="30" />
													<s:RichEditableText width="100%" height="100%"  id="justificaciondecision" fontFamily="Tahoma" fontSize="12"
													paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"/>
													</s:Group>-->	
													
												</s:VGroup>
												
											</s:HGroup>
										</s:NavigatorContent>
										
										<s:NavigatorContent id="qdc" width="100%" height="100%">
											<s:VGroup width="100%" height="100%">
												<s:Label text="SITUACIÃN IDENTIFICADA" width="100%" fontSize="20" fontFamily="Tahoma" fontWeight="bold"/>
												<otros:divisionGruesa width="100%" />
												<s:TextArea width="100%" height="60%" id="situacioninspector" borderVisible="false" change="cuantasPalabrasInspec(event)" fontFamily="Tahoma" fontSize="12"
															skinClass="skins.skin.textarea.TextAreaSinBordeSkin"
															prompt="En este 'cuadro de texto' sÃ³lo pueden ser registradas cincuenta palabras. De lo contrario corremos el riesgo de que el fantasma de la chaqueta mental invada nuestras almas y mentes y nos pierda en el bosque de nuestros pensamientos. Por ello, hermanos, les invito a ser precisos, consizos y macizos."/>
												
												<otros:division width="100%" height="2%"/>
												
												<s:HGroup width="100%">
													<s:Label text="Palabras:  " color="#999999" fontFamily="Tahoma" fontSize="12"/>
													<s:Label id="contadordpalabras2" text="0" color="#999999" fontFamily="Tahoma" fontSize="12" />
													<s:Label text="/  50" color="#999999" fontFamily="Tahoma" fontSize="12"/>
												</s:HGroup>
												
												<otros:divisionGruesa width="100%" height="2%"/>
												<s:Label text="QDC" fontSize="20" fontFamily="Tahoma" fontWeight="bold"/>
												
												
												<s:HGroup width="100%">
													<s:Spacer width="100%"/>										
													<s:TabBar dataProvider="{this.qdcinspector}"/>
												</s:HGroup>
												
												<mx:ViewStack width="100%" height="100%" id="qdcinspector" creationPolicy="all">
													
													<s:NavigatorContent label="Â¿QuÃ©?" width="100%" height="100%">  
														<s:RichEditableText id="queinspector" width="100%" height="100%" fontFamily="Tahoma" fontSize="12" /> 
													</s:NavigatorContent>
													
													<s:NavigatorContent label="Â¿DÃ³nde?" width="100%" height="100%"> 
														<s:RichEditableText width="100%" height="100%"  id="dondeinspector" fontFamily="Tahoma" fontSize="12"/> 
													</s:NavigatorContent>
													
													<s:NavigatorContent label="Â¿CuÃ¡ndo?" width="100%" height="100%" >
														<s:RichEditableText width="100%" height="100%"  id="cuandoinspector" fontFamily="Tahoma" fontSize="12"/>
													</s:NavigatorContent>
													
													<s:NavigatorContent label="COMENTARIOS ADICIONALES" width="100%" height="100%" >  
														<s:RichEditableText width="100%" height="100%"  id="comentariosinspector" fontFamily="Tahoma" fontSize="12"/> 
													</s:NavigatorContent>
													
												</mx:ViewStack>
												
												<s:HGroup width="100%" >
													<s:FormItem label="NUEVO ORIGEN:" fontFamily="Tahoma" fontSize="12">
														<s:ComboBox id="areasOrigenIncidente" width="175" change="origenSeleccionado(event)" fontFamily="Tahoma"/>
													</s:FormItem>
													<s:VGroup width="100%" height="100%">
														<s:Label id="nombreGerenteIncidente" width="100%" height="100%" textAlign="right" fontFamily="Tahoma" fontSize="12"/>
														<s:Label id="areaGerenteIncidente" text="Gerente de Ã¡rea" width="100%" height="100%" textAlign="right" fontFamily="Tahoma" fontSize="12"/>
													</s:VGroup>
												</s:HGroup>
											</s:VGroup>
										</s:NavigatorContent>
									</mx:ViewStack>
									
								</s:HGroup>
							</s:HGroup> <!-- termina el bloque -->
							
							<otros:divisionGruesa width="100%" height="1%"/>
							<s:HGroup width="100%" >
								<!--<s:Button styleName="botonNegroOld" label="Salir" click="cambiaView('gestion','guarda')"/>-->
								<salir:botonSalir click="cambiaView('gestion','guarda')" />
								<s:Spacer width="100%"/>
								<!--<guardar:botonGuardar click="validarTapNavigator(event)"/>-->
								<guardar:botonGuardar click="guardaAnalisis()" />
								<!--<s:Button styleName="botonNegroOld" label="Guardar" click="validarTapNavigator(event)"/>-->
								<finalizar:botonFinalizar click="validarFinalizar(event)" />
								<!--<s:Button styleName="botonNegroOld" label="Finalizar" click="validarFinalizar(event)"/>-->
							</s:HGroup>	 
						</s:VGroup>		 
					</s:HGroup>
					
				</s:VGroup>	
				
			</s:NavigatorContent>
			
			<s:NavigatorContent  width="100%" height="100%" >
				<s:VGroup width="100%" height="100%">
					
					<mx:VBox id="espacioLineaDeTiempo" width="100%" height="100%">
						
					</mx:VBox>
					
				</s:VGroup>
			</s:NavigatorContent>
			
		</mx:ViewStack>
	</s:VGroup>
	
</s:Group>
