<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componentes ="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*" width="100%" height="100%" 
		 xmlns:graficas="skins.skin.graficas.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Pedido;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.utils.ObjectUtil;
			
			private var keys:Object;
			public var _currentType:String;
			private  var _infoEstatusET:ArrayCollection;
			private  var _infoEstatusFT:ArrayCollection;
			
			public function set obtenerFiltroGrafico(tipo:String):void{
				if(_currentType != tipo){
					_currentType = tipo;
						if(_currentType =="ET")
							myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoEstatusET,null,"totalPedidos");
						else if(_currentType =="FT")
							myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoEstatusFT,null,"totalPedidos");
					}
			}
			
			public function set obtenerInfopedidoGrafica($infoGrafica:ArrayCollection):void{
				if($infoGrafica == null) return ;
				
				_infoEstatusET = new ArrayCollection();
				_infoEstatusFT = new ArrayCollection();
				myChart.dataProvider = new ArrayCollection();
				 
				var arrayTemp:Array =  new Array();
				arrayTemp = $infoGrafica.source; 
				
				
				/**
				 * Se dividen todos los Estatus y/o situación que estan en tiempo vs las fuera de tiempo y se ordenan
				 * */ 
				var arrayEstatusET:Array = new Array();
				var arrayEstatusFT:Array = new Array();
				
				arrayEstatusET = arrayTemp.filter(ObtenerTodosLosEstatusET);
				arrayEstatusFT = arrayTemp.filter(ObtenerTodosLosEstatusFT);
				arrayEstatusET.sortOn("delegacion");
				arrayEstatusFT.sortOn("delegacion");
				
				//Para liberar memoria
				arrayTemp = new Array();
				/**
				 * arreglo temporal para controlar el ciclo del for que se encargará de sumar las cantidades de cada Estatus y/o situación,
				 * quitando las duplicados
				 * */
				
				keys= new Object();
				var arrayTotalEstatusET:Array = new Array();
				arrayTotalEstatusET = arrayEstatusET.filter(quitaDuplicados);
				
				keys= new Object();
				var arrayTotalEstatusFT:Array = new Array();
				arrayTotalEstatusFT = arrayEstatusFT.filter(quitaDuplicados);
				
				/**
				 * Se forman los objetos que serán enviados a la grafica, los totales de cada Estatus y/o situación
				 * */
				
				FormarLosEstatus(arrayTotalEstatusET,arrayEstatusET,"ESTATUS_ET",_infoEstatusET);
				FormarLosEstatus(arrayTotalEstatusFT,arrayEstatusFT,"ESTATUS_FT",_infoEstatusFT);
				
				if(_currentType =="ET")
					myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoEstatusET,null,"totalPedidos");
				else
					myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoEstatusFT,null,"totalPedidos");
				
				//Para liberar memoria
				arrayTotalEstatusET = new Array();
				arrayEstatusET= new Array();
				arrayTotalEstatusFT= new Array();
				arrayEstatusFT= new Array();
			}
			
			private function FormarLosEstatus(TotalEstatus:Array,estatusInfo:Array,etiqueta:String,infoEstatus:ArrayCollection):void
			{
				
				var totalPartidas:int;
				var totalPiezas:int;
				var totalPedidos:int;
				var totalMonto:Number;
				var totalClientes:int;
				var keysMarca:Object;
				
				var currentPartidaPedido:Pedido; 
				var j:int;
				var itemResumenConsulta:ResumenConsulta;
				for(var i:int =0; i<TotalEstatus.length; i++){
					j=0;
					keys = new Object();
					keysMarca = new Object();
					totalPartidas =0;
					totalPiezas =0;
					totalPedidos =0;
					totalMonto =0;
					totalClientes =0;
					currentPartidaPedido = estatusInfo[j] as Pedido;
					while( (TotalEstatus[i] as Pedido).delegacion == currentPartidaPedido.delegacion ){
						totalPartidas += currentPartidaPedido.totalPartidas;
						totalPiezas += currentPartidaPedido.totalPiezas;
						totalMonto += currentPartidaPedido.montoDolares;
						
						if(!keys.hasOwnProperty(currentPartidaPedido.cpedido)){
							keys[currentPartidaPedido.cpedido]= currentPartidaPedido.cpedido;
							totalPedidos++;
						}
						
						//Para el conteo de clientes en cada marca
						if(!keysMarca.hasOwnProperty(currentPartidaPedido.nombreCliente)){
							keysMarca[currentPartidaPedido.nombreCliente] = currentPartidaPedido.nombreCliente;
							totalClientes++;
						}
						
						estatusInfo.shift();
						if(estatusInfo.length >0)
							currentPartidaPedido = estatusInfo[j] as Pedido;
						else
							currentPartidaPedido =new Pedido();
					}
					
					itemResumenConsulta = new ResumenConsulta();
					itemResumenConsulta.conceptoResultado = (TotalEstatus[i] as Pedido).delegacion.toLocaleUpperCase();
					itemResumenConsulta.etiqueta = etiqueta;
					itemResumenConsulta.total = totalMonto;
					itemResumenConsulta.totalClientes = totalClientes;
					itemResumenConsulta.totalPedidos = totalPedidos;
					itemResumenConsulta.partidas = totalPartidas;
					itemResumenConsulta.piezasTotal = totalPiezas;
					
					infoEstatus.addItem(ObjectUtil.copy(itemResumenConsulta));
				}
			}
			
			private function quitaDuplicados(item:Pedido, id:uint, array:Array):Boolean
			{
				if(keys.hasOwnProperty(item.delegacion)){
					return false;
				}else{
					keys[item.delegacion] = item.delegacion;
					return true;
				}
			}
			
			private function ObtenerTodosLosEstatusET(item:Pedido, id:uint, array:Array):Boolean
			{
				return item.enTiempo == "ET" ? true : false;
			}
			private function ObtenerTodosLosEstatusFT(item:Pedido, id:uint, array:Array):Boolean
			{
				return item.enTiempo == "FT" ? true : false;
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" verticalAlign="middle" gap="0">
		<s:Spacer width="100%" height="10%"/>
		<graficas:PieChartPqGris id="myChart" width="100%" height="100%" 
								 dataProvider="{null}"
								 lineasHabilitadas="true" etiquetasHabilitadas="true" habilitarResumen="true"
								 showDataTips="false"  innerRadius=".5">   
			<graficas:series>
				<graficas:pieSeriesPqNet field="piezasTotal"/>  <!--piezasTotal-->
			</graficas:series>
		</graficas:PieChartPqGris>
		<s:Spacer width="100%" height="10%"/>
	</s:VGroup>
	<s:VGroup width="100%" height="100%" verticalAlign="bottom" horizontalAlign="center" gap="0">
		<s:VGroup width="100%" height="8%" verticalAlign="middle">
			<componentes:tituloChartTablero width="100%" text="ESTADO" textAlign="center"/>
		</s:VGroup>
		<s:Spacer width="100%" height="2%"/>
	</s:VGroup>
</s:Group>
