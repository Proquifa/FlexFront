<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
			  xmlns:incidente="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.incidente.*">
	<mx:Script>
		<![CDATA[
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoGestionIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidenteDecision;
			import mx.controls.Alert;
			
			private var gestionRegistroIncidente:RegistroIncidenteInterior = null;
			private var analizarincidente:AnalisisIncidente = null;
			private var decisionIncidente:IncidenteDecision = null;
			private var programarAccion:ProgramacionAccionIncidente = null;
			/**
			 * MEtodo para dirigirse directamente  la ubicacion solicitada
			 */ 
			private function seleccionaUbicacion(eventoGenerico:EventoGestionIncidente):void{
				var eventoPA:EventoIncidenteDecision = new EventoIncidenteDecision( EventoIncidenteDecision.SELECCIONA_UBICACION );
				eventoPA.empleado = eventoGenerico.empleado;
				eventoPA.incidente = eventoGenerico.incidente;
				eventoPA.gestion = eventoGenerico.gestion;
				if(eventoGenerico.ubicadoEn == "gestion"){
					pasarAGestionarIncidente(eventoGenerico);
				}else if(eventoGenerico.ubicadoEn == "An치lisis"){
					pasarAAnalisarIncidente(eventoGenerico);
				}else if(eventoGenerico.ubicadoEn == "Decisi칩n"){
					pasarADesicionIncidente(eventoGenerico);
				}else if(eventoGenerico.ubicadoEn == "Programaci칩n de la acci칩n"){
					pasarAProgramacionDeAccion(eventoPA);
				}
			}
			/**
			 * Metodo que inicializa la Gestion de los Incidentes. Este metodo siempre se utlizara cuando se venga del Listado de Incidentes.
			 */ 
			private function pasarAGestionarIncidente(evento:EventoGestionIncidente):void{
				this.selectedIndex = 1;
				if( gestionRegistroIncidente == null ){
					this.gestionRegistroIncidente = new RegistroIncidenteInterior();					
					this.vbxGestionIncidente.addChild( gestionRegistroIncidente );
				}				
				this.gestionRegistroIncidente._incidente = evento.incidente;
				this.gestionRegistroIncidente.vieneD = "gestionarincidente";
				this.gestionRegistroIncidente._empleadoLogueado = evento.empleado;
				this.gestionRegistroIncidente.iniciaIncidente();
				this.gestionRegistroIncidente.addEventListener( EventoGestionIncidente.REGRESA_A_LISTADO_INCIDENTES, regresaAListado );
				this.gestionRegistroIncidente.addEventListener( EventoGestionIncidente.AVANZA_A_ANALISIS_INCIDENTE, pasarAAnalisarIncidente );
			}
			/**
			 * Metodo que inicializa el Analisis de los Incidentes. Este metodo siempre se utilizara cuando se venga de Gestionar un Incidente
			 * es decir de la ventana RegistroIncidenteInterior.
			 */ 
			private function pasarAAnalisarIncidente(evento:EventoGestionIncidente):void{
				this.selectedIndex = 2;				
				if(analizarincidente == null){
					this.analizarincidente = new AnalisisIncidente();
					this.vbXAnalisis.addChild( analizarincidente );
				}
				this.analizarincidente._incidente = evento.incidente;
				this.analizarincidente._empleado = evento.empleado;
				this.analizarincidente.vieneDe = "analisarIncidente";
				this.analizarincidente.addEventListener( EventoGestionIncidente.REGRESA_A_LISTADO_INCIDENTES, regresaAListado );
				//this.analizarincidente.addEventListener( EventoGestionIncidente.REGRESA_A_GESTION_INCIDENTE, regresaAGestionIncidente );
				this.analizarincidente.addEventListener( EventoGestionIncidente.AVANZA_A_DECISION_INCIDENTE, pasarADesicionIncidente );
				this.analizarincidente.inicia();
			}
			/**
			 * Metodo que inicializa la Desicion de los Incidentes. Este metodo siempre se utilizara cuando se venga de Analisar un Incidente
			 * es decir de la ventana AnalisisIncidente.
			 */ 
			private function pasarADesicionIncidente(evento:EventoGestionIncidente):void{
				this.selectedIndex = 3;
				if( this.decisionIncidente == null ){
					this.decisionIncidente = new IncidenteDecision();
					this.vbXDecision.addChild( decisionIncidente );
				}
				this.decisionIncidente._gestion = evento.gestion;
				this.decisionIncidente._incidente = evento.incidente;
				this.decisionIncidente._empleado = evento.empleado;
				this.decisionIncidente.addEventListener( EventoGestionIncidente.REGRESA_A_LISTADO_INCIDENTES, regresaAListado );
				this.decisionIncidente.addEventListener( EventoIncidenteDecision.AVANZA_A_ACCION, pasarAProgramacionDeAccion );
				this.decisionIncidente.inicia();
				this.decisionIncidente.actualizaReferencias();
			}
			/**
			 * Metodo que inicializa la Programacion de la Accion de los Incidentes.Este metodo siempre se venga de la Decision de un Incidente
			 */ 
			private function pasarAProgramacionDeAccion(evento:EventoIncidenteDecision):void{
				this.selectedIndex = 4;
				if( this.programarAccion == null ){
					this.programarAccion = new ProgramacionAccionIncidente();
					this.vbxProgramacionAccion.addChild( programarAccion );
				}
				this.programarAccion._empleado = evento.empleado;
				this.programarAccion._gestion = evento.gestion;
				this.programarAccion._incidente = evento.incidente;
				this.programarAccion.addEventListener( EventoGestionIncidente.REGRESA_A_LISTADO_INCIDENTES, regresaAListado );
				this.programarAccion.inicia();
				this.programarAccion.actualizaReferenciasInicio();
			}
			/**
			 * Metodo usado para Regresar a la Lista de los Incidentes
			 */ 
			private function regresaAListado(evento:EventoGestionIncidente):void{
				this.selectedIndex = 0;
				this.listaPendientesIncidentes.buscarListaIncidente();
			}
			/**
			 * Metodo usado para Regresar a la Gestion del Pendiente
			 */  
			private function regresaAGestionIncidente(evento:EventoGestionIncidente):void{
				this.selectedIndex = 1;
			}
			/**
			 * Metodo usado para Regresar al Analisis del Pendiente
			 */  
			private function regresaAAnalisis(evento:EventoGestionIncidente):void{
				this.selectedIndex = 2;
			}
			/**
			 * Metodo usado para Regresar al Analisis del Pendiente
			 */  
			private function regresaAProgramacion(evento:EventoGestionIncidente):void{
				this.selectedIndex = 3;
			}
			/**
			 * Metodo para remover los EventListeners usados por las ventanas.
			 */ 
			/* private function removerEventos(removerDe:String):void{
				if( removerDe == "registroIncidenteInterior" ){
					this.gestionRegistroIncidente.removeEventListener( EventoGestionIncidente.REGRESA_A_LISTADO_INCIDENTES, regresaAListado );
					this.gestionRegistroIncidente.removeEventListener( EventoGestionIncidente.AVANZA_A_ANALISIS_INCIDENTE, pasarAAnalisarIncidente );
				}else if (removerDe == "analisarIncidente"){
					this.analizarincidente.removeEventListener( EventoGestionIncidente.REGRESA_A_LISTADO_INCIDENTES, regresaAListado );
					this.analizarincidente.removeEventListener( EventoGestionIncidente.REGRESA_A_GESTION_INCIDENTE, regresaAGestionIncidente );
					this.analizarincidente.removeEventListener( EventoGestionIncidente.AVANZA_A_DECISION_INCIDENTE, pasarADesicionIncidente );
				}
			} */
			public function cambiaAseleccionDeAnalisis():void{
				this.selectedIndex = 2;	
				if(analizarincidente == null){
					this.analizarincidente = new AnalisisIncidente();
					this.vbXAnalisis.addChild( analizarincidente );
				}
			}
		]]>
	</mx:Script>
	<mx:VBox id="vbxListado" width="100%" height="100%">
		<incidente:GestionDeIncidente id="listaPendientesIncidentes" gestionarIncidente="pasarAGestionarIncidente(event)" seleccionaUbicacionInc="seleccionaUbicacion(event)"/>
	</mx:VBox>
	<mx:VBox id="vbxGestionIncidente" width="100%" height="100%">
		
	</mx:VBox>
	<mx:VBox id="vbXAnalisis" width="100%" height="100%">
		
	</mx:VBox>
	<mx:VBox id="vbXDecision" width="100%" height="100%">
		
	</mx:VBox>
	<mx:VBox id="vbxProgramacionAccion" width="100%" height="100%">
		
	</mx:VBox>
</mx:ViewStack>
