<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:contenedores="skins.skin.contenedores.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:label="skins.skin.label.*"
		 xmlns:textinput="skins.skin.textinput.*"
		 xmlns:otros="skins.otros.*"
		 xmlns:comboCatalogo="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.*" 
		 xmlns:pqNet="skins.botones.pqNet.*"
		 xmlns:chekbox="skins.skin.chekbox.*"
		 width="100%" height="100%"
		 creationComplete="creation(event)" 
		 >
	
	<fx:Declarations>
		
		<s:NumberValidator id="validarTextInputRutas"
						   allowNegative="false" 
						   domain="int" 
						   lessThanMinError="El número debe ser mayor a cero."
						   minValue="1"
						   required="false" 
						   requiredFieldError="Este campo no puede quedar vacio."
						   parseError="No es un número valido."
						   negativeError="No puede ser negativo."
						   notAnIntegerError="Debe de ser un número entero."
						   />	
		
		<s:NumberValidator id="validarTexMaximoMeses"
						   allowNegative="false" 
						   domain="int" 
						   lessThanMinError="El número debe ser mayor a cero."
						   minValue="1"
						   maxValue="12"
						   greaterThanMaxError ="El número debe estar entre 1 y 12."
						   required="false" 
						   requiredFieldError="Este campo no puede quedar vacio."
						   parseError="No es un número valido."
						   negativeError="No puede ser negativo."
						   notAnIntegerError="Debe de ser un número entero."
						   />	
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.proveedores.EventoCatProLogistica;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.Flete;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.Logistica;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Proveedor;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.RutaFlete;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.admon.objetos.Funcion;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.CatProZonaTrabajo;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosEtiquetas;
			
			import spark.components.TextInput;
			
			private var activaCambios:Boolean = false;
			private var seEstaEditando:Boolean = false;
			private var _proveedor:Proveedor;
			private var _tiempoLocal:String;
			private var _tiempoGDL:String;
			private var _tiempoForaneo:String;
			private var _tiempoSuda:String;
			private var _tiempoCentro:String;
			private var _tiempoRestoMundo:String;
			
			
			[Bindable]	private var logistica:Logistica = new Logistica();
			[Bindable]	private var logisticaRespaldo:Logistica = new Logistica();
			[Bindable]  private var datosFE:Object;
			[Bindable]	private var _dias:ArrayCollection = new ArrayCollection([{valor:"DIAS HABILES",llave:0,valor2:"días hábiles"},
				{valor:"MESES",llave:1,valor2:"meses"}]);
			
			private var vieneDe:String =""; 
			
			protected function creation(event:FlexEvent):void
			{
				addEventListener(EventoCatProLogistica.MODIFICAR_CONCEPTO_LISTA_FLETE_VISTA,modificarFlete,false,0,true);
				addEventListener("ReubicarPanelModificacionCatalogoProveedoresLogistica",reubicarPanel,false,0,true);
				checkHab_clickHandler();
				
				
				cmbCentro.dataProvider = _dias;
				cmbForaneo.dataProvider = _dias;
				cmbGDL.dataProvider = _dias;
				cmbLocal.dataProvider = _dias;
				cmbRest.dataProvider = _dias;
				cmbRuta.dataProvider = _dias;
				cmbSud.dataProvider = _dias;
				habilitaTextos(false);
				seleccionarCombos(logistica.fleteExpress);
				
				if ( DatosGlobales.getInstance()._usuario.nombreFuncion == "Comprador" ){
					grpBotones.enabled = false;
				}
			}
			
			
			private function modificarFlete($evt:EventoCatProLogistica):void
			{
				logistica.flete[lstConceptosFlete.selectedIndex].concepto = $evt.flete.concepto;
				logistica.flete[lstConceptosFlete.selectedIndex].leyenda = $evt.flete.leyenda;
				logistica.flete[lstConceptosFlete.selectedIndex].monto = $evt.flete.monto;
				logistica.flete[lstConceptosFlete.selectedIndex].ruta = $evt.flete.ruta;
				
			}
			
			
			private function reubicarPanel($event:Event):void
			{
				lstConceptosFlete.ensureIndexIsVisible(lstConceptosFlete.selectedIndex);
			}
			
			public function set recibeProveedor($proveedor:Proveedor ):void
			{
				var event:EventoCatProLogistica = new EventoCatProLogistica(EventoCatProLogistica.OBTENER_LOGISTICA_PROVEEDOR_SERVICE);
				event.idProveedor = $proveedor.idProveedor;
				_proveedor = $proveedor;
				dispatchEvent(event);
			}
			
			private function obtenerArray($arreglo:String):Object
			{
				var strDias:Array = $arreglo.toLowerCase().split(' ');
				var obj:Object = new Object();
				obj.valor = strDias[0];
				
				if (strDias[1] == "meses")
				{
					obj.texto = "MESES";
				}
				else
				{
					obj.texto = "DIAS HABILES";
				}
				
				return obj;
			}
			
			private function seleccionarCombos($flete:Flete):void
			{
				if ($flete != null)
				{
					lstRutas.visible = true;
					var rutas:ArrayCollection = new ArrayCollection();
					if ($flete.ruta != null)
					{
						rutas = $flete.ruta;
						TeLocal.text = TeForaneo.text = TeGdl.text = "ND";
						TeCentro.text = TeSud.text = TeRestoMundo.text = "ND";
						for (var n:Number=0; n < rutas.length; n++ )
						{
							var currentRuta:RutaFlete = new RutaFlete();
							currentRuta = rutas[n];
							
							if (currentRuta.destino == "Local")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtLocal.text = datosFE.valor;
								_tiempoLocal = datosFE.valor;
								cmbLocal.selectedIndex = cmbLocal.seleccionarValor(datosFE.texto,"valor");
								TeLocal.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Guadalajara")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtGDL.text = datosFE.valor;
								_tiempoGDL = datosFE.valor;
								cmbGDL.selectedIndex = cmbGDL.seleccionarValor(datosFE.texto,"valor");
								TeGdl.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Centroamérica")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtCentro.text = datosFE.valor;
								_tiempoCentro = datosFE.valor;
								cmbCentro.selectedIndex = cmbCentro.seleccionarValor(datosFE.texto,"valor");
								TeCentro.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Foraneo")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtForaneo.text = datosFE.valor;
								_tiempoForaneo = datosFE.valor;
								cmbForaneo.selectedIndex = cmbForaneo.seleccionarValor(datosFE.texto,"valor");
								TeForaneo.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Sudamérica")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtSuda.text = datosFE.valor;
								_tiempoSuda = datosFE.valor;
								cmbSud.selectedIndex = cmbSud.seleccionarValor(datosFE.texto,"valor");
								TeSud.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Resto del mundo")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtRestoMundo.text = datosFE.valor;
								_tiempoRestoMundo = datosFE.valor;
								cmbRest.selectedIndex = cmbRest.seleccionarValor(datosFE.texto,"valor");
								TeRestoMundo.text =  currentRuta.tiempoEntrega;
							}
						}
					}
				}
			}
			
			
			public function set recibeLogistica($logistica:Logistica):void
			{
				if ($logistica == null)
				{
					logistica = new Logistica();
					logisticaRespaldo = new Logistica();
					limpiar();
					habilitaTextos(false);
					return;
				}
				
				//limpiar();
				logisticaRespaldo = ObjectUtil.copy( $logistica ) as Logistica;
				logistica = ObjectUtil.copy( $logistica ) as Logistica;
				
				if (logistica.fleteExpress)
				{
					seleccionarCombos(logistica.fleteExpress);
				}
				
				engraneVisible(logistica.flete,false);
				engraneVisible(logistica.tiempoEntrega,false);
				checkHab_clickHandler();
			}
			
			private function validaciones($vieneDe:String):void
			{
				if ($vieneDe == "flete")
				{
					if (StringUtil.trim(txtConcepto.text) == '' ) {
						alertaSingleton.show("Es necesario que se agregue un Concepto.",catalogoAlertas.TIT_ADV_informacionIncompleta);
						return;
					}
					if (StringUtil.trim(txtDescripcion.text) == '' ) {
						alertaSingleton.show("Es necesario que se agregue una Leyenda.",catalogoAlertas.TIT_ADV_informacionIncompleta);
						return;
					}
					if (StringUtil.trim(txtPrecio.text) == '' || txtPrecio.text == '0'){
						alertaSingleton.show("Es necesario que el Monto sea mayor a 0.",catalogoAlertas.TIT_ADV_informacionIncompleta);
						return;
					}
					if (cmbRuta.selectedIndex == 0){
						alertaSingleton.show("Es necesario seleccionar una Ruta.",catalogoAlertas.TIT_ADV_informacionIncompleta);
						return;
					}
					vieneDe = $vieneDe;
					var exis:EventoCatProLogistica = new EventoCatProLogistica(EventoCatProLogistica.VERIFICAR_EXISTE_CODIGO_PRODUCTO);
					exis.fabrica = "Fletes";
					exis.codigo = txtConcepto.text;
					dispatchEvent(exis);
					
				}
				
			}
			
			public function set recibeExisteConcepto($existe:Boolean):void
			{
				if (!$existe)
				{
					if (vieneDe == "flete")
					{
						agregarConcepto();
					}
					if (vieneDe == "fleteExpres")
					{
						guardarFleteExpress();
					}
					vieneDe = "";
				}
				else
				{
					if (vieneDe != "")
						alertaSingleton.show("El concepto ingresado ya fue registrado.",catalogoAlertas.TIT_ADV_operacionImposible);
				}
			}
			
			protected function agregarConcepto():void
			{
				var flete:Flete = new Flete;
				var rutas:ArrayCollection = new ArrayCollection();
				var currentRuta:RutaFlete = new RutaFlete();
				
				currentRuta.destino = cmbRuta.selectedItem.valor;
				currentRuta.tiempoEntrega = "0";
				rutas.addItem(currentRuta);
				
				flete.concepto = txtConcepto.text;
				flete.leyenda = txtDescripcion.text;
				flete.monto = Number(txtPrecio.text);
				flete.nombreRuta = cmbRuta.selectedItem.valor;
				flete.ruta = rutas;
				flete.hide = true;
				logistica.flete.addItem(flete);
				
				txtConcepto.text = '';
				txtDescripcion.text = '';
				txtPrecio.text = '';
				cmbRuta.selectedIndex = 0;
				
				lstConceptosFlete.selectedIndex = lstConceptosFlete.dataProvider.length - 1;
			}
			
			
			private function editarInfo($vieneDe:String = ''):void
			{
				if (seEstaEditando ) 
				{
					if ($vieneDe == 'cancelar' ) 
					{
						setTimeout(acomodaTiempo, 400);
					}
					else
					{
						grpGuardarCancelar.visible = false;
						grpBotonEditar.visible = true;	
						habilitaTextos(false);
					}
				}
				else
				{
					engraneVisible(logistica.flete);
					engraneVisible(logistica.tiempoEntrega);
					setTimeout(muestraBotonCancelar, 250 );
				}
			}
			
			private function engraneVisible($array:ArrayCollection, $visible:Boolean = true):void
			{
				for ( var i:int = 0; i < $array.length; i++){
					$array[i].hide = $visible; 
				}
			}
			
			
			private function acomodaTiempo():void
			{
				grpGuardarCancelar.visible = false;
				grpBotonEditar.visible = true;
				grpListaConceptosExpress.visible = grpListaConceptosExpress.includeInLayout = true;
				spcConcepto.visible = spcConcepto.includeInLayout = false;
				spcListConcepto.visible = spcListConcepto.includeInLayout = false;
				spcConceptoExpress.visible = spcConceptoExpress.includeInLayout = false;
				spcListConceptoExpress.visible = spcListConceptoExpress.includeInLayout = false;
				dvhConcepto.visible = dvhConcepto.includeInLayout = false;
				dvhConceptoExpress.visible = dvhConceptoExpress.includeInLayout = false;
				grpConceptoFletes.visible = grpConceptoFletes.includeInLayout = false;
				grpConceptoFletesExpress.visible = grpConceptoFletesExpress.includeInLayout = false;
				spcFE.height = 30;
				
				habilitaTextos(false);
			}
			
			private function muestraBotonCancelar():void
			{
				grpGuardarCancelar.visible = true;
				grpBotonEditar.visible = false;
				grpListaConceptosExpress.visible = grpListaConceptosExpress.includeInLayout = false;
				spcConcepto.visible = spcConcepto.includeInLayout = true;
				spcConceptoExpress.visible = spcConceptoExpress.includeInLayout = true;
				spcListConcepto.visible = spcListConcepto.includeInLayout = true;
				spcListConceptoExpress.visible = spcListConceptoExpress.includeInLayout = true;
				dvhConcepto.visible = dvhConcepto.includeInLayout = true;
				dvhConceptoExpress.visible = dvhConceptoExpress.includeInLayout = true;
				grpConceptoFletes.visible = grpConceptoFletes.includeInLayout = true;
				grpConceptoFletesExpress.visible = grpConceptoFletesExpress.includeInLayout = true;
				spcFE.percentHeight = 0;
				
				habilitaTextos(true);
			}
			
			private function habilitaTextos($seHabilita:Boolean):void
			{
				txtConcepto.editable = $seHabilita;
				txtConceptoExpress.editable = $seHabilita;
				txtDescripcion.editable = $seHabilita;
				txtDescripcionExpress.editable = $seHabilita;
				checkHab.enabled = $seHabilita;
			}
			
			private function cancelaGuardado():void
			{
				recibeLogistica = logisticaRespaldo;
				engraneVisible(logistica.flete,false);
				engraneVisible(logistica.tiempoEntrega,false);
				limpiar();
			}
			
			private function limpiar():void
			{
				txtConcepto.text =  '';
				txtConceptoExpress.text = logistica.fleteExpress ? (logistica.fleteExpress as Flete).leyenda : '';
				txtConceptoExpress.errorString ='';
				txtDescripcion.text = '';
				txtDescripcionExpress.text = logistica.fleteExpress ? (logistica.fleteExpress as Flete).concepto : '';
				txtDescripcionExpress.errorString ='';
				txtPrecioExpress.text = logistica.fleteExpress ? (logistica.fleteExpress as Flete).monto.toString() : '';
				txtPrecioExpress.errorString ='';
				
				if (logistica.fleteExpress)
					checkHab.enabled = logistica.fleteExpress.habilitado;
				else
					checkHab.selected = false;
				
				txtLocal.text ='';
				txtGDL.text ='';
				txtCentro.text ='';
				txtForaneo.text ='';
				txtSuda.text ='';
				txtRestoMundo.text ='';
				
				cmbLocal.selectedIndex=0;
				cmbGDL.selectedIndex=0;
				cmbCentro.selectedIndex=0;
				cmbForaneo.selectedIndex=0;
				cmbSud.selectedIndex=0;
				cmbRest.selectedIndex=0;
				
				TeLocal.text = TeForaneo.text = TeGdl.text = "ND";
				TeCentro.text = TeSud.text = TeRestoMundo.text = "ND";
				
				if (logistica.fleteExpress)
				{
					lstRutas.visible = true;
					var rutas:ArrayCollection = new ArrayCollection();
					if (logistica.fleteExpress.ruta != null)
					{
						rutas = logistica.fleteExpress.ruta as ArrayCollection;
						for (var n:Number=0; n < rutas.length; n++ )
						{
							var currentRuta:RutaFlete = new RutaFlete();
							currentRuta = rutas[n];
							
							if (currentRuta.destino == "Local")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtLocal.text = datosFE.valor;
								_tiempoLocal = datosFE.valor;
								cmbLocal.selectedIndex = cmbLocal.seleccionarValor(datosFE.texto,"valor");
								TeLocal.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Guadalajara")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtGDL.text = datosFE.valor;
								_tiempoGDL = datosFE.valor;
								cmbGDL.selectedIndex = cmbGDL.seleccionarValor(datosFE.texto,"valor");
								TeGdl.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Centroamérica")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtCentro.text = datosFE.valor;
								_tiempoCentro = datosFE.valor;
								cmbCentro.selectedIndex = cmbCentro.seleccionarValor(datosFE.texto,"valor");
								TeCentro.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Foraneo")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtForaneo.text = datosFE.valor;
								_tiempoForaneo = datosFE.valor;
								cmbForaneo.selectedIndex = cmbForaneo.seleccionarValor(datosFE.texto,"valor");
								TeForaneo.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Sudamérica")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtSuda.text = datosFE.valor;
								_tiempoSuda = datosFE.valor;
								cmbSud.selectedIndex = cmbSud.seleccionarValor(datosFE.texto,"valor");
								TeSud.text = currentRuta.tiempoEntrega;
							}
							if (currentRuta.destino == "Resto del mundo")
							{
								datosFE = obtenerArray(currentRuta.tiempoEntrega);
								txtRestoMundo.text = datosFE.valor;
								_tiempoRestoMundo = datosFE.valor;
								cmbRest.selectedIndex = cmbRest.seleccionarValor(datosFE.texto,"valor");
								TeRestoMundo.text =  currentRuta.tiempoEntrega;
							}
						}
					}
				}
				else
				{
					lstRutas.visible = false;
				}
				
			}
			
			
			private function validarFleteExpres($vieneDe:String):void
			{
				activaCambios = false;
				
				var FExpres:Flete = new Flete();
				var rutas:ArrayCollection = new ArrayCollection();
				var concepto:String ="";
				var currentRuta:RutaFlete = new RutaFlete();
				var cont:Number = 0;
				var error:Array = new Array();
				
				
				if (checkHab.selected)
				{
					if (logistica.fleteExpress)
						FExpres = ObjectUtil.copy(logistica.fleteExpress) as Flete;
					else
						FExpres = new Flete();
					
					if(txtDescripcionExpress.text == '' || txtDescripcionExpress.text.length < 0){
						txtDescripcionExpress.errorString = "Es necesario llenar este campo";
						error.push(false);
					}
					else
					{
						txtDescripcionExpress.errorString = "";
					}
					
					if(txtConceptoExpress.text == '' || txtConceptoExpress.text.length < 0){
						txtConceptoExpress.errorString = "Es necesario llenar este campo";
						error.push(false);
					}
					else
					{
						txtConceptoExpress.errorString = "";
					}
					
					if(txtPrecioExpress.text == '' || txtPrecioExpress.text.length < 0){
						txtPrecioExpress.errorString = "Es necesario llenar este campo";
						txtPrecioExpress.text ='0';
						error.push(false);
					}
					else
					{
						txtPrecioExpress.errorString = "";
					}
					
					if (txtLocal.text.length > 0)
					{
						currentRuta = new RutaFlete();
						currentRuta.destino ="Local";
						currentRuta.tiempoEntrega = txtLocal.text +' '+cmbLocal.selectedItem.valor2;
						rutas.addItem( currentRuta );
						error.push(validarText(txtLocal,cmbLocal));
						cont++;
					}
					if (txtGDL.text.length > 0)
					{
						currentRuta = new RutaFlete();
						currentRuta.destino ="Guadalajara";
						currentRuta.tiempoEntrega = txtGDL.text +' '+cmbGDL.selectedItem.valor2;
						rutas.addItem( currentRuta );
						error.push(validarText(txtGDL,cmbGDL));
						cont++;
					}
					if (txtCentro.text.length > 0)
					{
						currentRuta = new RutaFlete();
						currentRuta.destino ="Centroamérica";
						currentRuta.tiempoEntrega = txtCentro.text +' '+cmbCentro.selectedItem.valor2;
						rutas.addItem( currentRuta );
						error.push(validarText(txtCentro,cmbCentro));
						cont++;
					}
					if (txtForaneo.text.length > 0)
					{
						currentRuta = new RutaFlete();
						currentRuta.destino ="Foraneo";
						currentRuta.tiempoEntrega = txtForaneo.text +' '+cmbForaneo.selectedItem.valor2;
						rutas.addItem( currentRuta );
						error.push(validarText(txtForaneo,cmbForaneo));
						cont++;
					}
					if (txtSuda.text.length > 0)
					{
						currentRuta = new RutaFlete();
						currentRuta.destino ="Sudamérica";
						currentRuta.tiempoEntrega = txtSuda.text +' '+cmbSud.selectedItem.valor2;
						rutas.addItem( currentRuta );
						error.push(validarText(txtSuda,cmbSud));
						cont++;
					}
					if (txtRestoMundo.text.length > 0)
					{
						currentRuta = new RutaFlete();
						currentRuta.destino ="Resto del mundo";
						currentRuta.tiempoEntrega = txtRestoMundo.text +' '+cmbRest.selectedItem.valor2;
						rutas.addItem( currentRuta );
						error.push(validarText(txtRestoMundo,cmbRest));
						cont++;
					}
					
					if (cont == 0)
					{
						alertaSingleton.show("Es necesario ingresar al menos una Ruta.",catalogoAlertas.TIT_ADV_informacionIncompleta);
						return;
					}
					
					FExpres.concepto = txtDescripcionExpress.text;
					FExpres.leyenda = txtConceptoExpress.text;
					FExpres.monto =  parseInt(txtPrecioExpress.text);
					FExpres.tiempoEntrega = concepto;
					FExpres.habilitado = checkHab.selected
					FExpres.ruta = rutas;
					logistica.fleteExpress = FExpres;	
					
				}
				else
				{
					if (logistica.fleteExpress)
						(logistica.fleteExpress as Flete).habilitado=false;
				} 
				
				for (var i:int = 0; i < error.length; i++) 	
				{
					if(!error[i])
					{
						alertaSingleton.show("Algunos de los datos que se han introducido no son válidos, favor de verificarlos.",catalogoAlertas.ADV_informacionIncompleta);
						return;
					}
				}
				
				if (checkHab.selected)
				{
					if (logisticaRespaldo.fleteExpress == null || logisticaRespaldo.fleteExpress.concepto != logistica.fleteExpress.concepto)
					{
						vieneDe = $vieneDe;
						var exis:EventoCatProLogistica = new EventoCatProLogistica(EventoCatProLogistica.VERIFICAR_EXISTE_CODIGO_PRODUCTO);
						exis.codigo = txtDescripcionExpress.text;
						exis.fabrica = "Fletes";
						dispatchEvent(exis);
					}
					else
						guardarFleteExpress();
				}
				else
				{
					guardarFleteExpress();
				}
				
			}
			
			private function guardarFleteExpress():void
			{
				var evento:EventoCatProLogistica = new EventoCatProLogistica(EventoCatProLogistica.ACTUALIZAR_LOGISTICA_SERVICE);
				engraneVisible(logistica.flete,false);
				engraneVisible(logistica.tiempoEntrega,false);
				logistica.idProveedor = _proveedor.idProveedor;
				evento.logistica = logistica;
				evento.ventana = "CatProveedor_Logistica ( idProveedor:"+logistica.idProveedor+" )";
				dispatchEvent(evento);
				
				editarInfo('guardar');
			}
			
			private function validarTextInput($txt:IVisualElement):void	
			{
				if ($txt is TextInput)
				{
					var _text:TextInput = $txt as TextInput;
					if(_text.text == '' || _text.text.length < 0)
						_text.errorString = "Es necesario llenar este campo";
				}
			}
			
			public function set confirmaUpdateLogistica($confirma:Boolean):void
			{
				txtConcepto.text = '';
				txtDescripcion.text = '';
				txtPrecio.text = '';
				cmbRuta.selectedIndex = 0;
				
				if ($confirma )
				{
					var event:EventoCatProLogistica = new EventoCatProLogistica(EventoCatProLogistica.OBTENER_LOGISTICA_PROVEEDOR_SERVICE);
					event.idProveedor = logistica.idProveedor;
					dispatchEvent(event);
					
					seEstaEditando=true;editarInfo('cancelar');
				}
			}
			
			protected function validarText($objetoVisual:IVisualElement,$combo:IVisualElement):Boolean
			{
				var error:ValidationResultEvent;
				
				if($objetoVisual != null)
				{
					var currentElement:txtInputBlancoDefaultPQNet = $objetoVisual as txtInputBlancoDefaultPQNet; 
					if (($combo as ComboCatalogos).selectedItem.valor == 'MESES')
					{
						if($objetoVisual is txtInputBlancoDefaultPQNet)
						{
							validarTexMaximoMeses.listener = currentElement;
							error = validarTexMaximoMeses.validate(currentElement.text);
						}
					}
					else
					{
						if($objetoVisual is txtInputBlancoDefaultPQNet)
						{
							validarTextInputRutas.listener = currentElement;
							error = validarTextInputRutas.validate(currentElement.text);
						}
					}
				} 
				
				if(error == null || error.results == null)
					return true;
				else
					return false;
			}
			
			protected function Text_keyDownHandler(event:KeyboardEvent,$objetoVisual:IVisualElement):void
			{
				if(event.charCode == 9) 
				{ 	
					event.stopImmediatePropagation();
					event.preventDefault();
					var obj:txtInputBlancoDefaultPQNet = $objetoVisual as txtInputBlancoDefaultPQNet;
					
					if (obj.id == 'txtLocal')
					{
						cmbLocal.setFocus();
						validarText($objetoVisual,cmbLocal);
					}
					if (obj.id == 'txtGDL')
					{
						cmbGDL.setFocus();
						validarText($objetoVisual,cmbGDL);
					}
					if (obj.id == 'txtForaneo')
					{
						cmbForaneo.setFocus();
						validarText($objetoVisual,cmbForaneo);
					}
					if (obj.id == 'txtCentro'){
						cmbCentro.setFocus();
						validarText($objetoVisual,cmbCentro);
					}
					if (obj.id == 'txtSuda')
					{
						cmbSud.setFocus();
						validarText($objetoVisual,cmbSud);
					}
					if (obj.id == 'txtRestoMundo')
					{
						cmbRest.setFocus();
						validarText($objetoVisual,cmbRest);
					}
				}
			}
			
			
			protected function combo_keyDownHandler(event:KeyboardEvent,$objetoVisual:IVisualElement):void
			{
				if(event.charCode == 9) 
				{ 	
					event.stopImmediatePropagation();
					event.preventDefault();
					var obj:ComboCatalogos = $objetoVisual as ComboCatalogos;
					
					if (obj.id == 'cmbLocal')
						txtGDL.setFocus();
					
					if (obj.id == 'cmbGDL')
						txtForaneo.setFocus();
					
					if (obj.id == 'cmbForaneo')
						txtCentro.setFocus();
					
					if (obj.id == 'cmbCentro')
						txtSuda.setFocus();
					
					if (obj.id == 'cmbSud')
						txtRestoMundo.setFocus();
				}
			}
			
			protected function checkHab_clickHandler():void
			{
				var $sehabilita:Boolean = checkHab.selected;
				txtLocal.enabled = $sehabilita;
				txtGDL.enabled = $sehabilita;
				txtCentro.enabled = $sehabilita;
				txtForaneo.enabled = $sehabilita;
				txtSuda.enabled = $sehabilita;
				txtRestoMundo.enabled = $sehabilita;
				
				cmbLocal.enabled = $sehabilita;
				cmbGDL.enabled = $sehabilita;
				cmbCentro.enabled = $sehabilita;
				cmbForaneo.enabled = $sehabilita;
				cmbSud.enabled = $sehabilita;
				cmbRest.enabled = $sehabilita;
				
			}
			
			public function inicia():void{
				seEstaEditando=true;
				acomodaTiempo();
				editarInfo('cancelar');
				cancelaGuardado();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<s:HGroup width="100%" height="100%" gap="0" id="grpContenedorPrincipal">
		
		<contenedores:VGroupConPaddingStandardPqNet width="100%" height="100%" id="grpInfo" >
			<s:BorderContainer borderVisible="false" width="100%" height="100%" backgroundColor="white" backgroundAlpha="0">
				<s:VGroup id="grpPrincipal" width="100%" height="100%" horizontalAlign="center" gap="10" >
					<s:HGroup width="100%" verticalAlign="bottom" >
						<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_logisticaGris}" />
						<label:TituloBankGothic_30 text="LOGISTICA"/>
						<s:Spacer width="100%" />
						<s:HGroup height="100%" verticalAlign="bottom" horizontalAlign="right" >
							<label:Texto_13_VerdeAzul text="Última actualización: "/>
							<label:Fecha_13_VerdeAzul id="lblFUA" fecha="{logistica.fua}"/>
						</s:HGroup>
					</s:HGroup>
					<otros:divisionGruesa width="100%" />
					
					<s:Scroller id="sclGeneral" maxWidth="1050" width="100%" height="100%" minWidth="340">
						<s:VGroup id="grpGeneral" width="60%" height="100%" horizontalAlign="center" gap="10" minWidth="340" >
							<s:VGroup width="100%" height="100%" horizontalCenter="0" >
								
								<s:VGroup id="grpFletes" width="100%" height="100%" verticalAlign="middle" paddingLeft="3" paddingRight="3" gap="10" >
									
									
									<!--/////////  FLETE   //////////////////  FLETE   //////////////////  FLETE   //////////////////  FLETE   //////////////////  FLETE   /////////-->
									<label:Titulo_16_pTop10 text="FLETES" width="100%" textAlign="right" />
									<otros:division width="100%" />
									<!--Creacion-->
									<s:HGroup width="100%" verticalAlign="middle" gap="10" >
										<s:VGroup id="grpConceptoFletes" width="100%" height="100%" gap="10" visible="false" includeInLayout="false">
											<label:Titulo text="Concepto:" paddingTop="0" />
											<textinput:txtInputBlancoDefaultPQNet id="txtConcepto" width="100%" />
											<label:Titulo text="Leyenda:" paddingTop="0" />
											<textinput:txtInputBlancoDefaultPQNet id="txtDescripcion" width="100%" />
											<label:Titulo id="lblRuta" text="Ruta:" paddingTop="0"  width="100%" />
											<comboCatalogo:ComboCatalogos  id="cmbRuta" creationComplete="cmbRuta.cargarRutas()" width="100%" selectedIndex="0" />
											<label:Titulo text="Monto: " paddingTop="0"/>
											<s:HGroup width="100%" verticalAlign="middle" gap="10" >
												<textinput:txtInputBlancoDefaultPQNet change="activaCambios = true;" width="100" textAlign="right" id="txtPrecio" restrict="0-9." />
												<label:Texto text="{CatProZonaTrabajo.currentProveedor.monedaVentaAbreviatura}" />
											</s:HGroup>
											<s:HGroup width="100%" horizontalAlign="center" >
												<pqNet:botonPqNetLargo width="100%" icono="agregar" click="validaciones('flete')" id="btnAgregarConcepto" colorBase="0x2e99b4" gradientePqnet="true" />
											</s:HGroup>
										</s:VGroup>
										<s:Spacer visible="false" includeInLayout="false" id="spcConcepto" />
										<otros:VDivisionHueca id="dvhConcepto" height="100%" visible="false" includeInLayout="false"/>
										<s:Spacer id="spcListConcepto" visible="false" includeInLayout="false" />
										<s:VGroup id="grpListaConceptos" width="100%" height="300" gap="10" >
											<s:HGroup width="100%" >
												<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_menulineas}" />
												<label:Titulo text="CATÁLOGO DE CONCEPTOS" verticalAlign="middle" />
											</s:HGroup>
											<s:List id="lstConceptosFlete" borderVisible="false" horizontalScrollPolicy="off" width="100%" height="100%" dataProvider="{logistica.flete}"
													itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.operativos.logistica.itemRender.CatProIR_ConceptoFletes"/>
										</s:VGroup>
									</s:HGroup>
									<!---->
									<!--/////////  FLETE   //////////////////  FLETE   //////////////////  FLETE   //////////////////  FLETE   //////////////////  FLETE   /////////-->
									<s:Spacer height="50"/>
									
									
									<!--/////////  FLETE EXPRES   //////////////////  FLETE EXPRES   //////////////////  FLETE EXPRES   //////////////////  FLETE EXPRES   //////////////////  FLETE EXPRES   /////////-->
									<s:Group width="100%">
										<chekbox:CheckRadioDefaultPQNet id="checkHab" label="Habilitado" tipoCheck="cuadrado" selected="{(logistica.fleteExpress as Flete).habilitado}" click="checkHab_clickHandler()"/> 
										<label:Titulo_16_pTop10 text="FLETE EXPRESS" right="0" />
									</s:Group>
									<otros:division width="100%" />
									<!--Creacion-->
									<s:VGroup width="100%" verticalAlign="middle" gap="10" >
										
										<s:VGroup id="grpListaConceptosExpress" width="100%" gap="10" >
											<label:Titulo text="{(logistica.fleteExpress as Flete).concepto}" />
											<label:Texto text="{(logistica.fleteExpress as Flete).leyenda}" />
											<label:Texto text="{(logistica.fleteExpress as Flete).monto} {(logistica.fleteExpress as Flete).monto ? CatProZonaTrabajo.currentProveedor.monedaVentaAbreviatura:''}" />
											
											<s:VGroup width="100%" id="lstRutas" >
												<s:HGroup width="100%">
													<s:VGroup width="100%" gap="10">
														<s:HGroup id="lblLocal" >
															<label:Titulo text="Local: " paddingTop="0"/>
															<label:Texto id="TeLocal" />
														</s:HGroup>
														<s:HGroup id="lblGdl" >
															<label:Titulo text="Guadalajara: " paddingTop="0"/>
															<label:Texto id="TeGdl" />
														</s:HGroup>
														<s:HGroup id="lblForaneo" >
															<label:Titulo text="Foráneo: " paddingTop="0"/>
															<label:Texto id="TeForaneo" />
														</s:HGroup>
													</s:VGroup>
													<s:VGroup width="100%" gap="10">
														<s:HGroup id="lblCentro" >
															<label:Titulo text="Centroámerica: " paddingTop="0"/>
															<label:Texto id="TeCentro" />
														</s:HGroup>
														<s:HGroup id="lblSud" >
															<label:Titulo text="Sudamérica: " paddingTop="0"/>
															<label:Texto id="TeSud" />
														</s:HGroup>
														<s:HGroup id="lblRestoMundo" >
															<label:Titulo text="Resto del mundo: " paddingTop="0"/>
															<label:Texto id="TeRestoMundo" />
														</s:HGroup>
													</s:VGroup>
												</s:HGroup>
											</s:VGroup>
										</s:VGroup>
										
										<s:VGroup id="grpConceptoFletesExpress" width="100%"  gap="10" visible="false" includeInLayout="false">
											<label:Titulo text="Descripción:" paddingTop="0" />
											<textinput:txtInputBlancoDefaultPQNet id="txtDescripcionExpress" text="{(logistica.fleteExpress as Flete).concepto}" width="100%" enabled="{checkHab.selected}" focusOut="validarTextInput(txtDescripcionExpress)" />
											<label:Titulo text="Leyenda para la oferta:" paddingTop="0" />
											<textinput:txtInputBlancoDefaultPQNet id="txtConceptoExpress"  text="{(logistica.fleteExpress as Flete).leyenda}" width="100%" enabled="{checkHab.selected}" focusOut="validarTextInput(txtConceptoExpress)"/>
											<label:Titulo text="Monto: " paddingTop="0"/>
											<s:HGroup width="100%" verticalAlign="middle" gap="10" >
												<textinput:txtInputBlancoDefaultPQNet change="activaCambios = true;" width="100" textAlign="right" id="txtPrecioExpress" restrict="0-9." focusOut="validarTextInput(txtPrecioExpress)"
																					  text="{(logistica.fleteExpress as Flete).monto}" enabled="{checkHab.selected}"/>
												<label:Texto text="{CatProZonaTrabajo.currentProveedor.monedaVentaAbreviatura}" />
											</s:HGroup>
											
											
											<label:Titulo id="lblTEntrega" text="Tiempo de Entrega:" width="100%"/>
											<s:HGroup width="100%" horizontalAlign="center"  >
												<s:Spacer width="35%"/>
												
												<s:HGroup height="100%" >
													<s:VGroup width="100%" paddingTop="-3" >
														<label:Titulo text="Local: " width="100%" textAlign="right"/>
														<label:Titulo text="Guadalajara: " width="100%" textAlign="right"/>
														<label:Titulo text="Foráneo: " width="100%" textAlign="right"/>
													</s:VGroup>
													<s:VGroup width="50" >
														<textinput:txtInputBlancoDefaultPQNet id="txtLocal" width="100%" restrict="0-9" maxChars="2" textAlign="right" keyDown="Text_keyDownHandler(event,txtLocal)" focusOut="validarText(txtLocal,cmbLocal)"/>
														<textinput:txtInputBlancoDefaultPQNet id="txtGDL" width="100%" restrict="0-9" maxChars="2" textAlign="right" keyDown="Text_keyDownHandler(event,txtGDL)" focusOut="validarText(txtGDL,cmbGDL)"/>
														<textinput:txtInputBlancoDefaultPQNet id="txtForaneo" width="100%" restrict="0-9" maxChars="2" textAlign="right" keyDown="Text_keyDownHandler(event,txtForaneo)" focusOut="validarText(txtForaneo,cmbForaneo)"/>
													</s:VGroup>  
													<s:VGroup width="150" height="100%" >
														<comboCatalogo:ComboCatalogos id="cmbLocal"		dataProvider="{_dias}" keyDown="combo_keyDownHandler(event,cmbLocal)"/>
														<comboCatalogo:ComboCatalogos id="cmbGDL" 		dataProvider="{_dias}" keyDown="combo_keyDownHandler(event,cmbGDL)"/>
														<comboCatalogo:ComboCatalogos id="cmbForaneo" 	dataProvider="{_dias}" keyDown="combo_keyDownHandler(event,cmbForaneo)"/>
													</s:VGroup>  
													
												</s:HGroup>  
												
												<s:Spacer width="30%"/>
												
												<s:HGroup width="100%" height="100%">
													<s:VGroup height="100%" paddingTop="-3">
														<label:Titulo text="Centroamérica: " width="100%" textAlign="right"/>
														<label:Titulo text="Sudamérica: "  width="100%" textAlign="right"/>
														<label:Titulo text="Resto del Mundo: "  width="100%" textAlign="right"/>
													</s:VGroup>
													<s:VGroup width="50" >
														<textinput:txtInputBlancoDefaultPQNet id="txtCentro" width="100%" restrict="0-9" maxChars="2" textAlign="right" keyDown="Text_keyDownHandler(event,txtCentro)" focusOut="validarText(txtCentro,cmbCentro)"/>
														<textinput:txtInputBlancoDefaultPQNet id="txtSuda" width="100%" restrict="0-9" maxChars="2" textAlign="right" keyDown="Text_keyDownHandler(event,txtSuda)" focusOut="validarText(txtSuda,cmbSud)"/>
														<textinput:txtInputBlancoDefaultPQNet id="txtRestoMundo" width="100%" restrict="0-9" maxChars="2" textAlign="right" keyDown="Text_keyDownHandler(event,txtRestoMundo)" focusOut="validarText(txtRestoMundo,cmbRest)"/>
													</s:VGroup>  
													<s:VGroup width="150">
														<comboCatalogo:ComboCatalogos id="cmbCentro" 	dataProvider="{_dias}" keyDown="combo_keyDownHandler(event,cmbCentro)"/>
														<comboCatalogo:ComboCatalogos id="cmbSud" 		dataProvider="{_dias}" keyDown="combo_keyDownHandler(event,cmbSud)"/>
														<comboCatalogo:ComboCatalogos id="cmbRest" 		dataProvider="{_dias}"/>
													</s:VGroup>
												</s:HGroup>
												<s:Spacer width="35%"/>
											</s:HGroup>
											
											
										</s:VGroup>
										<s:Spacer visible="false" includeInLayout="false" id="spcConceptoExpress" />
										<otros:VDivisionHueca id="dvhConceptoExpress" height="100%" visible="false" includeInLayout="false"/>
										<s:Spacer id="spcListConceptoExpress" visible="false" includeInLayout="false" />
									</s:VGroup>
									<s:Spacer id="spcFE" height="30"/>
								</s:VGroup>
							</s:VGroup>
						</s:VGroup>
					</s:Scroller>
					<s:VGroup width="100%" gap="10" >
						<otros:divisionGruesa width="100%" />
						<s:Group width="100%" id="grpBotones">
							
							<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" id="grpBotonEditar" >
								<pqNet:botonPqNetLargo label="Editar" id="btnEditar" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL}" click="seEstaEditando = false; editarInfo()" />
							</s:HGroup>
							
							<s:HGroup width="100%" id="grpGuardarCancelar" visible="false" >
								<pqNet:botonPqNetLargo label="Guardar" id="btnGuardar" click="seEstaEditando = true; validarFleteExpres('fleteExpres');" />
								<s:Spacer width="100%" />
								<pqNet:botonPqNetLargo label="Cancelar" colorBase="0x{catalogoColores.LABEL_ROJO_CLARO}" click="seEstaEditando = true; editarInfo('cancelar'); cancelaGuardado()" id="btnCancelar" />
							</s:HGroup>
							
						</s:Group>
					</s:VGroup>
					
				</s:VGroup>
				
			</s:BorderContainer>
		</contenedores:VGroupConPaddingStandardPqNet>
	</s:HGroup>
	
</s:Group>
