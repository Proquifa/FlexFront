<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:texto="skins.skin.comun.consultas.panelCtaDetalle.*"
				xmlns:label="skins.skin.label.*"
				xmlns:otros="skins.otros.*"
				autoDrawBackground="false"
				height="100%" width="100%"
				resize="resizeHandler(event)" xmlns:pqNet="skins.botones.pqNet.*"
				>
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.soliciud.EventoSolicitarVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.DocumentoOrdenDespacho;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.DocumentoSolicitudVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.events.ResizeEvent;
			import mx.utils.ObjectUtil;
			
			
			import skins.catalogos.catalogoIconosBotones;
			import skins.skin.textarea.TextArea2D_azulSkin;
			import skins.skin.textinput.skinTextInpuntContornoAzul;
			
			[Bindable] public var font10:Number;
			[Bindable] public var font21:Number;
			[Bindable] public var font18:Number = 18;
			[Bindable] public var font14:Number = 14;
			[Bindable] public var flechaWidth:Number;
			[Bindable] public var flechaHeight:Number;
			[Bindable] private var heightTotal:Number;
			[Bindable] private var current:DocumentoSolicitudVisita;
			
			
			override public function set data(value:Object):void
			{
				super.data = value;
				
				/*if(data.numFila==1)
					linea.visible = linea.includeInLayout = false;
				else
					linea.visible = linea.includeInLayout = true;*/
				
				current = ObjectUtil.copy(value) as DocumentoSolicitudVisita;
			}
			
			override protected function updateDisplayList($width:Number, $height:Number):void
			{
				super.updateDisplayList($width,$height);
			}
			
			protected function resizeHandler(event:ResizeEvent):void
			{
				flechaWidth= (18 / 478) * (unscaledWidth);
				flechaHeight = (28 / 134) * (unscaledHeight);
				font21 = (21 / 478) * (unscaledWidth);
				font18 = (18 / 478) * (unscaledWidth);
				font14 = (14 / 478) * (unscaledWidth);
				font10 = (10 / 478) * (unscaledWidth);
				
				flechaWidth = flechaWidth > 18 ? 18:flechaWidth;
				flechaHeight = flechaHeight > 28 ? 28:flechaHeight;
				font21 = font21 > 21 ? 21:font21;
				font21 = font21 < 10 ? 10:font21;
				
				font18 = font18 > 18 ? 18:font18;
				font18 = font18 < 9 ? 9:font18;
				
				font14 = font14 > 14 ? 14:font14;
				font14 = font14 < 7 ? 7:font14;
				
				font10 = font10 > 10 ? 10:font10;
				font10 = font10 < 8 ? 8:font10;
			}
			
			protected function edit(event:MouseEvent):void
			{
				dispatchEvent( new Event("cambiarVistaEditable",true));
				cambiarEditado(true);
				border.visible = border.includeInLayout = false;
			}
			
			protected function eliminarElementos(event:MouseEvent):void
			{
				if(EventoSolicitarVisita.bloqueoEditarDoc){
					event.preventDefault();
				}
				else{
					dispatchEvent( new Event("eliminarDocumento",true));
				}
			}
			
			protected function deseleccionar(event:MouseEvent):void
			{
				dispatchEvent( new Event("deseleccionar",true));
				/*editadoActivo = true;*/
				
			}
			protected function cancelar(event:MouseEvent):void
			{
				cambiarEditado(false);
				dispatchEvent( new Event("cambiarVistaNormal",true));
				border.visible = border.includeInLayout = true;
			}
			
			protected function aceptarCambios(event:MouseEvent):void
			{
				data.descripcion = txtDescripcion.text;
				data.titulo = txtTitulo.text;
				cambiarEditado(false);
				dispatchEvent( new Event("cambiarVistaNormal",true));
				border.visible = border.includeInLayout = true;

			}
			protected function verDoc(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("file://"+  encodeURI(current/**/.ruta));
				navigateToURL(request);
			}
			
			private var file:File;
			public function recarga(event:MouseEvent):void
			{
				var docFilter:FileFilter;
				file = new File();
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				file.addEventListener(Event.COMPLETE,completeHandlerR);
				docFilter = new FileFilter("Documents", "*.pdf");
				file.browse([docFilter])
			}
			private function selectHandler(event:Event):void
			{
				var file:FileReference = FileReference(event.target);
				file.load();
			}
			private function ioErrorHandler(event:IOErrorEvent):void
			{
				trace("ioErrorHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void
			{
				var file:FileReference = FileReference(event.target);
				trace("progressHandler: name=" + file.name + "bytesLoaded = " + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			private function completeHandlerR(event:Event):void
			{
				trace("ARCHIVO CARGADO: " + event);
				
				var tmpAdicional:DocumentoOrdenDespacho = new DocumentoOrdenDespacho();
				try
				{
					/*tmpAdicional = ObjectUtil.copy(currentDocumentoOrden) as DocumentoOrdenDespacho;*/
					var archivo:DocumentoSolicitudVisita = new DocumentoSolicitudVisita();
					/*archivo.nombre = event.target.name;
					archivo.titulo = event.target.name;*/
					archivo.archivo = event.target.data;
					archivo.ruta = file.nativePath;
					
					data.archivo = archivo.archivo;
					data.ruta = archivo.ruta;
					
				}
				catch (error:*){
					alertaSingleton.show("No se encontro archivo");
				}
				
			}
			private function cambiarEditado(valor:Boolean):void
			{
				if(valor){
					grpEdit.visible = grpEdit.includeInLayout = true;
					grpPrincipal.visible = grpPrincipal.includeInLayout = false;
					imageEliminar.visible = imageEliminar.includeInLayout = false;
					fondoNormal.visible = fondoNormal.includeInLayout = false;
					fondoEditar.visible = fondoEditar.includeInLayout = true;
					EventoSolicitarVisita.bloqueoEditarDoc = true;
					border.visible = border.includeInLayout = false;
				}
				else{
					grpEdit.visible = grpEdit.includeInLayout = false;
					grpPrincipal.visible = grpPrincipal.includeInLayout = true;
					imageEliminar.visible = imageEliminar.includeInLayout = true;
					fondoNormal.visible = fondoNormal.includeInLayout = true;
					fondoEditar.visible = fondoEditar.includeInLayout = false;
					EventoSolicitarVisita.bloqueoEditarDoc = false;
					border.visible = border.includeInLayout = true;
				}
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	<s:Group width="100%" height="100%">
		<!--<s:VGroup includeIn="selected" id="border" width="100%" height="100%" paddingBottom="1">-->
		<s:Rect includeIn="selected" id="border" depth="5" width="100%" height="100%" visible="true" includeInLayout="true" left="0" right="0" top="0" bottom="0">
			<s:stroke>
				<s:SolidColorStroke color="#b6b6b6" weight="1"/>
			</s:stroke>
		</s:Rect>
		<!--</s:VGroup> --> 
		
		<s:Rect id="fondoNormal" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#FFFFFF" color.selected="#edeef0" color.hovered="#f4f4f5" />
			</s:fill>
		</s:Rect>
		
		<s:Rect id="fondoEditar" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#FFFFFF" />
			</s:fill>
		</s:Rect>
		
		
		<s:VGroup width="100%" height="100%" id="grpPrincipal">
			<otros:LineaDivision visible="{EventoSolicitarVisita.indiceSiguiente == itemIndex ? false:true}" id="linea" width="100%" height="2" color="#edeef0" top="0" depth="-1"/>
			
			<s:HGroup width="100%" height="100%" paddingTop="20" paddingBottom="18" paddingLeft="10" paddingRight="20"  verticalAlign="middle">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{font18}" fontWeight="bold" text="{current.titulo}" width="100%" textAlign="left" maxDisplayedLines="1"/>
				<!--<s:Spacer width="100%" />-->
				<mx:Image includeIn="normal,hovered" id="eliminar" source="{catalogoIconosBotones.getInstance().bote_eliminar}" verticalCenter="0" right="15" click="eliminarElementos(event)" mouseDown="eliminarElementos(event)"/>
			</s:HGroup>
			<!-- EstadoEditado -->
			<s:VGroup width="100%" height="100%" includeIn="selected" paddingLeft="10" paddingRight="20" paddingBottom="20">
				<!--<s:Label styleName="tab_texto_14_Helvetica" fontWeight="bold" text="{current.titulo}" paddingTop="10" fontSize="{font18}" color="#000000"/>-->
				<s:HGroup paddingLeft="-20" paddingRight="-20" width="100%" height="2">
					<otros:LineaDivision width="100%" height="2" color="#d5d6d8" top="0"/>
				</s:HGroup>  
				
				<label:TituloHelvetica_10_Blanco fontWeight="normal" text="{current.descripcion}" height="100%" width="100%" fontSize="{font14}" color="#000000" paddingTop="10" maxDisplayedLines="10"/>
			</s:VGroup>
			<s:HGroup includeIn="selected" width="100%" horizontalAlign="right" paddingBottom="10" paddingRight="10">
				<pqNet:botonPqNetLargo label="EDITAR" height="100%" width="100%" maxWidth="134" maxHeight="40" colorBase="#008894" color="#ffffff" click="edit(event)" right="0"/>
			</s:HGroup>  
			
			
		</s:VGroup>
		<mx:Image includeIn="selected" id="imageEliminar" source="{catalogoIconosBotones.getInstance().cerrar}" top="5" right="5" click="deseleccionar(event)" />
		
		<s:VGroup id="grpEdit" width="100%" height="100%" visible="false" includeInLayout="false" >
			<s:HGroup width="100%" height="100%" maxHeight="40">
				<s:TextInput fontFamily="Helvetica" fontSize="{font18}" fontWeight="bold" id="txtTitulo" text="{current.titulo}" skinClass="skins.skin.textinput.skinTextInpuntContornoAzul" width="100%" height="100%" maxHeight="30"/>
				<s:VGroup width="100%" height="100%" maxWidth="40" maxHeight="30">
					<mx:Image source="{catalogoIconosBotones.getInstance().vista_previa}" click="verDoc(event)"/>
				</s:VGroup>  
				<s:VGroup width="100%" height="100%" maxWidth="40" maxHeight="30">
					<pqNet:botonPqNetLargo  id="btnRecargar"  width="40" height="30" icono="recargarImg" 
											colorBase="0x008894" click="recarga(event)"/>
				</s:VGroup>
			</s:HGroup>
			<s:TextArea fontFamily="Helvetica" fontSize="{font18}" id="txtDescripcion" text="{current.descripcion}" skinClass="skins.skin.textarea.TextArea2D_azulSkin" width="100%" height="100%" maxHeight="100"/>
			<s:HGroup width="100%" height="100%" verticalAlign="middle" maxHeight="46">
				<pqNet:botonPqNetLargo label="CANCELAR" height="100%" width="100%" maxWidth="120" maxHeight="35" colorBase="#008894" color="#ffffff" click="cancelar(event)"/>
				<s:Spacer width="100%"/>
				<pqNet:botonPqNetLargo label="ACEPTAR" height="100%" width="100%" maxWidth="120" maxHeight="35" colorBase="#008894" color="#ffffff" click="aceptarCambios(event)"/>
			</s:HGroup>  
		</s:VGroup> 
	</s:Group>
	
	
	
</s:ItemRenderer>
