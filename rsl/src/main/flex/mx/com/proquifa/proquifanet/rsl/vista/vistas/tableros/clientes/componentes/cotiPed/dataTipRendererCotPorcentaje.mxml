<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 
		 autoDrawBackground="false"
		 mouseOut="mouseOutHandler()"
		 hideEffect="{fxFade}">
	<fx:Declarations>	
		<s:Fade id="fxFade" duration="200" alphaFrom="1" alphaTo="0"/>
		<s:SolidColor id="s1" color="0x{catalogoColores.LABEL_NEGRO}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[

			import mx.charts.HitData;
			import mx.charts.series.ColumnSeries;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.events.FlexEvent;
			
			import skins.catalogos.catalogoColores;
			
			private var _data:Object = new Object();
			
			override public function set data(value:Object):void
			{
				_data = value;
					if( (value.element as ColumnSeries).yField == "cotizado" )
					{
						labelDisplay.text = '$ '+UtilsFormatosNumericos.precisionADosDecimalesConComas( (value.item.cotizado as Number) );
						var porcentajePedidoC:Number=100;
						labelDisplayPorcentaje.text = '( '+UtilsFormatosNumericos.precisionADosDecimalesConComas( (porcentajePedidoC as Number) )+' %'+' )';
						labelLeyenda.text="Cotizado";
					}
					else if( (value.element as ColumnSeries).yField == "pedido" )
					{
						labelDisplay.text = '$ '+UtilsFormatosNumericos.precisionADosDecimalesConComas( (value.item.pedido as Number) );
						//Mostrar que porcentaje de lo cotizado representa lo pedido
						labelDisplayPorcentaje.visible=labelDisplayPorcentaje.includeInLayout=true;
						var porcentajePedido:Number=((value.item.pedido as Number)*100)/(value.item.cotizado as Number);
						labelDisplayPorcentaje.text = '( '+UtilsFormatosNumericos.precisionADosDecimalesConComas( (porcentajePedido as Number) )+' %'+' )';
						labelLeyenda.text="Pedido";
					}
			}
			
			override public function move(x:Number, y:Number):void
			{
				if( (_data.element as ColumnSeries).yField == "pedido" ) x -= 0;
				super.move(x-25 , y + 20);//28
			}  
			
			protected function removerToolTip():void
			{
				//trace('delete');
				visible = false;
				includeInLayout = false;
			}
			
			private var idTimeOut:uint;
			
			protected function mouseOutHandler():void
			{
				//trace('comienza timer');
				clearInterval( idTimeOut );
				idTimeOut = setTimeout( removerToolTip, 4500);
			}
			
		]]>
	</fx:Script>
	<s:HGroup verticalAlign="middle">

			
			<s:Ellipse width="10" height="10" x="0" y="18"  includeInLayout="false" id="ciruloBarra">
				<s:fill>
					<s:SolidColor color="0x424242"/>
				</s:fill>		
			</s:Ellipse>
			<s:Line xFrom="0" xTo="60" yFrom="0" yTo="0" >
				<s:stroke>
					<s:SolidColorStroke color="#424242" weight="3"/>
				</s:stroke>
			</s:Line>

		<s:VGroup height="100%" width="100%" textAlign="center" horizontalAlign="center">
			<s:Label fontFamily="Helvetica" fontWeight="bold" fontStyle="normal" fontSize="10" id="labelDisplay">
				<s:filters>
					<s:DropShadowFilter  id="sombraBoton" alpha="1" angle="45.0" blurX="3" blurY="3"
										 color="#FFFFFF" distance="0" hideObject="false" inner="false"
										 knockout="false" quality="3" strength="4"/>
				</s:filters>
			</s:Label>
			<s:Label fontFamily="Helvetica" fontWeight="bold" fontStyle="normal" fontSize="10" id="labelDisplayPorcentaje">
				<s:filters>
					<s:DropShadowFilter  id="sombraBotonPorcentaje" alpha="1" angle="45.0" blurX="3" blurY="3"
										 color="#FFFFFF" distance="0" hideObject="false" inner="false"
										 knockout="false" quality="3" strength="4"/>
				</s:filters>
			</s:Label>
			<s:Label fontFamily="Helvetica" fontWeight="bold" fontStyle="normal" fontSize="10" id="labelLeyenda">
				<s:filters>
					<s:DropShadowFilter  id="sombraBotonLeyenda" alpha="1" angle="45.0" blurX="3" blurY="3"
										 color="#FFFFFF" distance="0" hideObject="false" inner="false"
										 knockout="false" quality="3" strength="4"/>
				</s:filters>
			</s:Label>
		</s:VGroup>
	</s:HGroup>
</s:ItemRenderer>
