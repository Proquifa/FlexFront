<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="50" minHeight="31" 
             alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
	
    <fx:Script fb:purpose="styling">
        <![CDATA[         
			import skins.catalogos.catalogoColores;
			
			import spark.components.Group;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
			
			
			
			private var _imageDown:Class;
			private var _imageUp:Class;
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
               /*  var cr:Number = getStyle("cornerRadius");
                
                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                    shadow.radiusX = cornerRadius;
                    fill.radiusX = cornerRadius;
                    lowlight.radiusX = cornerRadius;
                    highlight.radiusX = cornerRadius;
                    border.radiusX = cornerRadius;
                }
                
                if (highlightStroke) highlightStroke.radiusX = cornerRadius;
                if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
                if (hldownstroke2) hldownstroke2.radiusX = cornerRadius; */
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }

			[Bindable]
			public function get imageDown():Class
			{
				return _imageDown;
			}

			public function set imageDown(value:Class):void
			{
				_imageDown = value;
			}

			[Bindable]
			public function get imageUp():Class
			{
				return _imageUp;
			}

			public function set imageUp(value:Class):void
			{
				_imageUp = value;
			}

            
           /*  private var cornerRadius:Number = 2; */
                                 
        ]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" stateGroups="normal" />
        <s:State name="over" stateGroups="normal"/>
        <s:State name="down" />
        <s:State name="disabled" />
		
    </s:states>
	
	<s:Image id="imgIcono" minWidth="23" verticalCenter="0" backgroundAlpha="0" source.normal="{imageUp}" source.down="{imageDown}" />
	
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
    <s:Label id="labelDisplay" maxDisplayedLines="1" fontSize="14"
             verticalCenter="1" verticalAlign="middle" text="sin definir" color.normal="{0x000000}" color.down="{catalogoColores.LABEL_VERDE_AZUL}"
             left="{imgIcono.width +10}" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
