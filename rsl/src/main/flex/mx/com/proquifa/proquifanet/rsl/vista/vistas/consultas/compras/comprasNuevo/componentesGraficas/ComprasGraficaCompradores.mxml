<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componentes ="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*"
		 xmlns:graficas="skins.skin.graficas.*"
		 width="100%" height="100%"  
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Compra;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.utils.ObjectUtil;
			
			private var keys:Object;
			[Bindable] private var _infoComprador:ArrayCollection;
			
			public function set obtenerListaCompras($infoGrafica:ArrayCollection):void{
				if($infoGrafica == null) return;
				
				_infoComprador = new ArrayCollection();
				myChart.dataProvider = new ArrayCollection();
				
				var arrayTemp:Array = (ObjectUtil.copy($infoGrafica) as ArrayCollection).source;
				
				/**
				 * Se filtra de universo de compras, las que tengan estado Cancelada y cacelable
				 * **/
				var arrayComprasSinCanceladasYBles:Array = new Array();
				arrayComprasSinCanceladasYBles = arrayTemp.filter(quitarCanceladasYBles);
				
				arrayComprasSinCanceladasYBles.sortOn("comprador");
				
				/**
				 * arreglo temporal para controlar el ciclo del for que se encargará de sumar las cantidades de cada Comprador
				 * quitando las duplicados
				 * */
				
				keys= new Object();
				var arrayTotalCompradores:Array = new Array();
				arrayTotalCompradores = arrayComprasSinCanceladasYBles.filter(quitaDuplicados);
				
				/**
				 * Se forman los objetos que serán enviados a la grafica, los totales de cada Comprador
				 * */
				
				FormarLosCompradores(arrayTotalCompradores,arrayComprasSinCanceladasYBles,_infoComprador);
				
					myChart.dataProvider = myChart.aplicarFormatoConsultaCompras(_infoComprador);
				
				//Para liberar memoria
				arrayComprasSinCanceladasYBles = new Array();
				arrayTotalCompradores = new Array();
			}
			
			private function FormarLosCompradores(TotalCompradores:Array,compradoresInfo:Array,infoCompradores:ArrayCollection):void
			{
				var totalPartidas:int;
				var totalPiezas:int;
				var totalCompras:int;
				var totalMonto:Number;
				var totalProveedores:int;
				var keysProvee:Object;
				
				var currentPartidaCompra:Compra; 
				var j:int;
				var itemResumenConsulta:ResumenConsulta;
				for(var i:int =0; i<TotalCompradores.length; i++){
					j=0;
					keys = new Object();
					keysProvee = new Object();
					totalPartidas =0;
					totalPiezas =0;
					totalCompras =0;
					totalMonto =0;
					totalProveedores =0;
					currentPartidaCompra = compradoresInfo[j] as Compra;
					while( (TotalCompradores[i] as Compra).comprador == currentPartidaCompra.comprador){
						totalPartidas += currentPartidaCompra.totalPartidas;
						totalPiezas += currentPartidaCompra.totalPiezas_partidas;
						totalMonto += currentPartidaCompra.montoTotalDolares_partidas;
						
						if(!keys.hasOwnProperty(currentPartidaCompra.clave)){
							keys[currentPartidaCompra.clave]= currentPartidaCompra.clave;
							totalCompras++;
						}
						
						if(!keysProvee.hasOwnProperty(currentPartidaCompra.nombreProveedor)){
							keysProvee[currentPartidaCompra.nombreProveedor] = currentPartidaCompra.nombreProveedor;
							totalProveedores++;
						}
						
						compradoresInfo.shift();
						if(compradoresInfo.length >0)
							currentPartidaCompra = compradoresInfo[j] as Compra;
						else
							currentPartidaCompra =new Compra();
					}
					
					itemResumenConsulta = new ResumenConsulta();
					itemResumenConsulta.etiqueta = (TotalCompradores[i] as Compra).comprador.toLocaleUpperCase();
					itemResumenConsulta.total = totalMonto;
					itemResumenConsulta.clientes_proveedores = totalProveedores;
					itemResumenConsulta.totalCompras = totalCompras;
					itemResumenConsulta.partidas = totalPartidas;
					itemResumenConsulta.piezasTotal = totalPiezas;
					
					infoCompradores.addItem(ObjectUtil.copy(itemResumenConsulta));
				}
			}
			private function quitarCanceladasYBles(item:Compra, id:uint, _array:Array):Boolean
			{
				if(item.estado != 'Cancelada' && item.estado != 'Cancelable'){
					return true;
				}else{
					return false;
				}
			}
			private function quitaDuplicados(item:Compra, id:uint, array:Array):Boolean
			{
				if(keys.hasOwnProperty(item.comprador)){
					return false;
				}else{
					keys[item.comprador] = item.comprador;
					return true;
				}
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center">
		<s:Spacer width="100%" height="5%"/>
		<componentes:tituloChartTablero width="100%" text="COMPRADORES" textAlign="center" />
	</s:VGroup>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:Spacer width="100%" height="10%" />
		<graficas:PieChartPqGris id="myChart" width="100%" height="100%" horizontalCenter="0" verticalCenter="0"
								 dataProvider="{null}"
								 lineasHabilitadas="true" etiquetasHabilitadas="true" habilitarResumen="true"
								 showDataTips="false"  innerRadius=".5">   
			<graficas:series>
				<graficas:pieSeriesPqNet field="total"/> <!--piezasTotal-->
			</graficas:series>
		</graficas:PieChartPqGris>
		<s:Spacer width="100%" height="30%"/>
	</s:VGroup>
</s:Group>