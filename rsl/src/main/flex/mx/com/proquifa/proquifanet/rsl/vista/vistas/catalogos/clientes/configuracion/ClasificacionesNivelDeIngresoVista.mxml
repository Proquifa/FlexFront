<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:label="skins.skin.label.*" 
		  xmlns:pqNet="skins.botones.pqNet.*"
		  xmlns:otros="skins.otros.*"
		  xmlns:textinput="skins.skin.textinput.*"
		  width="100%" height="100%"
		  paddingTop="10" horizontalAlign="center"
		  
		  >
	
	<fx:Declarations>
		
		<s:NumberValidator id="validatorPorcentajePositivo"
						   allowNegative="false" 
						   domain="real" 
						   decimalSeparator="." 
						   decimalPointCountError="Hay más de un punto decimal."
						   fractionalDigits="2"
						   fractionalDigitsError="El número de decimales superó el máximo de dos permitido."
						   required="true"
						   requiredFieldError="Este campo no puede quedar vacio."
						   parseError="No es un número valido."
						   negativeError="No se permite que el número sea negativo."
						   />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientes_General;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Empleado;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.NivelIngreso;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.core.IVisualElement;
			import mx.events.ValidationResultEvent;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			
			private var seEstaEditando:Boolean = false;
			private var roles:ArrayCollection = DatosGlobales.getInstance()._usuario.roles;
			
			
			public function iniciarVista():void
			{
				limpiarContenido();
				habilitarEdicionDeContenido(false);
				
				grpGuardarCancelar.includeInLayout = grpGuardarCancelar.visible = false;
				btnEditar.includeInLayout = btnEditar.visible = true;
				
				var cambio:Boolean = false;
				for (var j:Number=0; j<roles.length; j++)
				{
					if (roles[j]=="CatCliente_Master")
					{
						cambio = true;
						break;
					}
					
				}
				
				if (cambio)
				{
					btnEditar.enabled = true;
				}
				else
				{
					btnEditar.enabled = false;
				}
				
				
				
				dispatchEvent(new EventoCatClientes_General(EventoCatClientes_General.OBTENER_CLASIFICACION_DE_NIVELES_DE_INGRESO));
			}
			
			private function habilitarEdicionDeContenido($habilitar:Boolean):void
			{
				
				habilitarDeshabilitarPorTipoObjeto(txtInputMinAAPLUS,$habilitar);
				
				habilitarDeshabilitarPorTipoObjeto(txtInputMinAA,$habilitar);
				habilitarDeshabilitarPorTipoObjeto(txtInputMaxAA,$habilitar);
				
				habilitarDeshabilitarPorTipoObjeto(txtInputMinAM,$habilitar);
				habilitarDeshabilitarPorTipoObjeto(txtInputMaxAM,$habilitar);
				
				habilitarDeshabilitarPorTipoObjeto(txtInputMinAB,$habilitar);
				habilitarDeshabilitarPorTipoObjeto(txtInputMaxAB,$habilitar);
				
				habilitarDeshabilitarPorTipoObjeto(txtInputMinMA,$habilitar);
				habilitarDeshabilitarPorTipoObjeto(txtInputMaxMA,$habilitar);
				
				habilitarDeshabilitarPorTipoObjeto(txtInputMinMM,$habilitar);
				habilitarDeshabilitarPorTipoObjeto(txtInputMaxMM,$habilitar);
				
				habilitarDeshabilitarPorTipoObjeto(txtInputMinMB,$habilitar);
				habilitarDeshabilitarPorTipoObjeto(txtInputMaxMB,$habilitar);
				
			}
			
			private function habilitarDeshabilitarPorTipoObjeto($objeto:IVisualElement, $habilitar:Boolean):void
			{
				if($objeto != null)
				{
					if($objeto is txtInputBlancoDefaultPQNet)
					{
						($objeto as txtInputBlancoDefaultPQNet).editable = $habilitar; 
						($objeto as txtInputBlancoDefaultPQNet).focusEnabled = $habilitar; 
						($objeto as txtInputBlancoDefaultPQNet).mouseEnabled = $habilitar; 
						($objeto as txtInputBlancoDefaultPQNet).mouseChildren = $habilitar; 
					}
				}
			}
			
			private function limpiarContenido():void
			{
				txtInputMinAAPLUS.text = "0";
				txtInputMinAAPLUS.errorString = "";
				
				txtInputMinAA.text = "0";
				txtInputMinAA.errorString = "";
				txtInputMaxAA.text = "0";
				txtInputMaxAA.errorString = "";
				
				txtInputMinAM.text = "0";
				txtInputMinAM.errorString = "";
				txtInputMaxAM.text = "0";
				txtInputMaxAM.errorString = "";
				
				txtInputMinAB.text = "0";
				txtInputMinAB.errorString = "";
				txtInputMaxAB.text = "0";
				txtInputMaxAB.errorString = "";
				
				txtInputMinMA.text = "0";
				txtInputMinMA.errorString = "";
				txtInputMaxMA.text = "0";
				txtInputMaxMA.errorString = "";
				
				txtInputMinMM.text = "0";
				txtInputMinMM.errorString = "";
				txtInputMaxMM.text = "0";
				txtInputMaxMM.errorString = "";
				
				txtInputMinMB.text = "0";
				txtInputMinMB.errorString = "";
				txtInputMaxMB.text = "0";
				txtInputMaxMB.errorString = "";
				
				lblInputMinBajo.text = "0";
				lblInputMaxBajo.text = "0";
			}
			
			protected function btnEditar_clickHandler(event:MouseEvent):void
			{
				seEstaEditando=true;
				btnEditar.includeInLayout = btnEditar.visible = false;
				grpGuardarCancelar.includeInLayout = grpGuardarCancelar.visible = true;
				habilitarEdicionDeContenido(true);
			}
			
			protected function btnGuardarClasificacionesNivelDeIngreso_clickHandler(event:MouseEvent):void
			{
				if(!validarTodosLosCampos())
				{
					alertaSingleton.show("Algunos de los datos que se han introducido no son válidos, favor de verificarlos.",catalogoAlertas.ADV_informacionIncompleta);
					return;
				}
				else
				{
					for (var i:int = 0; i < nivelesDeIngreso.length; i++) 
					{
						var currentItem:NivelIngreso = nivelesDeIngreso[i] as NivelIngreso;
						
						switch(currentItem.nivel)
						{
							case "AAplus":
							{
								currentItem.min = parseFloat(txtInputMinAAPLUS.text); 
								break;
							}
							case "AA":
							{
								currentItem.min = parseFloat(txtInputMinAA.text);
								currentItem.max = parseFloat(txtInputMaxAA.text);
								
								break;
							}
							case "AM":
							{
								currentItem.min = parseFloat(txtInputMinAM.text);
								currentItem.max = parseFloat(txtInputMaxAM.text);
								
								break;
							}
							case "AB":
							{
								currentItem.min = parseFloat(txtInputMinAB.text);
								currentItem.max = parseFloat(txtInputMaxAB.text);
								break;
							}
							case "MA":
							{
								currentItem.min = parseFloat(txtInputMinMA.text);
								currentItem.max = parseFloat(txtInputMaxMA.text);
								
								break;
							}
							case "MM":
							{
								currentItem.min = parseFloat(txtInputMinMM.text);
								currentItem.max = parseFloat(txtInputMaxMM.text);
								
								break;
							}
							case "MB":
							{
								currentItem.min = parseFloat(txtInputMinMB.text);
								currentItem.max = parseFloat(txtInputMaxMB.text);
								
								break;
							}
							case "Bajo":
							{	
								currentItem.max = parseFloat(lblInputMaxBajo.text);
								lblInputMinBajo.text ="0";
							}
						}
					}
					
					var guardarNI:EventoCatClientes_General = new EventoCatClientes_General(EventoCatClientes_General.ACTUALIZAR_CLASIFICACION_DE_NIVELES_DE_INGRESO);
					guardarNI.listaClasifNivelIngreso = nivelesDeIngreso;
					guardarNI.ventana = "CatClientes_ClasifNivelIngreso";
					dispatchEvent(guardarNI);
					
				}
			}
			
			
			private function validarTodosLosCampos():Boolean
			{
				var arrayAllIsValid:Array = new Array;
				
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAAPLUS));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAA));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxAA));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAM));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxAM));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAB));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxAB));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinMA));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxMA));
				
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinMM));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxMM));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinMB));
				arrayAllIsValid.push(validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxMB));
				
				for (var i:int = 0; i < arrayAllIsValid.length; i++) 
				{
					if(!arrayAllIsValid[i])
					{
						return false;
					}
				}
				
				return true;
			}
			
			public function set recibeConfirmacionDeActualizarListaNivelIngreso($confirmacion:Boolean):void
			{
				if($confirmacion)
				{
					//nivelesDeIngresoRespaldo = nivelesDeIngreso;
					
					iniciarVista();
					
					var $evt:EventoCatClientes_General = new EventoCatClientes_General( EventoCatClientes_General.OBTENER_CLIENTES);
					$evt.user = DatosGlobales.getInstance()._usuario;
					$evt.habilitado = 1;
					dispatchEvent($evt);
				}
			}
			
			
			protected function btnCancelar_clickHandler(event:MouseEvent):void
			{
				limpiarContenido();
				btnEditar.includeInLayout = btnEditar.visible = true;
				grpGuardarCancelar.includeInLayout = grpGuardarCancelar.visible = false; 
				seEstaEditando = false;
				habilitarEdicionDeContenido(seEstaEditando);
				settearContenido(nivelesDeIngresoRespaldo);				
			}
			
			private var nivelesDeIngresoRespaldo:ArrayCollection;
			private var nivelesDeIngreso:ArrayCollection;
			public function set recibeListaClasificacionNivelIngreso($listaNI:ArrayCollection):void
			{
				if($listaNI == null)
				{
					return;
				}
				
				nivelesDeIngresoRespaldo = ObjectUtil.copy($listaNI) as ArrayCollection;	
				nivelesDeIngreso = $listaNI;
				
				var mandarFua:EventoCatClientes_General = new EventoCatClientes_General(EventoCatClientes_General.ENVIAR_FUA_A_LA_VISTA_DEFAULT_DE_CONFIGURACION);
				if(nivelesDeIngreso.length > 0)
				{
					settearContenido(nivelesDeIngreso);
					//Mandar La Fecha de la última actualización	
					mandarFua.fua = (nivelesDeIngreso[0] as NivelIngreso).fua;
				}
				else
				{
					//Mandar limpiar el FUA
					mandarFua.fua = null;
					settearContenido(null);
				}
				dispatchEvent(mandarFua);
			}
			
			private function settearContenido($listaNI:ArrayCollection):void
			{
				if($listaNI != null)
				{
					for (var i:int = 0; i < $listaNI.length; i++) 
					{
						var currentItem:NivelIngreso = $listaNI[i] as NivelIngreso;
						switch(currentItem.nivel)
						{
							case "AAplus":
							{
								txtInputMinAAPLUS.text = currentItem.min.toString();
								break;
							}
							case "AA":
							{
								txtInputMinAA.text = currentItem.min.toString();
								txtInputMaxAA.text = currentItem.max.toString();
								break;
							}
							case "AM":
							{
								txtInputMinAM.text = currentItem.min.toString();
								txtInputMaxAM.text = currentItem.max.toString();
								break;
							}
							case "AB":
							{
								txtInputMinAB.text = currentItem.min.toString();
								txtInputMaxAB.text = currentItem.max.toString();
								break;
							}
							case "MA":
							{
								txtInputMinMA.text = currentItem.min.toString();
								txtInputMaxMA.text = currentItem.max.toString();
								break;
							}
							case "MM":
							{
								txtInputMinMM.text = currentItem.min.toString();
								txtInputMaxMM.text = currentItem.max.toString();
								break;
							}
							case "MB":
							{
								txtInputMinMB.text = currentItem.min.toString();
								txtInputMaxMB.text = currentItem.max.toString();
								lblInputMaxBajo.text = (currentItem.min -1).toString();
								break;
							}
							case "Bajo":
							{	
								lblInputMinBajo.text ="0";
							}
						}
					}
				}
				else
				{
					limpiarContenido();
				}
			}
			
			
			
			protected function validarPorcetajeNumeroPositivoRealNoVacio($txtInput:IVisualElement):Boolean
			{
				var error:ValidationResultEvent;
				
				if($txtInput != null && $txtInput is txtInputBlancoDefaultPQNet)
				{
					var currentTxtInput:txtInputBlancoDefaultPQNet = $txtInput as txtInputBlancoDefaultPQNet;
					validatorPorcentajePositivo.listener = currentTxtInput;
					error = validatorPorcentajePositivo.validate(currentTxtInput.text);
				}
				
				if(error == null || error.results == null)
				{
					return validarRangoDeIntervalos(currentTxtInput);
				}
				else
				{
					return false;
				}
			}
			
			private function validarRangoDeIntervalos($txtInput:IVisualElement):Boolean
			{
				var error:ValidationResultEvent;
				var isValid:Boolean = false;
				
				if($txtInput != null && $txtInput is txtInputBlancoDefaultPQNet)
				{
					var currentTxtInput:txtInputBlancoDefaultPQNet = $txtInput as txtInputBlancoDefaultPQNet;
					
					switch(currentTxtInput.id)
					{
						case "txtInputMinAAPLUS":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) > Number(txtInputMaxAA.text))
							{
								if(txtInputMaxAA.errorString.length > 0 )
								{
									txtInputMaxAA.errorString = "";
								}
								isValid = true;
							}
							else
								currentTxtInput.errorString = "El monto debe ser mayor que el monto máximo de AA";
							break;
						}							
							
						case "txtInputMaxAA":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) < Number(txtInputMinAAPLUS.text))
							{
								if(txtInputMinAAPLUS.errorString.length > 0 )
								{
									txtInputMinAAPLUS.errorString = "";
								}
								
								if(Number(currentTxtInput.text) > Number(txtInputMinAA.text))
								{
									if(txtInputMinAA.errorString == "" || txtInputMinAA.errorString == "El monto máximo de AA debe ser mayor que su monto mínimo")
									{
										isValid = true;
										txtInputMinAA.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto máximo de AA debe ser mayor que su monto mínimo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser menor que el monto mínimo de AA+";
							break;
						}
							
						case "txtInputMinAA":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) > Number(txtInputMaxAM.text))
							{
								if(txtInputMaxAM.errorString.length > 0 )
								{
									txtInputMaxAM.errorString = "";
								}
								
								if(Number(currentTxtInput.text) < Number(txtInputMaxAA.text))
								{
									if(txtInputMaxAA.errorString == "" || txtInputMaxAA.errorString == "El monto mínimo de AA debe ser menor que su monto máximo")
									{
										isValid = true;
										txtInputMaxAA.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto mínimo de AA debe ser menor que su monto máximo";
								}
								
							}
							else
								currentTxtInput.errorString = "El monto debe ser mayor que el monto máximo de AM";
							break;
						}
							
						case "txtInputMaxAM":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) < Number(txtInputMinAA.text))
							{
								if(txtInputMinAA.errorString.length > 0 )
								{
									txtInputMinAA.errorString = "";
								}
								
								if(Number(currentTxtInput.text) > Number(txtInputMinAM.text))
								{
									if(txtInputMinAM.errorString == "" || txtInputMinAM.errorString == "El monto máximo de AM debe ser mayor que su monto mínimo")
									{
										isValid = true;
										txtInputMinAM.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto máximo de AM debe ser mayor que su monto mínimo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser menor que el monto mínimo de AA";
							break;
						}
						case "txtInputMinAM":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) > Number(txtInputMaxAB.text))
							{
								if(txtInputMaxAB.errorString.length > 0 )
								{
									txtInputMaxAB.errorString = "";
								}
								
								if(Number(currentTxtInput.text) < Number(txtInputMaxAM.text))
								{
									if(txtInputMaxAM.errorString == "" || txtInputMaxAM.errorString == "El monto mínimo de AM debe ser menor que su monto máximo")
									{
										isValid = true;
										txtInputMaxAM.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto mínimo de AM debe ser menor que su monto máximo";
								}
								
							}
							else
								currentTxtInput.errorString = "El monto debe ser mayor que el monto máximo de AB";
							break;
						}
						case "txtInputMaxAB":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) < Number(txtInputMinAM.text))
							{
								if(txtInputMinAM.errorString.length > 0 )
								{
									txtInputMinAM.errorString = "";
								}
								
								if(Number(currentTxtInput.text) > Number(txtInputMinAB.text))
								{
									if(txtInputMinAB.errorString == "" || txtInputMinAB.errorString == "El monto máximo de AB debe ser mayor que su monto mínimo")
									{
										isValid = true;
										txtInputMinAB.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto máximo de AB debe ser mayor que su monto mínimo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser menor que el monto mínimo de AM";
							break;
						}
						case "txtInputMinAB":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) > Number(txtInputMaxMA.text))
							{
								if(txtInputMaxMA.errorString.length > 0 )
								{
									txtInputMaxMA.errorString = "";
								}
								
								if(Number(currentTxtInput.text) < Number(txtInputMaxAB.text))
								{
									if(txtInputMaxAB.errorString == "" || txtInputMaxAB.errorString == "El monto mínimo de AB debe ser menor que su monto máximo")
									{
										isValid = true;
										txtInputMaxAB.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto mínimo de AB debe ser menor que su monto máximo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser mayor que el monto máximo de MA";
							break;
						}
						case "txtInputMaxMA":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) < Number(txtInputMinAB.text))
							{
								if(txtInputMinAB.errorString.length > 0 )
								{
									txtInputMinAB.errorString = "";
								}
								
								if(Number(currentTxtInput.text) > Number(txtInputMinMA.text))
								{
									if(txtInputMinMA.errorString == "" || txtInputMinMA.errorString == "El monto máximo de MA debe ser mayor que su monto mínimo")
									{
										isValid = true;
										txtInputMinMA.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto máximo de MA debe ser mayor que su monto mínimo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser menor que el monto mínimo de AB";
							break;
						}
						case "txtInputMinMA":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) > Number(txtInputMaxMM.text))
							{
								if(txtInputMaxMM.errorString.length > 0 )
								{
									txtInputMaxMM.errorString = "";
								}
								
								if(Number(currentTxtInput.text) < Number(txtInputMaxMA.text))
								{
									if(txtInputMaxMA.errorString == "" || txtInputMaxMA.errorString == "El monto mínimo de MA debe ser menor que su monto máximo")
									{
										isValid = true;
										txtInputMaxMA.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto mínimo de MA debe ser menor que su monto máximo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser mayor que el monto máximo de MM";
							break;
						}
						case "txtInputMaxMM":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) < Number(txtInputMinMA.text))
							{
								if(txtInputMinMA.errorString.length > 0 )
								{
									txtInputMinMA.errorString = "";
								}
								
								if(Number(currentTxtInput.text) > Number(txtInputMinMM.text))
								{
									if(txtInputMinMM.errorString == "" || txtInputMinMM.errorString == "El monto máximo de MM debe ser mayor que su monto mínimo")
									{
										isValid = true;
										txtInputMinMM.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto máximo de MM debe ser mayor que su monto mínimo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser menor que el monto mínimo de MA";
							break;
						}
						case "txtInputMinMM":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) > Number(txtInputMaxMB.text))
							{
								if(txtInputMaxMB.errorString.length > 0 )
								{
									txtInputMaxMB.errorString = "";
								}
								
								if(Number(currentTxtInput.text) < Number(txtInputMaxMM.text))
								{
									if(txtInputMaxMM.errorString == "" || txtInputMaxMM.errorString == "El monto mínimo de MM debe ser menor que su monto máximo")
									{
										isValid = true;
										txtInputMaxMM.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto mínimo de MM debe ser menor que su monto máximo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser mayor que el monto máximo de MB";
							break;
						}
						case "txtInputMaxMB":
						{
							currentTxtInput.errorString = "";
							if(Number(currentTxtInput.text) < Number(txtInputMinMM.text))
							{
								if(txtInputMinMM.errorString.length > 0 )
								{
									txtInputMinMM.errorString = "";
								}
								
								if(Number(currentTxtInput.text) > Number(txtInputMinMB.text))
								{
									if(txtInputMinMB.errorString == "" || txtInputMinMB.errorString == "El monto máximo de MB debe ser mayor que su monto mínimo")
									{
										isValid = true;
										txtInputMinMB.errorString = "";
									}
								}
								else
								{
									currentTxtInput.errorString = "El monto máximo de MB debe ser mayor que su monto mínimo";
								}
							}
							else
								currentTxtInput.errorString = "El monto debe ser menor que el monto mínimo de MM";
							break;
						}
						case "txtInputMinMB":
						{
							lblInputMaxBajo.text = (Number(currentTxtInput.text)-1).toString();
							isValid = true;
						}
					}
				}
				
				return isValid;
			}
			
			/* 		
			private function validacionPorIntervalo($objetoAValidar:IVisualElement,$objetoUno:IVisualElement,$objetoDos:IVisualElement):Boolean
			{
			var isValid:Boolean = false;
			
			if($objetoAValidar != null && $objetoUno != null && $objetoDos != null)
			{
			if($objetoAValidar is txtInputBlancoDefaultPQNet && $objetoUno is txtInputBlancoDefaultPQNet && $objetoDos is txtInputBlancoDefaultPQNet)
			{
			var txtAValidar:txtInputBlancoDefaultPQNet = $objetoAValidar as txtInputBlancoDefaultPQNet;
			var txtUno:txtInputBlancoDefaultPQNet = $objetoUno as txtInputBlancoDefaultPQNet;
			var txtDos:txtInputBlancoDefaultPQNet = $objetoDos as txtInputBlancoDefaultPQNet;
			
			if(Number(txtAValidar.text) < Number(txtUno.text))
			{
			isValid = true;
			
			if(txtInputMinMM.errorString.length > 0 )
			{
			txtInputMinMM.errorString = "";
			}
			}
			else
			{
			txtAValidar.errorString = "El monto debe ser menor que el monto mínimo de MM";
			}
			
			
			}
			}
			
			return isValid;
			}
			*/
			
		]]>
	</fx:Script>
	
	<s:Scroller maxWidth="1050" width="100%" height="100%" minWidth="340">
		<s:Group width="100%" height="100%" >
			
			<s:VGroup width="100%" verticalCenter="0" gap="10" horizontalAlign="center">
				<s:Group width="100%">
					
					<label:Titulo_16_pTop10 text="CLASIFICACIONES NIVEL DE INGRESO" left="0" bottom="-3" paddingTop="0"/>
					
					<pqNet:botonPqNetLargo id="btnEditar" icono="editar_lapiz" colorBase="0x{catalogoColores.LABEL_ROJO }" minWidth="34" click="btnEditar_clickHandler(event)" right="0"/>
					
					<s:HGroup id="grpGuardarCancelar" visible="false" right="0" gap="20">
						<pqNet:botonPqNetLargo id="btnGuardar" label="Guardar"  click="btnGuardarClasificacionesNivelDeIngreso_clickHandler(event)" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL}"/>
						<pqNet:botonPqNetLargo id="btnCancelar" label="Cancelar" colorBase="0x{catalogoColores.LABEL_ROJO_CLARO }" click="btnCancelar_clickHandler(event)"  />
					</s:HGroup>
				</s:Group>
				<otros:division width="100%"/>
				
				<s:HGroup height="100%">
					<s:VGroup height="100%" gap="10" horizontalAlign="right">
						<s:Spacer height="42"/>
						<label:Titulo_14_pTop10 text="AA+" paddingTop="0" height="28" verticalAlign="middle"/>
						<label:Titulo_14_pTop10 text="AA" paddingTop="0" height="28" verticalAlign="middle"/>
						<label:Titulo_14_pTop10 text="AM" paddingTop="0" height="28" verticalAlign="middle"/>
						<label:Titulo_14_pTop10 text="AB" paddingTop="0" height="28" verticalAlign="middle"/>
						<label:Titulo_14_pTop10 text="MA" paddingTop="0" height="28" verticalAlign="middle"/>
						<label:Titulo_14_pTop10 text="MM" paddingTop="0" height="28" verticalAlign="middle"/>
						<label:Titulo_14_pTop10 text="MB" paddingTop="0" height="28" verticalAlign="middle"/>
						<label:Titulo_14_pTop10 text="BAJO" paddingTop="0" height="28" verticalAlign="middle"/>
					</s:VGroup>  
					<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="10"> 
						<label:Titulo_16_pTop10 text="Montos en DLS" paddingTop="0"/>
						
						<s:HGroup width="100%">
							<label:Titulo_14_pTop10 text="Mínimos" paddingTop="0" width="100%" textAlign="center"/>
							<label:Titulo_14_pTop10 text="Máximos" paddingTop="0" width="100%" textAlign="center"/>
						</s:HGroup>
						
						<s:HGroup verticalAlign="baseline">
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMinAAPLUS" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAAPLUS)"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<label:Titulo_16_pTop10 text="∞" paddingTop="0" width="150" textAlign="center" />
						</s:HGroup>
						
						<s:HGroup verticalAlign="baseline">
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMinAA" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAA)"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMaxAA" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxAA)"/>
						</s:HGroup>
						<s:HGroup verticalAlign="baseline">
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMinAM" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAM)"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMaxAM" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxAM)"/>
						</s:HGroup>
						<s:HGroup verticalAlign="baseline">
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMinAB" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinAB)"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMaxAB" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxAB)"/>
						</s:HGroup>
						<s:HGroup verticalAlign="baseline">
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMinMA" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinMA)"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMaxMA" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxMA)"/>
						</s:HGroup>
						<s:HGroup verticalAlign="baseline">
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMinMM" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinMM)"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMaxMM" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxMM)"/>
						</s:HGroup>
						<s:HGroup verticalAlign="baseline">
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMinMB" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMinMB)"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<textinput:txtInputBlancoDefaultPQNet id="txtInputMaxMB" width="150" restrict="0-9." focusOut="validarPorcetajeNumeroPositivoRealNoVacio(txtInputMaxMB)"/>
						</s:HGroup>
						<s:HGroup verticalAlign="baseline">
							<label:Texto id="lblInputMinBajo" paddingTop="0" width="150" height="28" verticalAlign="middle" paddingLeft="3"/>
							<label:Titulo_14_pTop10 text="-" paddingTop="0"/>
							<label:Texto id="lblInputMaxBajo" paddingTop="0" width="150" height="28" verticalAlign="middle" paddingLeft="3"/>
						</s:HGroup>
					</s:VGroup>  
				</s:HGroup>  
				<otros:division width="100%"/>
			</s:VGroup>
		</s:Group>  
	</s:Scroller>
</s:VGroup>
