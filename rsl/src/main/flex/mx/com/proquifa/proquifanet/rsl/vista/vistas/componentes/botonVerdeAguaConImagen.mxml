<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:label="skins.skin.label.*"
		 height="30" maxWidth="285" width="100%"
		 click="clicItem(event)"
		 creationComplete="init(event)"
		 mouseDown="down(event)"
		 mouseUp="up(event)"
		 >
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotones;
			private var _colorBase:String;
			private var _colorSelect:String;
			private var _colorOver:String;
			private var _colorTexto:String = "0x"+catalogoColores.LABEL_BLANCO;
			private var _colorTextoDown:String = "0x"+catalogoColores.LABEL_BLANCO;
			private var _colorDown:String;
			private var _label:String="";
			private var _selected:Boolean;
			private var _imagen:String;
			private var _soloClic:Boolean = false;
			private var _autosize:Boolean;
			private var _sizeAutoDisplay:Number;
			
			[Bindable] private var icoNormal:Class;
			[Bindable] private var icoSelect:Class;
			
			
			protected function init(event:FlexEvent):void
			{
				rectColor.color = uint(colorBase);
				lblEtiqueta.text = label;
				
				if(selected)
					currentState =  "selected";
				
				if(imagen != "")
				{
					icono.visible = icono.includeInLayout = true;
					if(imagen == "agregar")
					{
						icoNormal = catalogoIconosBotones.getInstance().icoAgregar_SVG;
						icoSelect = catalogoIconosBotones.getInstance().icoAgregarSelect_SVG;
					}
					
					// COLOR
					if(colorSelect != "")
					{
						
					}
					
				}
				else
				{
					icono.visible = icono.includeInLayout = false;
				}
				
			}
			
			[Bindable] 
			public function get colorBase():String
			{
				return _colorBase;
			}
			
			public function set colorBase(value:String):void
			{
				_colorBase = value;
			}
			
			[Bindable] 
			public function get colorSelect():String
			{
				return _colorSelect;
			}
			
			public function set colorSelect(value:String):void
			{
				_colorSelect = value;
			}
			
			[Bindable] 
			public function get colorOver():String
			{
				return _colorOver;
			}
			
			public function set colorOver(value:String):void
			{
				_colorOver = value;
			}
			
			[Bindable] 
			public function get colorTexto():String
			{
				return _colorTexto;
			}
			
			public function set colorTexto(value:String):void
			{
				_colorTexto = value;
			}
			
			[Bindable] 
			public function get label():String
			{
				return _label;
			}
			
			public function set label(value:String):void
			{
				_label = value;
			}
			
			
			protected function clicItem(event:MouseEvent):void
			{
				if(!soloClic)
					selected = true;
			}
			
			[Bindable]
			public function get selected():Boolean
			{
				return _selected;
			}
			
			public function set selected(value:Boolean):void
			{
				_selected = value;
				
				if(value)
				{
					this.currentState = "selected";
				}
				else
				{
					this.currentState = "normal";
				}
			}
			
			[Inspectable(category="General", enumeration="agregar", defaultValue="agregar")]
			public function get imagen():String
			{
				return _imagen;
			}
			
			public function set imagen(value:String):void
			{
				_imagen = value;
			}
			
			
			protected function down(event:MouseEvent):void
			{
				if(soloClic)
					currentState = "down";
			}
			
			protected function up(event:MouseEvent):void
			{
				if(soloClic)
					currentState = "normal";
			}
			
			[Bindable]
			public function get colorDown():String
			{
				return _colorDown;
			}
			
			public function set colorDown(value:String):void
			{
				_colorDown = value;
			}
			
			[Bindable]
			public function get soloClic():Boolean
			{
				return _soloClic;
			}
			
			public function set soloClic(value:Boolean):void
			{
				_soloClic = value;
			}
			
			[Bindable]
			public function get colorTextoDown():String
			{
				return _colorTextoDown;
			}
			
			public function set colorTextoDown(value:String):void
			{
				_colorTextoDown = value;
			}
			
			[Bindable]
			public function get autosize():Boolean
			{
				return _autosize;
			}
			
			public function set autosize(value:Boolean):void
			{
				_autosize = value;
			}
			
			[Bindable]
			public function get sizeAutoDisplay():Number
			{
				return _sizeAutoDisplay;
			}
			
			public function set sizeAutoDisplay(value:Number):void
			{
				_sizeAutoDisplay = value;
			}
			
			[Bindable]
			public function get font():Number
			{
				return _font;
			}
			
			public function set font(value:Number):void
			{
				_font = value;
			}
			
			
			
			private var _font:Number = 20;
			
			
			
		]]>
	</fx:Script>
	
	
	
	
	
	
	<s:states>
		<s:State name="normal" />
		<s:State name="selected" />
		<s:State name="over" />
		<s:State name="down" />
	</s:states>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor id="rectColor" color.selected="{colorSelect}" color.normal="{colorBase}" color.over="{colorOver}" color.down="{colorDown}"/>
		</s:fill>
	</s:Rect>
	
	<s:Rect width="100%" height="100%" includeIn="down">
		<s:stroke>
			<s:SolidColorStroke color.down="{colorBase}" weight="1"/>
		</s:stroke>
	</s:Rect>
	
	
	
	
	
	<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" paddingLeft="2" paddingRight="2" >
		<mx:Image id="icono" source="{icoNormal}" visible="false" includeInLayout="false" />
		<label:Titulo_15_Helvetica id="lblEtiqueta" text="{label}" x="{icono.width + 3}" color="{colorTexto}" color.down="{colorTextoDown}" fontSize="{font}" horizontalCenter="0" verticalCenter="0" />
	</s:HGroup>  
	
	
</s:Group>
