<?xml version="1.0" encoding="utf-8"?>
<comun:ContenedorTableroMiniChart xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"
								  xmlns:mx="library://ns.adobe.com/flex/mx"
								  xmlns:todos="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.ventasDelPeriodo.analisisVentas.todos.*"
								  xmlns:componentes="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*"
								  xmlns:graficaPie="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.*"
								  xmlns:comun="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.*"
								  xmlns:graficas="skins.skin.graficas.*"
								  xmlns:label="skins.skin.label.*"
								  xmlns:comparativa="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.operativos.*"
								  width="100%" height="100%"
								  informacion="{catalogoInfoGraficas.TABLERO_OPERATIVOS_INSPECCIONES}"
								  sinTabla="true" titulo="INSPECCIONES"
								  vistaTablaGrafica="{new TabOperativosInspeccionesMax()}" xmlns:otros="skins.otros.*">
	
	<fx:Script>
		<![CDATA[
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.plantillaProquifa.gestion.VistaDefaultTabOperativos;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.operativos.componentes.comercializacion.reqcot.renderer.DataTipIndicadorRenderer;
			import mx.events.FlexEvent;
			
			import skins.catalogos.catalogoIconosEtiquetas;
			import skins.catalogos.catalogoInfoGraficas;
			
			private const MINIMO:int = 170;
			
			public function set recibeInspeccion( $lista:ArrayCollection):void{
				if ($lista == null )
					return;
				
				myChart.dataProvider = builderChart($lista);
			}
			
			private function builderChart($datos:ArrayCollection):ArrayCollection{
				var realizar:Number = 0;
				var realizadas:Number = 0;
				var indicador:Number = 0;
				var array:ArrayCollection = new ArrayCollection;
				
				for (var i:int = 0; i < $datos.length; i++) 
				{
					var resumen:ResumenConsulta = $datos[i] as ResumenConsulta;
					if (resumen.etiqueta.toUpperCase() == "POR REALIZAR" ){
						realizar += resumen.totalFolios;
						indicador = resumen.porcentaje;
					}
					else if (resumen.etiqueta.toUpperCase() == "REALIZADAS" ){
						realizadas += resumen.totalFolios;
					}
				}
				
				var object:Object = new Object;
				object.nombre = "Realizadas/Por Realizar";
				object.realizar = realizar;
				object.realizadas = realizadas;
				object.indicador = indicador;
				object.tipo = "Inspeccion";
				array.addItem(object);
				
				vgpComparativa.porcentajeR.text = UtilsFormatosNumericos.redondearNEAREST(indicador) + "%";
				vgpComparativa.cotizadoR.text = UtilsFormatosNumericos.redondearNEAREST((realizadas * 100) / realizar)  + "%";
				var diferencia:Number = parseInt( UtilsFormatosNumericos.redondearNEAREST((realizadas * 100) / realizar)) - parseInt( UtilsFormatosNumericos.redondearNEAREST(indicador));
				vgpComparativa.diferenciaR.text = UtilsFormatosNumericos.redondearNEAREST(diferencia) + "%";
				
				
				vgpComparativa.cambioTam();
				
				
				return array;
				
			}
			
			private function formateoEje($valor:Number, $valorPrevio:Object, $eje:Object):String
			{
				var strRegreso:String = "";
				if($valor != 0 ) strRegreso = $valor.toString();
				return strRegreso;
			}
			
			
			private var SIZE_TRIANGULO:int = 65;
			private var wTRIANGULO:int = 45;
			private var sizeChart:Number = 0;
			private const SIZE_LINE:int = 1;
			private const SPACE:int = 4;
			private var total:Number = 1;
			private var cambio:Number=18;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				tool.graphics.clear();
				alcance.graphics.clear();
				porcentajeAlcance.visible = false;
				porcentaje.visible = false;
				
				if(VistaDefaultTabOperativos.cambio == 12){
					SIZE_TRIANGULO = 45;
					wTRIANGULO = 35 ;
					porcentajeAlcance.setStyle("fontSize",9);
					porcentaje.setStyle("fontSize",9);
					
				}else if(VistaDefaultTabOperativos.cambio == 14 ){
					SIZE_TRIANGULO = 55;
					wTRIANGULO = 40 ;
					porcentajeAlcance.setStyle("fontSize",11);
					porcentaje.setStyle("fontSize",11);
				}else if(VistaDefaultTabOperativos.cambio ==  18 ){
					SIZE_TRIANGULO = 65;
					wTRIANGULO = 45 ;
					porcentajeAlcance.setStyle("fontSize",12);
					porcentaje.setStyle("fontSize",12);
				} 
				
				if (serieCET.items && serieCET.items.length > 0){
					var item:ColumnSeriesItem = serieCET.items[0];
					var item2:ColumnSeriesItem = serieAFT.items[0];
					generarPorcentajeIndicador(item);
					generarAlcancePorcentaje(item2);
					
				}
				
				vgpComparativa.cambioTam();
				
			}
			
			private function generarAlcancePorcentaje(item:ColumnSeriesItem):void
			{
				if (item && item.itemRenderer && item.item.indicador 
					&& item.item.indicador > 0 && total > 0)
				{
					var txtAlcance:String = UtilsFormatosNumericos.redondearNEAREST((item.item.realizadas / total) * 100);
					if ( txtAlcance != "0")
					{
						porcentajeAlcance.visible = true;
						var _x:int = x;
						var _y:int = y;
						var xOrigen:Number = wTRIANGULO + wTRIANGULO/2;
						var yOrigen:Number = SIZE_TRIANGULO/2;
						
						//sizeChart = ;
						
						var pt : Point = new Point(item.x, item.y);
						var xI:Number = (serieAFT.automationOwner as ColumnChart).contentToLocal(pt).x;
						var yI:Number = (serieAFT.automationOwner as ColumnChart).contentToLocal(pt).y;
						pt = new Point(item.itemRenderer.x, item.itemRenderer.y);
						var xR:Number = (serieAFT.automationOwner as ColumnChart).contentToLocal(pt).x;
						var yR:Number = (serieAFT.automationOwner as ColumnChart).contentToLocal(pt).y;
						
						_y = 61 + yR;
						
						var tamReal:Number = item.itemRenderer.width + wTRIANGULO - 10;
						/* 
						if(tamReal <= (this.ejeVertical.axis["maximum"].toString().length * 10)){
							tamReal= item.itemRenderer.width + wTRIANGULO - 20;
						} */
						
						alcance.graphics.beginFill(0x464646);
						
						alcance.graphics.moveTo(tamReal + wTRIANGULO, _y);
						alcance.graphics.lineTo(tamReal, (_y + yOrigen));
						alcance.graphics.lineTo(tamReal, (_y - yOrigen));
						alcance.graphics.lineTo(tamReal + wTRIANGULO, _y);
						alcance.graphics.endFill();
						
						
						var posicion:int = tamReal + wTRIANGULO;
						var cont:int = posicion;
						alcance.graphics.beginFill(0x464646);
						alcance.graphics.lineStyle(2,0x464646);
						alcance.graphics.moveTo(posicion, _y );
						
						while ( cont  <= ejeVertical.x) 
						{
							alcance.graphics.lineTo(posicion, _y);
							alcance.graphics.lineTo((posicion += SIZE_LINE), _y);
							alcance.graphics.moveTo((posicion += SPACE), _y);
							
							cont += SIZE_LINE + SPACE;
						}
						alcance.graphics.endFill();
						
						if (txtAlcance.lastIndexOf(".") != -1){
							porcentajeAlcance.setStyle("fontSize",9);
						}
						
						porcentajeAlcance.text = txtAlcance + '%   ';
						porcentajeAlcance.width = wTRIANGULO - 3;
						porcentajeAlcance.setStyle("textAlign", "center");
						porcentajeAlcance.x = tamReal; 
						porcentajeAlcance.y = _y - (porcentajeAlcance.height/2); 
					}
				}
			}
			
			private function generarPorcentajeIndicador(item:ColumnSeriesItem):void
			{
				if (item && item.itemRenderer && item.item.indicador && item.item.indicador > 0)
				{
					var _x:int = x;
					var _y:int = y;
					var yOrigen:Number = SIZE_TRIANGULO/2;
					
					porcentaje.visible = true;
					total = item.item.realizar;
					//sizeChart = item.itemRenderer.width + wTRIANGULO;
					
					var porcentajeMinimo:Number = (100 - item.item.indicador );
					var moverPosicion:Number = ((item.itemRenderer.height * porcentajeMinimo)  )/100;
					
					var pt : Point = new Point(item.x, item.y);
					
					pt = new Point(item.itemRenderer.x, item.itemRenderer.y);
					var xR:Number = (serieCET.automationOwner as ColumnChart).contentToLocal(pt).x;
					var yR:Number = (serieCET.automationOwner as ColumnChart).contentToLocal(pt).y;
					
					_y = 61 + yR + moverPosicion;
					
					var tamReal:Number = (this.ejeVertical.axis["maximum"].toString().length * 10) + 20;
					
					tool.graphics.beginFill(0x349ab0);
					tool.graphics.lineStyle(2,0x3399af);
					
					tool.graphics.moveTo(tamReal + wTRIANGULO, _y);
					tool.graphics.lineTo(tamReal, (_y + yOrigen));
					tool.graphics.lineTo(tamReal, (_y - yOrigen));
					tool.graphics.lineTo(tamReal + wTRIANGULO, _y);
					
					tool.graphics.endFill();
					
					
					var posicion:int = tamReal + wTRIANGULO;
					var cont:int = posicion;
					
					tool.graphics.beginFill(0x349ab0);
					tool.graphics.lineStyle(2,0x349ab0);
					tool.graphics.moveTo(posicion, _y );
					
					while ( cont  <= ejeVertical.x) 
					{
						tool.graphics.lineTo(posicion, _y);
						tool.graphics.lineTo((posicion += SIZE_LINE),_y);
						tool.graphics.moveTo((posicion += SPACE),_y);
						cont += SIZE_LINE + SPACE;
					}	
					tool.graphics.endFill();
					
					
					var txtPorcentaje:String = UtilsFormatosNumericos.redondearNEAREST(item.item.indicador);
					if (txtPorcentaje.lastIndexOf(".") != -1)
						porcentaje.setStyle("fontSize",9);
					
					
					porcentaje.text = txtPorcentaje + '%';
					porcentaje.width = wTRIANGULO - 3;
					porcentaje.setStyle("textAlign", "center");
					porcentaje.x = tamReal; 
					porcentaje.y = _y - (porcentajeAlcance.height/2); 
				}
			} 
			
			protected function myChart_updateCompleteHandler(event:FlexEvent):void
			{
				invalidateDisplayList();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:SeriesInterpolate id="fxInterpolateIn" duration="300"/>
	</fx:Declarations>
	
	<graficaPie:contenido>
		<s:Group width="100%" height="100%">
			<s:VGroup width="100%" height="100%" horizontalAlign="right" paddingBottom="10"
					  paddingTop="50">
				<todos:vista_noDisponible visible="false" width="100%" height="100%"
										  includeInLayout="false"/>
				<mx:ColumnChart id="myChart" width="100%" height="96%" dataTipMode="single"
								dataTipRenderer="{DataTipIndicadorRenderer}" mouseSensitivity="5"
								paddingLeft="{ width &gt; MINIMO ? 20 : 5}"
								paddingRight="{ width &gt; MINIMO ? 40 : 5}" seriesFilters="[]"
								showDataTips="true" showDataTipTargets="false"
								updateComplete="myChart_updateCompleteHandler(event)">
					<mx:series>
						<mx:ColumnSeries id="serieCET" displayName="Abiertas" includeInLayout="false"
										 itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.operativos.componentes.comercializacion.reqcot.renderer.BarraReqRenderer"
										 showDataEffect="{fxInterpolateIn}" yField="realizar"/>
						<mx:ColumnSeries id="serieAFT" displayName="Cerradas" includeInLayout="false"
										 itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.operativos.componentes.comercializacion.reqcot.renderer.BarraCotizaRenderer"
										 showDataEffect="{fxInterpolateIn}" yField="realizadas"/>
					</mx:series>
					<mx:verticalAxis>
						<mx:LinearAxis id="cotReq" baseAtZero="true" labelFunction="formateoEje"/>
					</mx:verticalAxis>
					<mx:verticalAxisRenderers>
						<mx:AxisRenderer axis="{cotReq}"
										 showLabels="{ width &gt; MINIMO ? true : false}"
										 showLine="false" styleName="axisVerticalLabels"
										 tickPlacement="none" id="ejeVertical" />
					</mx:verticalAxisRenderers>
					<mx:horizontalAxis>
						<mx:CategoryAxis id="nombre"/>
					</mx:horizontalAxis>
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer axis="{nombre}" showLabels="false" showLine="false" id="ejeHorizontal"/>
					</mx:horizontalAxisRenderers>
					
					<mx:backgroundElements>
						<mx:GridLines visible="{ width &gt; MINIMO ? true: false}">
							<mx:horizontalStroke>
								<s:SolidColorStroke color="0xeeeeee" weight="0.5"/>
							</mx:horizontalStroke>
						</mx:GridLines>
					</mx:backgroundElements>
				</mx:ColumnChart>
				<componentes:horizontalAxisChartPq id="barraX" width="100%" horizontalCenter="0"  height="63" 
												   paddingLeft="{ width &gt; MINIMO ? 70 : 5}"
												   paddingRight="{ width &gt; MINIMO ? 40 : 5}"
												   text="POR REALIZAR / REALIZADAS"/>
				
				<comparativa:ComparativaGraficaTabOperativos id="vgpComparativa" />
				
				
			</s:VGroup>
			<s:HGroup id="tool" width="100%" height="100%" depth="65"/>
			<label:TituloHelvetica_10_Blanco id="porcentaje" width="45" depth="65" fontSize="13"
											 fontWeight="normal" maxDisplayedLines="2"
											 textAlign="center"/>
			<s:HGroup id="alcance" width="100%" height="100%" depth="65"/>
			<label:TituloHelvetica_10_Blanco id="porcentajeAlcance" width="45" depth="65"
											 fontSize="13" fontWeight="normal" maxDisplayedLines="2"
											 textAlign="center"/>
		</s:Group>  
	</graficaPie:contenido>
	
</comun:ContenedorTableroMiniChart>
