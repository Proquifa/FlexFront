<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"  paddingLeft="15" paddingRight="5"
		  xmlns:s="library://ns.adobe.com/flex/spark" gap="0" 
		  xmlns:lista ="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.pq.*"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:otros="skins.otros.*" xmlns:botonesToggle="skins.botonesToggle.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.reportes.compras.prodAlmacen2012.EventoRepProAlmacen2012;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.ProductoAlmacen;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.utils.ObjectUtil;
			
			import skins.plantillaproquifa.menu.buttonbar.iconos;
			
			import spark.components.TextArea;
			import spark.events.IndexChangeEvent;
			
			private var arregloParaFiltrar:ArrayCollection;
			
			private var _etiqueta:String;
			private var _botonBar:String;
			private var _strPropiedad:String;
			private var _tipoBusqueda:String;
			private var _nombreAnterior:String;
			private var _montoTotal:Number;
			private var _piezasTotal:int;
			private var _transitoProgramada:Boolean = false;
			private var keys:Object = {};
			private var $evt:ArrayCollection;
			private var Fecha:Date=new Date();
			
			private var _valores:ArrayCollection = new ArrayCollection();
			private var _valoresET:ArrayCollection = new ArrayCollection();
			private var _arrayFT:ArrayCollection = new ArrayCollection();
			private var _arrayET:ArrayCollection = new ArrayCollection();
			
			[Bindable]	private var _arrButton:ArrayCollection = new ArrayCollection([{label:"TODO"},
				{label:"ET"},
				{label:"FT"}]);
			
			import skins.catalogos.catalogoColores;
			
			public function set recibeListaFiltrada_yXFechas( $evt:ArrayCollection ):void{
				if( $evt != null ){
					botoneraBarra.selectedIndex = 0;
					var _fechaResultado:Date = new Date(new Date().fullYear,new Date().month,new Date().date);
					_arrayET = new ArrayCollection();
					_arrayFT = new ArrayCollection();
					_valoresET = new ArrayCollection();
					_valores = new ArrayCollection();
					_valores = ObjectUtil.copy($evt) as ArrayCollection;
					keys = new Object();
					
					////////////////////////  SE LLENAN LOS ARREGLOS CONFORME A LAS FECHA DEL SISTEMA, Y LA FECHA QUE SE OBTIENE  ///////////////////////////////////////////////////////////
					if (_botonBar != 'Stock'){	
						botonera.visible = true;
						botonera.includeInLayout = true;
						for (var y:int = 0 ; y<_valores.length ; y++){
							var fe:Date =  new Date ((_valores[y] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.fullYear,(_valores[y] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.month,(_valores[y] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.date);
							if (_fechaResultado <= fe) {  //FT
								(_valores[y] as ProductoAlmacen).esEnTiempo = "1";
								_arrayET.addItem(_valores[y]);
							}else{
								(_valores[y] as ProductoAlmacen).esEnTiempo = "0";
								_arrayFT.addItem(_valores[y]);
							}
						}
					}else{
						botonera.visible = false;
						botonera.includeInLayout = false;
					}
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					
					if (botoneraBarra.selectedItem.label =='TODO'){
						_valoresET = new ArrayCollection();
						trabajaVista(_valores);
					}
				}
			}
			
			
			public function set recibeTipoBusqueda($etiqueta:String):void{
				if($etiqueta == null) return;
				_tipoBusqueda = $etiqueta;
			}
			
			public function set recibeEtiquetaButonBar(boton:String):void{
				_botonBar = boton;
				if((_botonBar == 'Tránsito') || (_botonBar == 'Programado')){
					_strPropiedad = 'nombreCliente';
				}
				if((_botonBar == 'Stock')){
					_strPropiedad = 'nombreProveedor';
				}
			}
			
			private function cargaUniverso(event:IndexChangeEvent):void{
				if(event.currentTarget.selectedItem == null ){
					event.preventDefault();
				}else{
					_valoresET = new ArrayCollection();
					keys = new Object();
					
					if (botoneraBarra.selectedItem.label =='TODO'){
						_valoresET=ObjectUtil.copy(_valores) as ArrayCollection;
						trabajaVista(_valoresET);
					}
					
					if (botoneraBarra.selectedItem.label =='ET'){
						_valoresET = ObjectUtil.copy(_arrayET) as ArrayCollection;
						/* _valoresET.filterFunction = FiltroET;
						_valoresET.refresh(); */
						trabajaVista(_valoresET);
					}
					
					if (botoneraBarra.selectedItem.label =='FT'){
						_valoresET = ObjectUtil.copy(_arrayFT) as ArrayCollection;
						/*  _valoresET.filterFunction = FiltroFT;
						_valoresET.refresh(); */
						trabajaVista(_valoresET);
					}	
				}
			} 
			
			
			private function trabajaVista($evt1:ArrayCollection):void{
				if( $evt1 == null ){  
					this.lblnombreDia.text = '/';
					this.lblDia.text = _etiqueta; 
					arregloParaFiltrar = new ArrayCollection();
					return;
				}
				
				arregloParaFiltrar = new ArrayCollection();
				arregloParaFiltrar =  $evt1 ;
				var _hoy:Date = new Date();
				_hoy = new Date(_hoy.fullYear, _hoy.month, _hoy.date, 0, 0, 0);
				var arrTemp:ArrayCollection = new ArrayCollection();
				arrTemp = ObjectUtil.copy( $evt1 ) as ArrayCollection;
				lstPartidas.dataProvider = new ArrayCollection();
				//lstPartidas.dataProvider = $evt;
				lstPartidas.dataProvider = arrTemp;
				var arregloFinal:ArrayCollection = new ArrayCollection();
				this.lblnombreDia.text = '';
				this.lblDia.text = ''; 
				
				if(_tipoBusqueda != 'Rápida'){
					for(var d:int = 0 ; d<arrTemp.length ; d++){
						if((_botonBar == 'Tránsito') && ((arrTemp[d].tipoFlete == 'Programado') || (arrTemp[d].destino == 'Stock'))){
							arrTemp.removeItemAt(d);
							botonera.visible = true;
							botonera.includeInLayout = true;
							d = d - 1; 
						}else 	if((_botonBar == 'Programado') && ((arrTemp[d].tipoFlete == 'Flete Express') || (arrTemp[d].tipoFlete == 'Regular') || (arrTemp[d].destino == 'Stock'))){
							arrTemp.removeItemAt(d);
							botonera.visible = true;
							botonera.includeInLayout = true;
							d = d - 1; 
						}else 	if((_botonBar == 'Stock') && (arrTemp[d].destino != 'Stock')){
							arrTemp.removeItemAt(d);
							botonera.visible = false;
							botonera.includeInLayout = false;
							d = d - 1; 
						}
					}  	
				}else{
					botonera.visible = false;
					botonera.includeInLayout = false;
				}
				
				/**********************************Ordenar alfabeticamente***************************/
				var tipo:Sort = new Sort();
				tipo.fields = [new SortField("nombreCliente",true)];
				arrTemp.sort = tipo;
				arrTemp.refresh();
				/**************************************************/
				
				if( arrTemp.length > 0 ){
					//agregEtiqueta( (arrTemp[0] as ProductoAlmacen).diferencial ); 
					agregEtiqueta(_etiqueta); 
					for( var i:int = 0; i < arrTemp.length; i++ ){
						(arrTemp[i] as ProductoAlmacen).arregloPedidos = new ArrayCollection();
						(arrTemp[i] as ProductoAlmacen).arregloPedidos.addItem( (arrTemp[i] as ProductoAlmacen).piRelacionada );
						if( i == 0){
							(arrTemp[0] as ProductoAlmacen).numeroDeFila = 1;
							arregloFinal.addItem( arrTemp[0] );
						}else{
							var seAgrego:Boolean = false;
							for( var f:int = 0; f < arregloFinal.length; f++ ){
								if( !(arregloFinal[f] as ProductoAlmacen).hasOwnProperty(_strPropiedad) ) return;
								if((arregloFinal[f] as ProductoAlmacen)[ _strPropiedad ] == (arrTemp[i] as ProductoAlmacen)[ _strPropiedad ]  ){
									//hay que sumar montos y cantidades de pieza
									if((arrTemp[i] as ProductoAlmacen).pcompra == null){
										(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega = (arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
									}
									
									if( (arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega != null ){
										if( (arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega == null){ //si es nula , se sustituye directamente
											(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega = (arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
										}else{
											//si nos e agrega directamente se evalua cual es mayor y se agrega o se deja
											if(((arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime()) <= (_hoy.getTime())){
												if(((arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime()) < (_hoy.getTime())){
													if(((arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime()) <= ((arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime())){
														(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega == (arrTemp[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
													}else{
														(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega = (arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
													}
												}
											}else{
												if(((arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime()) <= (_hoy.getTime())){
													if(((arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime()) <= ((arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime())){
														(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega == (arrTemp[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
													}else{
														(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega = (arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
													}
												}else{
													if(((arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime()) <= ((arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime())){
														(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega == (arrTemp[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
													}else{
														(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega = (arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
													}
												}
											}
											/* if(((arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime()) < ((arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega.getTime())){
											(arregloFinal[f] as ProductoAlmacen).pcompra.fechaEstimadaEntrega == (arrTemp[i] as ProductoAlmacen).pcompra.fechaEstimadaEntrega;
											} */	
										}
										
									}
									// se debe evaluar el arreglo de pedidos
									var existePedido:Boolean = false;
									for( var p:int = 0; p < (arregloFinal[f] as ProductoAlmacen).arregloPedidos.length; p++ ){
										if( (arregloFinal[f] as ProductoAlmacen).arregloPedidos[p] == (arrTemp[i] as ProductoAlmacen).arregloPedidos[0] ){
											existePedido = true;
											p = ( arregloFinal[f] as ProductoAlmacen).arregloPedidos.length;
										}
									}
									if(!existePedido){
										(arregloFinal[f] as ProductoAlmacen).arregloPedidos.addItem( (arrTemp[i] as ProductoAlmacen).arregloPedidos[0] );
									}
									(arregloFinal[f] as ProductoAlmacen).cantidad = (arregloFinal[f] as ProductoAlmacen).cantidad + (arrTemp[i] as ProductoAlmacen).cantidad;
									(arregloFinal[f] as ProductoAlmacen).pcompra.montoTotal = (arregloFinal[f] as ProductoAlmacen).pcompra.montoTotal + (arrTemp[i] as ProductoAlmacen).pcompra.montoTotal;
									seAgrego = true;
									f=arregloFinal.length;
								}
							}
							if( !seAgrego){
								(arrTemp[i] as ProductoAlmacen).numeroDeFila = arregloFinal.length + 1;
								arregloFinal.addItem( arrTemp[i] );
							}
							seAgrego = false;
						}
					}
				}else{
					this.lblDia.text = _etiqueta; 
				}
				lstPartidas.dataProvider = ObjectUtil.copy( arregloFinal ) as ArrayCollection;
				_montoTotal = 0;
				_piezasTotal = 0;
				for(var k:int = 0 ; k<arregloFinal.length ; k++){
					_montoTotal += (arregloFinal[k] as ProductoAlmacen).pcompra.montoTotal;
					_piezasTotal += (arregloFinal[k] as ProductoAlmacen).cantidad;
				}
				
				var $ultimoProducto:ProductoAlmacen = new ProductoAlmacen();
				$ultimoProducto.totalProductosLista =  arregloFinal.length;
				$ultimoProducto.totalMonto = _montoTotal;
				$ultimoProducto.totalPiezas = _piezasTotal;
				if(_botonBar == 'Stock') $ultimoProducto.destino = 'Total';
				$ultimoProducto.info = false;
				this.lstPartidas.dataProvider.addItem( $ultimoProducto );
				
				if(lstPartidas.dataProvider.length > 0){
					this.lstPartidas.selectedIndex = 0;
				}
				enviaPedidos();
			}
			private function agregEtiqueta( $diferencial:String ):void{
				if(_botonBar == 'Stock'){
					this.lblDia.text = 'PROVEEDOR';
					this.lblnombreDia.text = ''; return;
				}
				//if( $diferencial >= 8 ) {
				if( $diferencial == 'PASADO' ) {
					this.lblDia.text = 'PASADO'; return;
				}
				//if( $diferencial == 7 ){
				if( $diferencial == 'ANTE ANTIER' ){
					this.lblDia.text = 'ANTE ANTIER'; return;
				}
				//if( $diferencial == 6 ){
				if( $diferencial == 'ANTIER' ){
					this.lblDia.text = 'ANTIER'; return;
				}
				//if( $diferencial >= 5 ){
				if( $diferencial == 'AYER' ){
					this.lblDia.text = 'AYER'; this.lblnombreDia.text = '/' + UtilsFecha.regresaNombreDia( -1 ); return;
				}
				//if( $diferencial == 4 ){
				if( $diferencial == 'HOY' ){
					this.lblDia.text = 'HOY'; this.lblnombreDia.text = '/' + UtilsFecha.regresaNombreDia( 0 ); return;
				}
				//if( $diferencial == 3 ){
				if( $diferencial == 'MAÑANA' ){
					this.lblDia.text = 'MAÑANA';this.lblnombreDia.text = '/' + UtilsFecha.regresaNombreDia( 1 ); return;
				}
				//if( $diferencial == 2 ){
				if( $diferencial == 'PASADO MAÑANA' ){
					this.lblDia.text = 'PASADO MAÑANA'; return;
				}
				//if( $diferencial == 1 ){
				if( $diferencial == 'POS PASADO' ){
					this.lblDia.text = 'POS PASADO'; return;
				}
				//if( $diferencial == 0 ){
				if( $diferencial == 'FUTURO' ){
					this.lblDia.text = 'FUTURO'; return;
				}
				if( $diferencial == 'TODO' ){
					this.lblDia.text = 'TODO'; return;
				}
			}
			
			public function set recibeEtiqueta($etiqueta:String):void{
				_etiqueta = $etiqueta; 
			}
			
			private function enviaPedidos(event:IndexChangeEvent = null):void{
				if(event != null && lstPartidas.dataProvider.length > 0 ){
					if( event.newIndex != -1 && this.lstPartidas.dataProvider[event.newIndex].info != true){
						event.preventDefault();
					}
				}
				
				var evt:EventoRepProAlmacen2012 = new EventoRepProAlmacen2012( EventoRepProAlmacen2012.ENVIAR_PEDIDOS_SIG_VISTA );
				evt.listaPedidos = new ArrayCollection();
				var listaTemp:ArrayCollection = ObjectUtil.copy(arregloParaFiltrar ) as ArrayCollection;
				//codigo para encontrar el error de combo tipo
				if(lstPartidas.selectedIndex != -1){
					for(var i:int = 0; i < listaTemp.length ; i++ ){
						if( lstPartidas.selectedItem as ProductoAlmacen != null  ){
							if( ( lstPartidas.selectedItem as ProductoAlmacen )[ _strPropiedad ] == (listaTemp[i] as ProductoAlmacen)[ _strPropiedad ] ){
								evt.listaPedidos.addItem( listaTemp[i] );
							}
						}
					}
					_nombreAnterior = lstPartidas.selectedItem[_strPropiedad];
				}
				dispatchEvent( evt );
			}
			
			public function set obtenerError($evt:Boolean):void{
				if($evt ){ 
					lstPartidas.dataProvider = new ArrayCollection();
					this.trabajaVista(lstPartidas.dataProvider as ArrayCollection);
				}
			}
			
			protected function caretChangeHandler(event:IndexChangeEvent):void
			{
				if(this.lstPartidas.selectedIndex != -1 && this.lstPartidas.selectedItem.vieneD != 'Stock' ){
					if(event != null && lstPartidas.dataProvider.length > 0 ){
						if( event.newIndex != -1 && this.lstPartidas.dataProvider[event.newIndex].info != true){
							event.preventDefault();
						}
					}	
				}
			}
			
			protected function changingHandler(event:IndexChangeEvent):void
			{
				if(this.lstPartidas.selectedIndex != -1 && this.lstPartidas.selectedItem.vieneD != 'Stock' ){
					if(event != null && lstPartidas.dataProvider.length > 0 ){
						if( event.newIndex != -1 && this.lstPartidas.dataProvider[event.newIndex].info != true){
							event.preventDefault();
						}
					}	
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%"  id="botonera">
		<s:Spacer height="5" />
		<botonesToggle:ButtonBarColores width="100%" height="30" id="botoneraBarra" selectedIndex="0" dataProvider="{_arrButton}" changing="cargaUniverso(event)" color="0x{catalogoColores.LABEL_GRIS }" requireSelection="true" />
		<s:Spacer height="5" />
		<otros:divisionGruesa width="100%"/>
	</s:VGroup>
	<s:HGroup width="100%" height="60">
		<s:Label fontSize="18" height="100%" textAlign="center" id="lblDia" text="HOY" color="0x{catalogoColores.LABEL_NEGRO }" paddingBottom="15" verticalAlign="bottom" fontWeight="bold"/>
		<s:Label fontSize="15" height="100%" textAlign="center" id="lblnombreDia"  color="0x{catalogoColores.LABEL_NEGRO }" paddingBottom="15" verticalAlign="bottom" fontWeight="bold"/>
	</s:HGroup>
	<!--<s:Spacer height="15"/>-->
	<otros:divisionGruesa width="100%"/>
	<s:List  id="lstPartidas" itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.reportes.compras.ProductoAlmacen2012.itemRenderer.RepProAlmacen2012IRFechaSeleccionada" caretChange="caretChangeHandler(event)" changing="changingHandler(event)"
			 width="100%" borderVisible="false"  horizontalScrollPolicy="off" height="100%" selectionColor="0xeaeaea" change="enviaPedidos(event)" />
	
</s:VGroup>
