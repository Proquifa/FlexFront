<?xml version="1.0" encoding="utf-8"?>
<productos:ContenedorTableroProductosMiniChart xmlns:fx="http://ns.adobe.com/mxml/2009" 
											   xmlns:s="library://ns.adobe.com/flex/spark" 
											   xmlns:mx="library://ns.adobe.com/flex/mx" 
											   xmlns:productos="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.productos.*"
											   xmlns:componentes="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*"
											   titulo="PAGOS" informacion="{catalogoInfoGraficas.TABLERO_PRODUCTOS_PAGOS}"
											   vistaTablaGrafica="{ new MaxPagosTabProd() }" comparacion="{ new ProductoPagosComparacion() }"
											   width="100%" height="100%" 
											   >
	<fx:Declarations>
		<mx:SeriesInterpolate id="fxInterpolateIn" duration="500"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.productos.EventoTableroProductos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.tableros.productos.ParametrosBusquedaProducto;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.BarGreenRenderer;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.BarRedRenderer;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.compras.proveedores.componentes.pagos.DataTipRenderPagos;
			
			import skins.catalogos.catalogoInfoGraficas;
			
			private const _tamanioMinimo:int = 170;			
			[Bindable] private var _pagosGrafica:ArrayCollection;
			private var _anioMultiple:Boolean;
			private var yallegaronLosPagos:Boolean = false;
			private var _pagoUniverso:ArrayCollection;
			
			public function set recibePagos(comparativa:ArrayCollection):void{
				if(comparativa == null) return;
				
				this._pagoUniverso = new ArrayCollection();
				this._pagoUniverso = comparativa;				
				yallegaronLosPagos  = true;
			}
			
			public function set recibeFiltros(parametros:ParametrosBusquedaProducto):void{
				
				if(parametros == null) return;
				//_event = parametros;				
				_anioMultiple = parametros.aniosMultiple;					
				llamarAIniciarGrafica();				
			}
			
			private function llamarAIniciarGrafica():void
			{
				if(yallegaronLosPagos)
				{					
					yallegaronLosPagos = false;					
					iniciarGrafica( _pagoUniverso );					
				}
				else
				{
					setTimeout(llamarAIniciarGrafica,300);
				}
			}
			
			private function iniciarGrafica(comparativa:ArrayCollection):void{
				if(comparativa == null) return;
				
				var arrPie:ArrayCollection =  new ArrayCollection();
				this._pagosGrafica = new ArrayCollection();
				
				if(_anioMultiple){
					arrPie = comparativa;
				}else{					
					arrPie = UtilsGrid.queryCampoX( comparativa, "etiqueta", "OC_PAGOS_0" );
				}
				
				var objeto:Object = new Object();
				objeto.porPagar = 0;
				objeto.montoPorPagar = 0;
				objeto.cantidadPorPagada = 0;
				objeto.partidaPorPagar = 0;
				objeto.ocPorPagar = 0;
				objeto.proveedoresPorPagar = 0;
				
				objeto.pagada = 0;
				objeto.montoPagado = 0;
				objeto.cantidadPagada = 0;
				objeto.partidaPagada = 0;
				objeto.ocPagada = 0;
				objeto.proveedorPagada = 0;
				
				for( var i:int = 0 ; i < arrPie.length ; i++){
					if(arrPie[i].conceptoResultado == "PAGADA"){
						objeto.pagada += arrPie[i].factura;
						objeto.montoPagado += arrPie[i].total;
						objeto.cantidadPagada += arrPie[i].piezasTotal;
						objeto.partidaPagada += arrPie[i].partidas;
						objeto.ocPagada += arrPie[i].ocompras;
						objeto.proveedorPagada += arrPie[i].clientes_proveedores;
					}else{
						objeto.porPagar += arrPie[i].factura;
						objeto.montoPorPagar += arrPie[i].total;
						objeto.cantidadPorPagada += arrPie[i].piezasTotal;
						objeto.partidaPorPagar += arrPie[i].partidas;
						objeto.ocPorPagar += arrPie[i].ocompras;
						objeto.proveedoresPorPagar += arrPie[i].clientes_proveedores;
					}
					
				}
				
				objeto.porPagar == 1 ? objeto.porPagarLabel = objeto.porPagar + ' factura' : objeto.porPagarLabel = objeto.porPagar + ' facturas';
				objeto.pagada == 1 ? objeto.pagadaLabel = objeto.pagada + ' factura' : objeto.pagadaLabel = objeto.pagada + ' facturas';
				
				this._pagosGrafica.addItem(objeto);
				this._pagosGrafica.refresh();
			}	
			
			private function formateoEje($valor:Number, $valorPrevio:Object, $eje:Object):String{
				var strRegreso:String = "";
				if($valor != 0 ) strRegreso = String($valor) ;
				return strRegreso;
			}
		]]>
	</fx:Script>
	
	<productos:contenido>
		<s:VGroup width="100%" height="100%" horizontalAlign="right" paddingTop="50" paddingBottom="10" >
			<mx:ColumnChart width="100%" height="95%" id="myChart" dataProvider="{this._pagosGrafica}"
							showDataTips="true" type="stacked" visible="{EventoTableroProductos.mostrarGrafica}"
							mouseSensitivity="5" dataTipMode="single" showDataTipTargets="false" dataTipRenderer="{DataTipRenderPagos}"
							paddingRight="{ width > _tamanioMinimo ? 30 : 5}"
							paddingLeft="{ width > _tamanioMinimo ? 20 : 5}" seriesFilters="[]"> 
				<mx:series>
					<mx:ColumnSeries id="colBarRed"
									 yField="porPagar"
									 showDataEffect="{fxInterpolateIn}"
									 itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.BarRedRenderer"
									 />
					<mx:ColumnSeries id="colBarVerde"
									 yField="pagada" 
									 showDataEffect="{fxInterpolateIn}"
									 itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.BarGreenRenderer"
									 />
				</mx:series>
				<mx:horizontalAxis>
					<mx:CategoryAxis id="vMes" />
				</mx:horizontalAxis>
				<mx:verticalAxis>
					<mx:LinearAxis id="vCantidad" baseAtZero="true" labelFunction="formateoEje"/>
				</mx:verticalAxis>
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer axis="{vCantidad}" showLine="false" tickPlacement="none" showLabels="{ width > _tamanioMinimo ? true : false}" styleName="axisVerticalLabels"/>
				</mx:verticalAxisRenderers>
				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer axis="{vMes}" showLine="false" showLabels="false"/>
				</mx:horizontalAxisRenderers>
				<mx:backgroundElements>
					<mx:GridLines>
						<mx:horizontalStroke>
							<s:SolidColorStroke weight="0.5" color="{ width > _tamanioMinimo ? 0xeeeeee: 0xFFFFFF}"/>
						</mx:horizontalStroke>
					</mx:GridLines>
				</mx:backgroundElements>
			</mx:ColumnChart>
			<componentes:horizontalAxisChartPq text="CANTIDAD PAGADA / CANTIDAD POR PAGAR" horizontalCenter="0" width="100%" paddingRight="{ width > _tamanioMinimo ? 30 : 5}" paddingLeft="{ width > _tamanioMinimo ? 70 : 5}"/>
			<s:Label width="100%" paddingLeft="15" styleName="axisVerticalLabels">
				<s:text>Los montos se refieren a costo de Compra</s:text>
			</s:Label>
		</s:VGroup>
	</productos:contenido>
	
</productos:ContenedorTableroProductosMiniChart>
