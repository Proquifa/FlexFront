<?xml version="1.0" encoding="utf-8"?>
<comun:ContenedorComparacionConsultas xmlns:fx="http://ns.adobe.com/mxml/2009"
									  xmlns:comun="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.*"
									  xmlns:s="library://ns.adobe.com/flex/spark"
									  xmlns:mx="library://ns.adobe.com/flex/mx" 
									  xmlns:otros="skins.otros.*" 
									  xmlns:pq="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.pq.*" 
									  xmlns:pqNet1="skins.botones.pqNet.*" 
									  xmlns:label="skins.skin.label.*"
									  xmlns:AdvancedDataGrid="skins.skin.AdvancedDataGrid.*" 
									  xmlns:ETvsFT= "mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.graficasETvsFT.*"
									  xmlns:consultas="skins.skin.comun.consultas.*"
									  creationComplete="agregaGraficas()"									  
									  width="100%" height="100%"
									  >
	
	<fx:Declarations>
		<s:Fade id="fadeOcultar" duration="200" alphaFrom="1.0" alphaTo="0.0"/>
		<s:Fade id="fadeMostrar" duration="500" alphaFrom="0.0" alphaTo="1.0"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.filesystem.File;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoEsperar;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.consultas.despachos.EventoConsultaEntregas;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.Factura;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.despachos.Ruta;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.ContenedorGraficas;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaAbiertoVsCerrado;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaConforme;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaETvsFT;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaIntentoA;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaMensajero;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaNI;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaPNE;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaRuta;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.despachos.entregas.graficas.EntregasGraficaZona;
			import mx.core.IVisualElement;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosEtiquetas;
			
			//varaibles dedicadas para las graficas
			private var _gaficaAbiertoVsCerrado:EntregasGraficaAbiertoVsCerrado;
			private var _graficaAbiertoVsConforme:EntregasGraficaConforme;
			private var _grficaETvsFT:EntregasGraficaETvsFT;
			private var _graficaIntentoA:EntregasGraficaIntentoA;
			private var _graficaMensajeros:EntregasGraficaMensajero;
			private var _graficaNI:EntregasGraficaNI;
			private var _graficaPNE:EntregasGraficaPNE;
			private var _graficaRuta:EntregasGraficaRuta;
			private var _graficaZona:EntregasGraficaZona;
			
			[Bindable]
			private var _listaEntregas:ArrayCollection;
			public var graficos:ArrayCollection = new ArrayCollection();
			private var graficas1erNivel:ContenedorGraficas = new ContenedorGraficas();
			
			private function agregaGraficas():void
			{
				headGrid.btnExportar.enabled = false;
				btnGraficaTabla.addEventListener(MouseEvent.CLICK,solicitarInfoGraficas,false,0,true);
				
				var graficaEncimada:ArrayCollection = new ArrayCollection();
				var graficas:ArrayCollection = new ArrayCollection();
				_graficaNI = new EntregasGraficaNI();
				_graficaPNE = new EntregasGraficaPNE();
				_graficaMensajeros = new EntregasGraficaMensajero();
				_graficaRuta = new EntregasGraficaRuta();
				_graficaZona = new EntregasGraficaZona();
				_graficaAbiertoVsConforme = new EntregasGraficaConforme();
				_graficaIntentoA = new EntregasGraficaIntentoA();
				_gaficaAbiertoVsCerrado = new EntregasGraficaAbiertoVsCerrado();
				_grficaETvsFT = new EntregasGraficaETvsFT();
				
				graficas.addItem( _graficaNI );
				graficas.addItem( _graficaRuta );
				graficas.addItem( _graficaPNE );
				graficas.addItem( _graficaZona );
				graficas.addItem( _graficaIntentoA );
				graficas.addItem( _graficaMensajeros );
				graficas.addItem( _gaficaAbiertoVsCerrado );
				graficas.addItem( _graficaAbiertoVsConforme );
				graficaEncimada.addItem( _grficaETvsFT );
				
				graficas1erNivel.insertarGraficas(graficas,graficaEncimada);
				agregarEspacioTrabajo(graficas1erNivel);
				
				var arrGraficas:ArrayCollection = new ArrayCollection();
				
				addEventListener(EventoConsultaEntregas.MOSTRAR_SELECTED_GRAFICA,mostrarLasGraficasETvsFT);
				
				//Resetaer
				resetControlDeCambiosEnFiltros();
			}
			
			private function resetControlDeCambiosEnFiltros():void
			{
				numFiltrosModificados =0;
				keyModificados=  new Object();
			}
			[Bindable]
			public var filtrosConsultaActual:Object;
			[Bindable]
			public var actualizarVistaActual:Boolean;
			private function solicitarInfoGraficas(event:MouseEvent):void
			{
				if(imgTab.visible){
					compararVistas();
					var seleccionarVista:EventoConsultaEntregas = new EventoConsultaEntregas(EventoConsultaEntregas.SETTEAR_CURRENT_VISTA_SELECTED);
					
					//Configurar Espera
					var eventEspera:EventoEsperar = new EventoEsperar(EventoEsperar.CONFIGURAR_ESPERA);
					eventEspera.mensaje = "iniciarEspera";
					eventEspera.idButtons = [];
					eventEspera.tipoEventos = [];
					
					if( vistaSelected == _TABLA_GRID ){
						seleccionarVista.selectedVista = _GRAFICAS;
						
						if(actualizarVistaActual){
							actualizarVistaActual = false;
							
							//Configurar Espera
							eventEspera.idButtons.push("btnTotales");
							eventEspera.idButtons.push("btnBusqueda");
							eventEspera.tipoEventos.push("OBTEN_COMPARATIVAS");
							eventEspera.tipoEventos.push("OBTEN_TRES_GRAFICAS");
							dispatchEvent(eventEspera);
							
							var evtComparrativas:EventoConsultaEntregas = new EventoConsultaEntregas(EventoConsultaEntregas.OBTEN_COMPARATIVAS);
							var evtGraficas:EventoConsultaEntregas = new EventoConsultaEntregas( EventoConsultaEntregas.OBTEN_TRES_GRAFICAS );
							evtGraficas.idCliente = evtComparrativas.idCliente = filtrosConsultaActual.idCliente;
							evtGraficas.estado = evtComparrativas.estado = filtrosConsultaActual.estado;
							evtGraficas.mensajero = evtComparrativas.mensajero = filtrosConsultaActual.mensajero;
							evtGraficas.rutaCombo = evtComparrativas.rutaCombo = filtrosConsultaActual.rutaCombo;
							evtGraficas.conforme = evtComparrativas.conforme = filtrosConsultaActual.conforme;
							evtGraficas.finicio = evtComparrativas.finicio = filtrosConsultaActual.finicio;
							evtGraficas.ffin = evtComparrativas.ffin = filtrosConsultaActual.ffin;
							evtGraficas.facturaString = null;
							evtGraficas.cpedido = null;
							evtComparrativas.individual = false;
							dispatchEvent( evtComparrativas );
							dispatchEvent(evtGraficas);
							
							
							var evt:EventoConsultaEntregas = new EventoConsultaEntregas(EventoConsultaEntregas.OBTENER_VALORES_GRAFICA_ETVSFT);
							evt.idCliente = filtrosConsultaActual.idCliente;
							evt.estado = filtrosConsultaActual.estado;
							evt.mensajero = filtrosConsultaActual.mensajero;
							evt.rutaCombo = filtrosConsultaActual.rutaCombo;
							evt.conforme = filtrosConsultaActual.conforme;
							evt.finicio = filtrosConsultaActual.finicio;
							evt.ffin = filtrosConsultaActual.ffin;
							evt.facturaString = null;
							evt.cpedido = null;
							dispatchEvent( evt );
							
							
							//

							
							//Para Researt filtros
							resetControlDeCambiosEnFiltros();
						}
					}else{
						seleccionarVista.selectedVista = _TABLA_GRID;
						if(actualizarVistaActual){
							actualizarVistaActual = false;
							
							//Configurar Espera
							eventEspera.idButtons.push("btnBusqueda");
							eventEspera.tipoEventos.push("CONSULTA_ENTREGAS");
							dispatchEvent(eventEspera);
							
							var evt3:EventoConsultaEntregas = new EventoConsultaEntregas(EventoConsultaEntregas.CONSULTA_ENTREGAS);
							evt3.idCliente = filtrosConsultaActual.idCliente;
							evt3.estado = filtrosConsultaActual.estado;
							evt3.mensajero = filtrosConsultaActual.mensajero;
							evt3.rutaCombo = filtrosConsultaActual.rutaCombo;
							evt3.conforme = filtrosConsultaActual.conforme;
							evt3.finicio = filtrosConsultaActual.finicio;
							evt3.ffin = filtrosConsultaActual.ffin;
							dispatchEvent( evt3 );
							
							//Para Researt filtros
							resetControlDeCambiosEnFiltros();
						}
					}
					dispatchEvent(seleccionarVista);
				}
			}
			private function mostrarLasGraficasETvsFT(llega:EventoConsultaEntregas):void
			{
				if(llega.valorAdicional =="grafETVsFTConsultaEntregas"){
					
					stack.selectedIndex=llega.seleccionarGraficas; 
				}
				
				if(llega.valorAdicional =="mostrarGraficas"){
					stack.selectedIndex=llega.seleccionarGraficas; 
				}
			}
			public function agregarEspacioTrabajo(espacio:IVisualElement):void{
				if(espacio == null){
					return;
				}
				graficos.addItem(espacio);
				if(graficos.length == 1){
					espacioGraficas.removeAllElements();
					espacioGraficas.addElement(espacio);
				}
			}
			
			public function set obtenerEntregas( $datos:ArrayCollection ):void{
				if( $datos == null ){
					return;
				}
				gridEntregas.dataProvider = new ArrayCollection;  
				
				for( var i:int = 0; i < $datos.length; i++){
					( $datos[i] as Factura).numFila = i+1;
					var currentItem:Factura = $datos[i] as Factura;
				}
				
				_graficaNI.recibeDatapProvider( ObjectUtil.copy( $datos ) as ArrayCollection );
				_graficaMensajeros.recibeDatapProvider( ObjectUtil.copy( $datos ) as ArrayCollection );
				_graficaRuta.recibeDatapProvider( ObjectUtil.copy( $datos ) as ArrayCollection );
				_graficaZona.recibeDatapProvider( ObjectUtil.copy( $datos ) as ArrayCollection );
				_graficaAbiertoVsConforme.recibeDatapProvider( ObjectUtil.copy( $datos ) as ArrayCollection );
				_gaficaAbiertoVsCerrado.recibeDatapProvider( ObjectUtil.copy( $datos ) as ArrayCollection );
				_grficaETvsFT.recibeDatapProvider( ObjectUtil.copy( $datos ) as ArrayCollection );
				//GraficasETvsFT._graficaETvsFT.info(ObjectUtil.copy( $datos ) as ArrayCollection );
				
				gridEntregas.dataProvider = ObjectUtil.copy( $datos ) as ArrayCollection;
				
				if ($datos.length > 0 ){
					headGrid.btnExportar.enabled = true;
				}
				else{
					headGrid.btnExportar.enabled = false;
				}
			}
			
			private function etiquetaGridRuta(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = ( obj as  Factura).rutaRelacionada.rutaMensajeria;
				}
				return etiqueta;
			}
			private function etiquetaGridZona(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = ( obj as  Factura).rutaRelacionada.zonaMensajeria;
				}
				return etiqueta;
			}
			private function etiquetaGridMensajero(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = ( obj as  Factura).rutaRelacionada.responsable;
				}
				return etiqueta;
			}
			private function etiquetaGridFER(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = UtilsFecha.formatoFechaDDMMMYYYY( ( obj as  Factura).rutaRelacionada.fer );
				}
				return etiqueta;
			}
			private function etiquetaGridFR(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = UtilsFecha.formatoFechaDDMMMYYYY( ( obj as  Factura).rutaRelacionada.fr);
				}
				return etiqueta;
			}
			private function etiquetaGridF(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = UtilsFecha.formatoFechaDDMMMYYYY( ( obj as  Factura).rutaRelacionada.fecha);
				}
				return etiqueta;
			}
			private function etiquetaGridEstado(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = ( obj as  Factura).rutaRelacionada.estadoRuta;
				}
				return etiqueta;
			}
			private function etiquetaConforme(obj:Object, col:AdvancedDataGridColumn):String{
				var etiqueta:String = "";
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					etiqueta = ( obj as  Factura).rutaRelacionada.tiempoRealizacion;
				}
				return etiqueta;
			}
			
			/**
			 *  filtra las facturas del grid por cliente seleccionado
			 */
			public static var _flujo:String;
			public function filtraPorCliente($dato:Number,$factura:Factura):void{
				_flujo = "";
				var arregloTemp:ArrayCollection = new ArrayCollection();
				arregloTemp.addItem( $factura );
				for(var i:int = 0; i < ( gridEntregas.dataProvider.length - 1) ; i++ ){
					if( (gridEntregas.dataProvider[i] as Factura).idCliente == $dato ){
						if(  (gridEntregas.dataProvider[i] as Factura).idFactura !=  $factura.idFactura ){
							arregloTemp.addItem( gridEntregas.dataProvider[i] );
						}
					}
				}
				_flujo = $factura.rutaRelacionada.flujo;
				var evt:EventoConsultaEntregas = new EventoConsultaEntregas( EventoConsultaEntregas.MUESTRA_COLUMAS );
				evt.listaEntregas = new ArrayCollection();
				evt.listaEntregas= ObjectUtil.copy( arregloTemp ) as ArrayCollection;
				evt.factura = $factura;
				evt.idVista = 1;
				dispatchEvent(evt);  
			}
			
			[Bindable] private var _finicio:String;
			[Bindable] private var _ffin:String;
			[Bindable] private var _imgPiezas:Class;
			[Bindable] private var _imgMonto:Class;
			[Bindable] private var _imgCobros:Class;
			
			private var _montoTotal:Number = 0;
			private	var _piezasTotal:int = 0;
			private var _compraTotal:int = 0;
			private	var _montoPasado:Number = 0;
			private	var _piezaPasado:int = 0;
			private	var _compraPasado:int = 0;
			private	var _montoPosPasado:Number = 0;
			private	var _piezaPosPasado:int = 0;
			private	var _compraPosPasado:int = 0;
			
			public function set recibeComprativas($infoTotal:ArrayCollection):void{
				if($infoTotal == null) return;
				
				var sTime:Number = getTimer();
				
				var currentItem:ResumenConsulta;
				for(var d:int = 0; d<$infoTotal.length ; d++){
					currentItem = $infoTotal[d] as ResumenConsulta;
					if(currentItem.etiqueta == "Actual"){
						_montoTotal = currentItem.total;
						_piezasTotal = currentItem.piezasTotal; 	
						_compraTotal = currentItem.totalFolios;
						_finicio = UtilsFecha.formatoFecha_dia_mes_Anio(currentItem.fechaInicio);
						_ffin = UtilsFecha.formatoFecha_dia_mes_Anio(currentItem.fechaFinal);
					}else 	if(currentItem.etiqueta == "Pasado"){
						_montoPasado = currentItem.total;
						_piezaPasado = currentItem.piezasTotal;	
						_compraPasado = currentItem.totalFolios;
						currentDatePasadoIni  = dtpFInicioPasado.selectedDate = currentItem.fechaInicio;
						currentDatePasadoFin = dtpFFinPasado.selectedDate = currentItem.fechaFinal;
					}else if(currentItem.etiqueta == "Postpasado"){
						_montoPosPasado =  currentItem.total;
						_piezaPosPasado =  currentItem.piezasTotal;
						_compraPosPasado =  currentItem.totalFolios;
						currentDatePostpasadoIni = dtpFInicioPosPasado.selectedDate = currentItem.fechaInicio;
						currentDatePostpasadoFin = dtpFFinPosPasado.selectedDate = currentItem.fechaFinal;
					}
				}
				
				lbMonto.text = '$ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas(_montoTotal);
				lbMontoPasado.text = '$ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas(_montoPasado);
				lbMontoPosPasado.text = '$ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas(_montoPosPasado);
				lbNumCobros.text = _compraTotal.toString();
				lbNumCobrosPasado.text = _compraPasado.toString();
				lbNumCobrosPosPasado.text = _compraPosPasado.toString();
				lbNumPiezas.text = _piezasTotal.toString();
				lbNumPiezasPasado.text = _piezaPasado.toString();
				lbNumPiezasPosPasado.text = _piezaPosPasado.toString();
				
				var _promedioCompras:int = (_compraPasado + _compraPosPasado)/2;
				var _promedioMonto:Number = (_montoPasado + _montoPosPasado)/2;
				var _promedioPiezas:Number = (_piezaPasado + _piezaPosPasado)/2;
				
				if(_compraTotal > _promedioCompras) 
					_imgCobros = catalogoIconosEtiquetas.getInstance().etiquetas_verdeflecha;
				else if(_compraTotal < _promedioCompras) 
					_imgCobros = catalogoIconosEtiquetas.getInstance().etiquetas_rojoflecha;
				else if(_compraTotal == _promedioCompras) 
					_imgCobros = catalogoIconosEtiquetas.getInstance().etiquetas_amarillolinea;
				
				if(_montoTotal > _promedioMonto) 
					_imgMonto = catalogoIconosEtiquetas.getInstance().etiquetas_verdeflecha;
				else if(_montoTotal < _promedioMonto) 
					_imgMonto = catalogoIconosEtiquetas.getInstance().etiquetas_rojoflecha;
				else if(_montoTotal == _promedioMonto) 
					_imgMonto = catalogoIconosEtiquetas.getInstance().etiquetas_amarillolinea;
				
				if(_piezasTotal > _promedioPiezas) 
					_imgPiezas = catalogoIconosEtiquetas.getInstance().etiquetas_verdeflecha;
				else if(_piezasTotal < _promedioPiezas) 
					_imgPiezas = catalogoIconosEtiquetas.getInstance().etiquetas_rojoflecha;
				else if(_piezasTotal == _promedioPiezas) 
					_imgPiezas = catalogoIconosEtiquetas.getInstance().etiquetas_amarillolinea;
				
				var eTime:Number = getTimer();
			}
			
			private var numFiltrosModificados:int;
			private var keyModificados:Object;
			private var currentDatePasadoIni:Date;
			private var currentDatePasadoFin:Date;
			private var currentDatePostpasadoIni:Date;
			private var currentDatePostpasadoFin:Date;
			
			protected function fechasPasadas_changeHandler(event:CalendarLayoutChangeEvent):void
			{
				switch(event.currentTarget.id)
				{
					case "dtpFInicioPasado":{CompararYControlarBoton(event.newDate.time,currentDatePasadoIni.time,"dtpFInicioPasado",btnTotales);break;}
					case "dtpFFinPasado":{CompararYControlarBoton(event.newDate.time,currentDatePasadoFin.time,"dtpFFinPasado",btnTotales);	break;}
					case "dtpFInicioPosPasado":	{CompararYControlarBoton(event.newDate.time,currentDatePostpasadoIni,"dtpFInicioPosPasado",btnTotales);break;}
					case "dtpFFinPosPasado":{CompararYControlarBoton(event.newDate.time,currentDatePostpasadoFin,"dtpFFinPosPasado",btnTotales);break;}
				}					
			}
			private function CompararYControlarBoton($dato1:Object,$dato2:Object,$currentFiltroModif:String,$button:botonPqNetLargo):void
			{
				if($dato1 != $dato2){
					if(!keyModificados.hasOwnProperty($currentFiltroModif)){
						$button.CambiarToActualizarTipoBoton(false);
						keyModificados[$currentFiltroModif]=$currentFiltroModif;
						numFiltrosModificados ++;
					}
				}else{
					if(numFiltrosModificados==1){
						$button.CambiarToActualizarTipoBoton(true);
						numFiltrosModificados =0;
						keyModificados=  new Object();
					}else{
						delete keyModificados[$currentFiltroModif];
						numFiltrosModificados --;
					}
				}
			}
			public function set actualizarEsperaYBloqueo($actualizarEstadoEspera:Object):void
			{
				var currenIdButton:String;
				if($actualizarEstadoEspera.hasOwnProperty("idCurrentButtons")){
					
					for (var i:int = 0; i < $actualizarEstadoEspera.idCurrentButtons.length; i++) 
					{
						currenIdButton = $actualizarEstadoEspera.idCurrentButtons[i];
						switch(currenIdButton)
						{
							case "btnTotales":
							{
								if(btnTotales.isCurrentButtonActualizar){
									btnTotales.isBusyActualizar= $actualizarEstadoEspera.isBusy;
								}else if(!$actualizarEstadoEspera.isBusy){
									btnTotales.CambiarToActualizarTipoBoton(true);
								}
								break;
							}
						}
					}
				}
			}
			
			public function limpiarGrid():void
			{
				gridEntregas.dataProvider = new ArrayCollection();
			}
			
			private function encuentraTotalesXPeriodo():void{
				//Configurar Espera
				var eventEspera:EventoEsperar = new EventoEsperar(EventoEsperar.CONFIGURAR_ESPERA);
				eventEspera.mensaje = "iniciarEspera";
				eventEspera.idButtons = [];
				eventEspera.tipoEventos = [];
				eventEspera.idButtons.push("btnTotales");
				eventEspera.tipoEventos.push("OBTEN_COMPARATIVAS_PASADO");
				eventEspera.tipoEventos.push("OBTEN_COMPARATIVAS_POSPASADO");
				dispatchEvent(eventEspera);
				
				
				var evtTotalesPasado:EventoConsultaEntregas = new EventoConsultaEntregas( EventoConsultaEntregas.OBTEN_COMPARATIVAS_PASADO );
				evtTotalesPasado.finicio = dtpFInicioPasado.selectedDate;
				evtTotalesPasado.ffin = dtpFFinPasado.selectedDate;
				evtTotalesPasado.idCliente = filtrosConsultaActual.idCliente;
				evtTotalesPasado.estado = filtrosConsultaActual.estado;
				evtTotalesPasado.mensajero = filtrosConsultaActual.mensajero;
				evtTotalesPasado.rutaCombo = filtrosConsultaActual.rutaCombo; 
				evtTotalesPasado.conforme = filtrosConsultaActual.conforme; 
				evtTotalesPasado.individual = true;
				dispatchEvent(evtTotalesPasado);
				
				var evtTotalesPosPasado:EventoConsultaEntregas = new EventoConsultaEntregas( EventoConsultaEntregas.OBTEN_COMPARATIVAS_POSPASADO );
				evtTotalesPosPasado.finicio = dtpFInicioPosPasado.selectedDate;
				evtTotalesPosPasado.ffin = dtpFFinPosPasado.selectedDate;
				evtTotalesPosPasado.idCliente = filtrosConsultaActual.idCliente;
				evtTotalesPosPasado.estado = filtrosConsultaActual.estado;
				evtTotalesPosPasado.mensajero = filtrosConsultaActual.mensajero;
				evtTotalesPosPasado.rutaCombo = filtrosConsultaActual.rutaCombo; 
				evtTotalesPosPasado.conforme = filtrosConsultaActual.conforme; 
				evtTotalesPosPasado.individual = true;
				dispatchEvent(evtTotalesPosPasado);
				
				//Resetaer
				resetControlDeCambiosEnFiltros();
			}
			private function regresaPrincipalGraficas():void{
				stack.selectedIndex=0;
			}
			
			public function set mostrarOcultarTab(tabGrafica:Boolean):void{
				imgTab.visible = tabGrafica;
				if(vistaSelected == _GRAFICAS){
					compararVistas();
				}	
			}
			
			public function ordenaPorFechaFER( obj:Object, valor2:Object ):int{
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					return ObjectUtil.dateCompare( ( obj as  Factura).rutaRelacionada.fer , ( valor2 as  Factura).rutaRelacionada.fer );
				}else{
					return -1;
				}
			}
			
			public function ordenaPorFechaFR( obj:Object, valor2:Object ):int{
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					return ObjectUtil.dateCompare( ( obj as  Factura).rutaRelacionada.fr,  ( valor2 as  Factura).rutaRelacionada.fr );
				}else{
					return -1;
				}
			}
			
			public function ordenaPorFechaF( obj:Object, valor2:Object ):int{
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					return ObjectUtil.dateCompare( ( obj as  Factura).rutaRelacionada.fecha,  ( valor2 as  Factura).rutaRelacionada.fecha );
				}else{
					return -1;
				}
			}
			
			private function ordenarString(obj:Object, valor2:Object):int
			{
				
				var fun:Function = (gridEntregas.columns[3] as AdvancedDataGridColumn).labelFunction;
				if( obj.hasOwnProperty(	'rutaRelacionada') ){
					var currenItem1:Ruta = ( obj as  Factura).rutaRelacionada;
					var currenItem2:Ruta = ( valor2 as  Factura).rutaRelacionada;
					var property:String;
					switch(currentColSelectedHeaderText)
					{
						//::::::::ATENCIÓN:::::::::LOS CASOS DECLARADOS EN EL SWITCH DEBEN CORRESPONDER CON LOS NOMBRES DE AQUELLOS HEADERS 
						// EN LOS CUALES SE DECLARÓ UN labelFunction
						case "Ruta":{ property = "rutaMensajeria"; break;}
						case "Ruta/Zona":{ property = "rutaMensajeria"; break;}
						case "Zona":{ property = "zonaMensajeria"; break;}
						case "Mensajero":{ property = "responsable"; break;}
						case "Estado":{ property = "estadoRuta"; break;}
						case "Conforme":{ property = "conforme"; break;}
						case "En Tiempo":{ property = "tiempoRealizacion"; break;}
					}
					return ObjectUtil.compare(currenItem1[property],  currenItem2[property]);
				}else{
					return -1;
				}
			}
			private var currentColSelectedHeaderText:String;
			protected function gridEntregas_clickHandler(event:MouseEvent):void
			{
				if(event.target.hasOwnProperty("automationParent")){
					if((event.target.automationParent as Object).hasOwnProperty("data"))					
						currentColSelectedHeaderText = (event.target.automationParent.data as AdvancedDataGridColumn).headerText; 
				}
			}
			
			protected function headGrid_clickExportarHandler(event:MouseEvent):void
			{
				var file:File = new File();
				var hoja:ArrayCollection = new ArrayCollection;
				var fila:Array = new Array;
				fila[0] = hoja.addItem("#");
				fila[1] = hoja.addItem("Cliente");
				fila[2] = hoja.addItem("Ruta");
				fila[3] = hoja.addItem("Zona");
				fila[4] = hoja.addItem("Factura");
				fila[5] = hoja.addItem("Pedido");
				fila[6] = hoja.addItem("Mensajero");
				fila[7] = hoja.addItem("FER");
				fila[8] = hoja.addItem("FR");
				fila[9] = hoja.addItem("Estado");
				fila[10] = hoja.addItem("Monto");
				fila[11] = hoja.addItem("EstadoRuta");
				//fila[10] = hoja.addItem("Conforme");
				
				for(var i:int = 0; i < gridEntregas.dataProvider.length; i++){
					fila = new Array();
					fila[0] = gridEntregas.dataProvider[i].numFila;
					fila[1] = '"' + gridEntregas.dataProvider[i].nombre_Cliente + '"';
					if (gridEntregas.dataProvider[i].rutaRelacionada.rutaMensajeria.indexOf('-') != -1 )
						fila[2] = '"' + gridEntregas.dataProvider[i].rutaRelacionada.rutaMensajeria.split(' -')[0] + '"';
					else 
						fila[2] = '"' + gridEntregas.dataProvider[i].rutaRelacionada.rutaMensajeria + '"';
					fila[3] = '"' + gridEntregas.dataProvider[i].rutaRelacionada.zonaMensajeria + '"';
					fila[4] = '"' + gridEntregas.dataProvider[i].numeroFactura + '"';
					fila[5] = '"' + gridEntregas.dataProvider[i].cpedido + '"';
					fila[6] = '"' + gridEntregas.dataProvider[i].rutaRelacionada.responsable + '"';
					fila[7] = '"' + UtilsFecha.formatoFechaDDMMMYYYY( (gridEntregas.dataProvider[i] as Factura).rutaRelacionada.fer ) + '"';
					fila[8] = '"' + UtilsFecha.formatoFechaDDMMMYYYY( ( gridEntregas.dataProvider[i] as  Factura).rutaRelacionada.fr) + '"';
					fila[9] = '"' + gridEntregas.dataProvider[i].rutaRelacionada.estadoRuta + '"';
					fila[10] = '"$' + UtilsFormatosNumericos.precisionADosDecimalesConComas(gridEntregas.dataProvider[i].montoFacturaDLS) + '"';
					fila[11] = '"' + gridEntregas.dataProvider[i].rutaRelacionada.entrega + '"';
					//fila[10] = '"' + gridEntregas.dataProvider[i].rutaRelacionada.conforme + '"';
					hoja.addItem('\r' + fila);
				}
				file.save(hoja,"ConsultaEntregas-" + UtilsFecha.formatoPAraGuardarFechaDDMMMYYYYHHMM(new Date()) + ".csv");
				
			}
			
			private function compareFunction_Monto(item1:Object,item2:Object):int
			{
				return ObjectUtil.numericCompare(item1.importe,item2.importe); 
			}
			
		]]>
	</fx:Script>
	<comun:espacioA>
		<s:VGroup width="100%" height="100%" paddingTop="20" paddingLeft="20" paddingRight="20" gap="10">
			<consultas:HeaderParaGridConsultas id="headGrid" mostrarBtnExportar="true" clickExportar="headGrid_clickExportarHandler(event)" />
			<otros:divisionGruesa width="100%"/>
			<AdvancedDataGrid:PQNetAdvanceDataGridFooter id="gridEntregas" width="100%" height="100%" anchoColumnas="{['45','=','35%','120','=','=','=','=','=','=','80','80','=']}" tipoDeConsulta="Entregas"
														 disableSortableColumns="{[11,12]}" disableDragableColumns="{[0,11,12]}" disableResizableColumns="{[0,11,12]}" mouseDown="gridEntregas_clickHandler(event)">
				<AdvancedDataGrid:columns>
					<mx:AdvancedDataGridColumn headerText="#" dataField="numFila" />
					<mx:AdvancedDataGridColumn headerText="Fecha" labelFunction="etiquetaGridF" sortCompareFunction="{ordenaPorFechaF}"/>
					<mx:AdvancedDataGridColumn headerText="Cliente" dataField="nombre_Cliente"/>
					<mx:AdvancedDataGridColumn headerText="Ruta/Zona" labelFunction="etiquetaGridRuta" sortCompareFunction="{ordenarString}" />
					<!--<mx:AdvancedDataGridColumn headerText="Zona" labelFunction="etiquetaGridZona" sortCompareFunction="{ordenarString}" />-->
					<mx:AdvancedDataGridColumn headerText="Factura" dataField="numeroFactura" />
					
					<mx:AdvancedDataGridColumn  headerText="Monto" sortCompareFunction="{compareFunction_Monto}" >
						<mx:itemRenderer>
							<fx:Component>
								<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
									<fx:Script>
										<![CDATA[
											import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
										]]>
									</fx:Script>
									<label:Texto_12 text="${UtilsFormatosNumericos.precisionADosDecimalesConComas(data.montoFacturaDLS)}" textAlign="center" width="100%" />
								</s:MXAdvancedDataGridItemRenderer>
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					
					<mx:AdvancedDataGridColumn headerText="Pedido" dataField="cpedido"/>
					<mx:AdvancedDataGridColumn headerText="Mensajero" labelFunction="etiquetaGridMensajero" sortCompareFunction="{ordenarString}" />
					<mx:AdvancedDataGridColumn headerText="FER" labelFunction="etiquetaGridFER" sortCompareFunction="{ordenaPorFechaFER}"/>
					<mx:AdvancedDataGridColumn headerText="FR" labelFunction="etiquetaGridFR" sortCompareFunction="{ordenaPorFechaFR}"/>
					<mx:AdvancedDataGridColumn headerText="Estado" labelFunction="etiquetaGridEstado" sortCompareFunction="{ordenarString}" />
					<!--<mx:AdvancedDataGridColumn headerText="En Tiempo" labelFunction="etiquetaConforme" sortCompareFunction="{ordenarString}" />-->
					
					
					<mx:AdvancedDataGridColumn headerText="En Tiempo" labelFunction="etiquetaConforme" >
						<mx:itemRenderer>
							<fx:Component>
								<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" >
									<fx:Script>
										<![CDATA[
											import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.Factura;
											
											import skins.catalogos.catalogoIconosGrid;
											import skins.skin.AdvancedDataGrid.PQNetWhitCSS;
											
											override public function set data(value:Object):void{
												if( listData == value ) return;
												super.data = value; 
												lblTiempo.setStyle("fontFamily",(automationOwner as PQNetWhitCSS).fontFamily);
												lblTiempo.setStyle("fontSize", (automationOwner as PQNetWhitCSS).fontSize);
												lblTiempo.setStyle("fontStyle",(automationOwner as PQNetWhitCSS).styleFont);
											}
										]]>
									</fx:Script>
									<s:HGroup horizontalAlign="right" horizontalCenter="0" verticalAlign="middle">
										<s:Label id="lblTiempo" text="{(data as Factura).rutaRelacionada.tiempoRealizacion}"/>
										<s:Image source="{(data as Factura).rutaRelacionada.tiempoRealizacion == 'FT' ? catalogoIconosGrid.getInstance().render_circuloRojo : catalogoIconosGrid.getInstance().render_circuloVerde}"/>
									</s:HGroup>
								</s:MXAdvancedDataGridItemRenderer>
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					
					
					
					<mx:AdvancedDataGridColumn headerText=" " >
						<mx:itemRenderer>
							<fx:Component>
								<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
									<fx:Script>
										<![CDATA[
											import mx.com.proquifa.proquifanet.rsl.vista.eventos.consultas.despachos.EventoConsultaEntregas;
											import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.Factura;
											
											import skins.catalogos.catalogoIconosGrid;
											private function image1_clickHandler():void{
												outerDocument.filtraPorCliente( (data as Factura).idCliente, data as Factura);
											}
										]]>
									</fx:Script>
									<s:HGroup width="100%" horizontalAlign="center">
										<s:Image source="{catalogoIconosGrid.getInstance().render_flechitacirculo}" click="image1_clickHandler()"/>
									</s:HGroup>
								</s:MXAdvancedDataGridItemRenderer>
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
				</AdvancedDataGrid:columns>
			</AdvancedDataGrid:PQNetAdvanceDataGridFooter>
		</s:VGroup>
	</comun:espacioA>
	<comun:espacioB>
		<pq:MobViewStack id="stack" width="100%" height="100%">
			<s:VGroup id="grpGraficas" height="100%" gap="0" showEffect="{fadeMostrar}" hideEffect="{fadeOcultar}">
				<s:HGroup width="100%" height="100%" gap="0">
					<s:HGroup width="100%" height="100%" id="espacioGraficas"/>
					<s:BorderContainer width="260" height="100%" backgroundColor="#363636"> 
						<s:Scroller height="100%">
							<s:VGroup width="100%" height="100%" paddingLeft="15" paddingRight="15" >
								<s:Label width="100%" text="TOTALES" color="0x{catalogoColores.LABEL_BLANCO}" fontWeight="bold" fontSize="16" fontFamily="Helvetica" fontStyle="normal" paddingTop="20" />
								<otros:divisionGruesa color="0x{catalogoColores.LABEL_BLANCO}"/>
								<s:HGroup width="100%" paddingTop="30" paddingBottom="15">
									<s:Image source="{this._imgMonto}" />
									<s:VGroup width="100%" paddingLeft="10">
										<s:Label width="100%" text="Monto USD:"  color="0x{catalogoColores.LABEL_BLANCO}" fontWeight="bold" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%" id="lbMonto" color="0x{catalogoColores.LABEL_BLANCO}" fontWeight="bold" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%" id="lbMontoPasado" color="0x{catalogoColores.LABEL_AZUL_REY}" fontWeight="normal" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%" id="lbMontoPosPasado" color="0x{catalogoColores.LABEL_MORADO_FUERTE}" fontWeight="normal" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
									</s:VGroup>
								</s:HGroup>
								<s:HGroup width="100%" paddingBottom="15"> <!--paddingBottom="70"-->
									<s:Image source="{this._imgCobros}" />
									<s:VGroup width="100%" paddingLeft="10">
										<s:Label width="100%" text="No. Facturas:" color="0x{catalogoColores.LABEL_BLANCO}" fontWeight="bold" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%"  id="lbNumCobros" color="0x{catalogoColores.LABEL_BLANCO}" fontWeight="bold" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%"  id="lbNumCobrosPasado" color="0x{catalogoColores.LABEL_AZUL_REY}" fontWeight="normal" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%"  id="lbNumCobrosPosPasado" color="0x{catalogoColores.LABEL_MORADO_FUERTE}" fontWeight="normal" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
									</s:VGroup>
								</s:HGroup>
								<s:HGroup width="100%" paddingBottom="15">
									<s:Image source="{this._imgPiezas}" />
									<s:VGroup width="100%" paddingLeft="10">
										<s:Label width="100%" text="Total piezas:" color="0x{catalogoColores.LABEL_BLANCO}" fontWeight="bold" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%" id="lbNumPiezas" color="0x{catalogoColores.LABEL_BLANCO}" fontWeight="bold" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%" id="lbNumPiezasPasado" color="0x{catalogoColores.LABEL_AZUL_REY}" fontWeight="normal" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
										<s:Label width="100%" id="lbNumPiezasPosPasado" color="0x{catalogoColores.LABEL_MORADO_FUERTE}" fontWeight="normal" fontSize="16" fontFamily="Helvetica" fontStyle="normal"/>
									</s:VGroup>
								</s:HGroup>
								<otros:divisionHueca color="#{catalogoColores.LABEL_NEGRO}"/>
								<s:Label text="{this._finicio == null ? '' : this._finicio} - {this._ffin == null ? '' : this._ffin}" width="100%" color="0x{catalogoColores.LABEL_BLANCO}" fontSize="14" paddingTop="15" paddingBottom="25" textAlign="center"/>
								<s:HGroup paddingBottom="30">
									<s:VGroup width="50%">
										<s:Label fontWeight="bold" text="Del" color="0x{catalogoColores.LABEL_BLANCO}"/>
										<s:HGroup verticalAlign="middle">
											<s:Ellipse width="10" height="10" horizontalCenter="0" verticalCenter="0" depth="50">
												<s:fill>
													<s:SolidColor color="0x{catalogoColores.LABEL_AZUL_REY}"/>
												</s:fill>		
											</s:Ellipse>									
											<mx:DateField id="dtpFInicioPasado"  width="100" textAlign="center" fontStyle="normal" change="fechasPasadas_changeHandler(event)" contentBackgroundColor="0x{catalogoColores.LABEL_BLANCO}" color="0x{catalogoColores.LABEL_NEGRO}"/>
										</s:HGroup>
									</s:VGroup>
									<s:Spacer width="100%"/>
									<s:VGroup width="50%">
										<s:Label fontWeight="bold" text="Al" color="0x{catalogoColores.LABEL_BLANCO}"/>
										<mx:DateField id="dtpFFinPasado" width="100" textAlign="center" fontStyle="normal" change="fechasPasadas_changeHandler(event)" contentBackgroundColor="0x{catalogoColores.LABEL_BLANCO}" color="0x{catalogoColores.LABEL_NEGRO}"/>
									</s:VGroup>
								</s:HGroup>
								<s:HGroup paddingBottom="30" >
									<s:VGroup width="50%">
										<s:Label fontWeight="bold" text="Del" color="0x{catalogoColores.LABEL_BLANCO}"/>
										<s:HGroup verticalAlign="middle">
											<s:Ellipse width="10" height="10" horizontalCenter="0" verticalCenter="0" depth="50">
												<s:fill>
													<s:SolidColor color="0x{catalogoColores.LABEL_MORADO_FUERTE}"/>
												</s:fill>		
											</s:Ellipse>
											<mx:DateField id="dtpFInicioPosPasado"  width="100" textAlign="center" fontStyle="normal" change="fechasPasadas_changeHandler(event)" contentBackgroundColor="0x{catalogoColores.LABEL_BLANCO}" color="0x{catalogoColores.LABEL_NEGRO}"/>
										</s:HGroup>
									</s:VGroup>
									<s:Spacer width="100%"/>
									<s:VGroup width="50%">
										<s:Label fontWeight="bold" text="Al" color="0x{catalogoColores.LABEL_BLANCO}"/>
										<mx:DateField id="dtpFFinPosPasado" width="100" textAlign="center" fontStyle="normal" change="fechasPasadas_changeHandler(event)" contentBackgroundColor="0x{catalogoColores.LABEL_BLANCO}" color="0x{catalogoColores.LABEL_NEGRO}"/>
									</s:VGroup>
								</s:HGroup>	
								<pqNet1:botonPqNetLargo id="btnTotales" width="100%" click="encuentraTotalesXPeriodo()" botonRedondo="true" icono="iconoActualizarNormal"/>
							</s:VGroup>
						</s:Scroller>	
					</s:BorderContainer>				
				</s:HGroup>
			</s:VGroup>
			<s:VGroup id="grpSelectedGrafica" height="100%" width="100%" showEffect="{fadeMostrar}" hideEffect="{fadeOcultar}" gap="0" paddingTop="28" paddingLeft="10" paddingRight="20">
				<ETvsFT:EntregasGraficasETvsFT_Completas id="GraficasETvsFT" width="100%" height="100%" />
			</s:VGroup>
		</pq:MobViewStack>
	</comun:espacioB>
</comun:ContenedorComparacionConsultas>