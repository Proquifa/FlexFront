<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				
				autoDrawBackground="false"
				mouseOut="mouseOutHandler()"
				hideEffect="{fxFade}" xmlns:label="skins.skin.label.*"
				>
	<!--width="126" height="129"-->
	
	<!--"
	creationComplete="creaTriangulo()"-->
	
	<fx:Declarations>	
		<s:Fade id="fxFade" duration="200" alphaFrom="1" alphaTo="0"/>
		<s:SolidColor id="s1" color="0x{catalogoColores.LABEL_NEGRO}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.charts.HitData;
			import mx.charts.series.items.LineSeriesItem;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.core.FlexGlobals;
			
			import spark.components.Label;
			import spark.primitives.Ellipse;
			
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosGrid;
			
			private var spr:Sprite = new Sprite();
			private var _color:String;
			
			private var factorScale:int = 1;
			private var osInfo:Array;
			private	var lblTipElipse:Label;
			private var elipse:Ellipse;
			
			private var anchoMax:Number = 0;
			override protected function measure():void
			{
				super.measure();
				
				if(lblTipElipse.visible)
				{
					this.width = Math.max(anchoMax,90) * factorScale;
					this.height = Math.max(anchoMax,90) * factorScale; 
				}
				else
				{
					this.width = Math.max(anchoMax,136) * factorScale; 
					this.height = 129 * factorScale;
				}   
				
			}
			
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				osInfo = Capabilities.os.split(" ");
				if(FlexGlobals.topLevelApplication.applicationDPI == 240)
				{
					factorScale = 2;
				}
				
				elipse = new Ellipse();
				if(osInfo[0] == "Mac")
				{
					with(elipse)
					{
						width = 90;
						height = 90;
						verticalCenter = 0;
						horizontalCenter = 0;
						alpha = 0.6;
						fill = s1;
					}
					this.addElement(elipse);
					
					lblTipElipse = new Label;
					with(lblTipElipse)
					{ 
						horizontalCenter = 0;
						verticalCenter=0;
						styleName= "titulo_Helvetica_10_Blanco";
					} 
				}
				else
				{
					with(elipse)
					{
						width = (90 * factorScale);
						height = (90 * factorScale);
						verticalCenter = 0;
						horizontalCenter = 0;
						alpha = 0.6;
						fill = s1;
					}
					this.addElement(elipse);
					
					lblTipElipse = new Label;
					with(lblTipElipse)
					{ 
						horizontalCenter = 0;
						verticalCenter=0;
						
						if(factorScale == 1)
							styleName= "titulo_Helvetica_10_Blanco";
						else if(factorScale == 2)
							styleName= "titulo_Helvetica_20_Blanco";
					}
				}
				
				this.addElement(lblTipElipse);
			}
			
			override public function set data(value:Object):void
			{
				super.data = value;
				var hd:HitData = value as HitData;
				var item:LineSeriesItem = hd.chartItem as LineSeriesItem;
				var _diferencia:Number = 0;
				var _porcentaje:String = new String();
				
				elipse.visible = elipse.includeInLayout = false;
				lblTipElipse.visible = lblTipElipse.includeInLayout = false;
				
				rectangulo.visible = rectangulo.includeInLayout = false;
				//spriteTriangulo.visible = spriteTriangulo.includeInLayout = false;
				mes.visible = mes.includeInLayout = false;
				actual.visible = actual.includeInLayout = false;
				objetivo.visible = objetivo.includeInLayout = false;
				diferencial.visible = diferencial.includeInLayout = false;
				
				lblTip0.text = '';
				lblTip1.text = '';
				lblTip2.text = '';
				lblTip3.text = '';
				
				if((data.element.id == 'montoActual')||(data.element.id == 'montoObjetivo1')||(data.element.id == 'montoObjetivo2')||(data.element.id == 'montoObjetivo3')||(data.element.id == 'montoObjetivo4')||(data.element.id == 'montoObjetivo5'))
				{
					elipse.visible = elipse.includeInLayout = true;
					
					lblTipElipse.visible = lblTipElipse.includeInLayout = true;
				}else if(data.element.id == 'montoObjetivoFundamental' || data.element.id == 'montoFundamental'){
					elipse.visible = elipse.includeInLayout = true;
					lblTipElipse.visible = lblTipElipse.includeInLayout = true;
					lblTipElipse.text = '⨁ ' + String(value.item.mes).toUpperCase()   + '\n'  
						+"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoFundamental );
				}
				else if(data.element.id == 'montoObjetivo')
				{
					elipse.visible = elipse.includeInLayout = true;
					
					lblTipElipse.visible = lblTipElipse.includeInLayout = true;
					lblTipElipse.text = '⨁ ' + String(value.item.mes).toUpperCase()   + '\n'  +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoObjetivo );
				}
				else if((data.element.id == '_MinComprasTabProducto_PlotSeries1') || (data.element.id == '_MaxComprasTabProducto_PlotSeries1') || (data.element.id == '_MaxCliente_Producto_PlotSeries1'))
				{
					elipse.visible = elipse.includeInLayout = true;
					lblTipElipse.visible = lblTipElipse.includeInLayout = true;
				}
				else if((data.element.id == '_MaxComprasTabProducto_LineSeries1') || (data.element.id == '_MaxCliente_Producto_LineSeries1')){
					elipse.visible = elipse.includeInLayout = true;
					lblTipElipse.visible = lblTipElipse.includeInLayout = true;
				}
				else
				{
					lblTip0.text =  String(value.item.mes).toUpperCase();
					rectangulo.visible = rectangulo.includeInLayout = true;
					//spriteTriangulo.visible = spriteTriangulo.includeInLayout = true;
					mes.visible = mes.includeInLayout = true;
					actual.visible = actual.includeInLayout = true;
					objetivo.visible = objetivo.includeInLayout = true;
					diferencial.visible = diferencial.includeInLayout = true;
				} 
				
				if(value.item.montoUSD_0 > value.item.montoObjetivo)
				{ 
					signo.text = signo2.text = '+';
					signo.setStyle( 'color', '0x' + catalogoColores.LABEL_BLANCO );
					lblTip3.setStyle( 'color', '0x' + catalogoColores.LABEL_BLANCO );
					signo2.setStyle( 'color', '0x' + catalogoColores.LABEL_BLANCO );
					lblTip4.setStyle( 'color', '0x' + catalogoColores.LABEL_BLANCO );
					_diferencia = value.item.montoUSD_0 - value.item.montoObjetivo;
					
					if(value.item.montoObjetivo == 0)
					{
						_porcentaje = '100';
					}
					else
					{
						_porcentaje = UtilsFormatosNumericos.precisionADosDecimales(  ((value.item.montoUSD_0 - value.item.montoObjetivo) / (value.item.montoObjetivo)) * (100)  );	
					}
				}
				else
				{
					signo.text = signo2.text = '-';
					signo.setStyle( 'color', '0x' + catalogoColores.LABEL_ROJO_CLARO );
					lblTip3.setStyle( 'color', '0x' + catalogoColores.LABEL_ROJO_CLARO );
					signo2.setStyle( 'color', '0x' + catalogoColores.LABEL_ROJO_CLARO );
					lblTip4.setStyle( 'color', '0x' + catalogoColores.LABEL_ROJO_CLARO );
					_diferencia = (value.item.montoUSD_0 - value.item.montoObjetivo) * (-1);
					
					if(value.item.montoObjetivo == 0)
					{
						_porcentaje = '100';
					}
					else
					{
						_porcentaje = UtilsFormatosNumericos.precisionADosDecimales(  ((value.item.montoUSD_0 - value.item.montoObjetivo) / (value.item.montoObjetivo)) * (-100)  );	
					}
				}
				
				if( value.element.yField == "montoUSD" )
				{
					lblTip1.text = lblTip2.text = lblTip3.text = lblTip0.text += "$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD );
					if( value.item.hasOwnProperty('totalPeriodo') )
						lblTip1.text = lblTip2.text = lblTip3.text = lblTip0.text += '\nTP\n$ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.totalPeriodo );
				}
				else if( value.element.yField == "montoUSD_0")
				{
					lblTipElipse.text = String(value.item.mes).toUpperCase()   + '\n' +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD_0 );
					lblTip1.text += "$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas(value.item.montoUSD_0 );
					lblTip2.text += "$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas(value.item.montoObjetivo );
					lblTip3.text += "$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas(_diferencia);
					lblTip4.text = '(' +_porcentaje + '%' + ')';
					
					if( (value.item.hasOwnProperty('totalPeriodo')) && (value.item.totalPeriodo > 0) )
						lblTipElipse.text += '\nTP\n$ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.totalPeriodo );
				}
				else if( value.element.yField == "montoUSD_1" )
				{
					lblTipElipse.text = String(value.item.mes).toUpperCase()   + '\n'  +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD_1 );
				}
				else if( value.element.yField == "montoUSD_2" )
				{
					lblTipElipse.text = String(value.item.mes).toUpperCase()   + '\n'  +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD_2 );
				} 
				else if( value.element.yField == "montoUSD_3" )
				{
					lblTipElipse.text = String(value.item.mes).toUpperCase()   + '\n' +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD_3 );
				} 
				else if( value.element.yField == "montoUSD_4" )
				{
					lblTipElipse.text = String(value.item.mes).toUpperCase()   + '\n' +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD_4 );
				}
				else if( value.element.yField == "percentPedido" ){
					lblTipElipse.text = String(value.item.mes).toUpperCase() + '\n' +
						"% " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.percentPedido );
				}
				else if( value.element.yField == "monto" && value.element.xField == "anio"){
					lblTipElipse.text ="      "+ String(hd.item.anio).toUpperCase() + '\n     ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( hd.item.monto )+'% \n' +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas(  hd.item.valor );
				}
				else if( value.element.yField == "montoUSD_P" ){
					var tempString:String;
					if(String(value.item.cliente).length > 10){
						tempString = String(value.item.cliente).substring(0,9);
						tempString += '...';
					}
					else
						tempString = value.item.cliente;
					lblTipElipse.text = tempString+'\n'+ String(value.item.mes).toUpperCase()   + '\n' +"$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD_P );
					/*lblTip5.text = value.item.cliente;
					lblTip6.text = String(value.item.mes).toUpperCase();
					lblTip7.text = "$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.montoUSD_P );*/
				}
				else if( value.element.yField == "media" ){
					lblTipElipse.text = "$ " + UtilsFormatosNumericos.precisionADosDecimalesConComas( value.item.media )
				}
				
			}
			
			override public function move(x:Number, y:Number):void
			{
				super.move(x,y);
			} 
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
					if(lblTipElipse.visible)
					{
						this.move(this.x-(this.unscaledWidth*0.55),y-15);
					}
					else
					{
						this.move(this.x-(this.unscaledWidth*0.55),y-this.unscaledHeight);
						
						graphics.clear();
						
						// Background
						graphics.beginFill(0x000000,0.6);   
						graphics.moveTo((unscaledWidth/2)-5,unscaledHeight);
						graphics.lineTo((unscaledWidth/2),unscaledHeight+10);
						graphics.lineTo((unscaledWidth/2)+5,unscaledHeight);
						graphics.lineTo((unscaledWidth/2)-5,unscaledHeight);
						graphics.endFill();
						graphics.beginFill(0x2e2e2e);
						//graphics.drawRoundRect(0,10,unscaledWidth,unscaledHeight-10,0,0);
						//graphics.endFill(); 
					}
				
			}
			
			protected function removerToolTip():void
			{
				visible = false;
				includeInLayout = false;
			}
			
			private var idTimeOut:uint; 
			protected function mouseOutHandler():void
			{
				clearInterval( idTimeOut );
				idTimeOut = setTimeout( removerToolTip, 4500);
			}
			
			private var arrayLabels:Array = new Array;
		]]>
	</fx:Script>
	<s:Rect id="rectangulo" width="100%" height="100%"  fill="{s1}" alpha=".6" radiusX="10" radiusY="10"/>
	<s:Group id="grpTodo" top="10" bottom="10" right="10" left="10">
		<s:VGroup id="grpContenido" verticalCenter="0" horizontalCenter="0">
			<s:HGroup id="mes" verticalAlign="middle">
				<s:Image width="29" source="{catalogoIconosGrid.getInstance().render_calendario}" id="imgMes"/>
				<label:TituloHelvetica_10_Blanco id="lblTip0"/>
			</s:HGroup>
			<s:HGroup id="actual" verticalAlign="middle">
				<s:Image width="29" source="{catalogoIconosGrid.getInstance().render_dinero}" id="imgDinero"/>
				<label:TituloHelvetica_10_Blanco id="lblTip1" />
			</s:HGroup>
			<s:HGroup id="objetivo" verticalAlign="middle">
				<s:Image width="29" source="{catalogoIconosGrid.getInstance().render_target}" id="imgTarget"/>
				<label:TituloHelvetica_10_Blanco id="lblTip2"/>
			</s:HGroup>
			<s:HGroup id="diferencial" verticalAlign="middle">
				<s:Image width="29" source="{catalogoIconosGrid.getInstance().render_promedio}" id="imgPromedio"/>
				<s:VGroup >
					<s:HGroup width="100%">
						<label:TituloHelvetica_10_Blanco id="signo"/>
						<label:TituloHelvetica_10_Blanco id="lblTip3"/>
					</s:HGroup>
					<s:HGroup width="100%" >
						<label:TituloHelvetica_10_Blanco id="signo2"/>
						<label:TituloHelvetica_10_Blanco id="lblTip4"/>
					</s:HGroup>
				</s:VGroup>  
			</s:HGroup>  
		</s:VGroup>
	</s:Group>  
	
</s:ItemRenderer>