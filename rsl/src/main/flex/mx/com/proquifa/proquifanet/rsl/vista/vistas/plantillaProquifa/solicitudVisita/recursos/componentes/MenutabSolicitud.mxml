<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%"
		 >
	
	<fx:Metadata>
		[Event(name="cambioTabMenu", type="mx.com.proquifa.vista.evento.EventoEVReportarVisita")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.soliciud.EventoSolicitarVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.plantillaProquifa.solicitudVisita.skincomponentesSolicitudVisita.skinBotoneraTabSolicitud;
			import mx.containers.ViewStack;
			
			import spark.components.NavigatorContent;
			
			
			private var _dataProvider:IList;
			private var _size:int =  -1;
			private var _selectedItem:Object;
			private var _selectedIndex:int;
			private var _oldItem:Object;
			private var _newItem:Object
			private var _radius:int;
			
			public function get dataProvider():IList
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:IList):void
			{
				_dataProvider = value;
				size = value.length
				if (value && size > 0 )
					tabView();
			}
			
			public function get size():int
			{
				return _size;
			}
			
			public function set size(value:int):void
			{
				_size = value;
			}
			
			public function tabView():void
			{
				hgTab.removeAllElements();
				for (var i:int = 0; i < dataProvider.length; i++) 
				{
					if (dataProvider.getItemAt(i) is NavigatorContent )
					{
						var item:NavigatorContent = dataProvider.getItemAt(i) as NavigatorContent;
						construirBotonera(item.label, i);
					}
				}
				selectedIndex = dataProvider["selectedIndex"];
			}
			public var cantidadAlerta:int = 0;
			public function set recibirNotificacionAgente(cantidad:int):void{
				cantidadAlerta = cantidad;
				dataProvider = dataProvider;
			}
			
			private function construirBotonera(titulo:String, index:int):void
			{
				var button:skinBotoneraTabSolicitud = new skinBotoneraTabSolicitud();
				button.labelDisplay.text = titulo;
				button.alertaAgente.visible = button.textoAlerta.visible = ((titulo == 'PATENTES') && (cantidadAlerta > 0));
				button.textoAlerta.text = cantidadAlerta.toString();
				button.id = "tab" + index;
				button.first = false;
				button.last = false;
				button.radius = radius;
				button.percentWidth = 20;
				if (index == 0 )
				{
					button.first = true;
				}
				else if (index == (dataProvider.length-1) )
				{
					button.last = true;
				}
				button.addEventListener(MouseEvent.MOUSE_UP, selectedButton, false, 0 , true);
				hgTab.addElement(button);
			}
			
			protected function selectedButton(event:MouseEvent):void
			{
				if ( event.currentTarget || event.currentTarget is skinBotoneraTabSolicitud)
				{
					var item:skinBotoneraTabSolicitud = event.currentTarget as skinBotoneraTabSolicitud;
					selectedIndex = parseInt((item.id as String).substring(3,(item.id as String).length));
					
					var eventItab:EventoSolicitarVisita = new EventoSolicitarVisita(EventoSolicitarVisita.CHANGE_TAB_VIEW);
					eventItab.indexTab = selectedIndex; 
					dispatchEvent(eventItab);
					
					/*var evento:EventoGlosaNet = new EventoGlosaNet(EventoGlosaNet.CHANGE_TAB_VIEW);
					evento.current = selectedIndex;
					evento.year = parseInt(item.labelDisplay.text);
					dispatchEvent(evento);*/
				}
			}
			
			public function get selectedItem():Object
			{
				return _selectedItem;
			}
			
			public function set selectedItem(value:Object):void
			{
				_selectedItem = value;
			}
			
			public function get selectedIndex():int
			{
				return _selectedIndex;
			}
			
			public function set selectedIndex(value:int):void
			{
				_selectedIndex = value;
				(dataProvider as ViewStack).selectedIndex = value;
				if (value < hgTab.numElements )
				{
					oldItem = newItem;
					newItem = hgTab.getElementAt(value);
					if (oldItem)
						oldItem.currentState = "normal"; 
					if (newItem)
						newItem.currentState = "selected";
				}
				invalidateDisplayList();
			}
			
			public function get oldItem():Object
			{
				return _oldItem;
			}
			
			public function set oldItem(value:Object):void
			{
				_oldItem = value;
			}
			
			public function get newItem():Object
			{
				return _newItem;
			}
			
			public function set newItem(value:Object):void
			{
				_newItem = value;
			}
			
			public function get radius():int
			{
				return _radius;
			}
			
			public function set radius(value:int):void
			{
				_radius = value;
			}
			
			
		]]>
	</fx:Script>
	
	<s:HGroup id="hgTab" width="100%" gap="10">
		
	</s:HGroup>  
	
	
</s:Group>
