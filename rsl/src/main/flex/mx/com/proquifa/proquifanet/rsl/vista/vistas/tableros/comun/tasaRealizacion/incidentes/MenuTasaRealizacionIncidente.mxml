<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" width="100%" height="100%"
		  xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="inicia()"
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:otros="skins.otros.*" xmlns:pqNet="skins.botones.pqNet.*">
	<fx:Declarations>
		<s:SolidColor id="sc1" color="0x32CD32"/>
		<mx:SolidColor id="scPorCobrar" color="0xFF0000"/>
		<mx:NumberFormatter id="formatoDecimales" precision="2" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.sampler.getInvocationCount;
			
			import mx.charts.HitData;
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.comun.menu.EventoMenuContinuo;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.comun.EventoTasaRealizacionGeneral;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.admon.objetos.SubProceso;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.incidentes.IncidenteTR;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.tableros.comun.TasaRealizacionCerradosAbiertos;
			import mx.controls.Alert;
			import mx.messaging.ChannelSet;
			import mx.messaging.Consumer;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.events.MessageFaultEvent;
			
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotoneras;
			
			
			
			private var consumidorVerificacion:Consumer = new Consumer();
			private var canalVerificacion:AMFChannel;
			private var canalesVerificacion:ChannelSet;
			
			
			
			private function inicia():void{
				this.consumidorVerificacion.destination = "actualizacionService";
				this.consumidorVerificacion.addEventListener("fault",falloconsumidor);
				this.consumidorVerificacion.addEventListener(MessageEvent.MESSAGE,actualizar);
				this.canalVerificacion = new AMFChannel("my-polling-amf", Destinos.END_POINT_MENSAJERIA);
				this.canalesVerificacion = new ChannelSet();
				this.canalesVerificacion.addChannel(canalVerificacion);
				this.consumidorVerificacion.channelSet = this.canalesVerificacion;
				this.consumidorVerificacion.subscribe();
				llamaTasa();
			}
			private function falloconsumidor(event:MessageFaultEvent):void{
				Alert.show("Se ha producido un error en el Consumidor de verificación","Error");
			}
			
			
			private function actualizar(mensaje:MessageEvent):void{
				if(mensaje.message.headers["Destino"] == "tasaRealizacion"){
					this.llamaTasa();
				}
			}
			/**
			 * Metodo para mandar a llamar al mapa la tasa de Realizacion
			 */ 
			private function llamaTasa():void{
				var evento:EventoTasaRealizacionGeneral= new EventoTasaRealizacionGeneral( EventoTasaRealizacionGeneral.CONSULTA_TASA_INCIDENTES );
				evento.tipoTR = "Incidentes";
				dispatchEvent( evento );
			}
			/**
			 * Funcion privada para calculat el promedio en dias 
			 */ 
			private function calculaPromedio():void{
				var promedio:EventoTasaRealizacionGeneral = new EventoTasaRealizacionGeneral( EventoTasaRealizacionGeneral.CONSULTA_PROMEDIO );
				dispatchEvent( promedio );
			}
			/**
			 * Metodoq uerecibe del mapa la tasaPromedio 
			 */
			public function set recibeTasaPromedio( dato:Number):void{
				if( isNaN(dato) ){
					return;
				}
				this.lblTPRGlobal.text = dato + " días."
			}
			/**
			 * Metodo usado para darle formato a los DATATIPS del la grafica del Pie (en tiempo y fuera de tiempo)
			 */ 
			/* public function dtFunc(hd:HitData):String {
			var porcentaje:Number = new Number;
			porcentaje = (hd.item.Monto * 100 ) /this._totalPendientes;
			return 	"<B>" + hd.item.estado + ":</B> "+ formatoDecimales.format( porcentaje ) + "<B>%</B>" + "<BR>" +
			"<B># de Pendientes:</B> "+ hd.item.Monto + "<BR>";
			} */
			
			private function regresaMenu():void{
				var evento:EventoMenuContinuo = new EventoMenuContinuo(EventoMenuContinuo.REGRESA_MENU);
				dispatchEvent( evento );
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="100%" height="100%" backgroundColor="#eaeaea" borderVisible="false" >
		
		<s:VGroup width="100%" height="100%"  paddingTop="15"  paddingLeft="20" paddingRight="20">
			<s:Group width="100%"  maxHeight="30">
					<s:Label width="100%" height="100%" verticalAlign="middle" text="TABLERO" fontSize="20" fontFamily="Bank Gothic" textAlign="center"/>
					<s:Image id="imgRegresar" source="{catalogoIconosBotoneras.getInstance().flechaIzquierdaupdown}" click="regresaMenu()"
							 mouseOver="{ this.imgRegresar.source = catalogoIconosBotoneras.getInstance().flechaIzquierdaover}"
							 mouseOut="{ this.imgRegresar.source = catalogoIconosBotoneras.getInstance().flechaIzquierdaupdown}"
							 />
			</s:Group>
			<otros:divisionHueca width="100%"/>
				<s:Label width="100%" text="{'TASA DE REALIZACIÓN\nDE INCIDENTES'}" fontSize="20" fontFamily="Bank Gothic" textAlign="center" paddingTop="10" paddingBottom="10"/>
			<otros:divisionHueca width="100%"/>
			<s:Spacer height="15"/>
			<s:HGroup width="100%" >
				<s:Label fontSize="14" fontWeight="bold" text="TPR: " width="50%" textAlign="right"/>
				<s:Label fontSize="14" id="lblTPRGlobal" textAlign="left" text="0 días"/>
			</s:HGroup>
			<pqNet:botonPqNetLargo	width="100%" botonRedondo="true" label="Promedio" click="calculaPromedio()"/>
		</s:VGroup>
	</s:BorderContainer>
</s:VGroup>
