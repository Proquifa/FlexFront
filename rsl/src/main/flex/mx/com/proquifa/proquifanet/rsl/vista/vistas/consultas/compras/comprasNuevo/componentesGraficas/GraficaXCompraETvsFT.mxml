<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componentes ="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*" 
		 xmlns:graficas="skins.skin.graficas.*"
		 width="100%" height="100%" 
		 >
	
	<fx:Declarations>
		<!--creationComplete="piechartpqgris1_creationCompleteHandler(event)"-->
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Compra;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.utils.ObjectUtil;
			
			private var keys:Object;
			private var _graficoTipo:Boolean = false;
			[Bindable] private var _infoVsETFT:ArrayCollection;
			
			public function set obtenerListaCompras($infoGrafica:ArrayCollection):void{
				if( $infoGrafica == null ){ 
					return;	
				}
				
				_infoVsETFT = new ArrayCollection();
				mychart.dataProvider = new ArrayCollection();
				
				/**
				 * Se obtiene un array del ArrayCollection con el fin de aplicar funciones espécificas de los Arrays como el ordenar
				 * */
				var arrayTemp:Array = new Array();
				arrayTemp = ObjectUtil.copy(($infoGrafica) as ArrayCollection).source;
				
				/**
				 * Se filtra de universo de compras, las que tengan estado Cancelada y cacelable
				 * **/
				var arrayComprasSinCanceladasYBles:Array = new Array();
				
				//arrayComprasSinCanceladasYBles = arrayTemp.filter(quitarCanceladasYBles);
				arrayComprasSinCanceladasYBles = ObjectUtil.copy(($infoGrafica) as ArrayCollection).source;
				
				//Liberar Memoria
				arrayTemp = new Array();
				
				arrayComprasSinCanceladasYBles.sortOn("inTime",Array.DESCENDING);
				/**
				 * Se obtiene un array con ET o FT con el fin de saber si vienen los dos o sólo uno 
				 *  sin duplicarse, que será el que controlará el for para las sumas.
				 * */
				keys = new Object();
				var arrayTotalETvsFT:Array = new Array();
				arrayTotalETvsFT = arrayComprasSinCanceladasYBles.filter(quitaDuplicados);
				
				if(arrayTotalETvsFT.length>1)
					arrayTotalETvsFT.sortOn("inTime",Array.DESCENDING);
				
				FormarLosETvsFT(arrayTotalETvsFT,arrayComprasSinCanceladasYBles,_infoVsETFT);
				
				//dataProvider = aplicarFormatoConsultaCompras(_infoVsETFT,"ET vs FT");
				mychart.dataProvider = mychart.aplicarFormatoConsultasGraficas(_infoVsETFT);
				
				//Para liberar Memoria
				arrayComprasSinCanceladasYBles = new Array();
				arrayTotalETvsFT = new Array();
				keys = new Object();
			}
			
			private function FormarLosETvsFT(TotalETvsFT:Array,etvsftInfo:Array,infoETvsFT:ArrayCollection):void
			{
				var totalPartidas:int;
				var totalPiezas:int;
				var totalCompras:int;
				var totalMonto:Number;
				var totalProveedores:int;
				var keysClientesAbiertas:Object= new Object();
				var keysPedidosFT:Object= new Object();
				var keys2:Object = new Object();
				keys = new Object();
				
				var currentPartidaCompra:Compra; 
				var j:int;
				var itemResumenConsulta:ResumenConsulta;
				for(var i:int =0; i<TotalETvsFT.length; i++){
					j=0;
					totalPartidas =0;
					totalPiezas =0;
					totalCompras =0;
					totalMonto =0;
					totalProveedores =0;
					currentPartidaCompra = etvsftInfo[j] as Compra;
					while( (TotalETvsFT[i] as Compra).inTime == currentPartidaCompra.inTime ){
						totalPartidas += currentPartidaCompra.totalPartidas;
						totalPiezas += currentPartidaCompra.totalPiezas_partidas;
						totalMonto += currentPartidaCompra.montoTotalDolares_partidas;
						
						/**
						 * Para el conteo de compras Dando Peso a las cotizaciones que están FT
						 * */
						if( currentPartidaCompra.inTime == "FT"){
							if(!keysPedidosFT.hasOwnProperty(currentPartidaCompra.clave)){
								keysPedidosFT[currentPartidaCompra.clave] = currentPartidaCompra.clave;
								totalCompras++;
							}
							if(!keysClientesAbiertas.hasOwnProperty(currentPartidaCompra.nombreProveedor)){
								keysClientesAbiertas[currentPartidaCompra.nombreProveedor] = currentPartidaCompra.nombreProveedor;
								totalProveedores++;
							}
						}else{
							if(!keys.hasOwnProperty(currentPartidaCompra.clave) ){
								keys[currentPartidaCompra.clave]=currentPartidaCompra.clave;
								totalCompras++;
							}
							if(!keys2.hasOwnProperty(currentPartidaCompra.nombreProveedor) ){
								keys2[currentPartidaCompra.nombreProveedor] = currentPartidaCompra.nombreProveedor;
								totalProveedores++;
							}
						}
						
						etvsftInfo.shift();
						if(etvsftInfo.length >0)
							currentPartidaCompra = etvsftInfo[j] as Compra;
						else
							currentPartidaCompra =new Compra();
					}
					
					itemResumenConsulta = new ResumenConsulta();
					itemResumenConsulta.etiqueta =  (TotalETvsFT[i] as Compra).inTime.toLocaleUpperCase();
					itemResumenConsulta.total = totalMonto;
					itemResumenConsulta.clientes_proveedores = totalProveedores;
					itemResumenConsulta.totalCompras = totalCompras;
					itemResumenConsulta.partidas = totalPartidas;
					itemResumenConsulta.piezasTotal = totalPiezas;
					
					infoETvsFT.addItem(ObjectUtil.copy(itemResumenConsulta));
				}
				/**
				 * Se necesita ordenar inversamente primero la suma de los cerrados y luego abiertos para invertir colores en la gráfica.
				 * */ 
				if(infoETvsFT.length>0){
					if(infoETvsFT.length == 1){
						if((infoETvsFT[0] as ResumenConsulta).etiqueta == "FT"){
							itemResumenConsulta = new ResumenConsulta();
							itemResumenConsulta.etiqueta = "ET";
							itemResumenConsulta.total = 0;
							itemResumenConsulta.piezasTotal =0;
							itemResumenConsulta.totalCompras =0;
							itemResumenConsulta.clientes_proveedores =0;
							itemResumenConsulta.partidas = 0;
							infoETvsFT.addItemAt(itemResumenConsulta,0);
						}
					} else{
						var sortField:SortField = new SortField();
						sortField.name = "etiqueta";
						sortField.numeric = false;
						
						var sort:Sort = new Sort();
						sort.fields = [sortField];
						infoETvsFT.sort = sort;
						infoETvsFT.refresh();
					}
				}
			}
			
			private function quitarCanceladasYBles(item:Compra, id:uint, _array:Array):Boolean
			{
				if(item.estado != 'Cancelada' && item.estado != 'Cancelable'){
					return true;
				}else{
					return false;
				}
			}
			private function quitaDuplicados(item:Compra, id:uint, array:Array):Boolean
			{
				if(keys.hasOwnProperty(item.inTime)){
					return false;
				}else{
					keys[item.inTime] = item.inTime;
					return true;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" verticalAlign="top" horizontalAlign="center" gap="0">
		<s:VGroup width="100%" height="8%" verticalAlign="middle">
			<componentes:tituloChartTablero width="100%" text="RECIBIDO ET vs FT" textAlign="center"/>
		</s:VGroup>
		<s:Spacer width="100%" height="2%"/>
	</s:VGroup>
	
	<s:VGroup width="100%" verticalAlign="top" gap="0" >
		<graficas:PieChartPqGris id="mychart" etiquetasHabilitadas="true" habilitarResumen="true"
								 fondoCircular="true" fondoCircularRadius="7"
								 showDataTips="false"  innerRadius=".5" 
								 lineasHabilitadas="true" 
								 width="100%" height="100%" 
								 dataProvider="{null}"
								 >
			<graficas:series>
				<graficas:pieSeriesVS field="partidas"/> 
			</graficas:series>
		</graficas:PieChartPqGris>
	</s:VGroup>
</s:Group>
