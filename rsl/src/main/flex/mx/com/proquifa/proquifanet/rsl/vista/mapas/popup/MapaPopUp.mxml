<?xml version="1.0" encoding="utf-8"?>
<mate:EventMap xmlns:mx="http://www.adobe.com/2006/mxml"
					xmlns:mate="http://mate.asfusion.com/"
					xmlns:events="com.asfusion.mate.events.*"
					xmlns:debug="com.asfusion.mate.utils.debug.*">
	
	<mx:Script>
		<![CDATA[
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoGenerico;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoParaContactoService;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.alertPqNet.EventoAlertaPqNet;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoReferencias;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.reportes.compras.EventoBusquedaProdAlmacen;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.popup.ModeloPopUp;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.reportes.compras.ModeloProductoAlmacen;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.empresaDelGrupo.vistas.CatalogoEmpresasDelGrupoConceptos;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.empresaDelGrupo.vistas.itemRenderer.CatalogoEmpresasITRConceptos;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.contacto.PopUpInformeContacto;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.gestion.ConsultaGestion;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.incidente.vistaincidente.CargaReferencias;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.incidente.vistaincidente.RegistroIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.comun.contactos.BuscaContacto;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.comun.contactos.DescripcionContacto;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.comun.contactos.ObtenerContacto;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.reportes.compras.ReporteProductoAlmacen;
		]]>
	</mx:Script>

	<mate:Debugger level="{Debugger.ALL}"/>
<!--Obtener Producto ALmacen de filtro para grid-->	
	<mate:EventHandlers type="{EventoBusquedaProdAlmacen.OBTENER_PRODUCTOS_PARA_GRID}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setRegresaFiltro"
							arguments="{event.productosFiltroParaGrid}"/>  
	</mate:EventHandlers>
	<mate:Injectors target="{ReporteProductoAlmacen}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="regresaFiltro"
							   targetKey="obtenerProductoAlmacenFiltrado"/>	
	</mate:Injectors>

<!--seleccion o cambio de viewStack en ProductoAlmacen-->
	<mate:EventHandlers type="{EventoBusquedaProdAlmacen.CAMBIA_VIEW_STACK}">
		
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setCambiaStack"
							arguments="{event.tabla}"/>
		
	</mate:EventHandlers>
	<mate:Injectors	target="{ReporteProductoAlmacen}">
		
		<mate:PropertyInjector source="{ModeloPopUp}" 
							   sourceKey="cambiarStack" 
							   targetKey="obtenerCambioTabla"/>
		
	</mate:Injectors>
	
<!--Obtener Inspector de ProductoAlmacen-->	
	<mate:EventHandlers type="{EventoBusquedaProdAlmacen.OBTENER_INSPECTOR_POR_FD}">
		<mate:RemoteObjectInvoker destination="{Destinos.BUSQUEDA_PRODUCTO_ALMACEN}" 
								  endpoint="{Destinos.END_POINT}"
								  method="obtenerProductoAlmacenPorFolioDespacho"  
								  arguments="{event.folioD}"
								  showBusyCursor="true"> 
			<mate:resultHandlers>
				<mate:MethodInvoker generator="{ModeloPopUp}"
									method="setInspectorFolioDespacho"
									arguments="{resultObject}"/>
			</mate:resultHandlers>
			<mate:faultHandlers>
				<mate:MethodInvoker generator="{ModeloPopUp}"
									method="faultProductoAlmacen"
									arguments="{fault}"/>
			</mate:faultHandlers>
		</mate:RemoteObjectInvoker>
	</mate:EventHandlers>
	<mate:Injectors target="{ReporteProductoAlmacen}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="inspectorFolioDespacho"
							   targetKey="obtenerFolioDespacho"/>	
	</mate:Injectors>	
	
	
	<!--Evento para obtener los Contactos -->
	<mate:EventHandlers type="{EventoParaContactoService.OBTENER_CONTACTO_PROVEEDOR_CLIENTE}">
		<mate:RemoteObjectInvoker   destination="{Destinos.CONTACTO_SERVICE}" 
									endpoint="{Destinos.END_POINT}"
									method="consultarContactosPorString" 
									arguments="{[event.busca,event.tipoBusqueda,event.obtenContacto]}" 
									showBusyCursor="true">
			<mate:resultHandlers>
				<mate:MethodInvoker generator="{ModeloPopUp}"
									method="setBusquedaContactos"
									arguments="{resultObject}"/>
			</mate:resultHandlers>	
		</mate:RemoteObjectInvoker>				
	</mate:EventHandlers>
	<mate:Injectors targets="{ObtenerContacto}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="busquedaContactos"
							   targetKey="recibeBusquedaContactos"/>
	</mate:Injectors>
	
	<!-- Envia datos de descripciÃ³n de contacto seleccionado en lista-->	
	<mate:EventHandlers type="{EventoParaContactoService.OBTEN_DESCRIPCION_CONTACTO}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setClickDescripcionContacto"
							arguments="{event.descripcionContacto}"/>
	</mate:EventHandlers>
	<mate:Injectors target="{DescripcionContacto}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="clickDescripcionContacto"
							   targetKey="obtenDescripcionContacto"/>	
	</mate:Injectors>	
	
	<!-- Envia dato que dermina el tipo de busqueda (0-cliente o 2-proveedor)-->	
	<mate:EventHandlers type="{EventoParaContactoService.OBTENER_TIPO_CONSULTA}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setObtenerTipoConsulta"
							arguments="{event.consulta}"/>
	</mate:EventHandlers>
	<mate:Injectors target="{BuscaContacto}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="obtenerTipoConsulta"
							   targetKey="tipoConsulta"/>	
	</mate:Injectors>

	<!--agrega boton asociar-->	
<!--	<mate:EventHandlers type="{EventoParaContactoService.AGREGA_BOTON}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setTipoBoton"
							arguments="{event.asociar}"/>
	</mate:EventHandlers>
	<mate:Injectors target="{ObtenerContacto}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="tipoBoton"
							   targetKey="agregaTipoBoton"/>	
	</mate:Injectors>-->
	
<!--obtener clase contacto-->	
	<mate:EventHandlers type="{EventoParaContactoService.SELECCIONAR_CONTACTO}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setContactoSeleccionado"
							arguments="{[event.contactoSeleccionado, event.vieneD]}"/>
	</mate:EventHandlers>
	<mate:Injectors targets="{[ConsultaGestion]}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="contactoSeleccionado"
							   targetKey="contactoSeleccionado"/>	
	</mate:Injectors>	
	
	<!-- Reset -->
	<!--<mate:EventHandlers type="{ EventoParaContactoService.RESET_CONTACTO }">	
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="resetContacto"/>
	</mate:EventHandlers>-->	

	<!-- evalua checkBox seleccionado-->	
	<mate:EventHandlers type="{EventoParaContactoService.CHECKBOX_ASOCIAR}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setObtenerCheckBox"
							arguments="{event.checkBox}"/>
	</mate:EventHandlers>
	<mate:Injectors target="{ObtenerContacto}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="obtenerCheckBox"
							   targetKey="checkBoxSeleccionado"/>	
	</mate:Injectors>
	
	<!--busqueda local-->
	<mate:EventHandlers type="{EventoParaContactoService.BUSQUEDA_LOCAL}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setBusquedaLocal"
							arguments="{event.busquedaPorEmpresa}"/>
	</mate:EventHandlers>
	<mate:Injectors targets="{ObtenerContacto}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="returnFiltrado"
							   targetKey="recibeBusquedaContactos"/>
	</mate:Injectors>
	
	<!--Envia referencias-->
	<mate:EventHandlers type="{EventoReferencias.ENVIAR_REFERENCIAS}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setEnviaReferencia"
							arguments="{[event.listaReferencia,event.vieneD]}"/>
	</mate:EventHandlers>
	<mate:Injectors targets="{[RegistroIncidente,ConsultaGestion]}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="obtenListaReferencia"
							   targetKey="recibeListaReferencia"/>
	</mate:Injectors>
	
	<!--carga lista de referencias a popup referencias-->
	<mate:EventHandlers type="{EventoReferencias.CARGA_LISTA_REFERENCIA}">
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="setCargaListaReferencia"
							arguments="{[event.listaReferencia,event.vieneD]}"/>
	</mate:EventHandlers>
	<mate:Injectors targets="{CargaReferencias}">
		<mate:PropertyInjector source="{ModeloPopUp}"
							   sourceKey="cargaListaReferencia"
							   targetKey="recibeReferenciasDReformulacion"/>
	</mate:Injectors>
	
	<!-- //////////////////////////////////////////////////////////////////////////////////////ConsultaContacto para PopUpInformacionContacto /////////////// -->
	
	<mate:EventHandlers type="{ EventoGenerico.MUESTRA_POPUP_INFORMACION_CONTACTOS }">
		<mate:RemoteObjectInvoker destination="{ Destinos.CONTACTO_SERVICE }"
								  endpoint="{ Destinos.END_POINT }"
								  arguments="{[event.idContacto]}"
								  method="busquedaContactoId"
								  showBusyCursor="true">
			<mate:resultHandlers>
				<mate:MethodInvoker generator="{ModeloPopUp}"
									method="setRecibeContacto"
									arguments="{resultObject}"/>
			</mate:resultHandlers>
			
		</mate:RemoteObjectInvoker>
	</mate:EventHandlers>
	<mate:Injectors			   target="{PopUpInformeContacto}">
		<mate:PropertyInjector source="{ ModeloPopUp }" 
							   sourceKey="RecibeContacto"
							   targetKey="recibeContacto"/>
	</mate:Injectors>
	
	
	<!-- Reset -->
	<mate:EventHandlers type="{ EventoReferencias.RESET}">	
		<mate:MethodInvoker generator="{ModeloPopUp}"
							method="reset"/>
	</mate:EventHandlers>
	
</mate:EventMap>
