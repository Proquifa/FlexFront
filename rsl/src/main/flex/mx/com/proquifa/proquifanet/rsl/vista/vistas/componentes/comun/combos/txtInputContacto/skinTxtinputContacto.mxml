<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

--> 
<!--- The default skin class for the Spark ComboBox component. 
The skin for the anchor button for a ComboBox component 
is defined by the ComboBoxButtonSkin class.  The skin for the text input
is defined by the ComboBoxTextInputSkin class.

@see spark.components.ComboBox        
@see spark.skins.spark.ComboBoxButtonSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled=".5"> 
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ComboBox")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		<![CDATA[       
			import spark.events.TextOperationEvent;
			
			import skins.catalogos.catalogoColores;
			private var paddingChanged:Boolean;
			private var cornerRadiusChanged:Boolean;
			private var cornerRadius:Number = 0;            
			[Bindable] public var heightPQ:Number = 23;            
			
			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array = ["bgFill"];
			
			/**
			 * @private
			 */
			override public function get contentItems():Array {return contentFill};
			
			/**
			 *  @private
			 */
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (cornerRadiusChanged)
				{
					cornerRadiusChanged = false;
				}
				
			}
			
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == false)
				{
					if (border)
						border.visible = false;
					if (background)
					{
						background.left = background.top = background.right = background.bottom = 0;
					}
					if (scroller)
						scroller.minViewportInset = 0;
				}
				else
				{
					if (border)
						border.visible = true;
					if (background)
					{
						background.left = background.top = background.right = background.bottom = 1;
					}
					if (scroller)
						scroller.minViewportInset = 1;
				}
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				heightPQ = unscaledHeight;
			}
			
			protected function cambioTexto(event:TextOperationEvent):void
			{
				dispatchEvent(new Event("cambioTexto"));
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
		<s:State name="disabled" />
	</s:states>
	
	<!--- 
	The PopUpAnchor control that opens the drop-down list. 
	
	<p>In a custom skin class that uses transitions, set the 
	<code>itemDestructionPolicy</code> property to <code>none</code>.</p>
	-->
	<s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
				   left="0" right="0" top="0" bottom="0" itemDestructionPolicy="auto"
				   popUpPosition="below" popUpWidthMatchesAnchorWidth="true">
		
		<!--- 
		This includes borders, background colors, scrollers, and filters. 
		@copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<s:Group id="dropDown">
			
			<!-- border -->
			<!--- @private -->
			<s:Rect id="border" left="0" right="0" top="0" bottom="0" 
					
					>
				<s:stroke>
					<!--- @private -->
					<s:SolidColorStroke id="borderStroke" weight="1" color="#98969c"/>
				</s:stroke>
			</s:Rect>
			
			<!-- fill -->
			<!--- Defines the appearance of drop-down list's background fill. -->
			<s:Rect id="background" left="1" right="1" top="1" bottom="1"
					>
				<s:fill>
					<!---  
					@private
					The color of the drop down's background fill.
					The default color is 0xFFFFFF.
					-->
					<s:SolidColor id="bgFill" color="#98969c" />
				</s:fill>
			</s:Rect>
			
			
			<!--- @private -->
			<s:Scroller id="scroller" left="0" top="0" right="0" bottom="0" hasFocusableChildren="false" minViewportInset="1">
				<!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
				
				<s:DataGroup  id="dataGroup"
							  itemRenderer="skins.skin.combobox.componentes.itemRendererDataGroup"
							  rollOverColor="#7A7A7A">
					<s:layout>
						<s:VerticalLayout gap="0" horizontalAlign="contentJustify" requestedMinRowCount="1" requestedMaxRowCount="6"/>
					</s:layout>
				</s:DataGroup> 
			</s:Scroller>
		</s:Group>
	</s:PopUpAnchor>
	
	<!---  The default skin is ComboBoxButtonSkin. 
	@copy spark.components.supportClasses.DropDownListBase#openButton
	@see spark.skins.spark.ComboBoxButtonSkin -->
	<!--<s:BorderContainer width="100%" height="{heightPQ}" borderColor="0xcccccc" borderWeight="0" borderVisible="false">
		<s:Rect width="100%" height="100%">
			<s:stroke>
				<s:SolidColorStroke color="#98969c" weight="1"/>
			</s:stroke>
		</s:Rect>
		
	</s:BorderContainer>-->
	
	<s:Button  id="openButton" width="13" right="2" top="0" bottom="0" focusEnabled="false" visible="false" includeInLayout="false"
			   skinClass="skins.skin.combobox.componentes.skinButtonCombobox" tabEnabled="false" />  
	<!--- @copy spark.components.ComboBox#textInput -->
	
	<s:TextInput  borderVisible="false"  fontStyle="normal" fontWeight="bold"  id="textInput" left="0" right="0" top="0" bottom="0o"
				  enabled.disabled="false" height="{heightPQ}" maxHeight="30" change="cambioTexto(event)"
				  skinClass="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.txtInputContacto.skinTextInputBordeGris"
				  color="0x{ catalogoColores.LABEL_NEGRO }" contentBackgroundAlpha="0.0"/> 
	
</s:SparkSkin>

