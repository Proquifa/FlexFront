<?xml version="1.0" encoding="utf-8"?>
<mx:AdvancedDataGrid borderVisible="false" verticalGridLineColor="#000000" xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 horizontalGridLines="true" verticalGridLines="false" 
					 xmlns:mx="library://ns.adobe.com/flex/mx" 
					 horizontalSeparatorSkin="skins.skin.datagrid.pqNet.componentes.lineaHorizontal"  
					 verticalAlign="middle" 
					 headerStyleName="headerGrid2" 
					 styleName="miDataGrid" 
					 creationComplete="completeHandler(event)" 
					 headerHeight="50" 
					 resize="resizeHandler()" 
					 horizontalScrollPolicy="off">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.miDataGrid{
			rollOverColor: #e6e6e6;  /*  #bfdbfc;   */
			selectionColor: #e9e9e9; /* #2b6db9; */ 
			/* rollOverColor: #efefef;
			selectionColor: #eaeaea; */
			textSelectedColor: #000000;/* #FFFFFF; */
			alternatingItemColors: #FFFFFF,#FFFFFF;
			fontFamily: Helvetica;
			fontSize: 12;
			fontWeight:normal;
			fontStyle:normal;
			textAlign:center;
			headerBackgroundSkin:ClassReference("skins.skin.datagrid.pqNet.componentes.headerGridPqNet");
			headerSeparatorSkin:ClassReference("skins.skin.datagrid.pqNet.componentes.headerGridPqNet");
		}
		
		.headerGrid2
		{
			color: #000000;
			fontFamily: Helvetica;
			fontWeight:bold;
			fontStyle:normal;
			fontSize: 14;
		}
	</fx:Style>
	<fx:Declarations>
		<!--<mx:ArrayCollection id="arrColl" collectionChange="arrColl_collectionChange(event);" />-->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import skins.skin.datagrid.pqNet.componentes.headerAdvancedRendererCatorce;
			import skins.skin.datagrid.pqNet.componentes.principioDeFilaAdvancedRenderer;
			
			import spark.components.supportClasses.ItemRenderer;
			
		
			/**
			 * el total de tus porcentajes debe ser menor de 100
			 */
			[Bindable]	public var porcentajesColumnasPq:Array = new Array();
			
			protected function completeHandler(event:FlexEvent):void
			{
				if( (columns[0] as AdvancedDataGridColumn).itemRenderer == null ) (columns[0] as AdvancedDataGridColumn).itemRenderer = new ClassFactory( principioDeFilaAdvancedRenderer ); 
				for(var b:int=0; b < columns.length; b++){
					if(  (columns[b] as AdvancedDataGridColumn).headerRenderer == null ) (columns[b] as AdvancedDataGridColumn).headerRenderer = new ClassFactory( headerAdvancedRendererCatorce);
				}	
				//stage.addEventListener( Event.RESIZE, resizeStageHandler);
			}
			
			private function resizeHandler( event:Event = null ):void{
				ajustarGrid();
				if( dataProvider is ArrayCollection )
					dataProvider.refresh();
			}
			 
			protected function ajustarGrid( $width:Number = -1 ):void{
				if( columns.length != porcentajesColumnasPq.length ){
						trace( 'La propiedad porcentajesColumnasPq de este grid no coincide con el numero de campos.');
				}else{
						horizontalScrollPolicy = "on";
						//trace('----------------------------- $width: ' + $width.toString() );
						var kWidth:Number = $width == -1 ? width: $width;
						
						var sobrantePorcentaje:Number = 0;
						for( var m:int = 0; m < porcentajesColumnasPq.length; m++ ){
							sobrantePorcentaje += porcentajesColumnasPq[m];
						}
						sobrantePorcentaje = 100 - sobrantePorcentaje;
						sobrantePorcentaje = sobrantePorcentaje/ porcentajesColumnasPq.length;
						for(var g:int = 0; g  < columns.length; g++){
								var currentCol:AdvancedDataGridColumn = columns[g] as AdvancedDataGridColumn;
								currentCol.visible = int(porcentajesColumnasPq[g]) == 0 ? false:true;
								if( currentCol.visible ){
									var lastWidth:Number = currentCol.width;
									var nWidth:Number = (kWidth * (int(porcentajesColumnasPq[g] + sobrantePorcentaje )/100  ) );
									//trace( ' INDEX[' + g.toString() + '] ' + int(porcentajesColumnasPq[g]).toString() + ' lastWidth: ' + lastWidth.toString() + ' kWidth: ' + kWidth.toString() + ' nWidth: ' + nWidth.toString() );
									var diferencia:Number = lastWidth - nWidth;
									if( diferencia < 0 )
										diferencia = diferencia * -1;
									if( diferencia > 3 )
										currentCol.width = nWidth;
										//resizeColumn( columns[g], nWidth );
										//trace( '### newWidth aplicado' );
								}
						}
						//validateNow();
						horizontalScrollPolicy = "off";
				}
			}
			
			public static function resizeColumn(col:AdvancedDataGridColumn, size:int):void
			{
					var owner:* = col.mx_internal::owner;
					col.mx_internal::owner = null;
					col.width = size;
					col.mx_internal::owner = owner;
			}
			
			/* override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList( unscaledWidth, unscaledHeight);
				ajustarGrid( unscaledWidth );
			} */
		]]>
	</fx:Script>
</mx:AdvancedDataGrid>
