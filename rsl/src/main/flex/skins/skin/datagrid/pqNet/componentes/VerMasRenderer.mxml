<?xml version="1.0" encoding="utf-8"?>
<s:MXDataGridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" width="100%"
						  xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="completeHandler(event)" resize="resizeHandler(event)"
						  xmlns:linkButton="skins.skin.linkButton.*"
						  fontSize="12" minHeight="70" height="100%" autoDrawBackground="false" focusEnabled="true" ><!--resize="crecer(event)"     focusEnabled="true"-->
	<fx:Declarations>
		<s:Resize id="fxResizeAbrir"  duration="300" effectEnd="resetFx()" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.controls.dataGridClasses.DataGridListData;
			import mx.controls.listClasses.ListBaseContentHolder;
			import mx.controls.listClasses.ListItemRenderer;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import skins.catalogos.catalogoColores;
			import skins.skin.datagrid.pqNet.componentes.PrincipioDeFilaRenderer;
			import skins.skin.datagrid.pqNet.dataGridPqNet;
			
			import spark.components.DataGrid;
			import spark.components.Group;
			import spark.components.RichText;
			import spark.components.supportClasses.Skin;
			import spark.events.TextOperationEvent;
			
			private var _ocultaTextoCuandoNoTieneElFocoEstaFila:Boolean;
			
			//esta variable debe ser usada si se usa en una lista y no eun grid para lo que esta desarrollada
			[Bindable]
			public var etiqueta:String = '';
			
			[Bindable]
			public var textAlingDercha:Boolean = false;
			
			[Bindable]
			public var colorGris:Boolean = false;
		
			protected function resizeHandler(event:ResizeEvent):void
			{
				if( dataGridListData != null ){
					compruebaLongitud( dataGridListData.label );
					etiqueta = dataGridListData.label;
				}else if( etiqueta != null ){
					compruebaLongitud( etiqueta );
				}
			}
			protected function completeHandler(event:FlexEvent):void
			{
				if(dataGridListData != null ){
					compruebaLongitud( dataGridListData.label );
					etiqueta = dataGridListData.label;
				}else if( etiqueta != null ){
					compruebaLongitud( etiqueta );
				}
			}
			
			override public function set data(value:Object):void{
				super.data = value;

				if( data.numFila > 0  && this.btnVista.label == "Ver menos"){
					this._ocultaTextoCuandoNoTieneElFocoEstaFila = true;
				}
				if(this._ocultaTextoCuandoNoTieneElFocoEstaFila == true ){
					if( (this.parent != null) && (this.parent is ListBaseContentHolder) ){
						if(((this.parent as ListBaseContentHolder).parent as dataGridPqNet).indexOld != data.numFila - 1){
							this.btnVista.label = "Ver más...";
							ocultar();	
						}	
					}else{
						this.btnVista.label = "Ver más...";
						ocultar();
					}
				}
				if(dataGridListData != null ){
					compruebaLongitud( dataGridListData.label );
					etiqueta = dataGridListData.label;
				}else if( etiqueta != null ){
					compruebaLongitud( etiqueta );
				}
			}
			/* private function resetRenderer():void{
				this.btnVista.label = "Ver más...";
				this.txtContenido.heightInLines=1;
				this.txtContenido.height = 
					int(this.txtContenido.getStyle("fontSize")) 
					+ int(this.txtContenido.getStyle("paddingTop")) 
					+ int(this.txtContenido.getStyle("paddingBotton"));
				this.txtContenido.verticalScrollPosition = 0;
				this.txtContenido.horizontalCenter = 0;
			} */
			private function resetFx():void{
				this.fxResizeAbrir.target = null;
				this._ocultaTextoCuandoNoTieneElFocoEstaFila = false;
			}
			protected function cambioAltura(event:Event):void
			{
				if(this.btnVista.label == "Ver más..."){
					this.btnVista.label = "Ver menos";
					mostrar();
					if( (this.parent != null) && (this.parent is ListBaseContentHolder) ){
						((this.parent as ListBaseContentHolder).parent as dataGridPqNet).indexOld = ((this.parent as ListBaseContentHolder).parent as dataGridPqNet).selectedIndex;
					}
				}else if(this.btnVista.label == "Ver menos"){
					this.btnVista.label = "Ver más...";
					ocultar();
				}
			}
			private function ocultar():void{
				 fxResizeAbrir.stop();
				this.txtContenido.selectable = false;
				this.txtContenido.heightInLines=1;
				this.txtContenido.verticalScrollPosition = 0;
				this.txtContenido.mouseEnabled = false;
				this.fxResizeAbrir.target = this.txtContenido;
				this.fxResizeAbrir.heightTo = 
					int(this.txtContenido.getStyle("fontSize")) 
					+ int(this.txtContenido.getStyle("paddingTop")) 
					+ int(this.txtContenido.getStyle("paddingBotton"));
				fxResizeAbrir.play(); 
			}
			private function mostrar():void{
				fxResizeAbrir.stop();
				this.txtContenido.selectable = true;
				this.txtContenido.mouseEnabled = true;
				this.fxResizeAbrir.target = this.txtContenido;			
				this.fxResizeAbrir.heightTo = 10 
					+ this.txtContenido.contentHeight 
					+ int(this.txtContenido.getStyle("paddingTop")) 
					+ int(this.txtContenido.getStyle("paddingBotton")) 
					//+ btnVista.height 
					+ this.grpTodo.gap;
				this.fxResizeAbrir.play();
			}
			protected function compruebaLongitud( $parrafo:String ):void{
				var tamanioLetra:int = this.txtContenido.getStyle("fontSize");
				var longitudDeCaracteresQSoportaElRenderer:int = this.width / (tamanioLetra/2);//+tamañoLetra/8);
				if(colorGris){
					this.txtContenido.setStyle("color", '0x'+catalogoColores.LABEL_GRIS);
				}
				if( $parrafo.length < longitudDeCaracteresQSoportaElRenderer){
					this.btnVista.visible = false;
					this.btnVista.includeInLayout = false;
					//this.btnVista.height = 0;
					if( !textAlingDercha ){
						this.txtContenido.setStyle("textAlign", "center");
					}else{
						this.txtContenido.setStyle("textAlign", "left");
					}
					this.txtContenido.setStyle("verticalAlign", "top");
					this.txtContenido.setStyle("paddingTop", 0);
					this.txtContenido.setStyle("paddingBottom", 0);
				}else{
					this.btnVista.visible = true;
					this.btnVista.includeInLayout = true;
					//this.btnVista.height = 21;
					this.txtContenido.setStyle("textAlign", "left");
					this.txtContenido.setStyle("verticalAlign", "middle");
					this.txtContenido.setStyle("paddingTop", 3);
					this.txtContenido.setStyle("paddingBottom", 3);
				}
			}  
		]]> 
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	<s:VGroup id="grpTodo" height="100%"  verticalAlign="middle" width="100%">
		<s:RichEditableText id="txtContenido" width="{this.width}" height="15" heightInLines="3" verticalAlign="middle" 
										textAlign="left" editable="false" selectable="false" justificationRule="space" justificationStyle="prioritizeLeastAdjustment"
										color="0x{catalogoColores.GRID_LBL_NORMAL}"  color.hovered="0x{catalogoColores.GRID_LBL_HOVERED}" color.selected="0x{catalogoColores.GRID_LBL_SELECTED}"   
										text="{etiqueta}" />
		<s:HGroup width="100%" horizontalAlign="right" paddingTop="-10">
					<linkButton:LinkButtonPQNet id="btnVista" fontSize="10"
												   color="0x{catalogoColores.LABEL_VERDE_AZUL}"
												   label="Ver más..." click="cambioAltura(event)"/><!--color.selected="#FFFFFF" -->
		</s:HGroup>
	</s:VGroup>
</s:MXDataGridItemRenderer>