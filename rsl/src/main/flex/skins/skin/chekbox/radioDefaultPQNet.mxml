<?xml version="1.0" encoding="utf-8"?>
<s:CheckBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx"
			skinClass="skins.skin.chekbox.radioSkinDefaultPQNet"
			creationComplete="checkbox2_creationCompleteHandler(event)"
			currentStateChanging="checkbox2_currentStateChangingHandler(event)"
			>

	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.utils.StringUtil;
			
			import skins.catalogos.catalogoIconosGrid;
			
			private var _nombreEstilofuente:String = "default14";
			private var _tipoCheck:String = "circuloRadio";
			
			
			public function configurarRadio($tipo:String,$nombreDelEstilo:String):void
			{
				if($nombreDelEstilo != null && StringUtil.trim($nombreDelEstilo).length >0)
				{
					
					if($nombreDelEstilo == "default14")
					{
						radioSkinDefaultPQNet(skin).fuenteNormal = "checkRadio_titulo_14";
						radioSkinDefaultPQNet(skin).fuenteSeleccionado = "checkRadio_titulo_14";
						radioSkinDefaultPQNet(skin).fuenteDisable = "checkRadio_titulo_14_gris";
						
					}
					else if($nombreDelEstilo == "default22")
					{
						radioSkinDefaultPQNet(skin).fuenteNormal = "checkRadio_titulo_22";
						radioSkinDefaultPQNet(skin).fuenteSeleccionado = "checkRadio_titulo_22";
						radioSkinDefaultPQNet(skin).fuenteDisable = "checkRadio_titulo_22_gris";
					}
					else if($nombreDelEstilo == "default12")
					{
						radioSkinDefaultPQNet(skin).fuenteNormal = "checkRadio_titulo_12";
						radioSkinDefaultPQNet(skin).fuenteSeleccionado = "checkRadio_titulo_12";
						radioSkinDefaultPQNet(skin).fuenteDisable = "checkRadio_titulo_12_gris";
					}
					
					_nombreEstilofuente = $nombreDelEstilo;
				}
				
				if($tipo != null && StringUtil.trim($tipo).length >0)
				{
					_tipoCheck = $tipo;
					
					if( $tipo == 'circuloRadio' )
					{
						radioSkinDefaultPQNet(skin).checkRadioNormal = catalogoIconosGrid.getInstance().radioNormal_Azul;
						radioSkinDefaultPQNet(skin).checkRadioSeleccionado = catalogoIconosGrid.getInstance().radioSeleccionado_azul;
						radioSkinDefaultPQNet(skin).checkRadioDisable = catalogoIconosGrid.getInstance().radioNormal_Azul;
						radioSkinDefaultPQNet(skin).checkRadioDisableSeleccionado = catalogoIconosGrid.getInstance().radioSeleccionado_azul;
					}
					else if($tipo == 'cuadradoRadio')
					{
						radioSkinDefaultPQNet(skin).checkRadioNormal = catalogoIconosGrid.getInstance().checkCuadrado;
						radioSkinDefaultPQNet(skin).checkRadioSeleccionado = catalogoIconosGrid.getInstance().checkCuadradoSelected;
						radioSkinDefaultPQNet(skin).checkRadioDisable = catalogoIconosGrid.getInstance().checkCuadrado;
						radioSkinDefaultPQNet(skin).checkRadioDisableSeleccionado = catalogoIconosGrid.getInstance().checkCuadradoSelected;
					}
					else if($tipo == 'circuloSombra')
					{
						radioSkinDefaultPQNet(skin).checkRadioNormal = catalogoIconosGrid.getInstance().checkSombra_empty;
						radioSkinDefaultPQNet(skin).checkRadioSeleccionado = catalogoIconosGrid.getInstance().checkSombra_selected;
						radioSkinDefaultPQNet(skin).checkRadioDisable = catalogoIconosGrid.getInstance().checkSombra_empty;
						radioSkinDefaultPQNet(skin).checkRadioDisableSeleccionado = catalogoIconosGrid.getInstance().checkSombra_selected;
					}
					else
					{
						trace("ADVERTENCIA ::::::::: Este check no se ha habilitado para el tipo: " + $tipo);
					}
				}
			}
			
			[Inspectable(category="Common",defaultValue="default14",enumeration="default22,default14,default12")]
			public function get nombreStiloFuente():String
			{
				return _nombreEstilofuente;
			}
			
			public function set nombreStiloFuente(value:String):void
			{
				_nombreEstilofuente = value;
			}
			
			[Inspectable(category="Common",defaultValue="circuloRadio",enumeration="circuloRadio,cuadradoRadio,circuloSombra")]
			public function get tipoCheck():String
			{
				return _tipoCheck;
			}
			
			public function set tipoCheck(value:String):void
			{
				_tipoCheck = value;
			}
			
			protected function checkbox2_creationCompleteHandler(event:FlexEvent):void
			{
				configurarRadio(_tipoCheck,_nombreEstilofuente);
			}
			
			protected function checkbox2_currentStateChangingHandler(event:StateChangeEvent):void
			{
				trace("TODO Auto-generated method stub");
			}
			
		]]>
	</fx:Script>
	
	
	
</s:CheckBox>
