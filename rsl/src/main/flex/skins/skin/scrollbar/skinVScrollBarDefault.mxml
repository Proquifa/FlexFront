<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark VScrollBar component. The thumb and track skins are defined by the
VScrollBarThumbSkin and VScrollBarTrackSkin classes, respectively.  

@see spark.components.VScrollBar
@see spark.skins.spark.VScrollBarThumbSkin
@see spark.skins.spark.VScrollBarTrackSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" width="5" minHeight="35" 
			 alpha.disabled="0.5"
			 creationComplete="inicializa(event)"
			 mouseOver="stateOver(event)" mouseDown="stateOver(event)" mouseOut="stateOutOver(event)"
			 >
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.VScrollBar")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		
		
		import mx.events.FlexEvent;
		import mx.events.ScrollEvent;
		import mx.events.StateChangeEvent;
		
		/* Define the skin elements that should not be colorized. 
		For scroll bar, the skin itself is colorized but the individual parts are not. */
		static private const exclusions:Array = ["track", "thumb", "decrementButton", "incrementButton"];
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			//useChromeColor = true;
			super.initializationComplete();
		}
		
		private var timeId:uint;
		[Bindable] public static var scrollVisible:Boolean = true; 
		protected function stateOver(event:MouseEvent):void
		{
			clearTimeout(timeId);
			showHide(true);
			currentState = "over";
		}
		
		protected function stateOutOver(event:MouseEvent):void
		{
			clearTimeout(timeId);
			timeId = setTimeout(stateNormal, 2000);
		}
		
		private function stateNormal():void
		{
			currentState = "normal";
			showHide();
			
		}
		
		private function showHide(opacidad:Boolean = false, wheel:Boolean = false):void
		{
			thumb.alpha = Number(opacidad);
			
			scrollVisible = opacidad;
			
			if ( wheel )
			{
				currentState = "normal";
			}
		}
		
		protected function inicializa(event:FlexEvent):void
		{
			dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));
			stateOverWheel();
		}
		
		public function stateOverWheel():void
		{
			clearTimeout(timeId);
			timeId = setTimeout(showHide, 2000, false, true);
			showHide(true);
		}
		
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
		<s:State name="inactive" />
		<s:State name="over" />
	</s:states>
	
	<!---  The default skin class is VScrollBarTrackSkin.  
	@copy spark.components.supportClasses.TrackBase#track 
	@see spark.skins.spark.VScrollBarTrackSkin -->
	<s:Button id="track" top="3" bottom="3"  height="25" minHeight="25"
			  focusEnabled="false" tabEnabled="false" visible="false"
			  skinClass="skins.skin.scrollbar.botones.track" x="0" 
			  />
	<!--top="16" bottom="15"-->
	<!--- The default skin class is VScrollBarThumbSkin.
	@copy spark.components.supportClasses.TrackBase#thumb 
	@see spark.skins.spark.VScrollBarThumbSkin -->
	<s:Button id="thumb" 
			  focusEnabled="false" visible.inactive="false" tabEnabled="false"
			  skinClass="skins.skin.scrollbar.botones.thumb" x="1" minHeight="25" 
			  />
	
	<!--- The default skin class is ScrollBarUpButtonSkin. 
	@copy spark.components.supportClasses.ScrollBarBase#decrementButton 
	@see spark.skins.spark.ScrollBarUpButtonSkin -->
	<s:Button id="decrementButton" top="0" enabled.inactive="false"
			  focusEnabled="false" tabEnabled="false"
			  skinClass="skins.skin.scrollbar.botones.btnUpScroll"  visible="false"/>
	
	<!---  The default skin class is ScrollBarDownButtonSkin. 
	@copy spark.components.supportClasses.ScrollBarBase#incrementButton
	@see spark.skins.spark.ScrollBarDownButtonSkin -->
	<s:Button id="incrementButton" bottom="0" enabled.inactive="false"
			  focusEnabled="false" tabEnabled="false"
			  skinClass="skins.skin.scrollbar.botones.btnDownScroll"  visible="false"/>
	
</s:SparkSkin>
