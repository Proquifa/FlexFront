<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:label="skins.skin.label.*" 
		 minHeight="50" focusColor="0x257d92"
		 >
		 <!--creationComplete="hslider1_valueCommitHandler(event)"-->
	
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			[Bindable]
			public var minimum:Number;
			
			[Bindable]
			public var maximum:Number;
			
			[Bindable]
			public var liveDragging:Boolean;
			
			[Bindable]
			public var value:Number = 0;
			
			[Bindable]
			public var stepSize:Number;
			
			[Bindable]
			public var snapInterval:Number;
			
			[Bindable]
			public var showDataTip:Boolean;
			
			private var _showLabels:Boolean;
			private var _labelIzquierdo:String;
			private var _labelDerecho:String;
			private var _labelMedio:String;
			
/* 			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				value = hSlider.value;
			} */
			
			protected function hslider1_valueCommitHandler(event:FlexEvent):void
			{
				//value = hSlider.value;
			}
			
			public function setValue($value:Number):void
			{
				hSlider.value = $value;
				value = $value;
			}
			
			override protected function updateDisplayList($unscaledWidth:Number, $unscaledHeight:Number):void
			{
				super.updateDisplayList($unscaledWidth,$unscaledHeight);
				
				
				if(_showLabels){
					
					var leftDivisiones:Number = (hSlider.skin as hSliderSkinPQNetDefault).fixSpace;
					
					var margen:Number;
					if(lblDerecho.getLayoutBoundsWidth() > lblIzquierdo.getLayoutBoundsWidth())
					{
						margen = (lblDerecho.getLayoutBoundsWidth()/2);
					}
					else
					{
						margen = (lblIzquierdo.getLayoutBoundsWidth()/2);
					}
					
					var widthSlider:Number = ($unscaledWidth - (margen * 2));
					hSlider.setLayoutBoundsSize(widthSlider,hSlider.getLayoutBoundsHeight());
					hSlider.setLayoutBoundsPosition(margen,0);
					
					var ypos:Number = $unscaledHeight - lblIzquierdo.getLayoutBoundsHeight();
					var xpos:Number = (margen + leftDivisiones ) - ((lblIzquierdo.getLayoutBoundsWidth()/2));
					lblIzquierdo.setLayoutBoundsPosition(xpos,ypos);
					
					ypos = $unscaledHeight - lblDerecho.getLayoutBoundsHeight();
					xpos = ( margen + (hSlider.getLayoutBoundsWidth() - leftDivisiones))-(lblDerecho.getLayoutBoundsWidth()/2);
					lblDerecho.setLayoutBoundsPosition(xpos,ypos);
					
					ypos = $unscaledHeight - lblMedio.getLayoutBoundsHeight();
					//xpos = (margen*2 + (hSlider.getLayoutBoundsWidth() + leftDivisiones*2)) -(lblDerecho.getLayoutBoundsWidth()/2);
					xpos = ($unscaledWidth/2) - (lblMedio.getLayoutBoundsWidth()/2);
					lblMedio.setLayoutBoundsPosition(xpos,ypos);
				}
				
			}
			
			/*=========================================================================================== SETTTERS ========================================================================================================  */
			[Bindable]
			public function get showLabels():Boolean
			{
				return _showLabels;
			}
			
			public function set showLabels(value:Boolean):void
			{
				_showLabels = value;
			}
			
			[Bindable]
			public function get labelIzquierdo():String
			{
				return _labelIzquierdo;
			}
			
			public function set labelIzquierdo(value:String):void
			{
				_labelIzquierdo = value;
			}
			
			[Bindable]
			public function get labelDerecho():String
			{
				return _labelDerecho;
			}
			
			public function set labelDerecho(value:String):void
			{
				_labelDerecho = value;
			}
			
			[Bindable]
			public function get labelMedio():String
			{
				return _labelMedio;
			}
			
			public function set labelMedio(value:String):void
			{
				_labelMedio = value;
			}

			
			protected function hSlider_changeHandler(event:Event):void
			{
				
				value = event.target.value;
				
				/* var numSnap:int = (event.target.value / stepSize);
				
				switch(numSnap)
				{
					case 0:
					{
						if(event.target.value > 5000)
							setValue(10000);
						else
							setValue(0);
						break;
					}
					case 1:
					{
						if(event.target.value > 15000)
							setValue(20000);
						else
							setValue(10000);
						break;
					}
					case 2:
					{
						if(event.target.value > 25000)
							setValue(30000);
						else
							setValue(20000);
						break;
					}
					case 3:
					{
						if(event.target.value > 35000)
							setValue(40000);
						else
							setValue(30000);
						break;
					}
					case 4:
					{
						if(event.target.value > 45000)
							setValue(50000);
						else
							setValue(40000);
						break;
					}
					case 5:
					{
						if(event.target.value > 55000)
							setValue(60000);
						else
							setValue(50000);
						break;
					}
					case 6:
					{
						if(event.target.value > 65000)
							setValue(70000);
						else
							setValue(60000);
						break;
					}
					case 7:
					{
						if(event.target.value > 75000)
							setValue(80000);
						else
							setValue(70000);
						break;
					}
					case 8:
					{
						if(event.target.value > 85000)
							setValue(90000);
						else
							setValue(80000);
						break;
					}
					case 9:
					{
						if(event.target.value > 95000)
							setValue(100000);
						else
							setValue(90000);
						break;
					}
				} */
			}
			
		]]>
	</fx:Script>
	
	<s:HSlider id="hSlider" skinClass="skins.skin.hslider.hSliderSkinPQNetDefault" minimum="{minimum}" maximum="{maximum}" snapInterval="{snapInterval}" showDataTip="{showDataTip}"
			   liveDragging="{liveDragging}" change="hSlider_changeHandler(event)"/>
	
	<label:TextoGrisCasiNegro_10 bottom="0" id="lblIzquierdo" visible="{showLabels}" text="{labelIzquierdo}"/>
	<label:TextoGrisCasiNegro_10 bottom="0" id="lblMedio" visible="{showLabels}" text="{labelMedio}"/>
	<label:TextoGrisCasiNegro_10 bottom="0" right="0" id="lblDerecho" visible="{showLabels}" text="{labelDerecho}"/>
</s:Group>