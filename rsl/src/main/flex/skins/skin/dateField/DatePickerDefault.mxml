<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:date="skins.date.*"
		 minWidth="100" height="20" xmlns:dateField="skins.skin.dateField.*" 
		 >
	
	<fx:Declarations>
		<!--<mx:DateFormatter id="dateFormatter" formatString="MMM DD, YYYY" />-->
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="dd/MMM/yyyy" locale="{LocaleID.DEFAULT}" />
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="seleccionaDate", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.LocaleID;
			
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.comun.EventoComun;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			
			import spark.components.PopUpPosition;
			
			import skins.catalogos.catalogoIconosGrid;
			import skins.skin.textinput.skinTextInputDateField;
			
			private var _selectedDate:Date = new Date();
			
			private var _colorBorde:uint = 0x1A596E;	
			private var _bordeRedondo:Boolean = true;
			private var _estiloTexto:String = "titulo_10pt_SansPro_Semi_Azul";
			private var _grosorBorde:int = 2;
			private var _heightLabelDatePicker:int = 20;
			private var _widthLabelDatePicker:int = 100;
			private var _fontWeightTextInput:String = "normal";
			private var _verticalAlignTextInput:String = "middle";
			private var _fontSize:Number;
			
			private var _diasFinMes:String = "-1";
			private var _diaSemanaNoDisponibles:String = "";
			private var _deshabilitarRecursive:String = "";
			private var _asueto:Array;
			
			[Bindable]private var _image:Object = catalogoIconosGrid.getInstance().render_calendario as Object; 
			
			//Para DateChoose
			private var _unAnio:Boolean = false;
			private var _currentYear:int = new Date().getFullYear();
			
			public function setTamanioIcono(width:Number,height:Number):void
			{
				imgCalendar.width = width;
				imgCalendar.height = height;
			}
			
			public function get source():Object
			{
				return _image;
			}

			public function set source(value:Object):void
			{
				_image = value;
			}

			public function get fontSizeText():Number
			{
				return _fontSize;
			}

			public function set fontSizeText(value:Number):void
			{
				_fontSize = value;
				txtDateField.setStyle("fontSize",_fontSize);
			}

			[Bindable]
			public function get verticalAlignTextInput():String
			{
				return _verticalAlignTextInput;
			}

			public function set verticalAlignTextInput(value:String):void
			{
				_verticalAlignTextInput = value;
			}

			[Bindable]
			public function get fontWeightTextInput():String
			{
				return _fontWeightTextInput;
			}

			public function set fontWeightTextInput(value:String):void
			{
				_fontWeightTextInput = value;
			}

			[Bindable]
			public function get widthLabelDatePicker():int
			{
				return _widthLabelDatePicker;
			}
			
			public function set widthLabelDatePicker(value:int):void
			{
				_widthLabelDatePicker = value;
			}
			
			[Bindable]
			public function get heightLabelDatePicker():int
			{
				return _heightLabelDatePicker;
			}
			
			public function set heightLabelDatePicker(value:int):void
			{
				_heightLabelDatePicker = value;
			}
			
			[Bindable]
			public function get grosorBorde():int
			{
				return _grosorBorde;
			}
			
			public function set grosorBorde(value:int):void
			{
				_grosorBorde = value;
				if(txtDateField.skin){
					(txtDateField.skin as skinTextInputDateField).grosorBorde = value;
				}
			}
			
			[Bindable]
			public function get estiloTexto():String
			{
				return _estiloTexto;
			}
			
			public function set estiloTexto(value:String):void
			{
				_estiloTexto = value;
			}
			
			[Bindable]
			public function get bordeRedondo():Boolean
			{
				return _bordeRedondo;
			}
			
			public function set bordeRedondo(value:Boolean):void
			{
				_bordeRedondo = value;
				if(txtDateField.skin){
					(txtDateField.skin as skinTextInputDateField).bordeRedondo = value;
				}
			}
			
			[Bindable]
			public function get colorBorde():uint
			{
				return _colorBorde;
			}
			
			public function set colorBorde(value:uint):void
			{
				_colorBorde = value;
				if(txtDateField.skin){
					(txtDateField.skin as skinTextInputDateField).colorBorde = value;
				}
			}
			
			protected function dtchooser_changeHandler(event:CalendarLayoutChangeEvent):void
			{
				currentState = "normal";
				selectedDate = event.newDate;
			}
			
			protected function textinput1_clickHandler(event:MouseEvent):void
			{
				if (currentState != "open" )
				{
					currentState = "open";
				}
				else
				{
					currentState = "normal";
				}
				
			}
			
			private function image1_clickHandler(evt:MouseEvent):void
			{
				currentState = "open";
			}
			
			[Bindable]
			public function get selectedDate():Date
			{
				return _selectedDate;
			}
			
			public function set selectedDate(value:Date):void
			{
				if(value != null){
					_selectedDate = value;
					var formatoFecha:String = dateFormatter.format(value);
					txtDateField.text = formatoFecha.charAt(0).toUpperCase();
					txtDateField.text += formatoFecha.substring(1, formatoFecha.length);
				}
				else{
					_selectedDate = new Date();	
					txtDateField.text = "";
				}
			}
			
			
			protected function txtDateField_mouseOverHandler(event:MouseEvent):void
			{
				
			}
			
			protected function datachoosedefault1_changeDateHandler(event:EventoComun):void
			{
				selectedDate = event.newDate;
				chooseClose(null);
				dispatchEvent(new Event("seleccionaDate"));
			}
			
			protected function chooseClose(event:EventoComun):void
			{
				currentState = "normal";
			}
			
			[Bindable]
			public function get unAnio():Boolean
			{
				return _unAnio;
			}
			
			public function set unAnio(value:Boolean):void
			{
				_unAnio = value;
			}
			
			[Bindable]
			public function get currentYear():int
			{
				return _currentYear;
			}
			
			public function set currentYear(value:int):void
			{
				_currentYear = value;
			}
			
			
			
			
			protected function txtDateField_creationCompleteHandler(event:FlexEvent):void
			{
				if(txtDateField.skin){
					(txtDateField.skin as skinTextInputDateField).colorBorde = colorBorde;
					(txtDateField.skin as skinTextInputDateField).bordeRedondo = bordeRedondo;
					(txtDateField.skin as skinTextInputDateField).estiloTexto = estiloTexto;
					(txtDateField.skin as skinTextInputDateField).grosorBorde = grosorBorde;
				}
				
			}
			
			[Bindable]
			public function get diaSemanaNoDisponibles():String
			{
				return _diaSemanaNoDisponibles;
			}
			
			public function set diaSemanaNoDisponibles(value:String):void
			{
				_diaSemanaNoDisponibles = value;
			}
			

			[Bindable]
			public function get diasFinMes():String
			{
				return _diasFinMes;
			}

			public function set diasFinMes(value:String):void
			{
				_diasFinMes = value;
			}
			
			
			[Bindable]
			[Inspectable(category="Other", enumeration="PrimerDiaHabil")]
			public function get deshabilitarRecursive():String
			{
				return _deshabilitarRecursive;
			}
			
			public function set deshabilitarRecursive(value:String):void
			{
				_deshabilitarRecursive = value;
			}

			[Bindable]
			public function get asueto():Array
			{
				return _asueto;
			}

			public function set asueto(value:Array):void
			{
				_asueto = value;
			}


		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
	</s:states>
	
	<s:HGroup verticalAlign="{verticalAlignTextInput}">
		<s:TextInput id="txtDateField" skinClass="skins.skin.textinput.skinTextInputDateField" minHeight="20" minWidth="90"  height="{heightLabelDatePicker}" width="{widthLabelDatePicker}" fontWeight="{fontWeightTextInput}"
					 textAlign="center" click="textinput1_clickHandler(event)" editable="false" creationComplete="txtDateField_creationCompleteHandler(event)" mouseOver="txtDateField_mouseOverHandler(event)" />
		<s:HGroup paddingTop="-2">
			<mx:Image id="imgCalendar" source="{_image}" click="image1_clickHandler(event)" />
		</s:HGroup>
	</s:HGroup>
	<s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
				   itemDestructionPolicy="auto" right="{imgCalendar.width}"
				   popUpPosition="{PopUpPosition.RIGHT}" popUpWidthMatchesAnchorWidth="false"
				   >
		
		<!--	<s:VGroup width="100%" height="100%" >-->
		<!--<mx:DateChooser id="dtchooser" change="dtchooser_changeHandler(event)" width="172" selectedDate="{selectedDate}" />-->
		<dateField:DateChooseDefault id="dataChoose" width="154" currentDay="{selectedDate.date}"  diasFinMes="{diasFinMes}"
									 diaSemanaNoDisponibles="{diaSemanaNoDisponibles}" asueto="{asueto}"
									 deshabilitarRecursive="{deshabilitarRecursive}" 
									 changeDate="datachoosedefault1_changeDateHandler(event)" unAnio="{unAnio}" currentYear="{currentYear}" 
									 closeDate="chooseClose(event)" selectedDate="{selectedDate}" />
		<!--</s:VGroup>  -->
	</s:PopUpAnchor>
	
</s:Group>