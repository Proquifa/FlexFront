<?xml version="1.0" encoding="utf-8"?>
<s:ButtonBarButton xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" width="100%" enabled="true"  
				   xmlns:mx="library://ns.adobe.com/flex/mx" skinClass="skins.botonesToggle.skinToggleColores" 
				   updateComplete="buttonbarbutton1_updateCompleteHandler(event)"
				   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import skins.catalogos.catalogoIconosBotoneras;
			import skins.skin.buttonbar.skinButtonBarColores;
			
			[Bindable]	public var colorBase:String="";
			[Bindable]	public var gradientePqnet:Boolean = false;
			
			private var rojoInicio:uint = new uint();
			private var verdeInicio:uint=new uint();
			private var azulInicio:uint =new uint();
			
			private var rojoFinal:String;
			private var verdeFinal:String;
			private var azulFinal:String;
			
			
			private var colorOver:String ="";
			private var colorGradiente:String ="";
			
			private var _mostrarMonto:Boolean = false;			
			
			override public function set data(value:Object):void
			{
				if( value == null )
					return;
				
				if( value is String )
				{
						skinToggleColores(skin).labelDisplay.text = value.toString();
				}
				else
				{
						skinToggleColores(skin).labelDisplay.visible = skinToggleColores(skin).labelDisplay.includeInLayout = false;
						if( value.hasOwnProperty("valor") )
						{
							skinToggleColores(skin).labelDisplay.text = (value.valor as String).toString();
							skinToggleColores(skin).labelDisplay.visible = skinToggleColores(skin).labelDisplay.includeInLayout = true;
						}
						if( value.hasOwnProperty("label") )
						{
							value.label == null ? skinToggleColores(skin).labelDisplay.text = '' : skinToggleColores(skin).labelDisplay.text = (value.label as String).toString();
							skinToggleColores(skin).labelDisplay.visible = skinToggleColores(skin).labelDisplay.includeInLayout = true;
							//skinToggleColores(skin).labelDisplay.text = "";
						}
						if( value.hasOwnProperty("fontSize") )
						{
							skinToggleColores(skin).fontSize = value.fontSize;
							
						}
						if( value.bandera != null )
							skinToggleColores(skin).bandera = value.bandera;
						
						if( value.icono == null ){
								skinToggleColores(skin).height = skinToggleColores(skin).height != 51 ? skinToggleColores(skin).height: 35;
								skinToggleColores(skin).icono.visible = skinToggleColores(skin).icono.includeInLayout = false;
						}	else	{	
										skinToggleColores(skin).icono.source = catalogoIconosBotoneras.getInstance()[value.icono]
										toolTip = "";
						}
						
						if( value.monto != null ){
							skinToggleColores(skin).montoFormato = value.monto;
						}
						
						if( value.hasOwnProperty("habilitado") ){
							skinToggleColores(skin).habilitado = value.habilitado;
							this.enabled =  value.habilitado;
						}else{
							this.enabled =  true;
							skinToggleColores(skin).habilitado = true;
						}
						
						if( value.hasOwnProperty("colorTexto") ){
							skinToggleColores(skin).colorTextoNormal = uint( value.colorTexto );
						}
						
						if( value.hasOwnProperty("colorBase") ){
							if( value.colorBase != ""){
								if(  value.colorBase.indexOf('#') != -1){
									value.colorBase =  value.colorBase.substr(1,6);
								}else if(  value.colorBase.indexOf('0x') != -1){
									value.colorBase =  value.colorBase.substr(2,6);
								}
								rojoInicio = convertStringToUint(  value.colorBase.substr(0,2) );
								verdeInicio = convertStringToUint(  value.colorBase.substr(2,2) );
								azulInicio = convertStringToUint(  value.colorBase.substr(4,2) );
								/**
								 * separo el color en 3 pares, luego convierto a decimal cada par y les resto 30, 
								 * si el resultado es menor de 0 los igualo a cero para evitar numeros negativos
								 */
								var quita:int = 30;
								rojoFinal = ((rojoInicio - quita < 0 ? rojoInicio = 0 : rojoInicio -= quita)).toString(16);
								rojoFinal.length < 2 ? rojoFinal = "0" + rojoFinal : rojoFinal;
								verdeFinal = ((verdeInicio - quita < 0 ? verdeInicio = 0 : verdeInicio -= quita)).toString(16);
								verdeFinal.length < 2 ? verdeFinal = "0" + verdeFinal : verdeFinal;
								azulFinal = ((azulInicio - quita < 0 ? azulInicio = 0 : azulInicio -= quita)).toString(16);
								azulFinal.length < 2 ? azulFinal = "0" + azulFinal : azulFinal;
								colorOver = "0x" + rojoFinal + verdeFinal + azulFinal;
								
								if( value.hasOwnProperty("gradientePqnet") ){
									 ///			GRADIENTE
									 skinToggleColores(skin).colorNormal = uint("0x" +  value.colorBase);
									 skinToggleColores(skin).colorOver = uint("0x" +  value.colorBase);  
									 skinToggleColores(skin).colorDown = uint("0x" +  value.colorBase);  
									 skinToggleColores(skin).colorDownAndSelected = uint("0x" +  value.colorBase);
									 skinToggleColores(skin).colorOverAndSelect = uint("0x" +  value.colorBase);  
									 skinToggleColores(skin).colorUpAndSelected = uint("0x" +  value.colorBase);
									 skinToggleColores(skin).colorNormal2 = uint("0x" +  value.colorBase);
									 skinToggleColores(skin).colorDown2 = 0xE7E7E7;
									 skinToggleColores(skin).colorOver2 = 0xE7E7E7; 
									 skinToggleColores(skin).colorDownAndSelected2 =  0xE7E7E7;
									 skinToggleColores(skin).colorOverAndSelect2 = 0xE7E7E7;
									 skinToggleColores(skin).colorUpAndSelected2 = 0xE7E7E7;
								}else{
									skinToggleColores(skin).colorOverAndSelect = uint("0x" +  value.colorBase);  
									skinToggleColores(skin).colorUpAndSelected = uint("0x" +  value.colorBase);
									skinToggleColores(skin).colorOverAndSelect2 = uint("0x" +  value.colorBase);
									skinToggleColores(skin).colorUpAndSelected2 = uint("0x" +  value.colorBase); 
									skinToggleColores(skin).colorDownAndSelected = uint("0x" +  value.colorBase);
									skinToggleColores(skin).colorDownAndSelected2 =  uint("0x" +  value.colorBase);
									skinToggleColores(skin).colorDown2 = uint("0x" +  value.colorBase);
									skinToggleColores(skin).colorDown = uint("0x" +  value.colorBase); 
								}  
								
							}
						}
						
						
				}
			}
						
			public function convertStringToUint(value:String):uint  
			{  
				var colorString:String = "0x" + value;  
				var colorUint:uint = uint(colorString);
				return colorUint;
			} 
			
			[Bindable]
			public function get mostrarMonto():Boolean
			{
				return _mostrarMonto;
			}
			
			public function set mostrarMonto(value:Boolean):void
			{
				_mostrarMonto = value;
				if(skin != null){
					skinToggleColores(skin).mostrarMonto = value;
				}
			}
			
			protected function buttonbarbutton1_updateCompleteHandler(event:FlexEvent):void
			{
				if(this.document != null && this.document is skinButtonBarColores){
					this.mostrarMonto = (this.document as skinButtonBarColores).mostrarMonto;
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				
			}			
		]]>
	</fx:Script>
</s:ButtonBarButton>
