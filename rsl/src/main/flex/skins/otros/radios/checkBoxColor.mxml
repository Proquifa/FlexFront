<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 click="group_clickHandler(event)"
		 initialize="ini(event)"
		 verticalCenter="0"
		 horizontalCenter="0"
		 buttonMode="true"
		 >
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import skins.catalogos.catalogoIconosBotones;
			private var _colorBorde:uint = 0x000000;
			[Bindable]private var _selected:Boolean;
			[Bindable] public var _tipoCheck:String;
			[Bindable]private var _tipoRadio:String;
			[Bindable]private var imgChecked:Object;
			[Bindable]private var imgUnchecked:Object;
			[Bindable]private var _label:String;
			private var _fontWeight:String = "bold";
			
			[Bindable]
			public function get fontWeight():String
			{
				return _fontWeight;
			}
			/**
			 * normal,bold
			 */
			public function set fontWeight(value:String):void
			{
				_fontWeight = value;
			}
			
			[Bindable]
			public function get label():String
			{
				return _label;
			}
			
			public function set label(value:String):void
			{
				_label = value;
			}
			
			[Bindable]
			public function get tipoRadio():String
			{
				return _tipoRadio;
			}
			
			public function set tipoRadio(value:String):void
			{
				_tipoRadio = value;
				vistaCuadro.visible = vistaCuadro.includeInLayout = false;
				vistaRadio.visible = vistaRadio.includeInLayout = true;
				switch(value)
				{
					case "rojo":
					{
						imgChecked = catalogoIconosBotones.getInstance().radio_activo_rojo;	
						imgUnchecked = catalogoIconosBotones.getInstance().radio_inactivo_rojo;	
						break;
					}
					case "naranjado":
					{
						imgChecked = catalogoIconosBotones.getInstance().radio_activo_naranja;	
						imgUnchecked = catalogoIconosBotones.getInstance().radio_inactivo_naranja;	
						break;
					}
						
					default:
					{
						break;
					}
				}
			}
			
			[Bindable]
			public function get selected():Boolean
			{
				return _selected;
			}
			
			public function set selected(value:Boolean):void
			{
				_selected = value;
				if(value)
					currentState = "checked";
				else
					currentState = "unchecked";
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				/*image.x = (unscaledWidth/2)-(image.width/2);
				image.y = (unscaledHeight/2)-(image.height/2);*/
			}
			
			[Bindable]
			public function get colorBorde():uint
			{
				return _colorBorde;
			}
			
			public function set colorBorde(value:uint):void
			{
				_colorBorde = value;
			}
			
			public function set tipoCheck(value:String):void
			{
				_tipoCheck = value;
				vistaCuadro.visible = vistaCuadro.includeInLayout = true;
				vistaRadio.visible = vistaRadio.includeInLayout = false;
				switch(value)
				{
					case "disponible":
					{
						colorBorde = 0x0a6430;
						image.source = catalogoIconosBotones.getInstance().check_verde;
						break;
					}
					case "cambio":
					{
						colorBorde = 0xdb4e12;
						image.source = catalogoIconosBotones.getInstance().check_naranja;
						break;
					}
					case "back":
					{
						colorBorde = 0x481069;
						image.source = catalogoIconosBotones.getInstance().check_morado;
						break;
					}
					case "cancelar":
					{
						image.source = catalogoIconosBotones.getInstance().check_rojo;
						colorBorde = 0x990012;
						break;
					}
					default:
					{
						break;
					}
				}
			}
			public function get tipoCheck():String
			{
				return _tipoCheck;
			}
			
			protected function group_clickHandler(event:MouseEvent):void
			{
				if(currentState == "checked"){
					currentState = "unchecked";
					selected = false;
				}
				else{
					currentState = "checked";
					selected = true;
				}
			}
			
			protected function ini(event:FlexEvent):void
			{
				currentState = "checked";
				currentState = "unchecked";
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="checked"/>
		<s:State name="unchecked"/>
	</s:states>
	
	<s:Group width="100%" height="100%" id="vistaCuadro" visible="false" includeInLayout="false">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		
		<s:Rect width="100%" height="100%">
			<s:stroke>
				<s:SolidColorStroke color="{colorBorde}" weight="1"/>
			</s:stroke>
		</s:Rect>
		<mx:Image id="image" source="{catalogoIconosBotones.getInstance().check_verde}" visible.checked="true" visible.unchecked="false"
				  verticalAlign="middle" horizontalAlign="center" smoothBitmapContent="true" 
				  />
	</s:Group>  
	<s:HGroup width="100%" height="100%" verticalAlign="middle" id="vistaRadio" visible="false" includeInLayout="false">
		<mx:Image id="imageRadio" source.checked="{imgChecked}" source.unchecked="{imgUnchecked}"/>
		<s:Label styleName="TituloNovecento_18" fontSize="12" height="100%" fontWeight="{fontWeight}"
				 text="{_label}" maxDisplayedLines="2" verticalAlign="middle"/>
	</s:HGroup>  
	
</s:Group>
