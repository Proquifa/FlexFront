<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:sorteo="skins.otros.sorteo.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%"
		 >
	<fx:Declarations> 
		<s:Fade id="showLabelBuena" alphaFrom="1" alphaTo="0" duration="200" repeatCount="20" effectEnd="showLabel_effectEndHandler(event)" target="{lblBuenaSuerte}" startDelay="500"/>
		
		<s:Fade id="showLabelConteo" alphaFrom="0" alphaTo="1" duration="1000" repeatCount="11" target="{lblConteo}" effectRepeat="showLabelConteo_effectRepeatHandler(event)" effectEnd="showLabelConteo_effectEndHandler(event)"/>
		<s:Fade id="hideLabelConteo" alphaFrom="1" alphaTo="0" duration="1000" target="{lblConteo}" effectEnd="hideLabelConteo_effectEndHandler(event)"/>
		
		<s:Fade id="hideLabelBuena" alphaFrom="1" alphaTo="0" duration="1500" startDelay="10000" target="{lblBuenaSuerte}" effectEnd="hideLabelBuena_effectEndHandler(event)"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.events.EffectEvent;
			
			import spark.effects.Rotate3D;
			import spark.effects.animation.RepeatBehavior;
			private var count:int = 11;
			private var countParar:int = 11;
			private var animatingTargets:Object = new Object();
			private var idBotonCicle:String;
			private var isAnimation:Boolean;
			private var idBoton:Array = new Array;
			private var arrayLetras:Array = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","W","X","Y","Z"];
			
			private var label0:String;
			private var label1:String;
			private var label2:String;
			
			
			
			public function stopSorteo($label0:String,$label1:String,$label2:String):void
			{
				label0 = $label0;
				label1 = $label1;
				label2 = $label2;
			}
			
			private function terminar():void
			{
				setTimeout(pararUltimasTresCifras,1250);
			}
			
			[Bindable]
			private var validaPrimera:Boolean = false;
			public function startSorteo():void
			{
				/* if( !validaPrimera ){ */
				
				/* showLabelBuena.play(); */
				
				hideLabelBuena.play();
				validaPrimera = true;
				animacionDesencadenada();
				isAnimation = true;
				
				/*} else{
				stopSorteo();
				} */
				
			}
			
			protected function animacionDesencadenada():void
			{
				if(count >-1	){
					animateStartTombola(count);
					count--;
					setTimeout(animacionDesencadenada,40);
				}
			}
			
			private function animateStartTombola(botonNumero:int):void
			{
				var efecto:Rotate3D = new Rotate3D;                
				
				efecto.angleXFrom=0;
				efecto.angleXTo=180;
				efecto.autoCenterTransform=true;
				efecto.duration=150;
				efecto.suspendBackgroundProcessing = true;
				efecto.repeatBehavior = RepeatBehavior.LOOP;
				efecto.repeatCount = 0;
				efecto.addEventListener(EffectEvent.EFFECT_UPDATE,rotator_effectUpdateHandler); 
				
				switch(botonNumero)
				{
					case 0:
					{efecto.target = button0; animatingTargets["button0"] = efecto; 
						setTimeout(pararDesencadenado,500);
						break;
					}
					case 1:{efecto.target = button1; animatingTargets["button1"] = efecto; break;}
					case 2:{efecto.target = button2; animatingTargets["button2"] = efecto; break;}
					case 3:{efecto.target = button3; animatingTargets["button3"] = efecto; break;}
					case 4:{efecto.target = button4; animatingTargets["button4"] = efecto; break;}
					case 5:{efecto.target = button5; animatingTargets["button5"] = efecto; break;}
					case 6:{efecto.target = button6; animatingTargets["button6"] = efecto; break;}
					case 7:{efecto.target = button7; animatingTargets["button7"] = efecto; break;}
					case 8:{efecto.target = button8; animatingTargets["button8"] = efecto; break;}
					case 9:{efecto.target = button9; animatingTargets["button9"] = efecto; break;}
					case 10:{efecto.target = button10; animatingTargets["button10"] = efecto; break;}
					case 11:{
						efecto.target = button11; animatingTargets["button11"] = efecto; 
						break;
					}
				}
				efecto.play();
			}
			
			
			private function pararDesencadenado():void
			{
				if(animatingTargets != null && animatingTargets.hasOwnProperty("button"+countParar) && countParar > 2)/*&& countParar > 2  */
				{
					(animatingTargets["button"+countParar] as Rotate3D).stop();
					(this["button"+countParar] as Group).postLayoutTransformOffsets.x = 0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.y = 0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.z = 0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.scaleX = 1.0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.scaleY = 1.0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.scaleZ = 1.0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.rotationX = 0;
					(this["button"+countParar] as Group).postLayoutTransformOffsets.rotationY = 0;
					(this["button"+countParar] as Group).postLayoutTransformOffsets.rotationZ = 0;
					
					switch(countParar)
					{
						/* case 0:{(this["button"+countParar] as CuadroSorteo).label = label0;break;}
						case 1:{(this["button"+countParar] as CuadroSorteo).label = label1;break;}
						case 2:{(this["button"+countParar] as CuadroSorteo).label = label2;break;} */
						
						case 3:{(this["button"+countParar] as CuadroSorteo).label = "M";break;}
						case 4:{(this["button"+countParar] as CuadroSorteo).label = "X";break;}
						case 5:{(this["button"+countParar] as CuadroSorteo).label = "L";break;}
						case 6:{(this["button"+countParar] as CuadroSorteo).label = "U";break;}
						case 7:{(this["button"+countParar] as CuadroSorteo).label = "F";break;}
						case 8:{(this["button"+countParar] as CuadroSorteo).label = "2";break;}
						case 9:{(this["button"+countParar] as CuadroSorteo).label = "0";break;}
						case 10:{(this["button"+countParar] as CuadroSorteo).label = "1";break;}
						case 11:{(this["button"+countParar] as CuadroSorteo).label = "4";break;}
							
					}
					
					countParar--;
					setTimeout(pararDesencadenado,2000);
				}
			}
			
			
			private function pararUltimasTresCifras():void
			{
				if(animatingTargets != null && animatingTargets.hasOwnProperty("button"+countParar))/*&& countParar > 2  */
				{
					(animatingTargets["button"+countParar] as Rotate3D).stop();
					(this["button"+countParar] as Group).postLayoutTransformOffsets.x = 0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.y = 0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.z = 0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.scaleX = 1.0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.scaleY = 1.0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.scaleZ = 1.0; 
					(this["button"+countParar] as Group).postLayoutTransformOffsets.rotationX = 0;
					(this["button"+countParar] as Group).postLayoutTransformOffsets.rotationY = 0;
					(this["button"+countParar] as Group).postLayoutTransformOffsets.rotationZ = 0;
					
					/* targetImg.postLayoutTransformOffsets.x = 0;
					targetImg.postLayoutTransformOffsets.scaleX = 1.0;
					targetImg.postLayoutTransformOffsets.scaleY = 1.0; */
					
					
					switch(countParar)
					{
						case 0:{(this["button"+countParar] as CuadroSorteo).label = label0;break;}
						case 1:{(this["button"+countParar] as CuadroSorteo).label = label1;break;}
						case 2:{(this["button"+countParar] as CuadroSorteo).label = label2;break;}
					}
					
					countParar--;
					setTimeout(pararUltimasTresCifras,1250);
				}
			}
			
			private function randomNumero(tipo:String):String
			{
				var randomNum:Number;
				
				if(tipo == "letras"){
					randomNum = Math.round( Math.random() * 25 );
					return arrayLetras[randomNum];
				}else{
					randomNum = Math.round( Math.random() * 9 );
					return randomNum.toString();
				}
			}
			
			protected function rotator_effectUpdateHandler(event:EffectEvent):void
			{
				switch(event.effectInstance.target.id)
				{
					case "button0":{button0.label = randomNumero("numeros");break;}
					case "button1":{button1.label = randomNumero("numeros");break;}
					case "button2":{button2.label = randomNumero("numeros");break;}
					case "button3":{button3.label = randomNumero("letras");break;}
					case "button4":{button4.label = randomNumero("letras");break;}
					case "button5":{button5.label = randomNumero("letras");break;}
					case "button6":{button6.label = randomNumero("letras");break;}
					case "button7":{button7.label = randomNumero("letras");break;}
					case "button8":{button8.label = randomNumero("numeros");break;}
					case "button9":{button9.label = randomNumero("numeros");break;}
					case "button10":{button10.label = randomNumero("numeros");break;}
					case "button11":{button11.label = randomNumero("numeros");break;}
						/* case "button12":{button12.label = randomNumero("numeros");break;} */
				}
			}	
			
			protected function showLabel_effectEndHandler(event:EffectEvent):void
			{
				lblBuenaSuerte.visible = true;
				lblBuenaSuerte.alpha = 1;
				hideLabelBuena.play();
			}
			
			protected function hideLabelBuena_effectEndHandler(event:EffectEvent):void
			{
				lblBuenaSuerte.visible = false;
				showLabelConteo.play();
			}
			
			private var conteo:int = 9;
			protected function showLabelConteo_effectRepeatHandler(event:EffectEvent):void
			{
				lblConteo.text = conteo.toString();
				conteo --;
				if(conteo < 2)
				{
					terminar();
				}
			}
			
			protected function hideLabelConteo_effectEndHandler(event:EffectEvent):void
			{
				lblFelicidades.visible = true;
			}
			
			protected function showLabelConteo_effectEndHandler(event:EffectEvent):void
			{
				hideLabelConteo.play();
			}
			
			protected function image1_clickHandler(event:MouseEvent):void
			{				
				conteo = 9;
				count= 11;
				countParar= 11;
				lblBuenaSuerte.alpha = 1;
				lblBuenaSuerte.visible = true;
				lblConteo.text = "10";
				
				lblFelicidades.visible = false;
				lblConteo.visible = false;
				
				button0.label = "0";
				button1.label = "0"; 
				button2.label = "0";
				button3.label = "A";
				button4.label = "A";
				button5.label = "A";
				button6.label = "A";
				button7.label = "A";
				button8.label = "A";
				button9.label = "0";
				button10.label = "0";
				button11.label = "0";
				dispatchEvent(new Event("solicitudCerrarPOPUPEventoProquifa",true,false));
			}
			
		]]>
	</fx:Script>
	
	
	<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" id="groupRandom" gap="30" paddingLeft="60" paddingRight="60">
		<s:Group>
			<s:Label id="lblBuenaSuerte" text="¡BUENA SUERTE!" color="0xED513D" fontSize="80" fontFamily="MyriadProProqui" fontWeight="bold"/>
			
			<s:Label id="lblConteo" text="10" color="0xED513D" fontSize="130" fontFamily="MyriadProProqui" fontWeight="bold" visible="false" alpha="0" verticalCenter="0" horizontalCenter="0"/>
			
			<s:Label id="lblFelicidades" text="¡FELICIDADES!" color="0xED513D" fontSize="100" fontFamily="MyriadProProqui" fontWeight="bold" visible="false" paddingTop="20"/>
			
		</s:Group>
		<s:HGroup horizontalAlign="center" gap="30">
			<sorteo:CuadroSorteo id="button0" label="0"/>
			<sorteo:CuadroSorteo id="button1" label="0"/>
			<sorteo:CuadroSorteo id="button2" label="0"/>
			
			<s:Spacer width="10" height="135"/>
			
			<sorteo:CuadroSorteo id="button3" label="A"/>
			<sorteo:CuadroSorteo id="button4" label="A"/>
			<sorteo:CuadroSorteo id="button5" label="A" includeInLayout="false" visible="false"/>
			<sorteo:CuadroSorteo id="button6" label="A"/>
			<sorteo:CuadroSorteo id="button7" label="A"/>
			<sorteo:CuadroSorteo id="button8" label="A"/>
			
			<sorteo:CuadroSorteo id="button9" label="0"/>
			<sorteo:CuadroSorteo id="button10" label="0"/>
			<sorteo:CuadroSorteo id="button11" label="0"/>
		</s:HGroup>
	</s:VGroup>
	<s:Image right="10" top="10" smooth="true" source="@Embed('skins/titlebar/assets/evento/cerrar.png')" click="image1_clickHandler(event)"/>
</s:Group>
