<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:textinput="skins.textinput.*"
		 minWidth="146" minHeight="25" 
		 creationComplete="group1_creationCompleteHandler(event)"
		 currentStateChange="group1_currentStateChangeHandler(event)"
		 keyDown="grpCombo_keyUpHandler(event)" xmlns:pqNet="skins.botones.pqNet.*" xmlns:componentes="mx.com.eventos.vista.componentes.*"
		 >
	
	<fx:Metadata>
		[Event(name="seleccionarTabla",type="mx.com.glosanet.vista.evento.EventoCatClientes_General")]  
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.utils.ObjectUtil;
			
			import spark.components.PopUpPosition;
			import spark.events.IndexChangeEvent;
			
			import vista.evento.reportarVisita.EventoReportarVisita;
			
			//Etiqueta Principal
			private var _labelField:String;
			private var _labelIzqField:String = "";
			private var _dataProvider:IList;
			private var _selectedIndex:int = -1;
			private var _selectedItem:*;
			private const INIT:int = -1;
			private var DATAFIELD:String = "";
			private var LEFTFIELD:String = "";
			private var _numletra:int = 12;
			private var universo:ArrayCollection;
			private var dataListDataprovider:ArrayCollection;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				_selectedIndex = 0;
				openButton.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				this.addEventListener(EventoReportarVisita.SELECCIONAR_EMPRESA_FORMULARIO, selectedAtItem);
				
			}
			
			private function remover(evt:MouseEvent):void
			{
				var point:Point = new Point(this.x,this.y);
				if ((evt.stageX < (this.owner as Group).contentToGlobal(point).x || 
					evt.stageX > ((this.owner as Group).contentToGlobal(point).x + this.width + 15)) ||
					(evt.stageY < (this.owner as Group).contentToGlobal(point).y || 
						evt.stageY > ((this.owner as Group).contentToGlobal(point).y + dataList.height + 45)))
				{
					evt.currentTarget.removeEventListener(MouseEvent.MOUSE_UP,remover);
					currentState = "normal";
				}
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
			}
			
			protected function mouseUp(event:MouseEvent):void
			{
				currentState = "open";
			}
			
			protected function dataList_changingHandler(event:IndexChangeEvent):void
			{
				/*selectedIndex = dataList.selectedIndex;*/
				var cont:int = -1;
				
				for each (var temp:Object in dataProvider) 
				{
					cont = cont +1;
					if(temp.llave == dataList.selectedItem.llave )
						selectedIndex = cont;
				}
				
				currentState = "normal";
			}
			
			protected function selectedAtItem(event:EventoReportarVisita):void
			{
				event.stopImmediatePropagation();
				
			}
			
			public function get labelIzqField():String
			{
				return _labelIzqField;
			}
			
			public function set labelIzqField(value:String):void
			{
				_labelIzqField = value;
				LEFTFIELD = value;
			}
			
			public function get labelField():String
			{
				return _labelField;
			}
			
			public function set labelField(value:String):void
			{
				_labelField = value;
				DATAFIELD = value;
			}
			
			[Bindable]
			public function get dataProvider():IList
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:IList):void
			{
				universo = ObjectUtil.copy( value ) as ArrayCollection;
				dataListDataprovider = value as ArrayCollection;
				_dataProvider = ObjectUtil.copy( value ) as ArrayCollection;
				drawText();
			}
			
			public function get selectedIndex():int
			{
				return _selectedIndex;
			}
			
			public function set selectedIndex(value:int):void
			{
				_selectedIndex = value;
				drawText();
			}
			
			public function get selectedItem():*
			{
				return _selectedItem;
			}
			
			public function set selectedItem(value:*):void
			{
				_selectedItem = value;
				drawText();
			}
			
			private function drawText():void
			{
				if (dataProvider)
				{
					if (selectedIndex != INIT )
					{
						
						labelDisplay.text = dataProvider[selectedIndex]["valor"];
						/*labelDisplay.setFocus();*/
						
						/*var evento:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.SELECCIONAR_EMPRESA_FORMULARIO);
						evento.current = dataProvider[selectedIndex];
						dispatchEvent(evento);*/
					}
				}
			}
			
			protected function grpCombo_keyUpHandler(event:KeyboardEvent):void
			{
				trace(event.altKey);
				trace(event.ctrlKey);
				trace(event.keyCode);
				trace(event.shiftKey);
			}
			
			protected function grpCombo_mouseDownHandler(event:MouseEvent):void
			{
				if (currentState == "normal")
					currentState == "open";
				else
					currentState = "normal";
			}
			
			protected function group1_currentStateChangeHandler(event:StateChangeEvent):void
			{
				if (event.newState == "open")
				{
					stage.removeEventListener(MouseEvent.MOUSE_UP,remover);
					stage.addEventListener(MouseEvent.MOUSE_UP,remover);
					dataList.selectedIndex = selectedIndex;
				}
				else if (event.newState == "normal" && stage != null)
				{
					stage.removeEventListener(MouseEvent.MOUSE_UP,remover);					
				}
			}
			
			
			
			
			public function actualizaLista():void{
				if(dataList != null)
					dataList.ensureIndexIsVisible(selectedIndex);
				
			}
			
			[Bindable]
			public function get numletra():int
			{
				return _numletra;
			}
			
			public function set numletra(value:int):void
			{
				_numletra = value;
			}
			
			
			private var timer:uint;
			protected function labelDisplay_changeHandler(event:Event):void
			{
				currentState = "open";
				if(!timer)
					timer = setTimeout(botoneratitulo1_changeBusquedaHandler,1000);	
				
			}
			
			private var textoBusqueda:String;
			
			protected function botoneratitulo1_changeBusquedaHandler():void
			{
				var lstFiltrar:ArrayCollection = ObjectUtil.copy( universo ) as ArrayCollection;
				var lstFiltrada:ArrayCollection = new ArrayCollection();
				textoBusqueda = labelDisplay.text;
				
				if( textoBusqueda != '' )
				{
					lstFiltrada = new ArrayCollection( lstFiltrar.source.filter( buscarCoincidencias ) );
				}
				else
				{
					lstFiltrada = lstFiltrar;
				}
				
				lstFiltrada.source.sortOn( 'valor', Array.NUMERIC );
				
				
				dataListDataprovider = lstFiltrada;
				dataList.dataProvider = lstFiltrada;
				
				if(timer)
					timer = 0;
				
			}
			
			
			protected function buscarCoincidencias($item:Object,id:uint, array:Array):Boolean
			{
				if( $item.valor.toUpperCase().indexOf(textoBusqueda.toUpperCase()) != -1 )
				{
					return true; 
				}
				else if( $item.valor.toUpperCase().indexOf(textoBusqueda.toUpperCase()) != -1 )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
	</s:states>
	
	<fx:Declarations>
		
		<s:DropShadowFilter id="dsSombrita" color="#FFFFFF" distance="0" strength="0" alpha="0" />
		
	</fx:Declarations>
	
	<s:Group width="100%" height="100%" id="grpCombo" mouseDown="grpCombo_mouseDownHandler(event)">
		
		<s:Rect width="100%" height="100%" radiusX="0" radiusY="0">
			<s:fill>
				<s:SolidColor color="#FFFFFF" />
			</s:fill>
			<s:stroke>
				<!--- @private -->
				<s:SolidColorStroke weight="2" color="#eaeaea"/>
			</s:stroke>
		</s:Rect>
		
		<s:HGroup width="100%" height="100%" gap="5" paddingRight="10" paddingLeft="10" verticalAlign="middle" id="HGCombo">
			<s:TextInput id="labelDisplay" width="100%" height="84%" styleName="texto_21pt_Bebas_Blanco"  fontSize="{numletra}" change="labelDisplay_changeHandler(event)" skinClass="skins.skin.textinput.evento.skinTxtInputSinBordeEvento" focusEnabled="false" focusColor="#FFFFFF"/>
			<s:Button id="openButton" width="10" focusEnabled="true" height="100%"    skinClass="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.skin.skinBotonFlechaVerdeRellena" tabEnabled="false" />
			
		</s:HGroup> 
		
	</s:Group>
	
	<s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
				   left="0" right="0" top="{grpCombo.height-4}" itemDestructionPolicy="auto"
				   popUpPosition="{PopUpPosition.BELOW}" popUpWidthMatchesAnchorWidth="true"
				   >
		
		<!--- 
		This includes borders, background colors, scrollers, and filters. 
		@copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<s:Group id="dropDown">
			
			<s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0" distance="7"
									 angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>
			
			<!-- border -->
			<!--- @private -->
			<s:Rect id="border" left="0" right="0" top="0" bottom="0" alpha="0">
				<s:fill>
					<s:SolidColor color="#FFFFFF" />
				</s:fill>
				<s:stroke>
					<!--- @private -->
					<s:SolidColorStroke id="borderStroke" weight="0" color="#eaeaea"/>
				</s:stroke>
			</s:Rect>
			
			<!-- fill -->
			<!--- Defines the appearance of drop-down list's background fill. -->
			<s:Rect id="background" left="0" right="0" top="0" bottom="0">
				<s:fill>
					<!---  
					@private
					The color of the drop down's background fill.
					The default color is 0xFFFFFF.
					-->
					<s:SolidColor id="bgFill" color="#FFFFFF" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#eaeaea" weight="1"/> 
				</s:stroke>
				<s:filters>
					<!-- drop shadow -->
					<!--- @private -->
					<s:DropShadowFilter blurY="20" blurX="20" alpha="0.45" distance="7" angle="90" color="#000000" quality="{BitmapFilterQuality.HIGH}" />
				</s:filters>
			</s:Rect>
			
			<!--- @private -->
			<s:Scroller id="scroller" width="100%" height="100%" hasFocusableChildren="false" minViewportInset="1" horizontalScrollPolicy="off" >
				<!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
				<s:VGroup width="100%" height="100%" paddingTop="0" paddingBottom="0" gap="0" horizontalAlign="center">
					<s:List id="dataList" width="100%" styleName="texto_roboto_thin_registro" dataProvider="{dataListDataprovider}"  borderVisible="false" 
							contentBackgroundAlpha="0"
							horizontalScrollPolicy="off"
							itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.itemRenderHorasDirecciones" updateComplete="actualizaLista()"
							selectedIndex="0" changing="dataList_changingHandler(event)" >
						<s:layout>
							<s:VerticalLayout gap="0" horizontalAlign="contentJustify" requestedMinRowCount="1" requestedMaxRowCount="7"/>
						</s:layout>
					</s:List>	
				</s:VGroup>  
				
			</s:Scroller>
		</s:Group>
	</s:PopUpAnchor>
	
</s:Group>
