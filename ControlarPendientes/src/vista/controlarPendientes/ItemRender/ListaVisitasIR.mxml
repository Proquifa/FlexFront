<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:otros="skins.otros.*"
				xmlns:consultas="skins.skin.comun.consultas.*"
				xmlns:chekbox="skins.skin.chekbox.*"
				autoDrawBackground="true"
				width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.ObtenerVisitas;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.managers.PopUpManager;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoIconosBotones;
			
			import vista.evento.EventoControlarAccionesPendientes;
			import vista.popUp.PopUpDetalleVisita;
			
			override public function set data(value:Object):void{
				super.data=value;
			}
			
			protected function checkbox1_changeHandler(event:Event):void
			{
				if(data.checkSeleccionado == false){
					var param:EventoControlarAccionesPendientes = new EventoControlarAccionesPendientes(EventoControlarAccionesPendientes.DESELECCIONAR_CHECK);
					param.checkADeseleccionar='visita';
					dispatchEvent(param);
				}
				data.checkSeleccionado = event.currentTarget.selected;
			}
			
			private var popUpDetalle:PopUpDetalleVisita;
			private var file:FileReference;
			public var nombresDocs:Array;
			private function muestraPopUp(event:ObtenerVisitas, index:int):void{
				
				if(event.nombresDocs != null)
					nombresDocs = event.nombresDocs.split(',');
				
				if( popUpDetalle == null ){
					popUpDetalle = PopUpDetalleVisita(PopUpManager.createPopUp( (this.parentApplication as DisplayObject), PopUpDetalleVisita, true ) );
					PopUpManager.centerPopUp( popUpDetalle );
					popUpDetalle.setDetallesVisita(data as ObtenerVisitas, index, nombresDocs);
					popUpDetalle.addEventListener("cerrarPop",cerrarPopUp);
				}else{
					PopUpManager.addPopUp( popUpDetalle , this, true );
				}
			}
			
			private function cerrarPopUp(event:Event):void
			{
				PopUpManager.removePopUp( popUpDetalle );
				popUpDetalle = null;
			}
			
			private function completeHandler(event:Event):void{
				var loader:URLLoader = URLLoader(event.target);
				var bytes:ByteArray = new ByteArray();
				try{
					bytes = (event.target as URLLoader).data;
				}
				catch (error:*){
					alertaSingleton.show("No se encontro archivo");
				}
				file.save( bytes, this.data.pk_Formulario +'.pdf' );	
			}
			
			private function avisaGuardadoArchivos(event:Event):void{
				file.removeEventListener(Event.COMPLETE,avisaGuardadoArchivos);
				alertaSingleton.show('Se guardaron los archivos',catalogoAlertas.TIT_CONF_operacionExitosa);
			}
			
			[Bindable] public var tamRealFontNombreUsuario:Number;
			[Bindable] public var widthCheckBox:Number;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				trace(unscaledWidth);
				
				tamRealFontNombreUsuario = (unscaledWidth / 304) * 18;
				tamRealFontNombreUsuario = tamRealFontNombreUsuario < 13 ? 13: tamRealFontNombreUsuario;
				
				if(tamRealFontNombreUsuario>18)
					tamRealFontNombreUsuario = 18;
				
				widthCheckBox = (unscaledWidth / 304) * 10;
				widthCheckBox = widthCheckBox < 0 ? 0: widthCheckBox;
				lblContacto.maxWidth = undefined;
				if(unscaledWidth==202){
					widthCheckBox=1;
					lblContacto.maxWidth = 75;
				}
			
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="selected" stateGroups="grisSeleccionado"/>	
		<s:State name="hovered" stateGroups="grisSeleccionado" />	
	</s:states>
	
	
	<s:Group width="100%" height="100%" >
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#ffffff"  color.grisSeleccionado="#e7f3f4"/>
			</s:fill>
		</s:Rect>
		<consultas:LineaItemSeleccionado visible.selected="true"/>
		<s:VGroup width="100%" height="100%" paddingLeft="18" gap="0">
			<s:HGroup width="100%" textAlign="left" paddingTop="15" gap="4"> 
				<s:Label fontSize="{tamRealFontNombreUsuario}" text="#{itemIndex+1} Â·" styleName="{data.checkSeleccionado==false ? 'titulo_gris_18' : 'titulo_negro_18'}"/>
				<s:Label fontSize="{tamRealFontNombreUsuario}" text="{data.folio}" styleName="{data.checkSeleccionado==false ? 'titulo_gris_18' : 'titulo_verdeazul_18'}"/>
			</s:HGroup>  
		
			<s:HGroup width="100%" textAlign="left" paddingTop="5" verticalAlign="middle">
				<s:Label fontSize="{tamRealFontNombreUsuario-1}" paddingRight="10" styleName="{data.checkSeleccionado==false ? 'titulo_gris_16_light' : 'titulo_negro_16_light'}" text="{UtilsFecha.formatoFecha_dia_mes_Anio(data.fecha_Visita)}"/>
				<s:Spacer width="100%"/>
				<s:HGroup verticalAlign="middle">
					<s:Group click="muestraPopUp(data as ObtenerVisitas, itemIndex+1)" buttonMode="true">
						<mx:Image source="{data.checkSeleccionado==false ? catalogoIconosBotones.getInstance().visualizarInactivo : catalogoIconosBotones.getInstance().visualizar_verde}" />						
					</s:Group>
					<s:Spacer width="{widthCheckBox}"/>
					<s:VGroup width="16" height="16" verticalAlign="middle" horizontalAlign="center">
						<chekbox:checkBoxVerde selected="{data.checkSeleccionado}" change="checkbox1_changeHandler(event)" styleCheck="checkBoxBlancoCuadroGrisPalomaVerde"/>
					</s:VGroup>
					<s:Spacer width="{widthCheckBox*3}"/>
				</s:HGroup>
			</s:HGroup>
		
			<s:HGroup width="100%" textAlign="left" paddingTop="5">
				<s:Label paddingBottom="10" styleName="titulo_gris_11_lighter" text="Contacto a visitar: "/>
				<s:Label id="lblContacto" paddingBottom="10" styleName="{data.checkSeleccionado==false ? 'titulo_gris_11_lighter' : 'titulo_negro_11_lighter'}" text="{data.contacto}" maxDisplayedLines="2"/>
			</s:HGroup>
			
			<otros:division width="100%"/>
		</s:VGroup> 
	</s:Group> 
	
</s:ItemRenderer>
