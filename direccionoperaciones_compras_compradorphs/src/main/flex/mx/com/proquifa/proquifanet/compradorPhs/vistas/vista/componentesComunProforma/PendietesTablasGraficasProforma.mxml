<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:label="skins.skin.label.*" xmlns:otros="skins.otros.*" xmlns:pqNet="skins.skin.datagrid.pqNet.*" xmlns:graficas="skins.skin.graficas.*">
	<fx:Declarations>
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.compradorPhs.vistas.eventos.EventoGeneralCompradorPhs;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaProforma;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.pieChartDinamico.PieDinamico;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.pieChartDinamico.pqNetPiesChartDinamico;
			import mx.events.ResizeEvent;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoInfoGraficas;
			[Bindable]
			private var _universoProformas:ArrayCollection;
			[Bindable]
			public var  tituloEstado:String = "";
			[Bindable]
			private var _graEnviablesVsProceso:ArrayCollection;
			private var _partidasPorEnviar:int;
			private var _PartidasEnProcesos:int;
			[Bindable]
			private var _graPartSinProforma:ArrayCollection;
			private var _partidasSinProformaS:int;
			private var _PartidasSinProformaBO:int;
			private var _PartidasSinProformaP:int;
			private var _PartidasSinProformaCM:int;
			private var _PartidasSinProformaCN:int;
			private var _PartidasSinProformaCO:int;
			[Bindable]
			private var _graSituacionPart:ArrayCollection;
			private var _partidasEnTiempo:int;
			private var _PartidasUrgentes:int;
			private var _PartidasFueraTmp:int;
			[Bindable]
			private var _graDestino:ArrayCollection;
			[Bindable]
			private var _graTipo:ArrayCollection;
			[Bindable]
			private var _listaGraficas:ArrayCollection;
			private var _partidasFleteR:int;
			private var _partidasFleteP:int;
			private var _partidasFleteE:int;
			private var _partidasDestinoStock:int;
			private var _partidasDestinoCliente:int;
			
			/**
			 * Funcion que incia el componente para la lectura de Proformas. Es un funcion publica q se declara desde el componente
			 * padre (ViewStackGeneral) lo cahcha el mapa MapaGeneralDePendientes.mxml
			 */ 
			public function iniciaEstadoPartidasAConfirmar():void{
				var evento:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs( EventoGeneralCompradorPhs.OBTENER_PROFORMAS );
				evento.idProveedor = 0;
				evento.idUsuario = DatosGlobales.getInstance()._usuario.idEmpleado;
				dispatchEvent( evento );
			}
			/**
			 * funcion que recibe del mapa el universo de partidas
			 */
			[Bindable] private var _listaPartidaProformaUniverso:ArrayCollection;
			[Bindable] private var _listaPartidaProformaTrabajo:ArrayCollection;
			public function set recibeUniversoProformas( listaDatos:ArrayCollection):void{
				if( listaDatos == null){
					return;
				}
				this._listaPartidaProformaUniverso = new ArrayCollection();
				this._listaPartidaProformaUniverso = listaDatos;
				this._listaPartidaProformaTrabajo = new ArrayCollection();
				this._listaPartidaProformaTrabajo = UtilsGrid.queryQuitarRepetidos(this._listaPartidaProformaUniverso, "nombreProveedor");
				_universoProformas = new ArrayCollection();
				_partidasPorEnviar = 0;
				_PartidasEnProcesos = 0;
				_partidasSinProformaS = 0;
				_PartidasSinProformaBO = 0;
				_PartidasSinProformaP = 0;
				_partidasEnTiempo = 0;
				_PartidasUrgentes = 0;
				_PartidasFueraTmp = 0;
				_partidasFleteR = 0;
				_partidasFleteP = 0;
				_partidasFleteE = 0;
				_partidasDestinoStock = 0;
				_partidasDestinoCliente = 0;
				for(var l:int = 0; l < listaDatos.length; l++){
					//tipo total etiquetaElemento
					( listaDatos[l] as PartidaProforma ).proformaAbierta == true ? _partidasPorEnviar = _partidasPorEnviar + 1 : _PartidasEnProcesos = _PartidasEnProcesos + 1;
					( listaDatos[l] as PartidaProforma ).tipoCarro == "STOCK" ? _partidasSinProformaS = _partidasSinProformaS + 1 : _partidasSinProformaS = _partidasSinProformaS  ;
					( listaDatos[l] as PartidaProforma ).tipoCarro == "BACKORDER" ? _PartidasSinProformaBO = _PartidasSinProformaBO + 1 : _PartidasSinProformaBO = _PartidasSinProformaBO;
					( listaDatos[l] as PartidaProforma ).tipoCarro == "PROGRAMADO" ? _PartidasSinProformaP = _PartidasSinProformaP + 1 : _PartidasSinProformaP = _PartidasSinProformaP ;
					( listaDatos[l] as PartidaProforma ).tipoCarro == "MUNDIALES" ? _PartidasSinProformaCM = _PartidasSinProformaCM + 1 : _PartidasSinProformaCM = _PartidasSinProformaCM ;
					( listaDatos[l] as PartidaProforma ).tipoCarro == "NACIONALES" ? _PartidasSinProformaCN = _PartidasSinProformaCN + 1 : _PartidasSinProformaCN = _PartidasSinProformaCN ;
					( listaDatos[l] as PartidaProforma ).tipoCarro == "ORIGEN" ? _PartidasSinProformaCO = _PartidasSinProformaCO + 1 : _PartidasSinProformaCO = _PartidasSinProformaCO ; 
					if( ( listaDatos[l] as PartidaProforma).FEE != null){
						if( UtilsFecha.regresaDiferenciaEntreFechasEnDias( new Date(), ( listaDatos[l] as PartidaProforma).FEE ) <= 0 ){
							_PartidasFueraTmp = _PartidasFueraTmp +1;
						}else if ( UtilsFecha.regresaDiferenciaEntreFechasEnDias( new Date(), ( listaDatos[l] as PartidaProforma).FEE ) <= 4 ){
							_PartidasUrgentes = _PartidasUrgentes +1;
						} else if( UtilsFecha.regresaDiferenciaEntreFechasEnDias( new Date(), ( listaDatos[l] as PartidaProforma).FEE ) >= 5 ){
							_partidasEnTiempo = _partidasEnTiempo +1;
						}
					}
					( listaDatos[l] as PartidaProforma).destino == "STOCK" ? _partidasDestinoStock++: _partidasDestinoCliente++;
					if( ( listaDatos[l] as PartidaProforma ).idPartidaProforma > 0 ){
						( listaDatos[l] as PartidaProforma ).tipoFlete == "Regular" ? _partidasFleteR = _partidasFleteR +1 : _partidasFleteR = _partidasFleteR ;
						( listaDatos[l] as PartidaProforma ).tipoFlete == "Programado" ? _partidasFleteP = _partidasFleteP +1 : _partidasFleteP = _partidasFleteP ;
						( listaDatos[l] as PartidaProforma ).tipoFlete == "Flete Express" ? _partidasFleteE = _partidasFleteE +1 : _partidasFleteE = _partidasFleteE ;
					}
					/*se agrega el 1er registro en una nueva lista*/
					if( _universoProformas.length == 0){
						listaDatos[l]  = totalDatosPorProveedor( listaDatos ,  listaDatos[l] );
						_universoProformas.addItem( listaDatos[l] as PartidaProforma );
					}else{ // si la lista es mayor a cero, quiere decir que ya se agrego un registro, por lo tanto se buscan coincidencias en la nueva lista
						var encontroCoincidencia:Boolean = false;
						for( var u :int = 0; u < this._universoProformas.length; u++){
							if( !encontroCoincidencia){
								if( ( _universoProformas.getItemAt( u )  as PartidaProforma ).nombreProveedor == listaDatos[l].nombreProveedor ){
									encontroCoincidencia = true;
								}	}
						}
						if( !encontroCoincidencia){
							listaDatos[l]  = totalDatosPorProveedor( listaDatos ,  listaDatos[l] );
							_universoProformas.addItem( listaDatos[l] as PartidaProforma );
						}
					} 
				}
				for(var UP:int = 0; UP < _universoProformas.length ; UP++){
					//con el universo agrupado ya se puede obtener por cliente el destino
					( _universoProformas[UP] as PartidaProforma).numFila = UP + 1;
				} 
				this._graSituacionPart = new ArrayCollection([ {tipo:"En Tiempo", total: _partidasEnTiempo },
					{tipo:"Urgentes", total: _PartidasUrgentes },
					{tipo:"Fuera Tiempo", total: _PartidasFueraTmp }	]);
				this._graTipo = new ArrayCollection([ {tipo:"Flete Regular", total: _partidasFleteR},
					{tipo:"Flete Programado", total: _partidasFleteP},
					{tipo:"Flete Express", total: _partidasFleteE }]); 
				this._graEnviablesVsProceso = new ArrayCollection([ {tipo:"Por Enviar", total: _partidasPorEnviar },
					{tipo:"En Procesoo", total: _PartidasEnProcesos }]);	
				this._graPartSinProforma = new ArrayCollection([ {tipo:"Stock", total: _partidasSinProformaS },
					{tipo:"B Order", total: _PartidasSinProformaBO },
					{tipo:"Programadas", total: _PartidasSinProformaP },
					{tipo:"MUNDIAL", total: _PartidasSinProformaCM },
					{tipo:"NACIONAL", total: _PartidasSinProformaCN},
					{tipo:"ORIGEN", total: _PartidasSinProformaCO} ]);	 
				this._graDestino = new ArrayCollection([ {tipo:"Cliente", total: _partidasDestinoCliente },
					{tipo:"Stock", total: _partidasDestinoStock} ]); 
				crearGraficas();
				this.lblTotalPartidas.text = this._universoProformas.length + ' Proveedores';
			} 	 
			///////  CREAR GRAFICAS
			[Bindable] private var _componenteArregloPies:pqNetPiesChartDinamico = null;
			private function crearGraficas():void{
				this._listaGraficas = new ArrayCollection();
				var subtituloAllCharts:String = "Factura a surtir";
				this._listaGraficas.addItem( setearGrafica("ET vs UR vs FT", subtituloAllCharts, catalogoInfoGraficas.FLETE_PARTIDAS, _graSituacionPart ) );
				//FLETES
				this._listaGraficas.addItem( setearGrafica("Fletes partidas", subtituloAllCharts, catalogoInfoGraficas.FLETE_PARTIDAS, _graTipo ) );
				//ENVIABLES VS NO ENVIABLES
				this._listaGraficas.addItem( setearGrafica("Proformas enviables VS no enviables", subtituloAllCharts, catalogoInfoGraficas.FLETE_PARTIDAS, _graEnviablesVsProceso) );
				//ENVIABLES VS NO ENVIABLES
				this._listaGraficas.addItem( setearGrafica("Partidas\nen carros", subtituloAllCharts, catalogoInfoGraficas.FLETE_PARTIDAS, _graPartSinProforma) );
				//PROVEEDORES
				var _listaProveedores:ArrayCollection = new ArrayCollection();
				for(var u:int = 0; u < _universoProformas.length; u++){
					var objeto:Object = new Object();
					objeto.tipo = (_universoProformas[u] as PartidaProforma).nombreProveedor;
					objeto.total = (_universoProformas[u] as PartidaProforma).numPartidasPorProveedor;
					_listaProveedores.addItem( objeto );
				}
				this._listaGraficas.addItem( setearGrafica("Proveedores", subtituloAllCharts, catalogoInfoGraficas.FLETE_PARTIDAS, _listaProveedores) );
				//Destinos
				this._listaGraficas.addItem( setearGrafica("Destinos \ncliente vs stock", subtituloAllCharts, catalogoInfoGraficas.FLETE_PARTIDAS, _graDestino) );
				//AGREGAR PIES AL COMPONENTE
				if(_componenteArregloPies == null){
					_componenteArregloPies = new pqNetPiesChartDinamico();
					this.grpGraficas.addElement(_componenteArregloPies);
				}
				_componenteArregloPies.iniciarGraficas( _listaGraficas );
			}
			private function setearGrafica(
				$titulo:String, 
				$subTitulo:String, 
				$info:String, 
				$dataProvider:ArrayCollection, 
				$tipo:int = 0, 
				$popUp:Boolean = true
			):PieDinamico{
				var pieRegreso:PieDinamico = new PieDinamico();
				pieRegreso.lblTitulo = $titulo;
				pieRegreso.ordenTitulo = 1;	
				pieRegreso.subTitulo = $subTitulo;
				pieRegreso.infoGeneralDeLaGrafica = $info;
				pieRegreso.tipoPie = $tipo;
				pieRegreso.arregloAlimentador = $dataProvider;
				pieRegreso.popUpHabilitado = $popUp;
				return pieRegreso;
			}
			private function limpiaNulosOVaciosEnArregloPie($lista:ArrayCollection):ArrayCollection{
				var arrRegreso:ArrayCollection = new ArrayCollection();
				for(var t:int = 0; t < $lista.length; t++){
					if($lista[t].tipo != "null" && 
						$lista[t].tipo != null && 
						$lista[t].tipo != "unset" && 
						$lista[t].tipo !=  "") arrRegreso.addItem($lista[t]);
					if($lista[t].tipo == null){
						$lista[t].tipo = "Pendiente";
						arrRegreso.addItem($lista[t]);
					}
					if($lista[t].tipo == "ND"){
						$lista[t].tipo = "No definido";
						arrRegreso.addItem($lista[t]);
					}
				}
				arrRegreso = UtilsGrid.queryQuitarRepetidos( arrRegreso, "tipo");
				return arrRegreso;
			}
			/////////////////////////////////////////////////// 
			/**
			 * funcion que construye un array List con el universo de partidas proformas y el provedoor, para hacer un barrido y determinar
			 * el total de datos (num pedidos, proformas, tipo Proformas y estados Proformas) 
			 */ 
			private function totalDatosPorProveedor( $listaProformas:ArrayCollection, $partida:PartidaProforma):PartidaProforma{
				var universoPorProveedor:ArrayCollection = new ArrayCollection();
				var universoPedidosAsociados:ArrayCollection = new ArrayCollection();
				var universoProformasP:ArrayCollection = new ArrayCollection();
				var universoProformasR:ArrayCollection = new ArrayCollection();
				var universoProformasFE:ArrayCollection = new ArrayCollection();
				var universoProformasProceso:ArrayCollection = new ArrayCollection();
				var universoProformasAEnviar:ArrayCollection = new ArrayCollection();
				var partidasProgramado:int = 0;
				var partidasExpress:int = 0;	
				var partidasRegulares:int = 0;	
				var partidasProceso:int = 0;	
				var partidasAEnviar:int = 0;	
				var carroStock:int = 0;
				var carroBOrder:int = 0;
				var carroProgramadas:int = 0;
				var carroCM:int = 0;
				var carroCN:int = 0;
				var carroCO:int = 0;
				var fechaPuesta:Boolean = false;
				var partidasConProforma:int = 0;
				//se crea un universo por proveedor
				for(var i:int = 0; i < $listaProformas.length; i++ ){
					if(  ($listaProformas.getItemAt( i ) as PartidaProforma).nombreProveedor == $partida.nombreProveedor  ){
						universoPorProveedor.addItem( $listaProformas[i] as PartidaProforma );
					}
				}
				//con universo de proveedores
				for( var n:int = 0; n < universoPorProveedor.length; n++ ){
					////////////////////////////////////////////// Se genera el universo de Pedidos Asociados por proveedor//////////////////////////////////////
					if( universoPedidosAsociados.length == 0 ){
						universoPedidosAsociados.addItem( ( universoPorProveedor[n] as PartidaProforma).cpedido );
					}else{
						var coincidenciaPedido:Boolean = false;
						for( var PA:int = 0; PA < universoPedidosAsociados.length; PA++){
							if( !coincidenciaPedido){
								if( universoPedidosAsociados[PA] ==  ( universoPorProveedor[n] as PartidaProforma).cpedido ){
									coincidenciaPedido = true;
								}	
							}
						}
						if( !coincidenciaPedido){
							universoPedidosAsociados.addItem(  ( universoPorProveedor[n] as PartidaProforma).cpedido );
						}
					}
					//////////////////////////////////////////////////////////////// Se genera el Universo de Proformas 	En Porceso //////////////////////////////////////
					if((universoPorProveedor[n] as PartidaProforma).idProforma > 0 ){
						partidasConProforma++;
					}
					if( universoPorProveedor[n].proformaAbierta &&  (universoPorProveedor[n] as PartidaProforma).idProforma > 0 ){
						if( universoProformasProceso.length == 0 ){
							universoProformasProceso.addItem( universoPorProveedor[n].folioProforma );
							partidasProceso = 1;
						}else{
							var coincidenciaProceso:Boolean = false;
							for( var PP :int = 0; PP < universoProformasProceso.length; PP++){
								if( !coincidenciaProceso){
									if( universoProformasProceso[ PP ] == universoPorProveedor[n].folioProforma ){
										coincidenciaProceso = true;
										partidasProceso = partidasProceso + 1;
									}	}
							}
							if( !coincidenciaProceso ){
								universoProformasProceso.addItem( universoPorProveedor[n].folioProforma );
								partidasProceso = partidasProceso + 1;
							}
						}
						//////////////////////////////////////////////////////////////// Se genera el Universo de Proformas A Enviar //////////////////////////////////////
					}else if( !universoPorProveedor[n].proformaAbierta  &&  (universoPorProveedor[n] as PartidaProforma).idProforma > 0 ){
						if( universoProformasAEnviar.length == 0 ){
							universoProformasAEnviar.addItem( universoPorProveedor[n].folioProforma );
							partidasAEnviar = 1;
						}else{
							var coincidenciaAEnviar:Boolean = false;
							for( var PAE :int = 0; PAE < universoProformasAEnviar.length; PAE++ ){
								if( !coincidenciaAEnviar){
									if( universoProformasAEnviar[ PAE ] == universoPorProveedor[n].folioProforma ){
										coincidenciaAEnviar = true;
										partidasAEnviar = partidasAEnviar + 1;
									}	}
							}
							if( !coincidenciaAEnviar ){
								universoProformasAEnviar.addItem( universoPorProveedor[n].folioProforma );
								partidasAEnviar = partidasAEnviar + 1;
							}
						}
					}
					////////////////////////////////////////////////////// Se genera el universo de  Proformas Regulares//////////////////////////////////////////
					if( (universoPorProveedor[n].tipoFlete == "Regular" || universoPorProveedor[n].tipoCarro == "STOCK" ) && (universoPorProveedor[n] as PartidaProforma).idProforma > 0 ){
						if( universoProformasR.length == 0 ){
							universoProformasR.addItem( universoPorProveedor[n].folioProforma );
							partidasRegulares = 1;
						}else{
							var coincidenciaProformaR:Boolean = false;
							for( var FR :int = 0; FR < universoProformasR.length; FR++){
								if( !coincidenciaProformaR){
									if( universoProformasR[FR] == universoPorProveedor[n].folioProforma ){
										coincidenciaProformaR = true;
										partidasRegulares = partidasRegulares + 1;
									}	}	}
							if( !coincidenciaProformaR ){
								universoProformasR.addItem( universoPorProveedor[n].folioProforma );
								partidasRegulares = partidasRegulares + 1;
							}
						}
						//////////////////////////////////////////////////////////Se genera el universo de  Proformas Programadas //////////////////////////////////////
					}else if( universoPorProveedor[n].tipoFlete == "Programado"  && (universoPorProveedor[n] as PartidaProforma).idProforma > 0 ){
						if( universoProformasP.length == 0 ){
							universoProformasP.addItem( universoPorProveedor[n].folioProforma );
							partidasProgramado = 1;
						}else{
							var coincidenciaProgramado:Boolean = false;
							for( var FP :int = 0; FP < universoProformasP.length; FP++){
								if( !coincidenciaProgramado){
									if( universoProformasP[ FP ] == universoPorProveedor[n].folioProforma ){
										coincidenciaProgramado = true;
										partidasProgramado = partidasProgramado + 1;
									}	}
							}
							if( !coincidenciaProgramado ){
								universoProformasP.addItem( universoPorProveedor[n].folioProforma );
								partidasProgramado = partidasProgramado + 1;
							}
							
						}
						////////////////////////////////////////////////////////////////Se genera el universo de  Proformas Express //////////////////////////////////////
					}else if ( universoPorProveedor[n].tipoFlete == "Flete Express"  && (universoPorProveedor[n] as PartidaProforma).idProforma > 0 ){
						if( universoProformasFE.length == 0 ){
							universoProformasFE.addItem( universoPorProveedor[n].folioProforma );
							partidasExpress = 1;
						}else{
							var coincidenciaExpress:Boolean = false;
							for( var FE :int = 0; FE < universoProformasFE.length; FE++){
								if( !coincidenciaExpress){
									if( universoProformasFE[ FE ] == universoPorProveedor[n].folioProforma ){
										coincidenciaExpress = true;
										partidasExpress = partidasExpress + 1;
								}	}
							}
							if( !coincidenciaExpress ){
								universoProformasFE.addItem( universoPorProveedor[n].folioProforma );
								partidasExpress = partidasExpress + 1;
							}
						}
					}
					////////////////////////////////////////////////////////////////	Se calcula la FEE mas proxima 	//////////////////////////////////////
					if( universoPorProveedor[n].FEE != null ){
						if( !fechaPuesta){
							var pFecha:Date = universoPorProveedor[n].FEE;
							fechaPuesta = true;
						}
						var feeProximaReal:Date = universoPorProveedor[n].FEE;
						pFecha.getTime() > feeProximaReal.getTime() ? pFecha = feeProximaReal : pFecha = pFecha;
					}
					////////////////////////////////////////////////////////////////Se calcula llas partidas stock //////////////////////////////////////
					if( (universoPorProveedor[n] as PartidaProforma).folioProforma == null ||  (universoPorProveedor[n] as PartidaProforma).folioProforma == ""){ 
						universoPorProveedor[n].tipoCarro == "STOCK" ? carroStock = carroStock + 1 : carroStock = carroStock  ;
						universoPorProveedor[n].tipoCarro == "BACKORDER" ? carroBOrder = carroBOrder + 1 : carroBOrder = carroBOrder;
						universoPorProveedor[n].tipoCarro == "PROGRAMADO" ? carroProgramadas = carroProgramadas + 1 : carroProgramadas = carroProgramadas ;
						universoPorProveedor[n].tipoCarro == "MUNDIALES" ? carroCM = carroCM + 1 : carroCM = carroCM ;
						universoPorProveedor[n].tipoCarro == "NACIONALES" ? carroCN = carroCN + 1 : carroCN = carroCN ;
						universoPorProveedor[n].tipoCarro == "ORIGEN" ? carroCO = carroCO + 1 : carroCO = carroCO ;
					}
				}
				$partida.fechaFEE_Formato = UtilsFecha.formatoFechaDDMMMYYYY( pFecha );
				$partida.numPartidasPorProveedor = universoPorProveedor.length;
				$partida.numPartidasConProforma = partidasConProforma;
				$partida.numPartidasRegulares = partidasRegulares;
				$partida.numPartidasProgramdas = partidasProgramado
				$partida.numPartidasExpress = partidasExpress;
				$partida.numPartidasProceso = partidasProceso;
				$partida.numPartidasEnviar = partidasAEnviar;
				$partida.numPedidosAsociados = universoPedidosAsociados.length;
				$partida.numProformasFP = universoProformasP.length;
				$partida.numProformasFR = universoProformasR.length;
				$partida.numProformasFE = universoProformasFE.length;
				$partida.numProformasProceso = universoProformasProceso.length;
				$partida.numProformasEnviar = universoProformasAEnviar.length;
				$partida.numPartidasCarroStock = carroStock;
				$partida.numPartidasCarroProg = carroProgramadas;
				$partida.numPartidasCarroBOrder = carroBOrder;
				$partida.numPartidasCarroCM = carroCM;
				$partida.numPartidasCarroCN = carroCN;
				$partida.numPartidasCarroCO = carroCO;
				return $partida;
			} 

			protected function datagridpqnet1_resizeHandler(event:ResizeEvent):void{
				(this.tablaGrid.columns[0] as DataGridColumn).width = (this.tablaGrid.width * 0.05);//#
				(this.tablaGrid.columns[1] as DataGridColumn).width = (this.tablaGrid.width * 0.19);//cliente							25
				(this.tablaGrid.columns[2] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//numero facturas a surtir
				(this.tablaGrid.columns[3] as DataGridColumn).width = (this.tablaGrid.width * 0.057);///numero partidas a surtir
				(this.tablaGrid.columns[4] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//manejos
				(this.tablaGrid.columns[5] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//situacion
				(this.tablaGrid.columns[6] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//FEE mas proxima
				(this.tablaGrid.columns[7] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				(this.tablaGrid.columns[8] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				(this.tablaGrid.columns[9] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				(this.tablaGrid.columns[10] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				(this.tablaGrid.columns[11] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				(this.tablaGrid.columns[12] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				(this.tablaGrid.columns[13] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				(this.tablaGrid.columns[14] as DataGridColumn).width = (this.tablaGrid.width * 0.057);//botonflecha
				/* this.tablaGrid.porcentajesColumnasPq = new Array({ 5,19,6,6,6,6,6,6,6,6,6,6,6,6,6  }); */
			}
			
		]]>
	</fx:Script>
	<label:labelTitulo text="{this.tituloEstado}" width="100%"/>
	<otros:divisionHueca width="100%"/>
	<s:Spacer height="3"/>
	<s:HGroup width="100%">
		<label:labelSubtitulo text="LISTADO" fontSize="18" fontWeight="bold" />
		<s:Spacer width="100%"/>
		<label:labelSubtitulo fontSize="18" fontWeight="bold" id="lblTotalPartidas"/>
	</s:HGroup>
	<!--<otros:division width="100%"/>-->
	<otros:divisionGruesa width="100%"/>
	<pqNet:dataGridPqNet  width="100%" height="50%" dataProvider="{this._universoProformas}" variableRowHeight="true" horizontalScrollPolicy="auto" resize="datagridpqnet1_resizeHandler(event)" id="tablaGrid">
		<pqNet:columns>
			<mx:DataGridColumn headerText="#" dataField="numFila" />
			<mx:DataGridColumn headerText="Proveedor" >
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false" height="100%">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import mx.events.FlexEvent;
									
									import skins.catalogos.catalogoColores;
									
									protected function vgroup1_creationCompleteHandler():void{
										vgr1.height = lblProveedor.height + lblPais.height + 15;
									}
								]]>
							</fx:Script>
							<!--creationComplete="vgroup1_creationCompleteHandler()"-->
							<s:VGroup width="100%"  height="100%" paddingTop="7" paddingBottom="7"  id="vgr1">
								<s:Label fontWeight="bold" fontSize="14" text="{this.data.nombreProveedor}" width="100%" textAlign="center" id="lblProveedor" color.selected="#ffffff"/>
								<s:Label width="100%" textAlign="center" text="{ this.data.paisProveedor}" color="#999999" id="lblPais" color.selected="#ffffff" />
							</s:VGroup>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{'FEE más\n próxima'}" >
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<fx:Script>
								<![CDATA[
									import skins.catalogos.catalogoColores;
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<s:Label width="100%" fontSize="13" fontWeight="bold" text="{ this.data.fechaFEE_Formato }" color="red" color.selected="#ffffff"/>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="PI's asociados" dataField="" >
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<fx:Script>
								<![CDATA[
									import skins.catalogos.catalogoColores;
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<s:VGroup width="100%">
								<s:Label width="100%" textAlign="center" text="{ this.data.numPedidosAsociados}" fontWeight="bold" color.selected="#ffffff"/>
								<s:Label  fontSize="12" text="{'#P ' + this.data.numPartidasPorProveedor}" color="#999999" width="100%" textAlign="center" color.selected="#ffffff"/>
							</s:VGroup>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Total proformas"  >
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaProforma;
									import skins.catalogos.catalogoColores;
								]]>
							</fx:Script>
							<s:VGroup width="100%">
								<s:Label width="100%" textAlign="center" text="{ this.data.numProformasProceso + this.data.numProformasEnviar }" fontWeight="bold" color.selected="#ffffff"/>
								<s:Label  fontSize="12" text="{'#P ' + (this.data as PartidaProforma).numPartidasConProforma + ' - 100%'}" color="#666666" width="100%" textAlign="center" color.selected="#ffffff"/>
							</s:VGroup>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Proformas FR" dataField="numProformasFR" >
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import mx.events.FlexEvent;
									import skins.catalogos.catalogoColores;
									override public function set data(value:Object):void{
										super.data= value;
										this.data.numPartidasConProforma > 0 ? lbl.text = '#P ' + this.data.numPartidasRegulares  + ' - ' +   Math.round((this.data.numPartidasRegulares * 100 )/this.data.numPartidasConProforma)  + '%' : lbl.text =  '#P 0 - 0%'
									}
								]]>
							</fx:Script>
							<s:VGroup width="100%">
								<s:Label width="100%" textAlign="center" text="{ this.data.numProformasFR }" fontWeight="bold" color.selected="#ffffff"/>
								<s:Label  fontSize="12" color="#666666" width="100%" textAlign="center" id="lbl" color.selected="#ffffff"/>
							</s:VGroup>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Proformas FE" >     												<!--6-->
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import mx.events.FlexEvent;
									import skins.catalogos.catalogoColores;
									override public function set data(value:Object):void{
										super.data= value;
										this.data.numPartidasConProforma > 0 ? lbl.text = '#P ' + this.data.numPartidasExpress  + ' - ' +   Math.round((this.data.numPartidasExpress * 100 )/this.data.numPartidasConProforma)  + '%' : lbl.text =  '#P 0 - 0%'
									}
								]]>
							</fx:Script>
							<s:VGroup width="100%">
								<s:Label width="100%" textAlign="center" text="{ this.data.numProformasFE }" fontWeight="bold" color.selected="#ffffff"/>
								<s:Label  fontSize="12" color="#666666" width="100%" textAlign="center" id="lbl"  color.selected="#ffffff"/>
							</s:VGroup>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Proformas FP" dataField="numProformasFP" >
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import skins.catalogos.catalogoColores;
									override public function set data(value:Object):void{
										super.data= value;
										this.data.numPartidasConProforma > 0 ? lbl.text = '#P ' + this.data.numPartidasProgramdas  + ' - ' +   Math.round((this.data.numPartidasProgramdas * 100 )/this.data.numPartidasConProforma)  + '%' : lbl.text =  '#P 0 - 0%'
									}
								]]>
							</fx:Script>
							<s:VGroup width="100%">
								<s:Label width="100%" textAlign="center" text="{ this.data.numProformasFP }" fontWeight="bold"  color.selected="#ffffff"/>
								<s:Label  fontSize="12" color="#666666" width="100%" textAlign="center" id="lbl"  color.selected="#ffffff"/>
							</s:VGroup>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Carro BO">
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<s:Label width="100%" textAlign="center" text="{ this.data.numPartidasCarroBOrder }" fontWeight="bold"  color.selected="#ffffff" />
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Carro PR">
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<s:Label width="100%" textAlign="center" text="{ this.data.numPartidasCarroProg }" fontWeight="bold" color.selected="#ffffff" />
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Carro ST">
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<s:Label width="100%" textAlign="center" text="{ this.data.numPartidasCarroStock }" fontWeight="bold" color.selected="#ffffff"/>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Carro CM">
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaProforma;
								]]>
							</fx:Script>
							<s:Label width="100%" textAlign="center" text="{ (data as PartidaProforma).numPartidasCarroCM }" fontWeight="bold" color.selected="#ffffff"/>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Carro CN">
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaProforma;
								]]>
							</fx:Script>
							<s:Label width="100%" textAlign="center" text="{ (data as PartidaProforma).numPartidasCarroCN }" fontWeight="bold" color.selected="#ffffff"/>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Carro CO">
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false">
							<s:states>
								<s:State name="normal"/>
								<s:State name="hovered"/>
								<s:State name="selected"/>
							</s:states>
							<fx:Script>
								<![CDATA[
									import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaProforma;
								]]>
							</fx:Script>
							<s:Label width="100%" textAlign="center" text="{ (data as PartidaProforma).numPartidasCarroCO }" fontWeight="bold" color.selected="#ffffff"/>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText=""  >					<!--14-->
				<mx:itemRenderer>
					<fx:Component>
						<s:MXItemRenderer autoDrawBackground="false" width="100%" height="100%">
							<fx:Script>
								<![CDATA[
									import mx.com.proquifa.proquifanet.compradorPhs.vistas.eventos.EventoGeneralCompradorPhs;
									import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaProforma;
									
									import skins.catalogos.catalogoIconosGrid;
									public function ejecutar():void{
										var evento:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs(EventoGeneralCompradorPhs.SELECCIONA_OPCION );
										evento.idOpcionSeleccionada = "espacioVistaPlanificacionProforma";
										evento.proforma = this.data as PartidaProforma;
										dispatchEvent( evento );
									}
								]]>
							</fx:Script>
							<mx:Image source="{catalogoIconosGrid.getInstance().render_flechitacirculo}" click="ejecutar()" width="32" height="32" verticalAlign="middle" horizontalAlign="center">
							</mx:Image>
						</s:MXItemRenderer>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</pqNet:columns>
	</pqNet:dataGridPqNet>
	<otros:divisionGruesa width="100%"/>
	<s:Spacer height="2%"/>
	<s:HGroup width="100%" height="50%" id="grpGraficas"/> <!--en este grupo se insertan de forma dinamica las graficas-->
	
	
</s:VGroup>
