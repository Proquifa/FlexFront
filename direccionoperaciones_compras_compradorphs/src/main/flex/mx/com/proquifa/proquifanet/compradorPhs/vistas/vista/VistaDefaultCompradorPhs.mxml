<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"  
		 xmlns:general="mx.com.proquifa.proquifanet.compradorPhs.vistas.vista.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:plantilla="mx.com.proquifa.proquifanet.compradorPhs.vistas.vista.plantilla.*"
		 xmlns:arribo="mx.com.proquifa.vista.mapas.gestorCompras.arribo.*"
		 xmlns:gestorCompras="mx.com.proquifa.vista.mapas.gestorCompras.*" 
		 width="100%" height="100%" 
		 creationComplete="init(event)" xmlns:mapas="mx.com.proquifa.proquifanet.compradorPhs.vistas.mapas.*">
	<fx:Declarations>
		<gestorCompras:MapaGestorCompras />
		<arribo:MapaArriboGestorCompras />
		<mapas:MapaComprasCompradorPhs />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.compradorPhs.vistas.eventos.EventoComprasCompradorPhs;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaCargarAcuseRecibido;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaGenerarAcuse;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaListaArribo;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaListaArriboPub;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			[Bindable] private var listaPendiente:ArrayCollection = new ArrayCollection([{pendiente:'Materiales',conteo:null},{pendiente:'Publicaciones',conteo:null},{pendiente:'Generar Acuse de Recibo',conteo:null},{pendiente:'Cargar Acuse de Recibo',conteo:null}]);
			private var listaArribo:VistaListaArribo;
			private var listaArriboPublicaciones:VistaListaArriboPub;
			private var generarAcuse:VistaGenerarAcuse;
			private var cargarAcuse:VistaCargarAcuseRecibido;
			public static var accionCargarFactura:String = "reload"; 
			[Bindable] public var primera:Boolean; 
			
			protected function plantillagestorcompras1_pendienteSeleccionadoHandler(event:EventoGestorCompras):void
			{
				switch(event.pendiente.toUpperCase())
				{
					case "MATERIALES":
					{
						if (!listaArribo)
							listaArribo = new VistaListaArribo();
						plantilla.agregarContenido(listaArribo);
						accionCargarFactura = "reload";
						var eve:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.LISTADO_ARRIBO);
						eve.idEmpleado = DatosGlobales.getInstance()._usuario.clave;
						eve.publicaciones = false;
						dispatchEvent(eve);
						dispatchEvent( new Event("recargarPendientes",true));
						break;
					}
					case "PUBLICACIONES":
					{
						if (!listaArriboPublicaciones)
							listaArriboPublicaciones = new VistaListaArriboPub();
						plantilla.agregarContenido(listaArriboPublicaciones);
						var evePub:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.LISTADO_ARRIBO_PUBLICACIONES);
						evePub.idEmpleado = DatosGlobales.getInstance()._usuario.clave;
						evePub.publicaciones = true;
						dispatchEvent(evePub);
						dispatchEvent( new Event("recargarPendientes",true));
						break;
					}
					case "GENERAR ACUSE DE RECIBO":
					{
						if (!generarAcuse)
							generarAcuse = new VistaGenerarAcuse();
						plantilla.agregarContenido(generarAcuse);
						
						var evtGA:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DESPACHO_COMPLETAS_GENERAR_ACUSE);
						evtGA.usuario =DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(evtGA);
						dispatchEvent( new Event("recargarPendientes",true));
						break;
					}
					case "CARGAR ACUSE DE RECIBO":
					{
						if (!cargarAcuse)
							cargarAcuse = new VistaCargarAcuseRecibido();
						plantilla.agregarContenido(cargarAcuse);
						
						var evtCA:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DESPACHO_COMPLETAS_CARGAR_ACUSE);
						evtCA.usuario =DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(evtCA);
						dispatchEvent( new Event("recargarPendientes",true));
						break;
					}
					default: 
					{
						break;
					}
				}
			}
			
			protected function init(event:FlexEvent):void
			{
				var evento:EventoComprasCompradorPhs = new EventoComprasCompradorPhs(EventoComprasCompradorPhs.CARGAR_NUMERO_PENDIENTES_MENU);
				evento.usuario = DatosGlobales.getInstance()._usuario.usuario;
				evento.rol = "";
				dispatchEvent(evento);
				addEventListener("recargarPendientes",recargarPendientes,false,0,true);
				
			}
			
			public function set recibirIndicadorPendientes(value:ArrayCollection):void
			{
				var indice:int;
				if(plantilla.lstPendientes.lstPendientes != null){
					indice = plantilla.lstPendientes.lstPendientes.selectedIndex;
				}
				var listaAux:ArrayCollection = ObjectUtil.copy(listaPendiente) as ArrayCollection;
				for(var x:int = 0; x < listaAux.length;x++){
					for(var y:int = 0; y < value.length;y++){
						if((listaAux[x].pendiente == "Cargar Factura") && (value[y].pendiente == "cargarFactura")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Materiales") && (value[y].pendiente == "listaArriboMaterial")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Publicaciones") && (value[y].pendiente == "listaArriboPublic")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Orden de Despacho Materiales") && (value[y].pendiente == "ordenDespachoMaterial")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Orden de Despacho Publicaciones") && (value[y].pendiente == "ordenDespachoPublic")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Generar Acuse de Recibo") && (value[y].pendiente == "acuseRecibo")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Cargar Acuse de Recibo") && (value[y].pendiente == "cargarAcuseRecibo")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
					}	
				}
				listaPendiente = listaAux;
				plantilla.listaPendientes = listaPendiente;
					plantilla.lstPendientes.lstPendientes.selectedIndex = indice;
			}
			
			private function recargarPendientes(evt:Event):void
			{
				var event:EventoComprasCompradorPhs = new EventoComprasCompradorPhs(EventoComprasCompradorPhs.CARGAR_NUMERO_PENDIENTES_MENU);
				event.usuario = DatosGlobales.getInstance()._usuario.usuario;
				event.rol = "";
				dispatchEvent(event);
			}
		]]>
	</fx:Script>
	
	<plantilla:PlantillaCompradorPhs id="plantilla" width="100%" height="100%" listaPendientes="{listaPendiente}" pendienteSeleccionadoPlantilla="plantillagestorcompras1_pendienteSeleccionadoHandler(event)" />

</s:Group>
