<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:label="skins.skin.label.*"
		 xmlns:comun="mx.com.proquifa.proquifanet.compradorPhs.vistas.vista.componentesComun.*"
		 xmlns:boton="mx.com.proquifa.proquifanet.compradorPhs.vistas.vista.itemRenderes.*" paddingBottom="30" paddingTop="30" paddingLeft="40" paddingRight="40" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:otros="skins.otros.*"  xmlns:pqNet="skins.skin.datagrid.pqNet.*" xmlns:tabla="skins.botones.tabla.*" 
		 xmlns:salir="skins.botones.salir.*" xmlns:botonflecha="skins.plantillaproquifa.menu.botonflecha.*"  xmlns:flecharegresa="skins.botones.flecharegresa.*" xmlns:pqNet1="skins.botones.pqNet.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.DispatcherEvent;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.compradorPhs.vistas.eventos.EventoGeneralCompradorPhs;
			import mx.com.proquifa.proquifanet.compradorPhs.vistas.eventos.EventoProveedoresConPAC;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.alertPqNet.EventoAlertaPqNet;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaConfirmacion;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.RechazoPartida;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoIconosEtiquetas;
			
			import spark.components.CheckBox;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;

			private var _partidaConfirmacion:PartidaConfirmacion
			[Bindable]
			private var _listaPartidas:ArrayCollection = null;
			[Bindable]
			private var _proveedorSeleccionado:Object;
			private var _partidasTotales:int;
			private var _partidasFT:int;
			private var _partidasET:int;
			private var _medioRequisicion:String;
			private var _esVaciaRequisiciones:Boolean;
			private var _esVaciaPartidasPorRequisitar:Boolean;
			private var _viendeDeEnvioPartidas:Boolean;
			private var _rechazado:Boolean;
			[Bindable]
			public var _datosBarraBoton:ArrayCollection = new ArrayCollection([{label:"Sin Requicision", icono:"sinRequisicion", bandera:false},
																			   {label:"Con Requicision",icono:"conRequisicion", bandera:false},
																			   {label:"Disponibilidad",icono:"graficaPie", bandera:false}      
																			  ]);
			/**
			 * Funcion privada  
			 */ 
			private function seleccionaBoton(event:IndexChangeEvent):void{
				if(event.currentTarget.selectedIndex == 0){
					this.stackPlanificacion.selectedIndex = 0;
				} else if(event.currentTarget.selectedIndex == 1){
					this.stackPlanificacion.selectedIndex = 1;
					this.contenedorPartidasConRequisicionAConfirmar.iniciaModoPartidasPorConfirmar( _proveedorSeleccionado as PartidaConfirmacion, _rechazado );
				}else if(event.currentTarget.selectedIndex == 2){
					this.stackPlanificacion.selectedIndex = 2;
					this.contenedorGraficas.iniciaComponente( this._proveedorSeleccionado, this._rechazado );
				}
			}
			
			/**
			 * Funcion que dispara el boton
			 */ 
			/* private function regresaAVisionGeneral( vieneDe:String ):void{
				var evento:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs( EventoGeneralCompradorPhs.REGRESA_TABLA_PENDIENTES_PROVEEDORES_CON_PAC );
			} */
			/**
			 * Funcion publica q incia desde el componentePadre ViewStackGeneral.mxml  
			 */ 
			public function iniciaComponenteProvConPAC( opcionSeleccionada:Object,$dato:Boolean ):void{
				_rechazado = $dato;
				if(_rechazado == false){
					this.lblProveedoresPAC.text = "[PROVEEDORES CON PAC]";
					(this.dtgPAC.columns[6] as DataGridColumn).headerText = "Solicitó";
					(this.dtgPAC.columns[7] as DataGridColumn).width = 0;
					(this.dtgPAC.columns[7] as DataGridColumn).visible = false;
					(this.dtgPAC.columns[8] as DataGridColumn).width = 200;
					(this.dtgPAC.columns[8] as DataGridColumn).visible = true;
					(this.dtgPAC.columns[9] as DataGridColumn).width = 0;
					(this.dtgPAC.columns[9] as DataGridColumn).visible = false;
					(this.dtgPAC.columns[10] as DataGridColumn).width = 0;
					(this.dtgPAC.columns[10] as DataGridColumn).visible = false; 
				//	this.dtgPAC.porcentajesColumnasPq= new Array( [ 8,8,8,8,8,8,8,8,8,8,8,7,7 ] ); 

				}else{
					this.lblProveedoresPAC.text = "[PROVEEDORES CON PAC RECHAZADOS]";
					(this.dtgPAC.columns[6] as DataGridColumn).headerText = "Rechazó";
					(this.dtgPAC.columns[7] as DataGridColumn).width = 110;
					(this.dtgPAC.columns[7] as DataGridColumn).visible = true;
					(this.dtgPAC.columns[8] as DataGridColumn).width = 0;
					(this.dtgPAC.columns[8] as DataGridColumn).visible = false;
					(this.dtgPAC.columns[9] as DataGridColumn).width = 110;
					(this.dtgPAC.columns[9] as DataGridColumn).visible = true;
					(this.dtgPAC.columns[10] as DataGridColumn).width = 110;
					(this.dtgPAC.columns[10] as DataGridColumn).visible = true;
				}
				this._proveedorSeleccionado = new PartidaConfirmacion();
				this._proveedorSeleccionado = opcionSeleccionada;
				consultaPAC( $dato );
			}
			public function set rectificaPendientes(dato:Boolean):void{
				if( !dato){
					return;
				}
				_viendeDeEnvioPartidas = true;
				consultaPAC( _rechazado );
				_esVaciaRequisiciones = false;
				_esVaciaPartidasPorRequisitar = false;
				
			}
			/**
			 * funcion privada q dispara un evento y va a consultar la lista de partidas a confirmar del proveedor, 
			 * el evento es cachado por el mapaProvedoressConPac.mxml
			 */ 
			public function consultaPAC(dato:Boolean):void{
				var evento:EventoProveedoresConPAC = new EventoProveedoresConPAC( EventoProveedoresConPAC.CONSULTAR_PAC_DE_PROVEEDOR );
				evento.rechazado = dato;
				evento.proveedor = this._proveedorSeleccionado.idProveedor;
				evento.tipo = this._proveedorSeleccionado.tipoProveedor;
				dispatchEvent( evento );
				//Manda a llamar las partidas a confirmar con requisicion, con esto se establece una bandera para la parte superior 
				//de la botonera y se sabe si hay pendientes por trabajar
				var eventoP:EventoProveedoresConPAC = new EventoProveedoresConPAC( EventoProveedoresConPAC.CONSULTA_REQUISICIONES_POR_CONFIRMAR );
				eventoP.proveedor = _proveedorSeleccionado.idProveedor;
				eventoP.tipo = _proveedorSeleccionado.tipoProveedor;
				eventoP.rechazado = dato;
				dispatchEvent( eventoP );
			}
			/**
			 * Funcion Publica que recibe del MapaProveedoresConPac.mxml las lista de requisiciones por confirmar lista(objetos tipo requisicionPhs.as)
			 */
			public function set recibeRequisicionesPorConfirmar( datos:ArrayCollection ):void{
				if( datos == null ){
					return;
					_datosBarraBoton[1].bandera = false;
					this._datosBarraBoton.refresh();
				}
				datos.length > 0 ? _datosBarraBoton[1].bandera = true : _datosBarraBoton[1].bandera = false;
				datos.length == 0 ? _esVaciaRequisiciones = true : _esVaciaRequisiciones = false;
				determinaPendientesExistentes();
				this._datosBarraBoton.refresh();
			}
			/**
			 * 
			 */ 
			private function determinaPendientesExistentes():void{
				if(_viendeDeEnvioPartidas){
					if( _esVaciaPartidasPorRequisitar && _esVaciaRequisiciones){
						_viendeDeEnvioPartidas = false;
						regresaAMenu();
					}
				}
			}
			
			/**
			 * funcion publica que recibe del mapa MapaProveedoressConPac.mxml la lista de partidas 
			 */ 
			public function set recibeListaPartidasAConfirmar( lista:ArrayCollection ):void{
				if( lista == null ){
					return;
					_datosBarraBoton[0].bandera = false;
					this._datosBarraBoton.refresh();
				}
				lista.length > 0 ? _datosBarraBoton[0].bandera = true : _datosBarraBoton[0].bandera = false;
				lista.length == 0 ? _esVaciaPartidasPorRequisitar = true : _esVaciaPartidasPorRequisitar = false;
				determinaPendientesExistentes();
				this._datosBarraBoton.refresh();
				this._partidasTotales = 0;
				this._partidasET = 0;
				this._partidasFT = 0;
				this._listaPartidas = new ArrayCollection();
				var estadoTiempo:String = "";
				for( var i:int = 0; i < lista.length; i++ ){
					lista[i].numFila = i + 1;
					_partidasTotales = _partidasTotales + lista[i].noPiezas;
					estadoTiempo = "";
					estadoTiempo = UtilsFecha.determinarFechaEnTiempoDeUnDiaAOtro( lista[i].fechaInicio );
					lista[i].estatus = false;
					if( estadoTiempo == "enTiempo" ){
						this._partidasET = this._partidasET + lista[i].noPiezas;
						lista[i].situacionDisponibilidad = "ET";
					}else{
						this._partidasFT = this._partidasFT + lista[i].noPiezas;
						lista[i].situacionDisponibilidad = "FT";
					}
				}
				this._listaPartidas = lista;
				this.lblTotalPartidas.text = _partidasTotales + ' Partidas  ·  ' + _partidasET  + ' ET  ·  ' + _partidasFT + ' FT' ;
				(this.dtgPAC.columns[3] as DataGridColumn).width = (this.dtgPAC.width * 0.3);
				this.btnRequisitar.enabled = false;
				
			}
			/**
			 * Funcion para regresar a la zona del Menu y Planificaion
			 */ 
			private function regresaAMenu():void{
				var eventoR:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs( EventoGeneralCompradorPhs.UTILIZA_OPCION_MENU );
				_rechazado ? eventoR.idOpcionSeleccionada = "provConPacRechazo": eventoR.idOpcionSeleccionada = "provConPAC";
				dispatchEvent( eventoR );
				var evento:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs( EventoGeneralCompradorPhs.SELECCIONA_OPCION );
				evento.idOpcionSeleccionada = "espacioTablasYGrafGestorProdPHS";
				dispatchEvent( evento );
				this.stackPlanificacion.selectedIndex = 0;
				this.btnBarra.selectedIndex = 0;
			}
			/**
			 * Funcion Privada que llena todos los checks de un jalon
			 */ 
			private function llenaChecks():void{
				for( var i:int = 0; i < _listaPartidas.length; i++ ){
					_listaPartidas[i].checkSeleccionado = true;
					_listaPartidas.refresh();
				}
				if( this._listaPartidas != null && this._listaPartidas.length > 0 ){
					this.btnRequisitar.enabled = true;
				}else{
					this.btnRequisitar.enabled = false;
				}
			}
			/**
			 * funcion que dispara el evento para mandar a llamar el popUpTipoRequisicion para elegir el medio por el cual sera hecha la requisicion
			 * Este evento lo cahcha el padre ViewStackGeneral.mxml y se envian los argumentos necesarios
			 */ 
			private function popUpAdvertencia():void{
				var evento:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs( EventoGeneralCompradorPhs.SELECCIONA_OPCION );
				evento.idOpcionSeleccionada = "popUpSeleccionaTipoRequisicion";
				dispatchEvent( evento );
			}
			/**
			 * funcion publica que recibe del MapaPopUp.mxml la opcion elegida por el usuario del popUpTipoRquisicion.mxml
			 * y manda a llamar la funcion generaNuevaLista(); para guardar la nueva reuqisicion. 
			 */ 
			public function set recibeEleccionDelPopUpTipoRequisicion(datos:ArrayCollection):void{
				if(datos == null ){
					return;
				}
					this._medioRequisicion = datos[0];
					generaNuevaLista();
			}
			/**
			 * Funcion privada que genera la nueva lista que formara la nueva Reuqisicion
			 */ 
			private function generaNuevaLista():void{
				var nuevaLista:ArrayCollection = new ArrayCollection();
				for( var i:int = 0; i < _listaPartidas.length; i++){
					if( _listaPartidas[i].checkSeleccionado){
						nuevaLista.addItem( _listaPartidas[i] );
					}
				}
				generarNuevaRequisicion( nuevaLista );
			}
			/**
			 * Funcion privada para generar una nueva requisicion, con el mapa MapaProovedoresConPAC.mxml
			 */ 
			private function generarNuevaRequisicion( nuevaLista:ArrayCollection ):void{
				var evento:EventoProveedoresConPAC = new EventoProveedoresConPAC( EventoProveedoresConPAC.GENERA_NUEVA_REQUISICION );
				evento.listaPartidas = nuevaLista;
				//Telefono e
				evento.medio = this._medioRequisicion ;
				//provedor seleccionado es un objeto de tipo PartidaConfirmacion.as
				evento.proveedor = _proveedorSeleccionado.idProveedor;
				evento.tipo = _proveedorSeleccionado.tipoProveedor;
				dispatchEvent( evento );
			}
			/**
			 * funcion publica q recibe del mapa MapaProveedoresConPac.mxml la confirmacion de la generacion de una nueva Requisicion
			 */ 
			public function set recibeConfirmacionDeNuevaRequisicion(dato:Boolean):void{
				if(dato == false){
					return;
				}
				this._medioRequisicion = "";
				
				/* Alert.show("Se ha generado una nueva Requisición","¡Operación Exitosa!"); */
				alertaSingleton.show(catalogoAlertas.compradorPhs_seHaGeneradoUnaNuevaRequisición,catalogoAlertas.TIT_CONF_operacionExitosa);
				consultaPAC( _rechazado );
			}
			/**
			 * funcion privada que actualiza la lista de las partidas para saber cual ha sido seleccionada y cual no
			 */ 
			public function recibeDataCheck( $evt:Event ):void{
				if( ($evt.currentTarget as CheckBox).selected == true ) {	  
					this.dtgPAC.selectedItem.checkSeleccionado = true;
					this.btnRequisitar.enabled = true; 
				} else if ( ($evt.currentTarget as CheckBox).selected == false ){
					this.dtgPAC.selectedItem.checkSeleccionado = false;
					this.btnRequisitar.enabled = false;
					if( this._listaPartidas.length == 0){
						this.btnRequisitar.enabled = false
					}
				}               
				this._listaPartidas.refresh();   
				for( var l:int = 0; l < this._listaPartidas.length ; l++ ){
					if( this._listaPartidas[l].checkSeleccionado  ){
						this.btnRequisitar.enabled = true;
						return;
					}
				} 
			}
		]]>
	</fx:Script>
	<s:HGroup width="100%">
		<flecharegresa:botonFlechaRegresa click="regresaAMenu()"/>
		<s:Spacer width="100%"/>
		<s:ButtonBar skinClass="skins.botoneras.botoneraGris.skinbotoneraGris" dataProvider="{_datosBarraBoton}" selectedIndex="0" id="btnBarra" change="seleccionaBoton(event)"/>
	</s:HGroup>
	<s:Spacer height="2"/>
	<otros:divisionHueca width="100%"/>
	<s:Spacer height="2"/>
	<mx:ViewStack width="100%" height="100%" id="stackPlanificacion" creationPolicy="all">
		<s:NavigatorContent width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_sinreq36x46}"/>
				<label:labelSubtitulo text="PARTIDAS SIN REQUISICIÓN"/>
				<s:Spacer width="100%"/>
				<label:labelSubtitulo fontSize="20" fontWeight="bold"  id="lblProveedoresPAC"/>
			</s:HGroup>
			<s:Spacer height="2"/>
			<otros:divisionHueca width="100%"/>
			<s:Spacer height="2"/>
			<s:HGroup width="100%">
				<label:labelSubtitulo text="{this._proveedorSeleccionado.nombreProveedor + ' · '}" fontSize="18" fontWeight="bold"/>
				<label:labelSubtitulo text="{this._proveedorSeleccionado.tipoProveedor}" fontSize="18" fontWeight="bold" color="#666666" />
				<s:Spacer width="100%"/>
				<label:labelSubtitulo fontSize="18" fontWeight="bold" id="lblTotalPartidas"/>
			</s:HGroup>
			<s:Spacer width="10"/>
			<otros:divisionGruesa width="100%"/>
			<s:Spacer width="10"/>
			<pqNet:dataGridPqNet  width="100%" height="100%" dataProvider="{this._listaPartidas}" wordWrap="true"  id="dtgPAC">
				<!--itemClick="itemClickEvent(event)"-->
				<pqNet:columns>
					<mx:DataGridColumn headerText=" " dataField="checkSeleccionado" width="70" > <!--0-->
						<mx:itemRenderer >
							<fx:Component >
								<s:MXItemRenderer horizontalCenter="0" width="100%" >
										<s:CheckBox  id="chkGrid" change="{outerDocument.recibeDataCheck( event )}" horizontalCenter="0" verticalCenter="0" selected="{data.checkSeleccionado}"/>
								</s:MXItemRenderer>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="#" dataField="numFila" width="70"/>   <!--1-->
					<mx:DataGridColumn headerText="Cotización" dataField="folioCotizacion" width="150"/>  <!--2-->
					<mx:DataGridColumn headerText="Concepto" dataField="descripcionProducto"/>  <!--3-->
					<mx:DataGridColumn headerText=" "  dataField="noPiezas" width="60">  <!--4-->
						<mx:itemRenderer>
							<fx:Component>
								<s:MXItemRenderer autoDrawBackground="false">
									<s:states>
										<s:State name="normal"/>
										<s:State name="hovered"/>
										<s:State name="selected"/>
									</s:states>
									<mx:Label fontSize="15" text="{data.noPiezas + ' Pzas.'}" width="100%" textAlign="left" fontStyle="normal" fontFamily="Helvetica" color.selected="white"/>
								</s:MXItemRenderer>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Tipo" dataField="tipoProducto" width="150"/>  <!--5-->
					<mx:DataGridColumn headerText="Solicitó" dataField="solicitoESAC" width="150"/>  <!--6-->
					<mx:DataGridColumn headerText="Total Rechazos" width="110" dataField="numRechazos"/>   <!--7-->
					<mx:DataGridColumn headerText="En espera desde" dataField="fechaInicioFormato" width="200"/>  <!--8-->
					<mx:DataGridColumn headerText="Fecha Origen" dataField="fechaInicioFormato" width="110" /> <!--9-->
					<mx:DataGridColumn headerText="En espera desde" width="110" dataField="formatoFechaEnEspera"/> <!--10 fecha En Espera Desde (para los rechzados) -->
					<mx:DataGridColumn headerText="Situación" dataField="situacionDisponibilidad" width="180">
						<mx:itemRenderer>
							<fx:Component>
								<s:MXItemRenderer>
								<s:Label  width="100%" textAlign="center" fontStyle="normal" fontSize="15" id="lbl" text="{et}" >
									<fx:Script >
										<![CDATA[
											import mx.states.SetStyle;
											[Bindable]
											private var et:String;
											override public function set data(value:Object):void{
												super.data = value;
												determinaColor();
											}
											public function determinaColor():void{
												et = "";
												if( this.data.situacionDisponibilidad == "ET" ){
													this.setStyle("fontFamily","Helvetica");
													this.setStyle("color","0x70a047");
													et = "ET";	
												}else{
													this.setStyle("fontFamily","Helvetica");
													this.setStyle("color","0xd10c0c")
													et = "FT";
												}
											}
										]]>
									</fx:Script>
								</s:Label> 
								</s:MXItemRenderer>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</pqNet:columns>
			</pqNet:dataGridPqNet>
			<otros:divisionGruesa width="100%"/>
			<s:Spacer height="2"/>
			<mx:HBox width="100%">
				<pqNet1:botonPqNetLargo label="Todo" click="llenaChecks()" icono="todo" />
				<s:Spacer width="100%"/>
				<pqNet1:botonPqNetLargo label="Requisitar" id="btnRequisitar" enabled="false" click="popUpAdvertencia()" icono="requisitar"/>
			</mx:HBox>
		</s:NavigatorContent>
		<!--este contenedor se le insertara a vista de planificacion ( requisicionesAConfirmar.mxml)-->
		<s:NavigatorContent width="100%" height="100%">
			<comun:RequisicionesAConfirmar id="contenedorPartidasConRequisicionAConfirmar"/>
		</s:NavigatorContent>
		<!--este contenedor contendra las graficas de la planificacion-->
		<s:NavigatorContent  width="100%" height="100%">
			<comun:GraficasGlobalesCompPhs id="contenedorGraficas"/>
		</s:NavigatorContent>
	</mx:ViewStack>
</s:VGroup>