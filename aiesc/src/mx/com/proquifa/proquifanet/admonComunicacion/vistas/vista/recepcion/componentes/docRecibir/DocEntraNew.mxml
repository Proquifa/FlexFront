<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:combo="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.*"
		  xmlns:botonNegroCuadrado="skins.botones.botonNegroCuadrado.*"
		  xmlns:sinicono="skins.botones.largocolor.sinicono.*" 
		  xmlns:btnAmparar="skins.botones.colores.amparar.*"
		  xmlns:numericStepper="skins.skin.numericStepper.*"
		  xmlns:btnOrigen="skins.botones.colores.origen.*"
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:btnVer="skins.botones.colores.ver.*"
		  xmlns:pqNet="skins.skin.datagrid.pqNet.*" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:dateField="skins.skin.dateField.*" 
		  xmlns:textinput="skins.skin.textinput.*" 
		  xmlns:btnLargo="skins.botones.largo.*"
		  xmlns:graficas="skins.skin.graficas.*"
		  xmlns:chekbox="skins.skin.chekbox.*" 
		  xmlns:pqNet1="skins.botones.pqNet.*" 
		  xmlns:shaders="skins.skin.shaders.*" 
		  xmlns:label="skins.skin.label.*" 
		  xmlns:otros="skins.otros.*" 
		  width="100%" height="100%" 
		  initialize="init()" 
		  horizontalAlign="center"
		  >
	
	<fx:Script >
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.admonComunicacion.vistas.eventos.EventoPendientesPorEnviar;
			import mx.com.proquifa.proquifanet.admonComunicacion.vistas.eventos.EventoPopUpContactos;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoGenerico;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoParaCatalogoService;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.CatalogoItem;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.DocumentoRecibido;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.events.ValidationResultEvent;
			import mx.formatters.DateFormatter;
			import mx.utils.ObjectUtil;
			import mx.validators.NumberValidator;
			import mx.validators.StringValidator;
			
			import skins.catalogos.catalogoAlertas;
			
			//private var contacto:BusquedaContactos = null;
			private var date:Date = new Date();
			private var usuarioAtendioParaMensaje:String;
			private var validarContacto:StringValidator = new StringValidator();
			private var validarAtendio:NumberValidator = new NumberValidator();
			private var ValidarDestino:NumberValidator = new NumberValidator();
			private var validarAsunto:StringValidator = new StringValidator();	 
			private var pdfByteArray:ByteArray = null;
			private var formatter:DateFormatter = new DateFormatter(); 
			private var quienIngreso:String;
			private var _generarPendiente:Boolean = false;
			
			private var _rutaDoc:String;
			
			[Bindable]
			private var guardarFecha:String;
			[Bindable]
			private var ComboMedio:ArrayCollection = new ArrayCollection([{id:0, medio:"--NINGUNO--"},
				{id:1, medio:"Mail"},
				{id:2, medio:"Fax"},
				{id:3, medio:"Mensajero Interno"},
				{id:4, medio:"Mensajero Externo"},
				{id:5, medio:"EV"},
				{id:6, medio:"Cliente"}]);
			[Bindable]
			private var ComboTipo:ArrayCollection = new ArrayCollection([{id:0, tipo:"--NINGUNO--"},
				{id:1, tipo:"Otros"},
				{id:2, tipo:"Pago"},
				{id:3, tipo:"Pedido"},
				{id:4, tipo:"Requisición"}]);
			
			private var validardireccionArchivo:StringValidator = new StringValidator();
			private var validarOrigen:StringValidator = new StringValidator();
			private var validarempresa:StringValidator = new StringValidator();
			private var ValidarFecha:StringValidator = new StringValidator();
			private var validarMedio:NumberValidator = new NumberValidator();
			private var validarTipo:NumberValidator = new NumberValidator();
			private var validarMonto:NumberValidator = new NumberValidator();
			private var fechaDTP:Date = new Date();
			private var _valorAnteriorReferencia:String;
			private var habilitadoCliente:Boolean;
			private var _primera:Boolean = false;
			
			[Bindable]
			public var file:File = new File();
			[Bindable]		 
			public var _empleados:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _usuarios:ArrayCollection;
			[Bindable]
			public var folioDocumento:String;	
			[Bindable]
			private var idEmpresa:Number;
			[Bindable]
			private var documentoOriginal:String;
			[Bindable]
			private var manejo:String;	
			[Bindable]
			private var fechaOrigenObtenidaDeConsultaBD:Date;
			[Bindable]
			private var idContacto:Number;
			[Bindable]
			public var Usuario:String = new String;
			[Bindable]
			private var _contactoSeleccionadoComponenteContacto:Contacto = new Contacto();
			
			public var _canalizado:Boolean = false;
			
			public function init():void{
				//inicializando
				folioDocumento = new String();
				date = new Date();
				idEmpresa = new Number();
				documentoOriginal = new String();
				quienIngreso = new String();
				
				//Hora del sistema
				obtenerFechas();
				
				//validar documento
				validardireccionArchivo.source = this.lblAmpa;
				validardireccionArchivo.property = "text";
				validardireccionArchivo.requiredFieldError = "Debe seleccionar un archivo";
				
				//validar empresa
				validarempresa.source = this.lblEmpresa;
				validarempresa.property = "text";
				validarempresa.requiredFieldError = "Debe seleccionar una empresa";  
				
				//validar medio
				validarMedio.source = this.cmbMedio;
				validarMedio.property = "selectedIndex";
				validarMedio.minValue = 1;
				validarMedio.lowerThanMinError = "Debe seleccionar un medio";
				
				//validar tipo
				validarTipo.source = this.cmbTipo;
				validarTipo.property = "selectedIndex";
				validarTipo.minValue = 1;
				validarTipo.lowerThanMinError = "Debe seleccionar un tipo";
				
				//validar destino
				ValidarDestino.source = this.cmbEmpleados;
				ValidarDestino.property = "selectedIndex";
				ValidarDestino.minValue = 1;
				ValidarDestino.lowerThanMinError = "Debe seleccionar un destino";
				
				//validar fecha
				ValidarFecha.source = this.dtpFOrigenDoc;
				ValidarFecha.property = "text";
				ValidarFecha.requiredFieldError = "Debe seleccionar una fecha"; 
				
				//validar monto
				validarMonto.source = this.txtMontoDls;
				validarMonto.property = "text";
				validarMonto.minValue = 0.01;
				validarMonto.lowerThanMinError = "Debe ser mayor a 0";
				
				this.dtpFOrigenDoc.selectedDate = null;
				
				var evento:EventoPendientesPorEnviar = null;			
				evento = new EventoPendientesPorEnviar(EventoPendientesPorEnviar.OBTNER_USUARIOS);
				evento.tipo = "esac";	
				evento.valorAdicional = "--NINGUNO--";		
				dispatchEvent( evento );
				
				var evento2:EventoPendientesPorEnviar = new EventoPendientesPorEnviar( EventoPendientesPorEnviar.OBTENER_EMPLEADOS_DESTINOS_DOCUMENTOS );
				evento2.valorAdicional = "--NINGUNO--";
				dispatchEvent( evento2 );
				obtenerFechas();
				limpiarCampos();
				
				cmbEmpleados.dataProvider = _empleados;
				cmbMedio.dataProvider = ComboMedio;
				cmbTipo.dataProvider = ComboTipo; 
			}
			
			public function obtenerFechas():void
			{
				this.horaSelect.value = date.getHours();
				this.minuteSelect.value = date.getMinutes();  
			}
			
			private function consultaContactos():void
				{
					
				var evt:EventoPopUpContactos = new EventoPopUpContactos(EventoPopUpContactos.MUESTRA_POP_UP);
				evt.vieneDE_PopUp = 'DocEntreNew';
				evt.cmbTipo = this.cmbTipo.selectedItem;
				evt.canalizado = _canalizado;
				dispatchEvent( evt );
				if(!_primera)
				{
					//pedirContactosServicio();
					_primera = true;
				}
				
				if (_canalizado)
					_canalizado = false;
			}
			
			/* 	private function pedirContactosServicio():void
			{
			var envi:EventoPopUpContactos = new EventoPopUpContactos(EventoPopUpContactos.OBTENER_CONTACTOS_GLOBALES);
			envi.busca = "";
			envi.tipoBusca = 1;
			envi.buscarEn = 2;
			dispatchEvent( envi );
			} */
			/**
			 * Recibe la inyeccion q trae todos al Vendedor buscado por la empresa
			 */
			public function set recibeVendedorDeLaEmpresa( datos:CatalogoItem ):void
			{
				if(datos.llave.toString() == "NaN")
					return;
				
				this.cmbEmpleados.selectedIndex = Util.indiceSeleccionado( this.cmbEmpleados.dataProvider as ArrayCollection,  datos.llave );
			}
			
			private function validaReferencia():void
			{
				if(this.txtReferencia.text != "") 
					_valorAnteriorReferencia = this.txtReferencia.text;
				
				this.boxMontoDls.visible = false;
				vgCupon.visible = vgCupon.includeInLayout = false;
				this.boxMontoDls.includeInLayout = false;
				chkHabilitaReferencia.includeInLayout = false;
				chkHabilitaReferencia.visible = false;
				chkHabilitaReferencia.selected =false;
				if( this.cmbTipo.selectedItem.tipo == "Pago" || this.cmbTipo.selectedItem.tipo == "Pedido" )
				{
					chkHabilitaReferencia.includeInLayout = true;
					this.boxMontoDls.visible = true;
					this.boxMontoDls.includeInLayout = true;
					this.txtReferencia.enabled = true;
					this.txtReferencia.text = _valorAnteriorReferencia;
					chkHabilitaReferencia.visible = true;
				}else if(this.cmbTipo.selectedItem.tipo != "Requisición" && this.cmbTipo.selectedItem.tipo != "Otros"){
					this.txtReferencia.enabled = true;
					this.txtReferencia.text = _valorAnteriorReferencia;
				}
				else 
				{
					this.txtReferencia.text = "";
					this.txtReferencia.enabled = false;
				}
				cuponDescuento();
				this.invalidateDisplayList();
				
			}
			
			private function cuponDescuento():void{
				currentState = "normal";
				if (this.cmbTipo.selectedItem.tipo == "Requisición" ){
					vgCupon.visible = vgCupon.includeInLayout = true;
					currentState = "campana";
				}
			}
			
			/**
			 *Metodo que recibe a los Empleados del mapa
			 */
			public function set empleadosParaCombo(datos:ArrayCollection):void
			{
				if(datos == null)
					return;
				
				this._empleados = datos;
			}
			
			/**
			 * Metodo que recibe a los usarios del mapa
			 */
			public function set usuariosParaCombo(datos:ArrayCollection):void{
				if(datos == null)
					return;
				
				this._usuarios = datos; 
			}
			private function mostrarDocumento(ruta:String):void
			{
				var request:URLRequest = new URLRequest("file://"+  encodeURI(ruta));
				navigateToURL(request);
			}
			
			public function browseFileSystem():void 
			{
				file = new File();
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				file.addEventListener(Event.COMPLETE,completeHandler);
				
				var docFilter:FileFilter = new FileFilter("Documents", "*.pdf");
				file.browse([docFilter]); 
			}
			
			private function selectHandler(event:Event):void 
			{
				var file:FileReference = FileReference(event.target);
				file.load();
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void 
			{
				trace("ioErrorHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void 
			{
				var file:FileReference = FileReference(event.target);
				trace("progressHandler: name=" + file.name + "bytesLoaded = " + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			
			private function completeHandler(event:Event):void 
			{
				trace("completeHandler: " + event);
				this.pdfByteArray = this.file.data;
				this._rutaDoc = file.nativePath;
				this.lblAmpa.text = file.nativePath;
				mostrarDocumento(this._rutaDoc);
				ajustaBotones();
			}
			
			private function ajustaBotones():void
			{
				this.btnVerAmparo.visible = btnVerAmparo.includeInLayout = true;
			}
			
			private function saveChange():void
			{
				guardarFecha = new String();
				if(this.btnGuarMod.label == "Canalizar")
				{
					if(validarIfo() && this.dtpFOrigenDoc.selectedDate != null && cmbEmpleados.selectedIndex != 0)
					{
						guardarFecha = this.doubleDigit();
						var evento:EventoPendientesPorEnviar = new EventoPendientesPorEnviar(EventoPendientesPorEnviar.GUARDAR_DOCUMENTACION);
						var documento:DocumentoRecibido = new DocumentoRecibido(); 
						documento.partida = 0;
						documento.manejo = "Entrante";	  	  	  		
						documento.origen = "Cliente";
						documento.nombreEmpresa = _contactoSeleccionadoComponenteContacto.empresa; //contacto.empresaSelect; //lblEmpresa.text ;
						documento.nombreContacto = _contactoSeleccionadoComponenteContacto.nombre;
						documento.emailContacto = _contactoSeleccionadoComponenteContacto.EMail;
						documento.idContacto =  _contactoSeleccionadoComponenteContacto.idContacto; //contacto.idContactoSelect; //this.idContacto;
						documento.RPor =  this.cmbEmpleados.selectedItem.valor;
						documento.medio = this.cmbMedio.selectedItem.medio;
						documento.docto = this.cmbTipo.selectedItem.tipo;
						documento.numero = this.txtReferencia.text;	    		  	  	  	
						documento.observaciones = ""; //this.txtComentarios.text;
						documento.ingreso = DatosGlobales.getInstance()._usuario.usuario;
						documento.FOrigen = 0;
						
						documento.campana = txtCampana.text;
						
						fechaDTP = dtpFOrigenDoc.selectedDate;   		  	  	  	
						var textoHoras:String = new String;
						var minutosTexto:String = new String;
						
						if(horaSelect.value < 10 )
							textoHoras = "0" + horaSelect.value
						else
							textoHoras = horaSelect.value.toString();
						
						if(minuteSelect.value < 10 )
							minutosTexto = "0" + minuteSelect.value;
						else
							minutosTexto = minuteSelect.value.toString();
						
						documento.existeReferencia = this.chkHabilitaReferencia.selected;
						fechaDTP.hours = horaSelect.value; //parseInt( textoHoras );
						fechaDTP.minutes = minuteSelect.value; //parseInt( minutosTexto );
						documento.fechaOrigen = fechaDTP;
						documento.tipo = "Pedido por tramitar";
						documento.montoDocumento = 0;
						
						if( this.cmbTipo.selectedItem.tipo == "Pago" || this.cmbTipo.selectedItem.tipo == "Pedido" )
						{
							if(this.txtMontoDls.text == "")
								documento.montoDocumento = 0;
							else
								documento.montoDocumento = parseFloat( this.txtMontoDls.text );
						}
						evento.documentoRecibido = documento;
						dispatchEvent( evento );
						_canalizado = true;
						this.limpiarCampos();
					}
					else
					{
						alertaSingleton.show( catalogoAlertas.ADV_informacionIncompleta, catalogoAlertas.TIT_ADV_atencion, "");
					}
				}
			}
			
			public function limpiarCampos():void
			{
				this.cmbMedio.selectedIndex = 0;
				this.cmbTipo.selectedIndex = 0;
				this.cmbEmpleados.selectedIndex = 0;
				this.txtReferencia.text = "";
				this.lblAmpa.text = "";
				this.dtpFOrigenDoc.text = "";
				this.lblAmpa.text = "";
				this._rutaDoc = "";
				this.boxMontoDls.visible= false;
				this.boxMontoDls.includeInLayout= false;
				this.txtMontoDls.text = '0.00';
				this.btnVerAmparo.visible = btnVerAmparo.includeInLayout = false;
				this.chkHabilitaReferencia.selected = false;
				this.chkHabilitaReferencia.visible = this.chkHabilitaReferencia.includeInLayout = false;
				lblEmpresa.text = "Pendiente...";
				lblNombre.text = "";
				vgCupon.visible = vgCupon.includeInLayout = false;
				txtCampana.text = "";
				chkHabilitaCampana.selected = false;
				txtCampana.enabled = false;
			}
			
			private function doubleDigit():String
			{
				var numHora:String;
				var numMinuto:String;
				formatter.formatString = "YYYYMMDD"; 
				if(this.horaSelect.value < 10)
				{
					numHora = "0" + String(this.horaSelect.value);
				}
				else
				{
					numHora = String(this.horaSelect.value);
				}
				if(this.minuteSelect.value < 10)
				{
					numMinuto = "0" + String(this.minuteSelect.value);
				}
				else
				{
					numMinuto = String(this.minuteSelect.value);
				}		   	 
				return formatter.format(this.dtpFOrigenDoc.text);
			}
			
			public function validarIfo():Boolean 
			{
				var archivo_valido:ValidationResultEvent = this.validardireccionArchivo.validate();
				var empresa_validada:ValidationResultEvent = this.validarempresa.validate();
				var medio_validado:ValidationResultEvent = this.validarMedio.validate();
				var tipo_validado:ValidationResultEvent = this.validarTipo.validate(); 
				var destino_validado:ValidationResultEvent = this.ValidarDestino.validate();
				var fecha_validado:ValidationResultEvent = this.ValidarFecha.validate();	
				var validacionCompleta:Boolean = new Boolean();
				
				if (_contactoSeleccionadoComponenteContacto.vieneDE_PopUp == "contactoNuevoCliente" || _contactoSeleccionadoComponenteContacto.estadoCliente == false )
				{
					if (archivo_valido.type == ValidationResultEvent.VALID && 
						medio_validado.type == ValidationResultEvent.VALID && 
						tipo_validado.type == ValidationResultEvent.VALID && 
						empresa_validada.type == ValidationResultEvent.VALID && 
						fecha_validado.type == ValidationResultEvent.VALID )
					{
						if( this.cmbTipo.selectedItem.tipo == "Pago" || this.cmbTipo.selectedItem.tipo == "Pedido" )
						{
							if(Number(txtMontoDls.text) <= 0)
							{
								return validacionCompleta = false;
							}
							else
							{
								return validacionCompleta = true;
							}
						}
						else
						{
							return validacionCompleta = true;
						}
					}
					else
					{
						return validacionCompleta = false;
					}
				}
				else
				{
					if (archivo_valido.type == ValidationResultEvent.VALID && 
						medio_validado.type == ValidationResultEvent.VALID && 
						tipo_validado.type == ValidationResultEvent.VALID && 
						destino_validado.type == ValidationResultEvent.VALID && 
						empresa_validada.type == ValidationResultEvent.VALID && 
						fecha_validado.type == ValidationResultEvent.VALID )
					{ // empresa_validada.type == ValidationResultEvent.VALID && origen_validado.type == ValidationResultEvent.VALID &&  
						if( this.cmbTipo.selectedItem.tipo == "Pago" || this.cmbTipo.selectedItem.tipo == "Pedido" )
						{
							if(Number(txtMontoDls.text) <= 0)
							{
								return validacionCompleta = false;
							}
							else
							{
								return validacionCompleta = true;
							}
						}
						else
						{
							return validacionCompleta = true;
						}
					}
					else
					{
						return validacionCompleta = false;
					}
				}
				return validacionCompleta = false;
			}
			
			/**
			 * Recibe la inyeccion q trae todos los datos de la Documento GUARDADA
			 */
			public function set recibeDocumentosGuardadas ( datos:Number ):void
			{
				if(datos.toString() == "NaN" || datos == 0)
					return;
				
				var evento:EventoGenerico = new EventoGenerico( EventoGenerico.SUBIR_DOCUMENTO_PDF );
				evento.bytes = this.pdfByteArray;
				evento.tipoArchivo = "documentorecibido";
				evento.folioDocumento = datos.toString();
				dispatchEvent( evento );
				if(_generarPendiente || this._contactoSeleccionadoComponenteContacto.habilitado == false)
				{
					var pend:EventoPendientesPorEnviar = new EventoPendientesPorEnviar(EventoPendientesPorEnviar.CREAR_PENDIENTE_HABILITAR_CLIENTE);
					pend.folio = datos.toString();
					dispatchEvent(pend);
				}
				alertaSingleton.show( catalogoAlertas.CONF_AIESC_documentoRegistrado+ datos.toString(), catalogoAlertas.TIT_CONF_operacionExitosa);
			}	
			
			/**
			 * Recibe la inyeccion q confirma que el documento se subio correctamente
			 */
			public function set recibeDocumentosGuardadasUP ( datos:Boolean ):void
			{
				if(datos == false)
					return;
				
				if(datos == true)
					this.pdfByteArray = null;					
			}
			
			private function formatRender(value:Number):String 
			{
				var time:String = Number(value).toString();
				if (time.length==1) 
					time = "0" + time;
				
				return time;
			}
			
			public function set pendienteHabilitando(Pen:Boolean):void{
				
			}
			/**
			 * para recibir el contacto seleccionado del mapa MapaPopUp.mxml
			 */
			public function set contactoSeleccionado(conta:Object):void
			{
				this.cmbEmpleados.enabled = true;
				if (this.cmbTipo.enabled == false)
				{ 
					this.cmbTipo.enabled = true;
					this.cmbTipo.selectedIndex = 0;
				}
				if(conta != null)
				{
					if(conta.vieneDE_PopUp != "DocEntreNew")
						return;
						
					else
					{
						this._contactoSeleccionadoComponenteContacto = ObjectUtil.copy( conta) as Contacto;
						
						if (conta.estadoCliente == false && conta.titulo != "nuevoContacto")
						{
							_generarPendiente = true;
							cmbEmpleados.enabled = true;
							cmbTipo.enabled = true;
							cmbTipo.selectedIndex = 4;
							habilitadoCliente = false;
							cuponDescuento();
						}
						else
						{
							habilitadoCliente = true;
							cmbTipo.enabled = true;
							_generarPendiente = false;
						}
						
						lblEmpresa.text = (_contactoSeleccionadoComponenteContacto as Contacto).empresa;
						lblNombre.text = _contactoSeleccionadoComponenteContacto.nombre;//(conta.seleccion[0] as Contacto).empresa; //contacto.empresaSelect;
						var eventoC:EventoParaCatalogoService = null;		   		
						eventoC = new EventoParaCatalogoService( EventoParaCatalogoService.OBTENER_EMPLEADOS_POR_EMPRESA );
						eventoC.nombreEmpresa = (_contactoSeleccionadoComponenteContacto as Contacto).fk02_Cliente == null ? (_contactoSeleccionadoComponenteContacto as Contacto).idEmpresa.toString() : (_contactoSeleccionadoComponenteContacto as Contacto).fk02_Cliente ;//contacto.empresaSelect;
						dispatchEvent( eventoC );
					}
				}
			} 
			
			/**
			 * para recibir el cliente y contacto seleccionado del mapa MapaPopUp.mxml
			 */
			public function set contactoSeleccionadoConCLiente( conta:Contacto ):void
			{
				if(conta != null)
				{
					this._contactoSeleccionadoComponenteContacto = conta;
					lblEmpresa.text = (_contactoSeleccionadoComponenteContacto as Contacto).empresa;
					lblNombre.text = _contactoSeleccionadoComponenteContacto.nombre;//(conta.seleccion[0] as Contacto).empresa; //contacto.empresaSelect;
					cmbEmpleados.selectedIndex = 0;
					this.cmbTipo.selectedIndex = 4; //Nuevo cliente se pone en Requisici√≥n;
					this.cmbEmpleados.enabled = false;
					this.cmbTipo.enabled = false;
					cuponDescuento();
				}
				else
				{
					this.cmbEmpleados.enabled = true;
					this.cmbTipo.enabled = true;
					this.cmbTipo.selectedIndex = 0;
				}
			}
			
			protected function chkHabilitaReferencia_changeHandler(event:Event):void
			{
				if( chkHabilitaReferencia.selected )
				{
					this.txtReferencia.text = "";
					this.txtReferencia.enabled = false;
				}
				else
				{
					this.txtReferencia.enabled = true;
				}
			}
			
			protected function chkHabilitaCampana_changeHandler(event:Event):void
			{
				if( chkHabilitaCampana.selected )
				{
					this.txtCampana.enabled = true;
				}
				else
				{
					this.txtCampana.text = "";
					this.txtCampana.enabled = false;
				}
			}
			
			protected function validar(event:MouseEvent):void
			{
				if (cmbTipo.selectedItem.tipo == "Requisición" && chkHabilitaCampana.selected)
				{
					if (txtCampana.text != "" )
					{
						var valida:EventoPendientesPorEnviar = new EventoPendientesPorEnviar(EventoPendientesPorEnviar.VALIDAR_CUPON);
						valida.tipo = "Farmacopea USP 38-NF-33";
						valida.folio = txtCampana.text;
						dispatchEvent(valida);
					}
					else
					{
						alertaSingleton.show( "El Cupón de descuento es obligatorio", catalogoAlertas.TIT_ADV_atencion, "");
					}
				}
				else
				{
					verificaContacto();
				}
				
			}
			
			public function verificaContacto():void
			{
				if(lblEmpresa.text == "Pendiente...")
				{
					alertaSingleton.show( " Se tiene que seleccionar un contacto de Origen", catalogoAlertas.TIT_ADV_atencion, "");
				}
				else{
					
					saveChange();
				}
				
			}
			
			public function set resultadoCupon(resultado:Number):void
			{
				switch(resultado)
				{
					case 1:
					{
						saveChange();
						break;
					}
					case -1:
					{
						alertaSingleton.show( "El Cupón de descuento no existe", catalogoAlertas.TIT_ADV_atencion, "");
						break;
					}
					case 43:
					{
						alertaSingleton.show( "El Cupón de descuento no existe", catalogoAlertas.TIT_ADV_atencion, "");
						break;
					}
					case 911:
					{
						alertaSingleton.show( "El Cupón de descuento ya se utilizó", catalogoAlertas.TIT_ADV_atencion, "");
						break;
					}
					default:
					{
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="campana" />
	</s:states>
	
	<s:Scroller height="100%" horizontalScrollPolicy="off">
		
		<s:VGroup width="100%" height="100%" >
			
			<s:Group width="450" height="100%" >	
				<s:filters>
					<shaders:sombraBevelFilter direccion="right"/>
					<shaders:sombraBevelFilter direccion="left"/>
				</s:filters>
				<s:Rect height="100%" width="100%">
					<s:fill>
						<s:SolidColor color="0xF3F3F3"/>
					</s:fill>
				</s:Rect>
				
				
				<s:VGroup width="400" height="100%" horizontalAlign="center" paddingLeft="50" paddingBottom="20">
					<label:TituloBankGothic_30 id="lblTitulo" width="100%" paddingBottom="30" paddingTop="25"  text="NUEVO" textAlign="center"/>
					<otros:divisionHueca width="100%"/>
					<s:VGroup width="100%" paddingTop="4" paddingBottom="4">
						<s:HGroup horizontalCenter="0" width="100%" paddingBottom="4">
							<btnAmparar:botonAmparar id="btnAmparo" click="this.browseFileSystem()" width="100%"/>
							<btnVer:botonVer id="btnVerAmparo" click="mostrarDocumento(this._rutaDoc)" visible="false" includeInLayout="false" width="100"/>
						</s:HGroup>
						<s:Label id="lblAmpa" visible="false" includeInLayout="false" />
						<btnOrigen:botonOrigen click="consultaContactos()" width="100%"/>
					</s:VGroup>
					<otros:divisionHueca width="100%"/>
					<s:VGroup width="100%" height="130" horizontalAlign="center" verticalAlign="middle">
						<label:Titulo_19_pTop10 id="lblEmpresa" width="100%" maxDisplayedLines="2" textAlign="center" /> 
						<label:Titulo_19_pTop10 id="lblNombre" paddingTop="0" width="100%" maxDisplayedLines="2" textAlign="center"/> 
					</s:VGroup>
					<otros:divisionHueca width="100%"/>
					<s:HGroup width="100%" paddingTop="3" paddingBottom="4">
						<s:VGroup width="100%" height="100%"  >
							<label:Titulo_12 text="Fecha de origen:" paddingTop="0" fontWeight="bold"/>
							<dateField:DatePickerSpanish id="dtpFOrigenDoc"  width="160" formatString="DD/MM/YYYY"  />
						</s:VGroup>
						<s:Spacer width="100%"/>
						<s:HGroup width="100%" height="100%" >
							<s:VGroup width="100%" >
								<label:Titulo_12 text="Hrs." paddingTop="0" fontWeight="bold"/>
								<numericStepper:NumericStepperDefaultPQNet id="horaSelect" stepSize="1" valueFormatFunction="formatRender" minimum="0" maximum="23" color="negro" tamanioDeLaFuente="12"/>
							</s:VGroup>		
							<label:Titulo_12 text=":" height="100%" verticalAlign="bottom" paddingBottom="5"  paddingTop="0" fontWeight="bold"/>
							<s:VGroup width="100%">
								<label:Titulo_12 text="Min."  paddingTop="0" fontWeight="bold"/>
								<numericStepper:NumericStepperDefaultPQNet id="minuteSelect" stepSize="1" valueFormatFunction="formatRender" minimum="0" maximum="59" color="negro" tamanioDeLaFuente="12"/>
							</s:VGroup>
						</s:HGroup>
					</s:HGroup>
					<otros:divisionHueca width="100%"/>
					<s:VGroup width="100%" paddingTop="3" >
						<s:VGroup width="100%">
							<label:Titulo_12 width="100%" text="Tipo:" fontWeight="bold"/>
							<combo:ComboCatalogos id="cmbTipo" width="100%" change="validaReferencia();" dataProvider="{this.ComboTipo}" labelField="tipo"/>
						</s:VGroup>
						<s:VGroup width="100%" paddingTop="15" id="vgCupon" verticalAlign="middle">
							<chekbox:CheckRadioDefaultPQNet label="Campaña" layoutDirection="ltr" change="chkHabilitaCampana_changeHandler(event)" id="chkHabilitaCampana" 
															visible="true" includeInLayout="true" tipoCheck="cuadrado2" height="100%" verticalCenter="1"/>
						</s:VGroup>
						<s:VGroup width="100%" paddingTop="3" visible.campana="true" includeInLayout.campana="true" visible.normal="false" includeInLayout.normal="false">
							<label:Titulo_12 id="lblCampana" width="100%" text="Cupón de descuento:" fontWeight="bold" visible.campana="true" includeInLayout.campana="true" visible.normal="false" includeInLayout.normal="false"/>
							<textinput:txtInputBlancoDefaultPQNet id="txtCampana" width="100%" enabled="false" visible.campana="true" includeInLayout.campana="true" visible.normal="false" includeInLayout.normal="false"/>
						</s:VGroup>
						<s:VGroup width="100%" paddingTop="3" >
							<label:Titulo_12 width="100%" text="#REF:" fontWeight="bold"/>
							<s:HGroup width="100%">
								<textinput:txtInputBlancoDefaultPQNet id="txtReferencia" enabled="false" width="100%"/>
								<chekbox:CheckRadioDefaultPQNet label="Sin Referencia" layoutDirection="rtl" change="chkHabilitaReferencia_changeHandler(event)" id="chkHabilitaReferencia" 
																visible="true" includeInLayout="true" tipoCheck="cuadrado" height="100%" verticalCenter="1"/>
							</s:HGroup>
						</s:VGroup>
						<s:VGroup width="100%" id="boxMontoDls" visible="false" includeInLayout="false" paddingTop="10" > 
							<label:Titulo_12 width="100%" text="Monto: (USD):" textAlign="left" fontWeight="bold" />
							<textinput:txtInputBlancoDefaultPQNet id="txtMontoDls"  width="310" restrict="0-9." text="0.00" />
						</s:VGroup>
						<s:VGroup width="100%" paddingTop="3" >
							<label:Titulo_12 width="100%" text="Medio:" fontWeight="bold"/>
							<combo:ComboCatalogos id="cmbMedio" width="100%" dataProvider="{this.ComboMedio}" labelField="medio"/>
						</s:VGroup>
						<s:VGroup width="100%" paddingTop="3" paddingBottom="3">
							<label:Titulo_12 width="100%" text="Destino:" fontWeight="bold"/>
							<combo:ComboCatalogos id="cmbEmpleados" width="100%" dataProvider="{this._empleados}" labelField="valor"/>
						</s:VGroup>
					</s:VGroup>
					<otros:divisionHueca width="100%"/>
					<s:HGroup paddingTop="13" horizontalCenter="0" width="100%">
						<pqNet1:botonPqNetLargo id="btnGuarMod" label="Canalizar" width="100%" icono="canalizar" click="validar(event)"/>
					</s:HGroup>
				</s:VGroup>
				<s:Spacer width="25"/>
			</s:Group>
		</s:VGroup>  
	</s:Scroller>
</s:VGroup>
