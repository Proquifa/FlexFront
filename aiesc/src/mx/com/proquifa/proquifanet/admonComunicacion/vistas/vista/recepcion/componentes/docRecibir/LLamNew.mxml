<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:autoComplete="mx.com.proquifa.proquifanet.admonComunicacion.vistas.vista.recepcion.componentes.autoComplete.*"
		  xmlns:combo="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.*"
		  xmlns:btnOrigen="skins.botones.colores.origen.*"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:pqNet="skins.skin.datagrid.pqNet.*" 
		  xmlns:textinput="skins.skin.textinput.*" 
		  xmlns:graficas="skins.skin.graficas.*"
		  xmlns:btnLargo="skins.botones.largo.*"
		  xmlns:textarea="skins.skin.textarea.*"
		  xmlns:chekbox="skins.skin.chekbox.*" 
		  xmlns:pqNet1="skins.botones.pqNet.*" 
		  xmlns:shaders="skins.skin.shaders.*"
		  xmlns:reloj="skins.otros.reloj.*" 
		  xmlns:label="skins.skin.label.*" 
		  xmlns:otros="skins.otros.*" 
		  horizontalAlign="center"
		  width="100%" height="100%" gap="0" 
		  >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group width="450" height="100%" >	
		<s:filters>
			<shaders:sombraBevelFilter direccion="right"/>
			<shaders:sombraBevelFilter direccion="left"/>
		</s:filters>
		<s:Rect height="100%" width="100%">
			<s:fill>
				<s:SolidColor color="0xF3F3F3"/>
			</s:fill>
		</s:Rect>
		
		<s:HGroup width="100%" height="100%" horizontalAlign="center" gap="0">
			<!--<otros:vDivisionGruesa height="90%"/>-->
			<s:Spacer width="25"/>
			<s:VGroup width="395" height="100%" horizontalAlign="center" gap="10">
				<s:VGroup width="100%" height="0" id="grpContactoNuevo" visible="false">
					<s:VGroup width="100%" >
						<!--<s:Label text="Empresa:" width="100%" verticalAlign="middle" fontFamily="tahoma" fontWeight="bold" fontSize="10"/>-->
						<label:Titulo text="Empresa:" width="100%" verticalAlign="middle"/>
							
						<autoComplete:AutoComplete id="txtEmpresaNew" dataProvider="{this._clientesOproveedores}" labelField="valor" width="100%" requireSelection="true" forceOpen="true" />
					</s:VGroup>
					<s:VGroup width="100%" >
						<label:Titulo text="Contacto:" width="100%" verticalAlign="middle"/>
						<!--<s:Label text="Contacto:" width="100%" verticalAlign="middle" fontFamily="tahoma" fontWeight="bold" fontSize="10"/>-->
						<textinput:txtInputBlancoDefaultPQNet  id="txtContactoNew" width="100%"/>
						<!--<s:TextInput id="txtContactoNew" width="100%"/>-->
					</s:VGroup>
				</s:VGroup>
				<s:VGroup width="100%" height="130" id="grpOrigen" horizontalAlign="center" verticalAlign="top" >
					<btnOrigen:botonOrigen click="consultaContactos()" width="100%"/>
					<s:HGroup height="100%" horizontalCenter="0" verticalAlign="middle">
						<label:Titulo_19_pTop10 id="lblInformacion" textAlign="center" paddingTop="5"/>
						<!--<s:Label id="lblInformacion" fontSize="18" textAlign="center" paddingTop="5" fontWeight="bold"/>-->
					</s:HGroup>
				</s:VGroup>
				<s:HGroup width="100%">
					<chekbox:CheckRadioDefaultPQNet id="chkContacto"  change="contactoNuevo()" visible="false" tipoCheck="cuadrado"/>
					<!--<s:CheckBox id="chkContacto"  change="contactoNuevo()" visible="false" fontWeight="bold" fontSize="10" fontStyle="normal" />-->
				</s:HGroup>
				<otros:divisionHueca width="100%"/>
				
				<reloj:reloj id="lblFechaHoraGris" horizontalCenter="0" />
				
				<otros:divisionHueca width="100%"/>
				<s:VGroup width="100%" horizontalAlign="center">
					<!--<s:Label text="Destino:" fontFamily="tahoma" fontSize="12" fontWeight="bold" textAlign="left" width="100%" />-->
					<label:Titulo_12 text="Destino:" textAlign="left" width="100%" fontWeight="bold" />
					<!--<s:ComboBox id="cmbDestino" width="100%"  dataProvider="{this._usuarios}" labelField="valor" textAlign="left"/>-->
					<combo:ComboCatalogos id="cmbDestino" width="100%"  dataProvider="{this._usuarios}" labelField="valor" textAlign="left"/>
					<!--<s:Label text="Atendió:" fontFamily="tahoma" fontSize="12" fontWeight="bold" textAlign="left" width="100%" />-->
					<label:Titulo_12 text="Atendió:" textAlign="left" width="100%" fontWeight="bold"/>
					<combo:ComboCatalogos id="cmbAtendio" width="100%"  dataProvider="{this._empleados}" labelField="valor" textAlign="left" creationComplete="{cmbAtendio.selectedIndex = 0}"/>
					<!--<s:ComboBox id="cmbAtendio" width="100%"  dataProvider="{this._empleados}" labelField="valor" textAlign="left" creationComplete="{cmbAtendio.selectedIndex = 0}"/>-->
				</s:VGroup>
				<otros:divisionHueca  width="100%"/>
				<s:VGroup width="100%" height="30%" >
					<label:Titulo_12 text="Asunto:" textAlign="left" width="100%" fontWeight="bold"/>
					<!--<s:Label text="Asunto:" fontFamily="tahoma" fontSize="12" fontWeight="bold" textAlign="left" width="100%"/>-->
					<textarea:txtAreaBlancoDefaultPQNet width="100%" height="100%" minHeight="120" id="txtRespuesta" colorFondo="blanco" />
					<fx:Script >
						<![CDATA[
							import mx.collections.ArrayCollection;
							import mx.com.proquifa.proquifanet.admonComunicacion.vistas.eventos.EventoPendientesPorEnviar;
							import mx.com.proquifa.proquifanet.admonComunicacion.vistas.eventos.EventoPopUpContactos;
							import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoParaCatalogoService;
							import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoParaContactoService;
							import mx.com.proquifa.proquifanet.rsl.vista.modelo.alertPqNet.ResultAlert;
							import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.CatalogoItem;
							import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
							import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
							import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Llamada;
							import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
							import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
							import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
							import mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.comun.contactos.ObtenerContacto;
							import mx.events.ValidationResultEvent;
							import mx.formatters.DateFormatter;
							import mx.messaging.ChannelSet;
							import mx.messaging.Producer;
							import mx.messaging.channels.AMFChannel;
							import mx.messaging.events.MessageFaultEvent;
							import mx.messaging.messages.AsyncMessage;
							import mx.validators.DateValidator;
							import mx.validators.NumberValidator;
							import mx.validators.StringValidator;
							
							import skins.catalogos.catalogoAlertas;
							
							[Bindable]
							public var _clientesOproveedores:ArrayCollection;
							[Bindable]
							private var _contactoSeleccionadoComponenteContacto:Contacto = new Contacto();
							
							private var contacto:ObtenerContacto= null;
							//private var contacto:BusquedaContactos= null;
							
							[Bindable]
							public var _usuarios:ArrayCollection = new ArrayCollection();
							[Bindable]		 
							public var _empleados:ArrayCollection = new ArrayCollection();
							private var usuarioAtendioParaMensaje:String;
							private var date:Date = new Date();
							private var validarContacto:StringValidator = new StringValidator();
							private var validarAtendio:NumberValidator = new NumberValidator();
							private var ValidarDestino:NumberValidator = new NumberValidator();
							private var validarAsunto:StringValidator = new StringValidator();	 
							private var ValidarFecha:DateValidator = new DateValidator();
							private var ValidarNuevoContactoEmpresa:StringValidator = new StringValidator();
							private var ValidarNuevoContactoNombre:StringValidator = new StringValidator();
							
							private var productorAsociado:Producer = new Producer();
							private var canalAsociado:AMFChannel;
							private var canalesAsociado:ChannelSet;
							private var formatoFecha:DateFormatter = new DateFormatter();
							public var _canalizado:Boolean = false;
							
							private function falloproductor(event:MessageFaultEvent):void{
								//Alert.show("Se ha producido un error en el Productor de registro de incidente asociado","Error");
								/*   var evento:EventoAlertaPqNet = new EventoAlertaPqNet(EventoAlertaPqNet.MOSTRAR_ALERTA);
								evento.mensaje = "Se ha producido un error en el Productor de registro de incidente asociado";
								evento.encabezado = "Error";
								dispatchEvent(evento);   */
								alertaSingleton.show( catalogoAlertas.ERR_channelProductor, catalogoAlertas.TIT_ERR);
							}
							public function init():void{
								//inicia canal y productor
								this.productorAsociado.destination = "actualizacionService";
								this.productorAsociado.addEventListener(MessageFaultEvent.FAULT,falloproductor);
								this.canalAsociado = new AMFChannel("my-polling-amf", Destinos.END_POINT_MENSAJERIA);
								this.canalesAsociado = new ChannelSet();
								this.canalesAsociado.addChannel(canalAsociado);
								this.productorAsociado.channelSet = this.canalesAsociado;
								//inicializando		
								validarContacto.source = this.lblInformacion;
								validarContacto.property = "text";
								validarContacto.requiredFieldError = "Debe seleccionar un contacto";
								//validar destino
								ValidarDestino.source = this.cmbDestino;
								ValidarDestino.property = "selectedIndex";
								ValidarDestino.minValue = 1;
								ValidarDestino.lowerThanMinError = "Debe seleccionar un destino";
								//validar quien atenio
								validarAtendio.source = this.cmbAtendio;
								validarAtendio.property = "selectedIndex";
								validarAtendio.minValue = 1;
								validarAtendio.lowerThanMinError = "Debe indicar quién atendió";
								//validar respuesta
								validarAsunto.source = this.txtRespuesta;
								validarAsunto.property = "text";
								validarAsunto.requiredFieldError = "Especificar el asunto";
								//validar nuevo contacto
								ValidarNuevoContactoEmpresa.source = this.txtEmpresaNew;
								ValidarNuevoContactoEmpresa.property = "text";
								ValidarNuevoContactoEmpresa.requiredFieldError = "Debe indicar una empresa";
								//
								ValidarNuevoContactoNombre.source = this.txtContactoNew;
								ValidarNuevoContactoNombre.property = "text";
								ValidarNuevoContactoNombre.requiredFieldError = "Debe indicar un nombre";
								
								//this.dtfFechaOrigen.selectedDate = null;
								var evento:EventoPendientesPorEnviar = null;			
								evento = new EventoPendientesPorEnviar( EventoPendientesPorEnviar.OBTNER_USUARIOS );
								evento.tipo = "esac";
								evento.valorAdicional = "--NINGUNO--";			
								dispatchEvent( evento );
								var evento2:EventoPendientesPorEnviar = new EventoPendientesPorEnviar( EventoPendientesPorEnviar.OBTENER_EMPLEADOS_DESTINOS_LLAMADAS );
								evento2.valorAdicional = "--NINGUNO--";
								dispatchEvent( evento2 );
								// manda a llamar el arreglo de clientes o proveedores para el autocompletado del textinput
								var trivento:EventoParaCatalogoService = new EventoParaCatalogoService( EventoParaCatalogoService.OBTENER_CLIENTES_NO_ENCONTRADOS );
								trivento.valorAdicional = "";
								dispatchEvent( trivento );
								
								LimpiarCampos();
								actualizaTimer();
								this.lblFechaHoraGris.fecha = UtilsFecha.formatoFechaDDMMMYY(date);
							}
							private function iniciar():void{
								var evt:EventoParaContactoService = new EventoParaContactoService(EventoParaContactoService.OBTENER_TIPO_CONSULTA);
								evt.consulta = "cliente";
								dispatchEvent(evt);
							}  
							private function consultaContactos():void{ 
								/* var evt:EventoParaContactoService = new EventoParaContactoService(EventoParaContactoService.HAS_VISIBLE_POPUP_CONTACTOS);
								evt.asociar = true;
								evt.consulta = "cliente";
								evt.vieneD = "LlamNew";
								dispatchEvent(evt); */
								var evt:EventoPopUpContactos = new EventoPopUpContactos(EventoPopUpContactos.MUESTRA_POP_UP);
								evt.vieneDE_PopUp = 'stageEditDoc';
								evt.vieneDE_PopUp = "LlamNew";
								evt.canalizado = _canalizado;
								dispatchEvent( evt ); 
								if (_canalizado){
									_canalizado = false;
								}
							}
							/**
							 *Metodo que recibe a los usarios del mapa
							 */
							public function set usuariosParaCombo(datos:ArrayCollection):void{
								if(datos == null){
									return;
								}
								this._usuarios = datos; 
							}
							/**
							 *Metodo que recibe a los Empleados del mapa
							 */
							public function set empleadosParaCombo(datos:ArrayCollection):void{
								if(datos == null){
									return;
								}
								this._empleados = datos;
							}
							private function contactoNuevo():void{
								if(this.chkContacto.selected == true ){
									this.grpContactoNuevo.height = 130;
									this.grpContactoNuevo.visible = true;
									this.grpOrigen.height = 0;
									this.grpOrigen.visible = false;
								}else{
									this.grpContactoNuevo.height = 0;
									this.grpContactoNuevo.visible = false;
									this.grpOrigen.height = 130;
									this.grpOrigen.visible = true;
								}
							}
							/**
							 * Recibe la inyeccion q trae al Vendedor buscado por la empresa
							 */
							public function set recibeVendedorDeLaEmpresa( datos:CatalogoItem ):void{
								if(datos == false){
									return;
								}
								
								this.cmbDestino.selectedIndex = Util.indiceSeleccionado( this.cmbDestino.dataProvider as ArrayCollection,  datos.llave );
							}
							private function guardarDatos():void{
								if(validarIfo()){
									var fechaDTP:Date = date; //dtfFechaOrigen.selectedDate ; 
									var fechaTotal:String = new String;
									var textoHorasMinutos:String = new String;
									var formatoFecha:DateFormatter = new DateFormatter();
									
									formatoFecha.formatString = "YYYYMMDD";
									//			FECHA FORMATO YYYYMMDD HH:MM
									fechaTotal = formatoFecha.format( date ) + " " + (date.hours < 10 ? "0"+date.hours: date.hours) 
										+":"+ 
										(date.minutes < 10 ? "0"+date.minutes: date.minutes); //textoHorasMinutos;
									var evento:EventoPendientesPorEnviar = null;			
									evento = new EventoPendientesPorEnviar(EventoPendientesPorEnviar.GUARDAR_LLAMDAS);
									var llamadaEnvio:Llamada = new Llamada();
									llamadaEnvio.fecha = fechaDTP;	
									llamadaEnvio.fechaHora = fechaTotal;
									if(chkContacto.selected == true ){
										llamadaEnvio.origen = "Clientes";
										llamadaEnvio.contacto = txtContactoNew.text;
										llamadaEnvio.empresa = txtEmpresaNew.text;
									}else{
										llamadaEnvio.origen = "Clientes";
										llamadaEnvio.contacto = _contactoSeleccionadoComponenteContacto.nombre; //txtContactoNew.text;
										llamadaEnvio.empresa = _contactoSeleccionadoComponenteContacto.empresa;  //txtEmpresaNew.text;
									}
									llamadaEnvio.destino = this.cmbDestino.selectedItem.valor;
									llamadaEnvio.atendio = this.cmbAtendio.selectedItem.valor; 	
									this.usuarioAtendioParaMensaje = this.cmbAtendio.selectedItem.valor;
									llamadaEnvio.respuesta = "";  
									llamadaEnvio.asunto = this.txtRespuesta.text;
									llamadaEnvio.mensaje = false;	
									llamadaEnvio.estado = "EN ESPERA";
									llamadaEnvio.recibio = "Recepción";
									evento.llamada = llamadaEnvio;
									dispatchEvent( evento );
									_canalizado = true;
									LimpiarCampos(); 
								}else{
									//alertaSingleton.show("Información incompleta","Error",'','','','','', _arregloMensajesAlerta);
									alertaSingleton.show( catalogoAlertas.ADV_informacionIncompleta, catalogoAlertas.TIT_ADV_atencion);
								}
							}
							
							private var _arregloMensajesAlerta:ArrayCollection = new ArrayCollection([
								"mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 mensaje alerta1 ",
								"mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 mensaje alerta 2 ",
								"mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 mensaje alerta 3 ",
								"mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 mensaje alerta 4 ",
								"mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 mensaje alerta 5 ",
								"mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 mensaje alerta 6 "]);
							
							public function validarIfo():Boolean {
								var contacto_validado:ValidationResultEvent = this.validarContacto.validate();
								var destino_validado:ValidationResultEvent = this.ValidarDestino.validate();
								var atendio_validado:ValidationResultEvent = this.validarAtendio.validate();
								var asunto_validado:ValidationResultEvent = this.validarAsunto.validate();
								var validacionCompleta:Boolean = new Boolean();
								//var fecha_validado:ValidationResultEvent = this.ValidarFecha.validate();
								var new_empresa:ValidationResultEvent = this.ValidarNuevoContactoEmpresa.validate();
								var new_nombre:ValidationResultEvent  = this.ValidarNuevoContactoNombre.validate();
								if(this.chkContacto.selected == true && this.cmbDestino.selectedIndex != 0){ // contacto nuevo
									if( new_empresa.type == ValidationResultEvent.VALID && new_nombre.type == ValidationResultEvent.VALID &&
										atendio_validado.type == ValidationResultEvent.VALID && asunto_validado.type == ValidationResultEvent.VALID  ){//&& fecha_validado.type == ValidationResultEvent.VALID
										return validacionCompleta = true;
									}else{
										return validacionCompleta = false;
									}
								}else{
									if (contacto_validado.type == ValidationResultEvent.VALID && 
										destino_validado.type == ValidationResultEvent.VALID && 
										atendio_validado.type == ValidationResultEvent.VALID && 
										asunto_validado.type == ValidationResultEvent.VALID ) {// && fecha_validado.type == ValidationResultEvent.VALID
										return validacionCompleta = true;
									}else{
										return validacionCompleta = false;
									}
								}
							}
							/**
							 * Recibe la inyeccion q trae todos los datos de la llamada GUARDADA
							 */
							public function set recibeLlamadasGuardadas ( datos:Boolean ):void{
								if(datos == false){
									return;
								}
								var evt:EventoPopUpContactos = new EventoPopUpContactos( EventoPopUpContactos.CARAGAR_CONTACTOS );
								dispatchEvent( evt ); 
								if(datos == true){
									//Alert.show("Se registró la llamada correctamente", "Operación exitosa");
									/*   var trivent:EventoAlertaPqNet = new EventoAlertaPqNet(EventoAlertaPqNet.MOSTRAR_ALERTA);
									trivent.mensaje = "Se registró la llamada correctamente";
									trivent.encabezado = "Operación exitosa";
									dispatchEvent(trivent); */
									alertaSingleton.show( catalogoAlertas.CONF_AIESC_llamadaRegistrada, catalogoAlertas.TIT_CONF_operacionExitosa);
									// se envia el mensaje al reporte de llmadas
									var mensaje:AsyncMessage = new AsyncMessage();
									mensaje.headers["Destino"] = "reporteLlamada";
									mensaje.headers["Usuario"] = this.usuarioAtendioParaMensaje;
									mensaje.body = "Mensaje";
									this.productorAsociado.send(mensaje);
									this.usuarioAtendioParaMensaje = "";
								}
							}
							private function LimpiarCampos():void{
								this.lblInformacion.text = "";
								this.txtContactoNew.text = "";
								this.txtEmpresaNew.text = "";
								this.chkContacto.selected = false;
								this.cmbAtendio.selectedIndex = 0;
								this.cmbDestino.selectedIndex = 0;
								this.txtRespuesta.text="";
								lblInformacion.text = "Pendiente...";
								contactoNuevo();
							}
							private function formatRender(value:Number):String {
								var time:String = Number(value).toString();
								if (time.length==1) {
									time = "0" + time;
								}
								return time;
							}
							/**
							 * Metodo que obtiene los clientes o proveedores del Mapa  
							 */
							public function set clientesNoEncontradosParaCombo(datos:ArrayCollection):void{
								if(datos == null){
									return;
								}
								this._clientesOproveedores = datos; 
							}
							/**
							 * para recibir el contacto seleccionado del mapa MapaPopUp.mxml
							 */
							/* public function set contactoSeleccionado(conta:Object):void{
							if(conta != null){
							if(conta.vieneD != "LlamNew"){
							return;
							}else{
							this._contactoSeleccionadoComponenteContacto = conta.seleccion[0];
							this.lblInformacion.text = this._contactoSeleccionadoComponenteContacto.empresa + '\n ' + this._contactoSeleccionadoComponenteContacto.nombre; //contacto.contactoSelect;
							var eventoC:EventoParaCatalogoService = null;
							eventoC = new EventoParaCatalogoService( EventoParaCatalogoService.OBTENER_EMPLEADOS_POR_EMPRESA_EN_LLAMADA );		   
							eventoC.nombreEmpresa = (conta.seleccion[0] as Contacto).empresa;
							dispatchEvent( eventoC );
							}
							}
							} */
							/**
							 * para recibir el contacto seleccionado del mapa MapaPopUp.mxml
							 */
							public function set contactoSeleccionado(conta:Contacto):void{
								//[seleccion] y [vieneD] en ModeloPopUp en metodo setContactoSeleccionado
								if(conta != null){
									this._contactoSeleccionadoComponenteContacto = conta;
									this.lblInformacion.text  = (_contactoSeleccionadoComponenteContacto as Contacto).empresa + '\n ' + this._contactoSeleccionadoComponenteContacto.nombre;//(conta.seleccion[0] as Contacto).empresa; //contacto.empresaSelect;
									var eventoC:EventoParaCatalogoService = null;		   		
									eventoC = new EventoParaCatalogoService( EventoParaCatalogoService.OBTENER_EMPLEADOS_POR_EMPRESA_EN_LLAMADA );
									eventoC.nombreEmpresa = (_contactoSeleccionadoComponenteContacto as Contacto).fk02_Cliente == null ? (_contactoSeleccionadoComponenteContacto as Contacto).idEmpresa.toString() : (_contactoSeleccionadoComponenteContacto as Contacto).fk02_Cliente ;//contacto.empresaSelect;
									dispatchEvent( eventoC );
								}
							} 
							//					FUNCIONES RELOJ
							private var _relojHoras:String;
							private var _relojMinutos:String;
							private var _relojSegundos:String;
							/*
							* Para Actualizar total pendientes
							*/
							private function reiniciaTimer():void{
								date = new Date();
								lblFechaHoraGris.horas = (date.hours.toString().length < 2 ? "0"+date.hours.toString() : date.hours.toString() );
								lblFechaHoraGris.puntos = (date.milliseconds > 500 ? ": ": "");
								lblFechaHoraGris.minutos = (date.minutes.toString().length < 2 ? "0"+date.minutes.toString():date.minutes.toString());
								actualizaTimer();
							}
							//									EJECUTA RELOJ CADA 500 Milisegundos
							private var timer:Timer = new Timer(500, 1);   
							private function actualizaTimer():void   
							{
								timer.removeEventListener(TimerEvent.TIMER_COMPLETE, timerCompleteHandler);
								timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerCompleteHandler);   
								timer.start();   
							}   
							private function timerCompleteHandler(event:TimerEvent):void   
							{   
								reiniciaTimer();  
							}  
							
							public function set recibeDelAlert(respuestaAlert:ResultAlert):void{
								if(respuestaAlert.vieneD != "LlamNew"){
									return;
								}else{
									//Alert.show("boton seleccionado: " + respuestaAlert.botonSeleccionado.toString());
								}
							} 
						]]>
					</fx:Script>
					<!--<s:TextArea width="100%" height="100%" minHeight="120" id="txtRespuesta" contentBackgroundAlpha="1.0" fontStyle="normal"/>-->
				</s:VGroup>
				<otros:divisionHueca width="100%"/>
				<s:HGroup width="100%" paddingTop="10" horizontalAlign="center">
					<pqNet1:botonPqNetLargo id="btnGuarMod" label="Canalizar" width="100%" icono="canalizar" click="guardarDatos()" verticalCenter="0"/>
				</s:HGroup>	
			</s:VGroup>
			<s:Spacer width="25"/>
			<!--<otros:vDivisionGruesa height="90%"/>-->
		</s:HGroup>
		
	</s:Group>	
</s:VGroup>