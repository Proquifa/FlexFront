<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:pq="vista.componentes.comun.pq.*" 
		 width="100%" height="100%"
		 creationComplete="completeHandler(event)"
		 
		 >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.components.Image;
			import spark.effects.Resize;
			import spark.effects.Scale;
			import spark.effects.easing.Elastic;
			
			import skins.catalogos.catalogoIconosEtiquetas;
			
			import vista.componentes.comun.charts.MiniBarGrises;
			import vista.componentes.comun.charts.MiniBars;
			import vista.componentes.comun.charts.MiniLineChart;
			import vista.componentes.comun.charts.MiniPieGris;
			
			public var positionButton:String = "top";
			public var index:int = -1;
			public var informacionChart:String;
			
			[Bindable]
			private var currentDPI:int = FlexGlobals.topLevelApplication.applicationDPI;
			
			private var timeer:Timer = new Timer( 1500, 1 );
			
			[Inspectable(category="General", enumeration="none,pie,bar,barGrises,lines,images", defaultValue="none" )]
			public var tinyChart:String = "none";
			
			public function get label():String
			{
				return labelDisplay.text;
			}
			
			public function set label(value:String):void
			{
				labelDisplay.text = value;
			}
			
			private var _miniChart:IVisualElement;
			private var imagen:Image;
			private var _dataProvider:ArrayCollection;
			public function set miniChart( value:IVisualElement ):void
			{
				_miniChart = value;
				_miniChart.horizontalCenter = 0;
				_miniChart.verticalCenter = 0;
				if ((_miniChart as Object).hasOwnProperty("dataProvider") )
				{
					(_miniChart as Object).dataProvider = _dataProvider;
				}
				else
				{
					(_miniChart as Image).source = catalogoIconosEtiquetas.getInstance().estadisticasClientes60x61;
				}
				grpMiniChart.addElement( _miniChart );
			}
			
			public function get miniChart():IVisualElement
			{
				return _miniChart;
			}
			
			public function set dataProvider( value:ArrayCollection ):void
			{
				if( _miniChart != null )
				{
					elipseDisplay.visible = true;
					var earrser:Elastic = new Elastic();
					fxScale.stop();
					fxScale.target = elipseDisplay;
					fxScale.duration = 1000;
					fxScale.scaleXTo = 1;
					fxScale.scaleYTo = 1;
					fxScale.easer = earrser;
					fxScale.play();
					if ((_miniChart as Object).hasOwnProperty("dataProvider") )
					{
						(_miniChart as Object).dataProvider = value;
					}
				}
				_dataProvider = value;
			}
			
			public function get dataProvider():ArrayCollection
			{
				return (miniChart as Object).dataProvider;
			}
			
			private var fxScale:Scale = new Scale();
			
			public function set esperandoService( value:Boolean ):void
			{
				if( value )
				{
					elipseDisplay.visible = true;
					fxScale.stop();
					fxScale.target = elipseDisplay;
					fxScale.duration = 1000;
					fxScale.scaleXFrom = 0;
					fxScale.scaleYFrom = 0;
					fxScale.scaleXTo = 0.7;
					fxScale.scaleYTo = 0.7;
					fxScale.play();
				}
			}
			
			protected function completeHandler(event:FlexEvent):void
			{
				if( positionButton == "bottom" )
				{
					grpElements.swapElementsAt(0, 2);
					rectFondo.bottom 	= 0;
					grpElements.bottom 	= 0;
				}
				else
				{
					rectFondo.top 		= 0;
					grpElements.top 		= 0;
				}
				//////// crear tiny chart
				if( tinyChart == "pie" )
				{
					miniChart = new MiniPieGris();
				}
				else if( tinyChart == "barGrises" )// aplica solo a Cotizacion Dif Pedido
				{
					miniChart = new MiniBarGrises();
				}
				else if( tinyChart == "bar" )
				{
					miniChart = new MiniBars();
				}
				else if( tinyChart == "lines" )
				{
					miniChart = new MiniLineChart();
				}
				else if (tinyChart == "images")
				{
					miniChart = new Image();
				}
			}
			
			private var fxResize:Resize = new Resize();
			
			// MOUSE EVENTS
			protected function mouseDownHandler(event:MouseEvent):void
			{
				
				/* hay momentos cuando se superponen otros elementos y el mouseMove se pierde, para prevenir que el boton se quede bloqueado se llama el mouseUp */
				timeer.removeEventListener( TimerEvent.TIMER, timerLimpiaMouseMoveHandler );
				timeer.addEventListener( TimerEvent.TIMER, timerLimpiaMouseMoveHandler, false, 0, true );
				timeer.start();
				
				addEventListener( MouseEvent.MOUSE_MOVE, mouseMoveHandler, false, 0, true );
			}
			
			protected function mouseUpHandler(event:MouseEvent = null ):void
			{
				removeEventListener( MouseEvent.MOUSE_MOVE, mouseMoveHandler );
				
				var easeer:Elastic = new Elastic();
				fxResize.stop();
				fxResize.targets = [rectFondo, grpElements];
				fxResize.duration = 1200;
				fxResize.easer = easeer;
				fxResize.heightTo = height * .7;
				fxResize.play();
			}
			
			protected function mouseMoveHandler(event:MouseEvent):void
			{
				var newHeight:Number;
				if( positionButton == "top" )
					newHeight = event.currentTarget.contentMouseY + 25;
				else
					newHeight = height - event.currentTarget.contentMouseY + 25;
				
				if( newHeight < height * 0.3 )
					newHeight = height * 0.3;
				
				if( newHeight > height * 0.9 )
					mouseUpHandler();
				
				rectFondo.height = newHeight;
				grpElements.height = newHeight;
				
				/* hay momentos cuando se superponen otros elementos y el mouseMove se pierde, para prevenir que el boton se quede bloqueado se llama el mouseUp */
				timeer.removeEventListener( TimerEvent.TIMER, timerLimpiaMouseMoveHandler );
				timeer.addEventListener( TimerEvent.TIMER, timerLimpiaMouseMoveHandler, false, 0, true );
				timeer.start();
			}
			
			protected function timerLimpiaMouseMoveHandler( event:TimerEvent ):void
			{
				mouseUpHandler();
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="up"/>
		<s:State name="over"/>
		<s:State name="down"/>
		<s:State name="disabled"/>
	</s:states>
	
	<s:Rect id="rectFondo" x="{currentDPI == 160 ? 0.5:1}" y="{currentDPI == 160 ? 0.5:1}" left="0" right="0" height="70%"
			x.disabled="0.5" y.disabled="0.5" x.down="{currentDPI == 160 ? 1.5:3}" y.down="{currentDPI == 160 ? 1.5:3}">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry alpha="1.0" color="0x303030" ratio="0" color.over="0x000000"/>
				<s:GradientEntry alpha="1.0" color="0x191919" color.over="0x363636" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
		<s:fill.disabled>
			<s:SolidColor color="#CCCCCC"/>
		</s:fill.disabled> 
		<s:stroke.disabled>
			<s:SolidColorStroke caps="none" color="#CCCCCC" joints="miter" miterLimit="4" weight="1"/>
		</s:stroke.disabled>
	</s:Rect>
	
	<!--<s:Group id="grpElements" x="0" y="0" width="100%" height="70%">
	<s:Rect width="100%" height="100%">
	<s:fill>
	<s:SolidColor color="red"/>
	</s:fill>
	</s:Rect>-->
	
	<s:VGroup horizontalAlign="center" verticalAlign="middle" paddingLeft="{currentDPI == 160 ? 10:20}" paddingRight="{currentDPI == 160 ? 10:20}" gap="{currentDPI == 160 ? 20:40}" id="grpElements" x="0" y="0" width="100%" height="70%"><!--height="100%" width="100%"-->
		<s:Group id="grpMiniChart" width="100%" >
			<!--<s:Rect width="100%" height="100%">
			<s:fill>
			<s:SolidColor color="green"/>
			</s:fill>
			</s:Rect>-->
			
			<s:Ellipse id="elipseDisplay" width="{currentDPI == 160 ? 95:190}" height="{currentDPI == 160 ? 95:190}" visible="false" horizontalCenter="0" verticalCenter="0" >
				<s:fill>
					<s:SolidColor color="0x0d0d0d" />
				</s:fill>
			</s:Ellipse>
			<!--aqui se inyecta el minichart -->
		</s:Group>
		
		<s:RichText id="labelDisplay" maxDisplayedLines="3" width="100%" color="#FFFFFF" fontFamily="Helvetica" fontStyle="normal" lineHeight="{currentDPI == 160 ? 15:30}" 
					paddingLeft="{currentDPI == 160 ? 15:30}" paddingRight="{currentDPI == 160 ? 15:30}" tabStops="S0 S50 S100" textAlign="center" verticalAlign="middle" />
		<pq:CrossButtonPq id="btnMas" />
	</s:VGroup>
	<!--</s:Group>-->
	
</s:Group>
