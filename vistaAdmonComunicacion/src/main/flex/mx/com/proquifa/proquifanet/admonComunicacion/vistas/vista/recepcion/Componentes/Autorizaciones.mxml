<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" width="600" showCloseButton="true" close="cerrar()" horizontalAlign="center"
	 initialize="inicializarValidadores()" creationComplete="init()" xmlns:label="skins.skin.label.*" xmlns:s="library://ns.adobe.com/flex/spark">
	<mx:Script>
	<![CDATA[
		import mx.com.proquifa.proquifanet.admonComunicacion.vistas.eventos.EventoPendientesPorEnviar;
		import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoGenerico;
		import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.DocumentoRecibido;
		import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Empleado;
		import mx.com.proquifa.proquifanet.rsl.vista.utils.AutorizacionContrasenas;
		import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
		import mx.controls.Alert;
		import mx.events.ValidationResultEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.validators.NumberValidator;
		import mx.validators.StringValidator;
		import mx.validators.Validator;
		
		private var validarContrasena:StringValidator;
		private var validarSituacion:StringValidator;
		private var validarHora:NumberValidator;
		public var idContacto:Number;
		public var fechaOrigen:Date;
		public var manejoModificado:String;
		public var validarDocumentacion:Boolean;
		public var fechaModificada:String;
		public var empresaModificado:String;
		public var medioModifcado:String;
		public var tipoModificado:String;
		public var referenciaModificado:String;
		public var destinoModificado:String;
		public var ComentariosModificados:String;
		public var rutaArchivoOrigen:String;
		public var rutaArchivosModificados:String;
		public var fechaOriginal:String;
		public var origenOriginal:String;
		public var empresaOriginal:String;
		public var MedioOriginal:String;
		public var tipoOriginal:String;
		public var referenciaOriginal:String;
		public var destinoOriginal:String;
		public var ComentariosOriginales:String;
		public var nombreUsuario:String;
		public var ingresoDoc:String;
		public var folioModificado:Number;
		private var urlRequest:URLRequest;
		private var archivo:File = new File();
		private var inicio:Number = 0;
		/* [Bindable]
		[Embed(source="iconos/error.png")]
		private var iconDenegado:Class; */
		
		/* [Bindable]
		[Embed(source="iconos/error2.png")]
		private var errorFatal:Class; */
		
		
		private function init():void{
			//subir archivourlRequest = new URLRequest;
			urlRequest = new URLRequest();
			var url:String="http://localhost:8080/Recepcion/UploadDocumentoR";
			urlRequest.url = url;
			urlRequest.method = URLRequestMethod.POST;	
		}
		
		private function inicializarValidadores():void{    
			/* CamposRecepcion = new Recepcion(); */
			this.txtPassword.text = "";
			this.txtSituacion.text = "";
			validarContrasena = new StringValidator();
			validarContrasena.source = this.txtPassword;
			validarContrasena.property = "text";
			validarContrasena.requiredFieldError = "Debe escribir la contraseña";			
			validarSituacion = new StringValidator();
			validarSituacion.source = this.txtSituacion;
			validarSituacion.property = "text";
			validarSituacion.requiredFieldError = "Debe escribir la situación"	
		} 
		   
		private function cerrar():void{
			this.txtPassword.text = "";
			this.txtSituacion.text = "";
			PopUpManager.removePopUp( this );
		}

		private function validarInfo():Boolean {
			var contrasenaValidada:ValidationResultEvent = this.validarContrasena.validate();			
			var situacionValidada:ValidationResultEvent = this.validarSituacion.validate();
			var validacionCompleta:Boolean = new Boolean();
			if (contrasenaValidada.type == ValidationResultEvent.VALID && 
				situacionValidada.type == ValidationResultEvent.VALID) {
				 return validacionCompleta = true;
			}else{
				 return validacionCompleta = false;
			}
	     }
        
        /**
         * Metodo que recibe del Mapa si esta correcto la contraseña o no.  
         */ 
        public function set contrasenaValidaAutorizacion(valido:Boolean):void{
        	if(this.inicio == 0){
        		return;
        	}else{
        		 if (valido == false ){
        		 	Alert.show("Contraseña incorrecta","Error",Alert.OK,this,null);
	        	 	return;
	        	 }else{
	        	 	this.modificarDocumentacion();
	        	 	this.inicio = 0;	
					cerrar();
	        	 }
        	}
        }           
        private function guardarInfo():void{                 
               if (validarDocumentacion){
			     if (validarInfo()){
			   	   	  //Verificar contraseña
			   	   	  this.inicio = 1;
			   	   	  var usuario:String = new String;
			   	   	  usuario = AutorizacionContrasenas.obtenUsuarioPorContraseña( this.txtPassword.text.toLowerCase() )
			   	   	  if (usuario == null || usuario == ""){
			   	   	  	Alert.show("Contraseña incorrecta","Error");
			   	   	  	return;
			   	   	  }
			   	   	  var evento:EventoGenerico = new EventoGenerico ( EventoGenerico.VALIDAR_AUTORIZACION );
					  var empleadoAValidar:Empleado = new Empleado();
						empleadoAValidar.usuario = usuario;
						empleadoAValidar.password = this.txtPassword.text;
						evento.empleado = empleadoAValidar;
					  dispatchEvent( evento );						  
			       }else{	   	   
			   	   	 Alert.show("Información incompleta","Información incompleta",Alert.OK,this,null);		   	   	 	 
			   	   }  
			   }else {
			   	  Alert.show("Información incompleta","Información incompleta",Alert.OK,this,null);	 	  	
			   }  	  
			}
		
		 private function httperror():void{
			  Alert.show("Error en el servlet","Error",Alert.OK,this,null); 
			}
		 
		 /**
		  * Recibe la inyeccion q trae todos los datos de la llamada GUARDADA
		  */
		  public function set recibeDocumentosModificado ( datos:Boolean ):void{
				if(datos == false){
					return;
				}
				if(datos == true){
					Alert.show("Documento modificado", "Operación exitosa");
				}
		  }
		
		 
		 private function modificarDocumentacion():void{
		 	 			 
	  	  	  var evento:EventoPendientesPorEnviar = new EventoPendientesPorEnviar(EventoPendientesPorEnviar.MODIFICAR_DOCUMENTACION_EXISTENTE);
	  	  	  var documentacion:DocumentoRecibido = new DocumentoRecibido();
	  	  	  		documentacion.folio = folioModificado;
	  	  	  		documentacion.partida = 0;
	  	  	  		documentacion.manejo = this.manejoModificado;
	  	  	  		documentacion.origen = "Cliente";
	  	  	  		documentacion.nombreEmpresa = this.empresaModificado;
	  	  	  		documentacion.RPor = this.destinoModificado;
	  	  	  		documentacion.medio = this.medioModifcado;
	  	  	  		documentacion.docto = this.tipoModificado; // el tipo  En la base es el docto
	  	  	  		documentacion.numero = this.referenciaModificado; //el numero en la base es la Referencia
	  	  	  		documentacion.observaciones = this.ComentariosModificados; //observaciones
	  	  	  		documentacion.ingreso = DatosGlobales.getInstance()._usuario.usuario;
	  	  	  		documentacion.FOrigen = 0;
	  	  	  		documentacion.esHijo = false;
	  	  	  		documentacion.fechaOrigen = new Date;
	  	  	  		documentacion.idContacto = this.idContacto;
	  	  	  evento.documentoNuevo = documentacion;
	  	  	  dispatchEvent( evento );
		 }
		 
		
	]]>
</mx:Script> 


	<mx:VBox width="95%"   >
		<!--<mx:Label text="Autorización" fontSize="25" width="95%" height="10%" />-->
		<label:labelSubtitulo text="Autorización"  width="95%" height="10%" />
		<mx:Label text="Situación" width="95%"/>
		<s:TextArea width="100%" height="150" id="txtSituacion" contentBackgroundColor="#FAFFC0" contentBackgroundAlpha="1.0"  color="blue"/>
		<mx:Label text="Contraseña" width="95%"/>
		<s:TextInput width="100%" displayAsPassword="true" id="txtPassword"/>
	</mx:VBox>	
	<mx:HBox  width="95%" paddingBottom="10">
		<s:Button label="Cancelar" width="80" click="cerrar()"/>
		<mx:Spacer width="100%"/>
		<s:Button width="80" label="Autorizar" click="guardarInfo()"/>
	</mx:HBox>

</mx:TitleWindow>