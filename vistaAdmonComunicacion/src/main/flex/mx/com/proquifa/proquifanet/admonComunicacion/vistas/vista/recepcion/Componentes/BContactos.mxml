<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"  showCloseButton="true" close="cerrar()" 
	xmlns:ns1="mx.com.proquifa.proquifanet.admonComunicacion.vistas.vista.recepcion.Componentes.*"
	xmlns:maps="mx.com.proquifa.proquifanet.admonComunicacion.vistas.mapas.*"
	xmlns:controls="mx.com.adobe.flex.extras.controls.*"
	width="100%" initialize="init()" creationPolicy="all" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:label="skins.skin.label.*" xmlns:otros="skins.otros.*">
	<!--xmlns:ns1="Componentes.*"--> 
	<mx:states>
		<mx:State name="BAContactos">
			<mx:RemoveChild target="{brcontactos1}"/>
			<mx:SetEventHandler target="{lnkBRContacto}" name="click" handler="this.currentState=''"/>
			<mx:SetProperty target="{lnkBRContacto}" name="label" value="Búsqueda rápida"/>
			<mx:RemoveChild target="{panel1}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<ns1:BAContactos id="bacontactos2" creationPolicy="all" >				
				</ns1:BAContactos>
			</mx:AddChild>
			<mx:RemoveChild target="{gridContactos}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{gridContactos}"/>
			<mx:RemoveChild target="{hrule1}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{hrule1}"/>
			<mx:SetProperty target="{spacer1}" name="height" value="1"/>
			<mx:RemoveChild target="{spacer1}"/>
			<mx:AddChild relativeTo="{hrule1}" position="before" target="{spacer1}"/>
			<mx:SetProperty target="{spacer2}" name="height" value="0"/>
			<mx:RemoveChild target="{spacer2}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{spacer2}"/>
		</mx:State>
		<mx:State name="ClienteNuevo">
			<mx:RemoveChild target="{controlbar1}"/>
			<mx:RemoveChild target="{brcontactos1}"/>			
			<mx:AddChild relativeTo="{panel1}" position="lastChild">
				<mx:ControlBar width="100%">
					<mx:ViewStack id="stackClienteNuevo" width="100%">
						<mx:Form id="Form1" width="100%" height="100%">
							<mx:HBox width="100%">						
								<mx:FormItem label="Origen: " paddingLeft="10">
									<mx:Label text="Cliente"/>
								</mx:FormItem>							
								<mx:Spacer width="100%"/>
								<mx:Label text="No registrado"/>
								<mx:CheckBox id="chkNoRegistrado" click="cambiaAEmpresaTexto()"/>
							</mx:HBox>
							<mx:FormItem label="Empresa: " width="100%">
								<!--<controls:AutoComplete id="cmbClientes" horizontalCenter="-30" verticalCenter="-50" 
									labelField="valor" data="clave" dataProvider="{this._clientesOproveedores}" width="100%"/>-->
								<s:ComboBox  id="cmbClientes" horizontalCenter="-30" verticalCenter="-50" labelField="valor"  
											 dataProvider="{this._clientesOproveedores}" width="100%"/>
							</mx:FormItem>						
							<mx:FormItem label="Nombre:" width="100%">
								<mx:TextInput id="txtContactoNuevo" horizontalCenter="0" verticalCenter="-50" width="100%"/>
							</mx:FormItem>
						</mx:Form>	
						<mx:Form id="Form2" width="100%" height="100%">
							<mx:HBox width="100%">						
								<mx:FormItem label="Origen: " paddingLeft="10">
									<mx:Label text="Cliente"/>
								</mx:FormItem>							
								<mx:Spacer width="100%"/>
								<mx:Label text="No registrado"/>
								<mx:CheckBox id="chkParaRegistrado" selected="true" click="cambiaTextoEmpresaACombo()"/>
							</mx:HBox>						
							<mx:FormItem label="Empresa:" width="100%">							
								<mx:TextInput id="txtCliente" horizontalCenter="-30" verticalCenter="-50" width="100%"/>
							</mx:FormItem>
							<mx:FormItem label="Nombre:" width="100%">
								<mx:TextInput id="txtContactoNuevo2" horizontalCenter="0" verticalCenter="-50" width="100%"/>
							</mx:FormItem>
						</mx:Form>				
					</mx:ViewStack>
				</mx:ControlBar>
			</mx:AddChild>
			<mx:RemoveChild target="{gridContactos}"/>
			<mx:SetProperty name="height"/>
			<mx:SetProperty name="width" value="800"/>
			<mx:RemoveChild target="{vbox1}"/>
			<mx:AddChild relativeTo="{hbox1}" position="before" target="{vbox1}"/>
			<mx:RemoveChild target="{hbxNuevoContacto}"/>
			<mx:AddChild relativeTo="{hrule1}" position="before" target="{hbxNuevoContacto}"/>
			<mx:SetProperty target="{hbxNuevoContacto}" name="width" value="100%"/>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import flash.sampler.NewObjectSample;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.admonComunicacion.vistas.eventos.EventoPendientesPorEnviar;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoParaCatalogoService;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.ValidadorDataGrid;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
	      	private var contactoEncontrado:XML;
	      	private var estadoAnterior:String;
	      	public var empresaSelect:String;
	      	public var origenSelect:String;
	      	public var contactoSelect:String;
	      	
	      	[Bindable]
	      	public var idEmpresaSelect:Number;
	      	[Bindable]
	      	public var idContactoSelect:Number;
	      	[Bindable]
	      	private var _contactos:ArrayCollection;
	      	[Bindable]
			public var _clientesOproveedores:ArrayCollection;
		
	      	[Bindable]	
			private var indice:int = 0;
			[Bindable]	
			private var indice2:int = 0;
	
			private function cerrar():void{
				this.currentState='';
				this.hbxNuevoContacto.visible = false;
				this.hbxNuevoContacto.height = 0;
				this.chkContactoNuevo.selected = false;
				if(this.currentState == "BAContactos"){
			 		this.bacontactos2.txtNombre.text = "";
					this.bacontactos2.txtEmail.text = "";
				}else{
					this.brcontactos1.txtCorreoNombre.text = "";
				}
				quitarVentana();
			}
			
			private function quitarVentana():void{
				var evt:EventoPendientesPorEnviar = null;
				evt = new EventoPendientesPorEnviar( EventoPendientesPorEnviar.CIERRA_POP_UP_CONTACTOS);
				dispatchEvent( evt );
			}
	        
	        public function init():void{
	        	this.gridContactos.dataProvider = null;
	        	this.btnAgregar.enabled = false;
	        	//evento usado para mandar a llmar los lcientes para el combo en el cliente no encontrado
	        	var evento:EventoParaCatalogoService = null;
			    evento = new EventoParaCatalogoService( EventoParaCatalogoService.OBTENER_CLIENTES );
			    dispatchEvent( evento );
	        }
	            
		    private function agregarRegistro():void{
		    	if(this.chkContactoNuevo.selected == true){
		    		empresaSelect = new String();
		          	origenSelect = new String();
		          	contactoSelect = new String();
		          	idEmpresaSelect = new Number();
		          	idContactoSelect = new Number();
		          	if(this.chkNoRegistrado.selected == false){
		          		empresaSelect = this.cmbClientes.selectedItem.valor;
		          		idEmpresaSelect = this.cmbClientes.selectedItem.llave;
		 			    origenSelect = "Cliente";
		 			    contactoSelect = this.txtContactoNuevo.text;		 			    
		 			    //idContactoSelect= this.gridContactos.selectedItem.columnaCinco;
		 			    this.dispatchEvent(new Event("guardarContacto"));			 			    
		          	}else{
		          		empresaSelect = this.txtCliente.text;
						origenSelect = "Cliente";
						contactoSelect = this.txtContactoNuevo2.text;	
		          		this.dispatchEvent(new Event("agregaDatos"));
		          	}	
		    	}else{
		    		this.dispatchEvent(new Event("guardarContacto"));	
		    	}
		    	this.currentState='';
				this.hbxNuevoContacto.visible = false;
				this.hbxNuevoContacto.height = 0;
				this.chkContactoNuevo.selected = false;
				this.gridContactos.dataProvider = null;
				this._contactos = null;     
				quitarVentana();
		    }
		    
		    private function itemClickEvent(event:ListEvent):void{	 
		    	// se declaran las variables 
	          	empresaSelect = new String();
	          	origenSelect = new String();
	          	contactoSelect = new String();
	          	idEmpresaSelect = new Number();
	          	idContactoSelect = new Number();
	          	if (event.columnIndex == 5) {	  
	          		var i:Number;	          		
	          		var numeroFila:Number = new Number;
	          		//se verifica  si en el evento se selecciono el checkBox 
	          		if( (event.itemRenderer as CheckBox).selected == true ) {	  
	          			//se obtiene el numero de fila nota:la columna cero trae siempre el mismo numero        			
	          			numeroFila = this.gridContactos.selectedItem.columnaCero;
	          			this.gridContactos.selectedItem.columnaBoolean1 = true
	          			//Se hace un ciclo para todos los elementos del dataGrid
					 	for ( i=0; i < this._contactos.source.length; i++){	  
					 		//donde se encuentre dentro del dataProvider  la misma columna seleccionada se le asigna el valor true al checkSeleccionado
				    		if( (this._contactos.getItemAt( i ) as ValidadorDataGrid).columnaCero ==  numeroFila){
								this._contactos.getItemAt( i ).columnaBoolean1 = true;
							}else{
								this._contactos.getItemAt( i ).columnaBoolean1 = false;
							}
						}
						this.btnAgregar.enabled = true; 
					} else if ((event.itemRenderer as CheckBox).selected == false ){
						for ( i=0; i < this._contactos.source.length; i++){	  
							this._contactos.getItemAt( i ).columnaBoolean1 = false;
						}
						this.btnAgregar.enabled = false;
					}               
					//se asigna a las variables los valores seleccionados
					empresaSelect = this.gridContactos.selectedItem.columnaTresTexto;
	 			    origenSelect = this.gridContactos.selectedItem.columnaCuatroTexto;
	 			    contactoSelect = this.gridContactos.selectedItem.columnaUnoTexto;
	 			    idEmpresaSelect = this.gridContactos.selectedItem.columnaTresTexto;
	 			    idContactoSelect= this.gridContactos.selectedItem.columnaCinco;  
	 			    //al final se resetea el dataprovider del Grid debe seguir ese orden si no, no hay contactos seleccionados
	          		//this.gridContactos.dataProvider = this._contactos
	          		this._contactos.refresh();      						    
	            }	 	
	        } 
	       
	       /**
	        * Metodo que recibe los contactos del Mapa
	        */ 
	       public function set recibeContactos(datos:ArrayCollection):void{
		       if(datos == null){
		       	return;
		       }
		       var i:Number;
		       this._contactos = new ArrayCollection();
		       for (i = 0; i < datos.source.length; i++){		       	
			       var validaGrid:ValidadorDataGrid = new ValidadorDataGrid();		       
				       validaGrid.columnaCero = i+1;
				       validaGrid.columnaUnoTexto = (datos.getItemAt( i ) as Contacto).nombre;
				       validaGrid.columnaDosTexto = (datos.getItemAt(i) as Contacto).EMail;
				       validaGrid.columnaTresTexto = (datos.getItemAt(i) as Contacto).empresa;
				       validaGrid.columnaCuatroTexto = (datos.getItemAt( i ) as Contacto).tipo;
				       validaGrid.columnaBoolean1 =  false;
				       validaGrid.columnaCinco = (datos.getItemAt( i ) as Contacto).idContacto;
				    this._contactos.addItem( validaGrid );
		       }
	        }
	        
	        /**
	         * Metodo para cambiar esl estado con el BotonCheck chkContactoNuevo
	         */
			private function cambiaAEstado():void{	
				if(this.chkContactoNuevo.selected == true){
					if( this.lnkBRContacto.label == "Búsqueda avanzada"){
							this.estadoAnterior = "estadoBusquedaRapida";
						}else{
							this.estadoAnterior = "estadoBusquedaAvanzada";
						}	
						this.currentState='ClienteNuevo';
						this.btnAgregar.enabled = true;
				}else{
					if(this.estadoAnterior == "estadoBusquedaRapida"){
						this.currentState = '';
					}else{						
						this.currentState = 'BAContactos';
					}
				}								
			}
			
		/**
		 * Metodo que obtiene los clientes del Mapa  para un nuevo contacto
		 */
		public function set clientesoProveedoresParaCombo(datos:ArrayCollection):void{
			if(datos == null){
					return;
				}
				this._clientesOproveedores = datos; 
		}	
		
		/**
		 * Metodo usado para cambiar el combo de Clientes a un TextInput cuando se Rgistra un Nuevo Cliente 
		 */ 
		private function cambiaAEmpresaTexto():void{
			this.stackClienteNuevo.selectedIndex++;
			this.chkParaRegistrado.selected = true;
		}
		
		/**
		 * Metodo usado para cambiar el TextInput de Clientes al Combo con los clientes cargados se Rgistra un Nuevo Cliente 
		 */ 
		private function cambiaTextoEmpresaACombo():void{
			this.stackClienteNuevo.selectedIndex--;			
			this.chkNoRegistrado.selected = false;
		}
		
		/**
		 * Metodo Publico que permite hacer Visible la opcion para agregar un contacto nuevo.
		 */
		public function contactoNuevoVisible():void{
			this.hbxNuevoContacto.visible = true;
			this.hbxNuevoContacto.percentHeight = 100;
		} 	
		]]>
	</mx:Script> 	
	<maps:MapaContactos/>
	<mx:VBox width="100%"  paddingLeft="10" paddingRight="10" paddingTop="30" id="vbox1">
			<!--<mx:Label text="CONTACTOS" fontSize="30" width="100%"/>-->
			<label:labelSubtitulo text="CONTACTOS" width="100%"/>
			<mx:Spacer width="15"/>	
			<!--<mx:HRule width="100%"/>-->
			<otros:division width="100%"/>
			<mx:Spacer width="15"/>	
			<mx:HBox width="100%"  height="29" id="controlbar1">
				<mx:Spacer width="100%"/>
				<mx:LinkButton label="Búsqueda avanzada" id="lnkBRContacto" click="this.currentState='BAContactos'"/>
			</mx:HBox>
			<ns1:BRContactos id="brcontactos1">
			</ns1:BRContactos>
			<mx:Panel width="100%" height="100%" id="panel1" title="Datos" backgroundColor="#FFFFFF">				
				<mx:DataGrid width="100%" height="100%" id="gridContactos" itemClick="itemClickEvent(event)" dataProvider="{this._contactos}" textAlign="center">
					<mx:columns>
						<mx:DataGridColumn headerText="#" dataField="columnaCero" width="40"/>
						<mx:DataGridColumn headerText="Nombre" dataField="columnaUnoTexto" width="150"/>
						<mx:DataGridColumn headerText="E-Mail" dataField="columnaDosTexto" width="150"/>
						<mx:DataGridColumn headerText="Empresa" dataField="columnaTresTexto" dataTipField="idEmpresa" width="160"/>
						<mx:DataGridColumn headerText="Origen" dataField="columnaCuatroTexto" width="150"/>
						<mx:DataGridColumn headerText=" " dataField="columnaBoolean1" width="55" textAlign="center">
							<mx:itemRenderer>
								<mx:Component>
									<mx:CheckBox/>
								</mx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="NumeroContacto" dataField="columnaCinco" width="150" visible="false"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:Panel>		
			<mx:Spacer width="15" id="spacer1"/>	
			<!--<mx:HRule width="100%"  id="hrule1"/>-->
			<otros:division width="100%" id="hrule1"/>
			<mx:Spacer width="15" id="spacer2"/>	
	</mx:VBox>	
	
	<mx:VBox width="100%" horizontalAlign="right"  paddingLeft="10" paddingRight="10" paddingBottom="10">
		<mx:HBox id="hbxNuevoContacto" visible="false" height="0" horizontalAlign="right">
			<mx:Label text="Contacto no localizado"/>
			<mx:CheckBox id="chkContactoNuevo"  click="cambiaAEstado()" textAlign="left"/>
		</mx:HBox>
		<mx:HBox width="100%" height="100%" id="hbox1">
			<s:Button label="Cancelar" id="btnCancelar" click="cerrar()"/>
			<mx:Spacer width="100%"/>
			<s:Button width="80" label="Agregar" id="btnAgregar" enabled="false" click="agregarRegistro()"/>				
		</mx:HBox>
	</mx:VBox>				
</mx:TitleWindow>