<?xml version="1.0" encoding="utf-8"?>
<acordeon:acordeonPqNet initialize="initi()"  creationComplete="abrirPendienteCotizacion()" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:acordeon="skins.skin.acordeon.*" 
						xmlns:mx="http://www.adobe.com/2006/mxml" openDuration="250">
	
<!--<mx:Accordion xmlns:mx="http://www.adobe.com/2006/mxml" height="100%" width="100%"
			  initialize="initi();" creationComplete="abrirPendienteCotizacion()" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:acordeon="skins.skin.acordeon.*">-->
	
	<mx:Script>
		<![CDATA[
			import mx.com.proquifa.proquifanet.admonComunicacion.vistas.eventos.EventoPendientesPorEnviar;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoGenerico;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.InformacionVentana;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			
			[Bindable]
			private var _totalCotizaciones:String;
			[Bindable]
			private var _totalPedidos:String;
			[Bindable]
			private var _totalNotificaciones:String;
			[Bindable]
			private var _totalCompras:String;
			
			private function initi():void{
				var evento:EventoPendientesPorEnviar = new EventoPendientesPorEnviar ( EventoPendientesPorEnviar.OBTENER_TOTAL_DE_COTIZACION );
				evento.tipoPendiente = "Cotizaciones por enviar";
				evento.usuario = DatosGlobales.getInstance()._usuario.usuario;
				//evento.usuario = "amanriquez";
				dispatchEvent( evento );
				
				var eventoP:EventoPendientesPorEnviar = new EventoPendientesPorEnviar ( EventoPendientesPorEnviar.OBTENER_TOTAL_DE_PEDIDOS );
				eventoP.tipoPendiente = "Pedidos por enviar";
				eventoP.usuario = DatosGlobales.getInstance()._usuario.usuario;	
				//eventoP.usuario = "amanriquez";			
				dispatchEvent( eventoP );
				
				var eventoN:EventoPendientesPorEnviar = new EventoPendientesPorEnviar ( EventoPendientesPorEnviar.OBTENER_TOTAL_DE_NOTIFICADOS );
				eventoN.tipoPendiente = "Notificaciones por enviar";
				eventoN.usuario = DatosGlobales.getInstance()._usuario.usuario;	
				//eventoN.usuario = "amanriquez";			
				dispatchEvent( eventoN );
				
				var eventoC:EventoPendientesPorEnviar = new EventoPendientesPorEnviar ( EventoPendientesPorEnviar.OBTENER_TOTAL_DE_FACTURAS );
				eventoC.tipoPendiente = "Facturas por enviar";
				eventoC.usuario = DatosGlobales.getInstance()._usuario.usuario;
				//eventoC.usuario = "amanriquez";				
				dispatchEvent( eventoC );	
				actualizaTimer();			
			}
			
			private function abrirPendiente(event:MouseEvent):void{
				var evento:EventoGenerico = new EventoGenerico( EventoGenerico.ABRIR_VENTANA_EN_PENDIENTES );
				var infoVentana:InformacionVentana = new InformacionVentana();
				infoVentana.idVentana = (event.currentTarget as Button).id;
				evento.informacion = infoVentana;
				this.dispatchEvent( evento );
			}
			private function abrirPendienteCotizacion():void{
				var evento:EventoGenerico = new EventoGenerico( EventoGenerico.ABRIR_VENTANA_EN_PENDIENTES );
				var infoVentana:InformacionVentana = new InformacionVentana();
				infoVentana.idVentana = "cotizacionesPorEnviar";
				evento.informacion = infoVentana;
				this.dispatchEvent( evento );
			}
			
			 //------------ Inicio. Actualiza (recarga) los datos cada 300000 milisegundos (5min.) ---------- 
			  	           
	         private var timer:Timer = new Timer(300000, 1);   
	           
	         private function actualizaTimer():void   
	         {   
	            timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerCompleteHandler);   
	            timer.start();   
	         }   
	           
	         private function timerCompleteHandler(event:TimerEvent):void   
	         {   
	                initi();  
	         }  
	         
	         //------------ Fin. Actualiza los datos cada 300000 milisegundos (5min.) ---------- 
			
			 public function set obtenerTotalCotizaciones( numCotizaciones:Number ):void{
				if( numCotizaciones == 0 ){
					this._totalCotizaciones = "(" + 0 + ")";
					return;						
				}		
				this._totalCotizaciones = "(" + numCotizaciones + ")";		
			 }
			 public function set obtenerTotalPedidos( numPedidos:Number ):void{
				if( numPedidos == 0 ){
					this._totalPedidos = "(" + 0 + ")";
					return;						
				}		
				this._totalPedidos = "(" + numPedidos + ")";	
			 }
			public function set obtenerTotalNotificaciones( numNotificados:Number ):void{
				if( numNotificados == 0 ){
					this._totalNotificaciones = "(" + 0 + ")";
					return;						
				}		
				this._totalNotificaciones = "(" + numNotificados + ")";		
			}
			public function set obtenerTotalCompras( numCompras:Number ):void{
				if( numCompras == 0 ){
					this._totalCompras = "(" + 0 + ")";
					return;						
				}		
				this._totalCompras = "(" + numCompras + ")";	
			} 
			public function actualizaNumPendientes():void{
				initi();
			}
		]]>
	</mx:Script>
	<mx:VBox label="Administrador de Documentos">
		<mx:Form width="100%" textAlign="left" >			
			<mx:FormItem label="Cotizaciones por Enviar" textAlign="left">
				<s:Button label="{this._totalCotizaciones}" id="cotizacionesPorEnviar" click="abrirPendiente( event )" width="70"/>
			</mx:FormItem>
			<mx:FormItem label="Pedidos por Enviar">
				<s:Button label="{this._totalPedidos}" id="pedidosPorEnviar" click="abrirPendiente( event )" width="70"/>
			</mx:FormItem>
			<mx:FormItem label="Notificaciones por Enviar">
				<s:Button  label="{this._totalNotificaciones}" id="notificadosPorEnviar" click="abrirPendiente ( event )" width="70"/>
			</mx:FormItem>
			<mx:FormItem label="Facturas por Enviar" horizontalAlign="left">
				<s:Button label="{this._totalCompras}" id="ComprasPorEnviar" click="abrirPendiente( event )" width="70"/>
			</mx:FormItem>
		</mx:Form>
	</mx:VBox>
	<mx:VBox>
		
	</mx:VBox>
<!--</mx:Accordion>-->

</acordeon:acordeonPqNet>