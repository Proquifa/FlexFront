<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:botonAtras="skin.botonAtras.*"
		backgroundColor="#252b2c" viewActivate="activarVista(event)">
	
	<fx:Script>
		<![CDATA[
			import eventos.EventoMensajeroCierre;
			import modelo.objetos.PendientesMensajero;
			import modelo.objetos.itemPendientes;
			import modelo.singletons.datosGlobales;
			import mx.collections.ArrayCollection;
			import skin.botonLike.skinBotonLike;
			import skin.botonUnlike.skinBotonUnlike;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			public var pendientesCierre:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var pendientesFiltrado:ArrayCollection = new ArrayCollection();
			
			
			private var pendientesCierreNoRealizados:ArrayCollection = new ArrayCollection();
			private var pendientesCierreRealizados:ArrayCollection = new ArrayCollection();
			
			
			
			protected function vistaAnterior(event:MouseEvent):void
			{
				this.navigator.popView();
			}
			
			protected function filtrar():void
			{
				
				if(this.pendientesCierre.length > 0){
					for(var m:int = 0 ; m<this.pendientesCierre.length; m++){
						if(this.pendientesCierre[m].realizado == true){
							this.pendientesCierreRealizados.addItem(this.pendientesCierre[m]);
						}
						else{
							this.pendientesCierreNoRealizados.addItem(this.pendientesCierre[m]);
						}
					}
				}
				this.lbtitulo.text = "REALIZADOS";
				this.pendientesFiltrado = this.pendientesCierreRealizados;
			}
			
			protected function cambio(event:IndexChangeEvent):void
			{
				if(lista.selectedItem.realizado == false){
					var evento:EventoMensajeroCierre = new EventoMensajeroCierre(EventoMensajeroCierre.IR_A_VISTA_JUSTIFICACION_PENDIENTE);
					evento._pendienteJustificacion = this.lista.selectedItem as PendientesMensajero;
					this.dispatchEvent(evento);
					this.navigator.pushView(pendienteCierreJustificacionView);
					
				}
				
			}
			
			public function set recibirPendientesCierre(pendienteAgrupado:itemPendientes):void{
				this.pendientesCierre = new ArrayCollection();
				this.pendientesCierreNoRealizados = new ArrayCollection();
				this.pendientesCierreRealizados = new ArrayCollection();
				this.pendientesFiltrado = new ArrayCollection();
				this.title = "";
				if(pendienteAgrupado.pendientes.length > 0){
					this.title = pendienteAgrupado.empresa;
					this.pendientesCierre = pendienteAgrupado.pendientes;
					this.filtrar();
				}
			}
			
			protected function cambiarDatos(event:MouseEvent):void
			{
				//trace(event.toString());
				//event.currentTarget.skin.className == "skinBotonLike";
				this.cambiarEstado(event.currentTarget.skin.className.toString());
				/*if(event.currentTarget.skin.className == "skinBotonLike"){
					this.pendientesFiltrado = this.pendientesCierreRealizados
					this.lbtitulo.text = "REALIZADOS";
					this.btnFiltro.setStyle("skinClass",Class(skinBotonUnlike));
					
					//this.btnFiltro.label = "Norealizados"
					return;
				}
				if(event.currentTarget.skin.className == "skinBotonUnlike"){
					this.pendientesFiltrado = this.pendientesCierreNoRealizados;
					this.lbtitulo.text = "NO REALIZADOS";
					this.btnFiltro.setStyle("skinClass",Class(skinBotonLike));
					//this.btnFiltro.label = "Realizados";
					return;
				}*/
				
			}
			
			protected function cambiarEstado(estado:String):void{
				datosGlobales.getInstance().estado = estado;
				if(estado == "skinBotonLike"){
					this.pendientesFiltrado = this.pendientesCierreRealizados
					this.lbtitulo.text = "REALIZADOS";
					this.btnFiltro.setStyle("skinClass",Class(skinBotonUnlike));
					//this.btnFiltro.label = "Norealizados"
					return;
				}
				if(estado == "skinBotonUnlike"){
					this.pendientesFiltrado = this.pendientesCierreNoRealizados;
					this.lbtitulo.text = "NO REALIZADOS";
					this.btnFiltro.setStyle("skinClass",Class(skinBotonLike));
					//this.btnFiltro.label = "Realizados";
					return;
				}
			}
			
			
			//// click="cambiarDatos(this.btnFiltro.label)"
			
			protected function activarVista(event:ViewNavigatorEvent):void
			{
				this.cambiarEstado(datosGlobales.getInstance().estado);
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:navigationContent>
		<botonAtras:botonAtras click="vistaAnterior(event)"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button id="btnFiltro" click="cambiarDatos(event)" skinClass="skin.botonUnlike.skinBotonUnlike" label="Norealizados"/>
	</s:actionContent>
	
	<s:Scroller width="640" height="{this.height}">
		<s:VGroup id="contenedor" width="100%" gap="15" verticalCenter="0" horizontalCenter="0" horizontalAlign="center" height="100%">
			<s:Label id="lbtitulo" textAlign="center" color="#ffffff"  width="100%" height="42"
					 fontFamily="Helvetica Neue" fontSize="36.22" fontWeight="bold" lineHeight="171.45%"
					 text="REALIZADOS" typographicCase="uppercase" />
			<s:Rect width="450" height="5">
				<s:fill>
					<s:SolidColor color="0x4a4a4a"/>
				</s:fill>
			</s:Rect>
			
			<s:List verticalScrollPolicy="off" contentBackgroundColor="#252b2c" height="{this.pendientesFiltrado.length * 158}"
				 id="lista" dataProvider="{this.pendientesFiltrado}" change="cambio(event)" width="100%"
				 itemRenderer="vistas.renders.renderCierre.itemPendienteCierre" />
			<s:Label fontSize="22.64" color="0xffffff"  textAlign="center"  text="{this.pendientesFiltrado.length + ' Clientes'}"/>
			<s:Label fontSize="27.17" color="0xffffff"  textAlign="center" text="TOTAL"/>
		</s:VGroup>
				  
	</s:Scroller>
</s:View>
