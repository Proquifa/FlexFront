<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:dateField="skins.skin.dateField.*"
		 xmlns:input="skins.skin.textinput.*"
		 resize="calc(event)"
		 width="100%" height="100%">
	<fx:Metadata>
		[Event(name="verificarGastosCompletos", type="mx.com.proquifa.proquifanet.gestorCostos.vistas.eventos.EventoRegistrarGastos")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.com.proquifa.proquifanet.gestorCostos.vistas.eventos.EventoRegistrarGastos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.Rubros;
			import mx.events.ResizeEvent;
			
			import spark.events.TextOperationEvent;
			
			import skins.catalogos.catalogoIconosBotones;
			private var _cambio:String;
			[Bindable]private var fontSize:Number = 16;
			[Bindable]private var heightComponentes:Number = 30;
			private var _titulo:String = "titulo";
			
			[Bindable]
			public function get titulo():String
			{
				return _titulo;
			}
			
			public function set titulo(value:String):void
			{
				_titulo = value;
			}
			
			[Bindable]
			public function get cambio():String
			{
				return _cambio;
			}
			
			public function set cambio(value:String):void
			{
				_cambio = value;
			}
			/*******************************AGREGAR DOCUMENTOS******************************/
			public var file:File = new File();
			public var archivoPDF:ByteArray;
			public var archivoXML:ByteArray;
			
			public var rutaPDF:String;
			public var rutaXML:String;
			
			[Bindable]private var pdfCargado:Boolean; 
			[Bindable]private var xmlCargado:Boolean;
			
			[Bindable]private var nombrePDF:String;
			[Bindable]private var nombreXML:String;
			
			private var esPdf:Boolean;
			private var esXml:Boolean;
			
			public function browseFileSystem(valor:String):void{
				file = new File();
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				
				var docFilter:FileFilter;
				if (valor == 'pdf')
				{
					docFilter = new FileFilter("Documents", "*.pdf");
					file.addEventListener(Event.COMPLETE,completeHandlerPDF);	
				}
				if (valor == 'xml')
				{
					docFilter = new FileFilter("Documents", "*.xml");
					file.addEventListener(Event.COMPLETE,completeHandlerPDF);	
				}
				
				file.browse([docFilter]); 
			}
			private function selectHandler(event:Event):void 
			{
				var file:FileReference = FileReference(event.target);
				file.load();
			}
			private function ioErrorHandler(event:IOErrorEvent):void 
			{
				trace("ioErrorHandler: " + event);
				esPdf = false;
				esXml = false;
			}
			private function progressHandler(event:ProgressEvent):void 
			{
				var file:FileReference = FileReference(event.target);
				trace("progressHandler: name=" + file.name + "bytesLoaded = " + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			private function completeHandlerPDF(event:Event):void 
			{
				trace("completeHandler: " + event);
				try{
					if(esPdf){
						archivoPDF = file.data;
						rutaPDF = file.nativePath;
						nombrePDF = file.name;
						pdfCargado = true;
					}else if(esXml){
						archivoXML = file.data;
						rutaXML = file.nativePath;
						nombreXML = file.name;
						xmlCargado = true;
					}
				}catch(error:*){
					
				}
				var evento:EventoRegistrarGastos = new EventoRegistrarGastos(EventoRegistrarGastos.VERIFICAR_REGISTRAR_COSTOS);
				dispatchEvent(evento);
			}
			
			protected function agregarPDF(event:MouseEvent):void
			{
				esPdf = true;
				esXml = false;
				browseFileSystem("pdf");
			}
			protected function agregarXML(event:MouseEvent):void
			{
				esPdf = false;
				esXml = true;
				browseFileSystem("xml");	
			}
			protected function visualizarDoc(ruta:String):void
			{
				var request:URLRequest = new URLRequest("file://"+  encodeURI(ruta));
				navigateToURL(request);
			}
			public function obtenerInfo():void
			{
				
			}
			public function estaCompleta(sinXML:Boolean=false):Boolean
			{
				var completo:Boolean;
				if(!sinXML){
					if(txtMonto.text == "")
						completo = false;
					else if(date1.txtDateField.text == "")
						completo = false;
					else if(archivoPDF == null)
						completo = false;
					else if(archivoXML == null)
						completo = false;
					else
						completo = true;
					
					return completo;
				}else{
					if(txtMonto.text == "")
						completo = false;
					else if(date1.txtDateField.text == "")
						completo = false;
					else if(archivoPDF == null)
						completo = false;
					else
						completo = true;
					
					return completo;
				}
			}
			
			protected function verPdf(event:MouseEvent):void
			{
				visualizarDoc(rutaPDF);
			}
			
			protected function verXml(event:MouseEvent):void
			{
				visualizarDoc(rutaXML);
			}
			
			protected function verificar(event:TextOperationEvent):void
			{
				var evento:EventoRegistrarGastos = new EventoRegistrarGastos(EventoRegistrarGastos.VERIFICAR_REGISTRAR_COSTOS);
				dispatchEvent(evento);
			}
			public function getMonto():Number
			{
				var temp:Number = 0;
				try{
					temp = Number( txtMonto.text );
				}catch(error:*){
					temp = 0;
				}
				return temp;
			}
			
			protected function date1_clickHandler(event:MouseEvent):void
			{
				var evento:EventoRegistrarGastos = new EventoRegistrarGastos(EventoRegistrarGastos.VERIFICAR_REGISTRAR_COSTOS);
				dispatchEvent(evento);
			}
			
			[Bindable]private var widthText:Number;
			protected function calc(event:ResizeEvent):void
			{
				widthText = (250 / 1484) * (unscaledWidth);
				
				widthText = widthText > 250 ? 250:widthText;
				widthText = widthText < 100 ? 100:widthText;
				
				fontSize = (16/1484) * (unscaledWidth); 
				fontSize = fontSize > 16 ? 16:fontSize;
				fontSize = fontSize < 10 ? 10:fontSize;
				
				heightComponentes = (30/182) * (unscaledHeight); 
				heightComponentes = heightComponentes > 30 ? 30:heightComponentes;
				heightComponentes = heightComponentes < 15 ? 15:heightComponentes;
			}
			
			public function reset():void
			{
				txtMonto.text = "";
				date1.selectedDate = new Date();
				date1.txtDateField.text = "";
				nombrePDF = "";
				nombreXML = "";
				pdfCargado = false; 
				xmlCargado = false;
				rutaPDF = "";
				rutaXML = "";
				archivoPDF = null;
				archivoXML = null;
			}
			public function obtenerRubros():Rubros
			{
				var rubro:Rubros = new Rubros();
				var esNull:Boolean;
				try{
					rubro.fecha = date1.selectedDate;
					rubro.gastos = Number(txtMonto.text);
					rubro.PDF = archivoPDF;
					rubro.XML = archivoXML;
					
					if(rubro.PDF == null)
						esNull = true;
					else if(rubro.XML == null)
						esNull = true;
					/*else if(rubro.gastos < 0)
						esNull = true;*/
					
					/*if(esNull)
						return null;*/
					if(rubro.gastos == 0 && rubro.PDF == null && rubro.XML == null)
					{
						rubro = null;
					}
				}catch(error:*){
					
				}
				return rubro;
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill >
			<s:SolidColor color="#f3f3f4"/>
		</s:fill>
	</s:Rect>
	<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="10">
		<s:VGroup width="100%" height="100%" horizontalAlign="center">
			<s:VGroup height="100%" verticalAlign="middle">
				<s:Label id="lblTitulo" text="{titulo}" fontFamily="Helvetica" fontSize="{fontSize}" width="100%" height="100%" verticalAlign="middle" color="#424242"/>
				<input:TxtInputBlanco id="txtMonto" width="{widthText}" height="{heightComponentes}" fontSize="{fontSize}" fontFamily="Helvetica" textAlign="left" restrict="0-9" fontWeight="bold"
									  change="verificar(event)"/>
				<s:HGroup width="100%" height="100%" verticalAlign="middle" >
					<s:Label text="Tipo de Cambio: " fontFamily="Helvetica" fontSize="{fontSize}" color="#424242"/>
					<s:Label text="{cambio}" fontWeight="bold" fontFamily="Helvetica" fontSize="{fontSize}" color="#424242"/>
				</s:HGroup>
			</s:VGroup>  
		</s:VGroup>  
		<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
			<dateField:DatePickerDefault bordeRedondo="false" colorBorde="0xC2C3C9" grosorBorde="1" id="date1" heightLabelDatePicker="{heightComponentes}" fontWeightTextInput="bold" click="date1_clickHandler(event)" fontSizeText="{fontSize}"/>
		</s:VGroup>  
		<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
			<input:TxtInputBlanco id="txtFacturaPDF" width="{widthText}" height="{heightComponentes}" fontSize="{fontSize}" fontFamily="Helvetica" textAlign="left" 
								  fontWeight="bold" editable="false" text="{nombrePDF}"/>
			<mx:Image id="cargarPDF" source="{catalogoIconosBotones.getInstance().agregar_archivo_cuadro}" click="agregarPDF(event)" visible="{!pdfCargado}" includeInLayout="{!pdfCargado}" height="{heightComponentes}"/>
			<mx:Image source="{catalogoIconosBotones.getInstance().vista_previa_cuadro}" click="verPdf(event)" visible="{pdfCargado}" includeInLayout="{pdfCargado}" height="{heightComponentes}"/>
			<mx:Image source="{catalogoIconosBotones.getInstance().recargar_documento}" click="agregarPDF(event)" visible="{pdfCargado}" height="{heightComponentes}"/>
		</s:HGroup>
		<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
			<input:TxtInputBlanco id="txtFacturaXML" width="{widthText}" height="{heightComponentes}" fontSize="{fontSize}" fontFamily="Helvetica" textAlign="left" restrict="0-9" 
								  fontWeight="bold" editable="false" text="{nombreXML}" />
			<mx:Image id="cargarXML" source="{catalogoIconosBotones.getInstance().agregar_archivo_cuadro}" click="agregarXML(event)" visible="{!xmlCargado}" includeInLayout="{!xmlCargado}" height="{heightComponentes}"/>
			<mx:Image source="{catalogoIconosBotones.getInstance().vista_previa_cuadro}" click="verXml(event)" visible="{xmlCargado}" includeInLayout="{xmlCargado}" height="{heightComponentes}"/>
			<mx:Image source="{catalogoIconosBotones.getInstance().recargar_documento}" click="agregarXML(event)" visible="{xmlCargado}" height="{heightComponentes}"/>
		</s:HGroup>
	</s:HGroup>  
</s:Group>
