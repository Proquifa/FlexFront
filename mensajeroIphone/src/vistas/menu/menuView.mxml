<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		backgroundColor="#252b2c"
		destructionPolicy="never"
		viewActivate="setarMenu(event)" creationComplete="init(event)"
		title="GLOBAL"
		>
	<fx:Script>
		<![CDATA[
			import eventos.EventoMensajeroCierre;
			import eventos.EventoMensajeroEnCierre;
			import eventos.EventoMensajeroEstadisticas;
			
			import modelo.adminPopUp.AdminPopUp;
			import modelo.singletons.datosGlobales;
			import modelo.singletons.enRealizacion.DatosGlobalesEnRealizacion;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			import vistas.cierre.pendientesCierreView;
			import vistas.contactoReceptor.listaEdicionDeContactosView;
			import vistas.contactoReceptor.listaTodosLosContactosReceptoresView;
			import vistas.enCierre.todosPendientesEnCierreView;
			import vistas.estadisticas.generalEstadisticasView;
			import vistas.pendiente.pendientesView;
			
			public var pendientesMensajero:ArrayCollection = new ArrayCollection();
			public var pendientesEnCierreMensajero:ArrayCollection = new ArrayCollection();
			public var pendientesCierreMensajero:ArrayCollection = new ArrayCollection();
			
			private var globales:DatosGlobalesEnRealizacion = DatosGlobalesEnRealizacion.getInstance();
			
			[Bindable]
			public var menu:ArrayCollection = new ArrayCollection
				([
					{label:"PENDIENTES",icono:"pendientes",bandera:false},
					{label:"EN CIERRE",icono:"encierre",bandera:false},
					{label:"CERRADOS",icono:"cerrados",bandera:false},
					{label:"ESTADISTICA",icono:"estadistica",bandera:false},
					{label:"INCIDENTE",icono:"incidente",bandera:false}
				]);
			
			
			public function set recibirPendientes(pendientes:ArrayCollection):void
			{
				this.pendientesMensajero = new ArrayCollection();
				menu[0].bandera = false;
				if(pendientes.length > 0)
				{
					this.pendientesMensajero = pendientes;	
					menu[0].bandera = true;
				}
				menu.refresh();
			}
			
			public function set recibirPendientesEnCierre(pendientes:ArrayCollection):void
			{
				this.pendientesEnCierreMensajero = new ArrayCollection();
				menu[1].bandera = false;
				if(pendientes.length > 0)
				{
					this.pendientesEnCierreMensajero = pendientes;
					menu[1].bandera = true;
				}
				menu.refresh();
			}
			
			public function set recibirPendientesCierre(pendientes:ArrayCollection):void
			{
				this.pendientesCierreMensajero = new ArrayCollection();
				menu[2].bandera = false;
				if(pendientes.length > 0)
				{
					this.pendientesCierreMensajero = pendientes;
					menu[2].bandera = true;
				}
				menu.refresh();
			}
			
			
			protected function cambioMenu(event:IndexChangeEvent):void
			{
				if(event.currentTarget.selectedItem.label == "PENDIENTES")
				{
					this.navigator.pushView(pendientesView);
				}
				
				if(event.currentTarget.selectedItem.label == "EN CIERRE")
				{
					this.navigator.pushView(todosPendientesEnCierreView);
				}
				
				if(event.currentTarget.selectedItem.label == "CERRADOS")
				{
					this.navigator.pushView(pendientesCierreView);
				}
				
				if(event.currentTarget.selectedItem.label == "ESTADISTICA")
				{
					this.navigator.pushView(generalEstadisticasView);
				}
			}
			
			public function set actualizarPendientes(resultado:Object):void
			{
				if(resultado != null)
				{
					for(var m:int = 0; m<resultado.noVistas; m++)
					{
						this.eliminarVista();
					}
				}
				else{
					trace("nulo");
				}
			}
			
			public function actualizarEnCierre():void
			{
				var eventoEnCierre:EventoMensajeroEnCierre = new EventoMensajeroEnCierre(EventoMensajeroEnCierre.CONSULTAR_PENDIENTES_EN_CIERRE);
				eventoEnCierre._usuario = datosGlobales.getInstance().empleado_Login.usuario;
				this.dispatchEvent(eventoEnCierre);
			}
			
			public function actualizarCierre():void
			{
				var eventoCierre:EventoMensajeroCierre = new EventoMensajeroCierre(EventoMensajeroCierre.CONSULTAR_PENDIENTES_CERRADOS);
				eventoCierre._usuario =  datosGlobales.getInstance().empleado_Login.usuario;
				this.dispatchEvent(eventoCierre);
			}
			
			public function actualizarEstadistica():void
			{
				var eventoEstadistica:EventoMensajeroEstadisticas = new EventoMensajeroEstadisticas(EventoMensajeroEstadisticas.TRAER_DATOS_ESTADISTICAS);
				eventoEstadistica._usuario =  datosGlobales.getInstance().empleado_Login.usuario;
				this.dispatchEvent(eventoEstadistica);
			}
			
			public function eliminarVista():void
			{
				this.navigator.popView();
			}
			
			
			public function set realizarAccionEnLasVistas($nombreVista:String):void
			{
				if(!$nombreVista)
					return;
				
				if($nombreVista == "listaTodosLosContactosReceptoresView")
				{
					if(navigator.activeView.className == "listaEdicionDeContactosView")
					{
						navigator.popView();
					}
					else if(navigator.activeView.className != "listaTodosLosContactosReceptoresView" )
					{
						globales.ponerLaSiguienteVista = null;
						this.navigator.pushView(listaTodosLosContactosReceptoresView);
					}
				}
			}
			
			
			protected function setarMenu(event:ViewNavigatorEvent):void
			{
				this.listaMenu.selectedIndex = -1;
			}
			
			protected function init(event:FlexEvent):void
			{
				if(AdminPopUp.parentDisplayObject == null)
				{
					AdminPopUp.parentDisplayObject = UIComponent(this.parentApplication);
				}
			}
			
		]]>
	</fx:Script>
	<s:List id="listaMenu" contentBackgroundColor="#252b2c"  itemRenderer="vistas.renders.renderPrincipal.renderPrincipal" change="cambioMenu(event)" dataProvider="{menu}" width="100%" height="100%"/>
</s:View>
