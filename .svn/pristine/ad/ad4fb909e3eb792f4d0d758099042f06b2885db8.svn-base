package mx.com.proquifa.proquifanet.rsl.vista.modelo.tableros.clientes
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	
	import mx.collections.ArrayCollection;
	import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.clientes.EventoTableroClientes;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cliente;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.reportes.ventas.SeguimientoCotizacion;
	import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
	import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
	import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
	import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
	import mx.com.proquifa.proquifanet.rsl.vista.vistas.plantillaProquifa.gestion.VistaDefaultGestion;
	
	import skins.catalogos.catalogoAlertas;
	
	public class ModeloTableroClientes extends EventDispatcher
	{
		public function ModeloTableroClientes(target:IEventDispatcher=null)
		{
			super(target);
		}
		//					RESUMEN COTNOPED, SEGUIMIENTOS, CANCELACIONES
		private var _listaResumenConsulta:ArrayCollection = new ArrayCollection();
		public function setListaResumenConsulta( $datos:ArrayCollection ):void{
			if( $datos == null || $datos.length < 1 ){
				_listaResumenConsulta = new ArrayCollection();
			}else{
				_listaResumenConsulta = $datos;
			}
			for(var t:int = 0; t < _listaResumenConsulta.length; t++){
				(_listaResumenConsulta[t] as ResumenConsulta).numFila = t + 1;
			}
			_consultaHechaStrBool = "true";
			dispatchEvent( new Event("regresaConsultaHechaModeloTableroCliente") );
			dispatchEvent( new Event("regresaResumenConsultaModeloTableroCliente") );
		}
		[Bindable(event="regresaResumenConsultaModeloTableroCliente")]
		public function get listaResumenConsulta():ArrayCollection{
			return _listaResumenConsulta;
		}
		//					/RESUMEN COTNOPED, SEGUIMIENTOS, CANCELACIONES
		private var _consultaHechaStrBool:String;
		[Bindable(event="regresaConsultaHechaModeloTableroCliente")]
		public function get consultaHechaStrBool():String{
			var tempConsulta:String = _consultaHechaStrBool;
			_consultaHechaStrBool = null;
			return tempConsulta;
		}
		//					MIX PRODUCTOS
		private var _listaProductosCliente:ArrayCollection = new ArrayCollection();
		public function setListaProductosCliente(datos:ArrayCollection):void{
			if (datos != null){ 
				_listaProductosCliente = new ArrayCollection();
				_listaProductosCliente = datos;
				for(var t:int = 0; t < _listaProductosCliente.length; t++){
					(_listaProductosCliente[t] as ProductosCliente).numFila = t + 1;
				}
			}
			dispatchEvent( new Event("regresaListaProductosClienteModeloTableroCliente") );
			if(_listaProductosCliente!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaProductosClienteModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaProductosClienteModeloTableroCliente")]
		public function get listaProductosCliente():ArrayCollection{
			return _listaProductosCliente;
		}
		//					/MIX PRODUCTOS
		//					COT = PED
		private var cotPedido:CotizaPedidoCliente = new CotizaPedidoCliente();
		private var _listaCotizaPedidoCliente:ArrayCollection = new ArrayCollection();
		public function setListaCotizaPedidoCliente(datos:ArrayCollection):void{
			if (datos != null){
				_listaCotizaPedidoCliente = new ArrayCollection();
				_listaCotizaPedidoCliente = datos;
				for(var t:int = 0; t < _listaCotizaPedidoCliente.length; t++){
					(_listaCotizaPedidoCliente[t] as CotizaPedidoCliente).numFila = t + 1;
				}
			}
			dispatchEvent( new Event("regresaListaCotizaPedidoClienteModeloTableroCliente") );
			if(_listaCotizaPedidoCliente!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaCotizaPedidoClienteModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaCotizaPedidoClienteModeloTableroCliente")]
		public function get listaCotizaPedidoCliente():ArrayCollection{
			return _listaCotizaPedidoCliente;
		}
		//					/COT = PED
		//					PEDIDOS
		private var _listaPedidosCliente:ArrayCollection;
		public function  setListaPedidosCliente($datos:ArrayCollection):void{
			_listaPedidosCliente = new ArrayCollection();
			_listaPedidosCliente = $datos;
			for(var g:int= 0;g < _listaPedidosCliente.length; g++){
				(_listaPedidosCliente[g] as PedidosCliente).numFila = g + 1;
			}
			dispatchEvent(  new Event("regresaListaPedidosClienteModeloTableroCliente") );
			if(_listaPedidosCliente!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaPedidosClienteModeloTableroCliente");
				}
			}
		}
		[Bindable(event = "regresaListaPedidosClienteModeloTableroCliente")]
		public function get listaPedidosCliente():ArrayCollection{
			return _listaPedidosCliente;
		}
		//					/PEDIDOS
		//					VENTAS DEL PERIODO
		private var _listaVentasCliente:ArrayCollection;
		public function setListaVentasCliente($datos:ArrayCollection):void{
			_listaVentasCliente = new ArrayCollection();
			if($datos)
			{
				_listaVentasCliente = $datos;
				for(var f:int=0;f<$datos.length; f++)
				{
					(_listaVentasCliente[f] as VentasCliente).numFila = f  + 1;
				}
			}
			else
			{
				_listaVentasCliente = new ArrayCollection();
			}
			
			dispatchEvent( new Event("regresaListaVentasClienteModeloTableroCliente") );
			if(_listaVentasCliente!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaVentasClienteModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaVentasClienteModeloTableroCliente")]
		public function get listaVentasCliente():ArrayCollection{
			return _listaVentasCliente;
		}
		
		
		
		//					/VENTAS DEL PERIODO
		//					MIX MARCAS
		private var _listaMarcasCliente:ArrayCollection;
		public function setListaMarcasCliente($datos:ArrayCollection):void{
			_listaMarcasCliente = new ArrayCollection();
			_listaMarcasCliente = $datos;
			for(var g:int = 0; g < $datos.length; g++){
				(_listaMarcasCliente[g] as MarcasCliente).numFila = g + 1;
			}
			dispatchEvent( new Event("regresaListaMarcasClienteModeloTableroCliente") );
		}
		[Bindable(event="regresaListaMarcasClienteModeloTableroCliente")]
		public function get listaMarcasCliente():ArrayCollection{
			return _listaMarcasCliente;
		}
		//					/MIX MARCAS
		//					COT != PED
		private var _listaCotizaNoPedidoCliente:ArrayCollection;
		public function setListaCotizaNoPedidoCliente($datos:ArrayCollection):void{
			_listaCotizaNoPedidoCliente = new ArrayCollection();
			_listaCotizaNoPedidoCliente = $datos;
			for(var b:int=0;b<$datos.length;b++){
				(_listaCotizaNoPedidoCliente[b] as CotizaNoPedidoCliente).numFila = b + 1;
			}
			dispatchEvent( new Event("regresaListaCotizaNoPedidoClienteModeloTableroCliente") );
			if(_listaCotizaNoPedidoCliente!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaCotizaNoPedidoClienteModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaCotizaNoPedidoClienteModeloTableroCliente")]
		public function get listaCotizaNoPedidoCliente():ArrayCollection{
			return _listaCotizaNoPedidoCliente;
		}
		//					/COT != PED
		//					COT != PED TEST
		private var _listaLinealCotNoPed:ArrayCollection;
		public function setLinealCotNoPed($datos:ArrayCollection):void{
			_listaLinealCotNoPed = new ArrayCollection();
			_listaLinealCotNoPed = $datos;
			/*for(var b:int=0;b<$datos.length;b++){
			(_listaLinealCotNoPed[b] as CotizaNoPedidoCliente).numFila = b + 1;
			}*/
			dispatchEvent( new Event("regresaLinealCotNoPedModeloTableroCliente") );
		}
		[Bindable(event="regresaLinealCotNoPedModeloTableroCliente")]
		public function get listaLinealCotNoPed():ArrayCollection{
			return _listaLinealCotNoPed;
		}
		//					/COT != PED TEST
		//					ENTREGAS
		private var _listaEntregasCliente:ArrayCollection;
		public function setListaEntregasCliente($datos:ArrayCollection):void{
			_listaEntregasCliente = new ArrayCollection();
			_listaEntregasCliente = $datos;
			for(var g:int = 0; g < $datos.length; g++){
				(_listaEntregasCliente[g] as EntregasCliente).numFila = g + 1;
			}
			dispatchEvent( new Event("regresaListaEntregasClienteModeloTableroCliente") );
			if(_listaEntregasCliente!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaEntregasClienteModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaEntregasClienteModeloTableroCliente")]
		public function get listaEntregasCliente():ArrayCollection{
			return _listaEntregasCliente;
		}
		//					/ENTREGAS
		//					COMPORTAMIENTO PAGOS
		private var _listaComportamientoPagos:ArrayCollection;
		public function setListaComportamientoPagos($datos:ArrayCollection):void{
			_listaComportamientoPagos = new ArrayCollection();
			_listaComportamientoPagos = $datos;
			for(var h:int=0;h<$datos.length;h++){
				(_listaComportamientoPagos[h] as ComportamientoPagos).numFila = h +1;
			}
			dispatchEvent( new Event("regresaListaComportamientoPagosModeloTableroCliente") );
			if(_listaComportamientoPagos!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaComportamientoPagosModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaComportamientoPagosModeloTableroCliente")]
		public function get listaComportamientoPagos():ArrayCollection{
			return _listaComportamientoPagos;
		}
		//					/COMPORTAMIENTO PAGOS
		//					SEGUIMIENTOS COTIZACION
		private var _listaSeguimientoCotizacion:ArrayCollection;
		public function setListaSeguimientoCotizacion( $datos:ArrayCollection ):void{
			if($datos == null) return;
			_listaSeguimientoCotizacion = new ArrayCollection();
			_listaSeguimientoCotizacion = $datos;
			for( var m:int=0; m<$datos.length; m++ ){
				( _listaSeguimientoCotizacion[m] as SeguimientoCotizacion).numFila = m+1;
			}
			dispatchEvent( new Event("regresaListaSeguimientoCotizacionModeloTableroCliente") );
			
			if(_listaSeguimientoCotizacion!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaSeguimientoCotizacionModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaSeguimientoCotizacionModeloTableroCliente")]
		public function get listaSeguimientoCotizacion():ArrayCollection{
			return _listaSeguimientoCotizacion;
		}
		//					/SEGUIMIENTOS COTIZACION
		//					CANCELACION COTIZACION
		private var _listaSeguimientoCotizacionCancelacion:ArrayCollection;
		public function setListaSeguimientoCotizacionCancelacion( $datos:ArrayCollection ):void{
			
			_listaSeguimientoCotizacionCancelacion = new ArrayCollection();
			if ($datos != null){
				_listaSeguimientoCotizacionCancelacion = $datos;
				for( var m:int=0; m<$datos.length; m++ ){
					( _listaSeguimientoCotizacionCancelacion[m] as SeguimientoCotizacion).numFila = m+1;
				}
			}
			
			dispatchEvent( new Event("regresaListaSeguimientoCotizacionCancelacionModeloTableroCliente") );
			
			//if(_listaSeguimientoCotizacionCancelacion!= null)
			{
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaSeguimientoCotizacionCancelacionModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaListaSeguimientoCotizacionCancelacionModeloTableroCliente")]
		public function get listaSeguimientoCotizacionCancelacion():ArrayCollection{
			return _listaSeguimientoCotizacionCancelacion;
		}
		//					/CANCELACION COTIZACION
		//					RANGO MINIMO MESES
		private var _rangoMinMes:int;
		public function setRangoMinMeses($min:int):void{
			_rangoMinMes = $min;
			dispatchEvent( new Event("regresaMesMinModeloTableroCliente") );
		}
		[Bindable(event="regresaMesMinModeloTableroCliente")]
		public function get rangoMinMeses():int{
			return _rangoMinMes;
		}
		//					/RANGO MINIMO MESES
		//					RANGO MAXIMO MESES
		private var _rangoMaxMes:int;
		public function setRangoMaxMeses($max:int):void{
			_rangoMaxMes = $max;
			dispatchEvent( new Event("regresaMesMaxModeloTableroCliente") );
		}
		[Bindable(event="regresaMesMaxModeloTableroCliente")]
		public function get rangoMaxMeses():int{
			return _rangoMaxMes;
		}
		//					/RANGO MAXIMO MESES
		//						DATOS GENERALES/ECONOMICOS CLIENTE
		private var _cliente:Cliente;
		public function setCliente($cliente:Cliente):void{
			_cliente = new Cliente();
			_cliente = $cliente;
			dispatchEvent( new Event("regresaClienteModeloTableroCliente") );
		}
		[Bindable(event="regresaClienteModeloTableroCliente")]
		public function get cliente():Cliente{
			return _cliente;
		}
		
		private var _promedio:PromedioTableroCliente;//JM
		public function setPromedioTablero($promedio:PromedioTableroCliente):void{
			_promedio = new PromedioTableroCliente();
			_promedio = $promedio;
			dispatchEvent( new Event("regresaPromedioModeloTableroCliente") );
		}
		[Bindable(event="regresaPromedioModeloTableroCliente")]
		public function get promedioTablero():PromedioTableroCliente{//JM
			return _promedio;
		}
		
		
		/**
		 * Graficas Ventas del Periodo
		 */
		private var _dataNivelIngreso:ArrayCollection;
		public function setDataCharNivelIngresoVentasPorPeriodo($nivelIngreso:ArrayCollection):void
		{
			_dataNivelIngreso = new ArrayCollection();
			if($nivelIngreso == null ) return;
			
			var query:Query = new Query($nivelIngreso,["etiqueta"]);
			var etiquetas:Array = query.getPunteros(["etiqueta"]);
			for (var i:int = 0; i < etiquetas.length; i++) 
			{
				var resumen:ResumenConsulta = new ResumenConsulta();
				var punteros:Array = query.getPunteros([etiquetas[i]] );
				
				resumen.etiqueta = query.universo[punteros[0]].etiqueta;
				if(resumen.etiqueta.toLowerCase() == "aaplus")
				{
					resumen.etiqueta = "AA+";
				}
				
				resumen.piezasTotal = query.getSumarCampo("piezasTotal",punteros);
				resumen.partidas = query.getSumarCampo("partidas",punteros);
				resumen.total = query.getSumarCampo("total",punteros);
				resumen.totalClientes = query.getSumarCampo("totalClientes",punteros);
				if (resumen.total < 0 ){
					resumen.total = 0;
				}
				_dataNivelIngreso.addItem(resumen);
			}
			
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"regresarInfoNivelIngresoTableroClientes");
			}
			dispatchEvent(new Event("regresarInfoNivelIngresoTableroClientes"));
		}
		[Bindable(event="regresarInfoNivelIngresoTableroClientes")]
		public function get dataNivelDeIngresoVentasPorPeriodo():ArrayCollection{
			return _dataNivelIngreso;
		}
		
		private var _dataChartCliente:ArrayCollection;
		public function setDataChartClientesVentasPorPeriodo($cliente:ArrayCollection):void
		{
			_dataChartCliente = new ArrayCollection();
			if($cliente == null ) return;
			
			var tempArray:ArrayCollection = Util.sortArray($cliente,"total",true);
			for (var r:int = 1; r<=tempArray.length; r++)
			{
				(tempArray[r-1] as ResumenConsulta).rankingCliente = r;
			}
			
			var query:Query = new Query(tempArray,["etiqueta"]);
			var etiquetas:Array = query.getPunteros(["etiqueta"]);
			
			for (var i:int = 0; i < etiquetas.length; i++) 
			{
				var resumen:ResumenConsulta = new ResumenConsulta();
				var punteros:Array = query.getPunteros([etiquetas[i]] );
				resumen.rankingCliente = query.universo[punteros[0]].rankingCliente;
				resumen.etiqueta = query.universo[punteros[0]].etiqueta;
				resumen.piezasTotal = query.getSumarCampo("piezasTotal",punteros);
				resumen.partidas = query.getSumarCampo("partidas",punteros);
				resumen.total = query.getSumarCampo("total",punteros);
				if (resumen.total < 0 ){
					resumen.total = 0;
				}
				resumen.totalClientes = query.getSumarCampo("totalClientes",punteros);
				_dataChartCliente.addItem(resumen);
			}
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"regresarInfoChartClienteTableroClientes");
			}
			dispatchEvent(new Event("regresarInfoChartClienteTableroClientes"));
		}
		[Bindable(event="regresarInfoChartClienteTableroClientes")]
		public function get dataChartClientesVentasPorPeriodo():ArrayCollection{
			return _dataChartCliente;
		}
		
		private var _dataDistribucionRutas:ArrayCollection;
		public function setDataCharDistribucionRutasPorPeriodo($nivelIngreso:ArrayCollection):void
		{
			_dataDistribucionRutas = new ArrayCollection();
			if($nivelIngreso == null ) return;
			
			var query:Query = new Query($nivelIngreso,["etiqueta"]);
			var etiquetas:Array = query.getPunteros(["etiqueta"]);
			for (var i:int = 0; i < etiquetas.length; i++) 
			{
				var resumen:ResumenConsulta = new ResumenConsulta();
				var punteros:Array = query.getPunteros([etiquetas[i]] );
				
				resumen.etiqueta = query.universo[punteros[0]].etiqueta;
				resumen.piezasTotal = query.getSumarCampo("piezasTotal",punteros);
				resumen.partidas = query.getSumarCampo("partidas",punteros);
				resumen.total = query.getSumarCampo("total",punteros);
				if (resumen.total < 0 ){
					resumen.total = 0;
				}
				resumen.totalClientes = query.getSumarCampo("totalClientes",punteros);
				_dataDistribucionRutas.addItem(resumen);
			}
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"regresarInfoDistribucionRutasTableroClientes");
			}
			dispatchEvent(new Event("regresarInfoDistribucionRutasTableroClientes"));
		}
		[Bindable(event="regresarInfoDistribucionRutasTableroClientes")]
		public function get dataNivelDeIngresoDistribucionRutas():ArrayCollection{
			return _dataDistribucionRutas;
		}
		
		private var _dataEsac:ArrayCollection;
		public function setDataCharEsacPorPeriodo($datos:ArrayCollection):void
		{
			_dataEsac = new ArrayCollection();
			if($datos == null ) return;
			
			var query:Query = new Query($datos,["etiqueta"]);
			var etiquetas:Array = query.getPunteros(["etiqueta"]);
			for (var i:int = 0; i < etiquetas.length; i++) 
			{
				var resumen:ResumenConsulta = new ResumenConsulta();
				var punteros:Array = query.getPunteros([etiquetas[i]] );
				
				resumen.etiqueta = query.universo[punteros[0]].etiqueta;
				resumen.piezasTotal = query.getSumarCampo("piezasTotal",punteros);
				resumen.partidas = query.getSumarCampo("partidas",punteros);
				resumen.total = query.getSumarCampo("total",punteros);
				if (resumen.total < 0 ){
					resumen.total = 0;
				}
				resumen.totalClientes = query.getSumarCampo("totalClientes",punteros);
				_dataEsac.addItem(resumen);
			}
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"regresarInfoEsacTableroClientes");
			}
			dispatchEvent(new Event("regresarInfoEsacTableroClientes"));
		}
		[Bindable(event="regresarInfoEsacTableroClientes")]
		public function get dataChartEsacVentasPorPeriodo():ArrayCollection{
			return _dataEsac;
		}
		
		private var _dataClave:ArrayCollection;
		public function setDataCharClavePorPeriodo($datos:ArrayCollection):void
		{
			_dataClave = new ArrayCollection;
			if($datos == null ) return;
			//_dataClave = $datos;
			
			
			var query:Query = new Query($datos,["etiqueta"]);
			var etiquetas:Array = query.getPunteros(["etiqueta"]);
			for (var i:int = 0; i < etiquetas.length; i++) 
			{
				var resumen:ResumenConsulta = new ResumenConsulta();
				var punteros:Array = query.getPunteros([etiquetas[i]] );
				
				resumen.etiqueta = query.universo[punteros[0]].etiqueta;
				resumen.piezasTotal = query.getSumarCampo("piezasTotal",punteros);
				resumen.partidas = query.getSumarCampo("partidas",punteros);
				resumen.total = query.getSumarCampo("total",punteros);
				if (resumen.total < 0 ){
					resumen.total = 0;
				}
				resumen.totalClientes = query.getSumarCampo("totalClientes",punteros);
				_dataClave.addItem(resumen);
			}
			
			
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"regresarInfoClaveTableroClientes");
			}
			dispatchEvent(new Event("regresarInfoClaveTableroClientes"));
		}
		[Bindable(event="regresarInfoClaveTableroClientes")]
		public function get dataChartClaveVentasPorPeriodo():ArrayCollection{
			return _dataClave;
		}
		
		private var _dataEV:ArrayCollection;
		public function setDataCharEVPorPeriodo($datos:ArrayCollection):void
		{
			_dataEV = new ArrayCollection();
			if($datos == null ) return;
			
			var query:Query = new Query($datos,["etiqueta"]);
			var etiquetas:Array = query.getPunteros(["etiqueta"]);
			for (var i:int = 0; i < etiquetas.length; i++) 
			{
				var resumen:ResumenConsulta = new ResumenConsulta();
				var punteros:Array = query.getPunteros([etiquetas[i]] );
				
				resumen.etiqueta = query.universo[punteros[0]].etiqueta;
				resumen.piezasTotal = query.getSumarCampo("piezasTotal",punteros);
				resumen.partidas = query.getSumarCampo("partidas",punteros);
				resumen.total = query.getSumarCampo("total",punteros);
				if (resumen.total < 0 ){
					resumen.total = 0;
				}
				resumen.totalClientes = query.getSumarCampo("totalClientes",punteros);
				_dataEV.addItem(resumen);
			}
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"regresarInfoEVTableroClientes");
			}
			dispatchEvent(new Event("regresarInfoEVTableroClientes"));
		}
		[Bindable(event="regresarInfoEVTableroClientes")]
		public function get dataChartEVVentasPorPeriodo():ArrayCollection{
			return _dataEV;
		}
		
		
		/**
		 *---------------------------------------
		 */
		
		private var _currentFiltroBusqueda:String;
		public function resultSetFiltroBusqueda($filtro:String):void
		{
			if($filtro == null) return;
			_currentFiltroBusqueda = $filtro;
			dispatchEvent(new Event("settearFiltroBusquedaTableroClientes"));
		}
		[Bindable(event="settearFiltroBusquedaTableroClientes")]
		public function get resultGetFiltroBusqueda():String
		{
			return _currentFiltroBusqueda;
		}
		
		/*private var _eventoTableroConsulta:EventoTableroClientes;
		public function obtieneEventoConsulta($evt:EventoTableroClientes):void
		{
		if($evt == null) return;
		_eventoTableroConsulta = $evt;
		}*/
		
		
		//						/DATOS GENERALES/ECONOMICOS CLIENTE
		public function faultServicioMixProductos(objeto:Object):void{
			alertaSingleton.showReintentar( "mixProductos: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioCodPed(objeto:Object):void{
			alertaSingleton.showReintentar( "cotPed: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioPedidos(objeto:Object):void{
			alertaSingleton.showReintentar( "pedidos: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioEntrega(objeto:Object):void{
			alertaSingleton.showReintentar( "entregas: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioCliente(objeto:Object):void{
			alertaSingleton.showReintentar( "infoCliente: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioResumen(objeto:Object):void{
			alertaSingleton.showReintentar( "graphics: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioVentasPeriodo(objeto:Object):void{
			alertaSingleton.showReintentar( "ventasPeriodo: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioVentasPeriodoGrid(objeto:Object):void{
			alertaSingleton.showReintentar( "ventasPeriodo: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioVentasPeriodoMonto(objeto:Object):void{
			alertaSingleton.showReintentar( "ventasPeriodo: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioMixMarcas(objeto:Object):void{
			alertaSingleton.showReintentar( "mixMarcas: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioCotNoPed(objeto:Object):void{
			alertaSingleton.showReintentar( "cotNoPed: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioComportamientoPagos(objeto:Object):void{
			alertaSingleton.showReintentar( "comportamientoPagos: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioComportamientoPagosGrid(objeto:Object):void{
			alertaSingleton.showReintentar( "comportamientoPagos: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioSeguimientos(objeto:Object):void{
			alertaSingleton.showReintentar( "seguimientos: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioCancelaciones(objeto:Object):void{
			alertaSingleton.showReintentar( "cancelaciones: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		public function faultServicioCotDifPed(objeto:Object):void{
			alertaSingleton.showReintentar( "cotNoPed: "+catalogoAlertas.ERR_servicio + objeto, catalogoAlertas.TIT_ERR)
		}
		
		//		FILTROS GLOBALES
		private var _event:EventoTableroClientes;
		public function setEventoParaSacarLabelsPeriodos(evt:EventoTableroClientes):void
		{
			if(evt == null ) return;
			_event = evt;
			generarLabelsPeriodo( _event.parametros.rangoMinMes, _event.parametros.rangoMaxMes,_event.parametros.lineal,evt.parametros.periodo);
			_event.labelPeriodo1 = _periodo1;
			_event.labelPeriodo2 = _periodo2;
			_event.labelPeriodo3 = _periodo3;
			_event.labelPeriodo4 = _periodo4;
			_event.labelPeriodo5 = _periodo5;
			dispatchEvent( new Event("regresaFiltrosModeloTableroCliente") );
		}
		
		[Bindable(event="regresaFiltrosModeloTableroCliente")]
		public function get eventoFiltros():EventoTableroClientes
		{
			return _event;
		}
		
		//		FILTROS ESPECIFICOS
		private var _eventFiltrosMixProductos:EventoTableroClientes;
		private var _eventFiltrosCotPed:EventoTableroClientes;
		private var _eventFiltrosSeguimiento:EventoTableroClientes;
		private var _eventFiltrosPedidos:EventoTableroClientes;
		private var _eventFiltrosVentasPeriodo:EventoTableroClientes;
		private var _eventFiltrosMixMarcas:EventoTableroClientes;
		private var _eventFiltrosCotNoPed:EventoTableroClientes;
		private var _eventFiltrosCancelacionCotizacion:EventoTableroClientes;
		private var _eventFiltrosEntregas:EventoTableroClientes;
		private var _eventFiltrosComportaPagos:EventoTableroClientes;
		public function calcularLabelsIndividuales(evt:EventoTableroClientes):void
		{
			var evtRegresaAVista:EventoTableroClientes;
			if(evt == null ) return;
			evtRegresaAVista = evt;
			generarLabelsPeriodo( evt.parametros.rangoMinMes, evt.parametros.rangoMaxMes,evt.parametros.lineal,evt.parametros.periodo);
			evtRegresaAVista.labelPeriodo1 = _periodo1;
			evtRegresaAVista.labelPeriodo2 = _periodo2;
			evtRegresaAVista.labelPeriodo3 = _periodo3;
			evtRegresaAVista.labelPeriodo4 = _periodo4;
			evtRegresaAVista.labelPeriodo5 = _periodo5;
			
			switch(evt.type)
			{
				case "consultaLinealMixProductosEventoTableroClientes":
				{
					_eventFiltrosMixProductos = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_MixProductosComparacion") );
					break;
				}
				case "consultaLinealCorizacionPedidoEventoTableroClientes":
				{
					_eventFiltrosCotPed = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_CorizacionPedido") );
					break;
				}
				case "consultaLinealSeguimientosEventoTableroClientes":
				{
					_eventFiltrosSeguimiento = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_SeguimientosTab") );
					break;
				}
				case "consultaPedidosEventoTableroClientes":
				{
					_eventFiltrosPedidos = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_PedidosComparacion") );
					break;
				}
				case "consultaLinealVentasPeriodoEventoTableroClientes":
				{
					_eventFiltrosVentasPeriodo = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_PeriodoTabComparacion") );
					break;
				}
				case "consultaLinealMixMarcasEventoTableroClientes":
				{
					_eventFiltrosMixMarcas = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_MixMarcasComparacion") );
					break;
				}
				case "consultaLinealCotDiferentePedidosEventoTableroClientes":
				{
					_eventFiltrosCotNoPed = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_CotNoPedComparacion") );
					break;
				}
				case "cancelacionCotizacionEventoTableroClientes":
				{
					_eventFiltrosCancelacionCotizacion = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_CancelacionCotizacionComparacion") );
					break;
				}
				case "consultaLinealEntregasEventoTableroClientes":
				{
					_eventFiltrosEntregas = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_EntregasTabComparacion") );
					break;
				}
				case "consultaComportamientoPagosEventoTableroClientes":
				{
					_eventFiltrosComportaPagos = evtRegresaAVista;
					dispatchEvent( new Event("regresaFiltrosIndividualModeloTableroCliente_ComportaPagosComparacion") );
					break;
				}
					
				default:
				{
					break;
				}
			}
		}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_MixProductosComparacion")]
		public function get obtenerLabelsParticularMixProductosComparacion():EventoTableroClientes{ return _eventFiltrosMixProductos;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_CorizacionPedido")]
		public function get obtenerLabelsParticularCotPedComparacion():EventoTableroClientes{ return _eventFiltrosCotPed;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_SeguimientosTab")]
		public function get obtenerLabelsParticularSeguimientosTab():EventoTableroClientes{ return _eventFiltrosSeguimiento;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_PedidosComparacion")]
		public function get obtenerLabelsParticularPedidosComparacion():EventoTableroClientes{ return _eventFiltrosPedidos;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_PeriodoTabComparacion")]
		public function get obtenerLabelsPeriodoTabComparacion():EventoTableroClientes{ return _eventFiltrosVentasPeriodo;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_MixMarcasComparacion")]
		public function get obtenerLabelsParticularMixMarcasComparacion():EventoTableroClientes{ return _eventFiltrosMixMarcas;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_CotNoPedComparacion")]
		public function get obtenerLabelsParticularCotNoPedComparacion():EventoTableroClientes{ return _eventFiltrosCotNoPed;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_CancelacionCotizacionComparacion")]
		public function get obtenerLabelsParticularCancelacionCotizacionComparacion():EventoTableroClientes{ return _eventFiltrosCancelacionCotizacion;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_ComportaPagosComparacion")]
		public function get obtenerLabelsParticularComportaPagosComparacion():EventoTableroClientes{ return _eventFiltrosComportaPagos;}
		
		[Bindable(event="regresaFiltrosIndividualModeloTableroCliente_EntregasTabComparacion")]
		public function get obtenerLabelsParticularEntregasTabComparacion():EventoTableroClientes{ return _eventFiltrosEntregas;}
		
		
		
		
		//		/FILTROS
		//		MIX MARCAS LINEAL
		private var _linealMixMarcas:ArrayCollection;
		public function setLinealMixMarcas( $datos:ArrayCollection, $evento:EventoTableroClientes = null  ):void{
			if($datos == null)
				_linealMixMarcas = new ArrayCollection();
			else
				_linealMixMarcas = $datos;
			
			dispatchEvent( new Event("regresaLinealMixMarcasModeloTableroCliente") );
			
			if(_linealMixMarcas!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealMixMarcasModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealMixMarcasModeloTableroCliente")]
		public function get listaLinealMixMarcas():ArrayCollection{
			return _linealMixMarcas;
		}
		
		//		/MIX MARCAS LINEAL
		//		COT DIF PEDIDO
		private var _linealCotDifPed:ArrayCollection;
		public function setLinealCotDifPed( $datos:ArrayCollection, $evento:EventoTableroClientes= null):void{
			if($datos == null)
				_linealCotDifPed = new ArrayCollection();
			else
				_linealCotDifPed = $datos;
			dispatchEvent( new Event("regresaLinealCotDifPedModeloTableroCliente") );
			
			if(_linealCotDifPed!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealCotDifPedModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealCotDifPedModeloTableroCliente")]
		public function get listaLinealCotDifPed():ArrayCollection{
			return _linealCotDifPed;
		}
		//		/COT DIF PEDIDO
		//		CANCELACION COTIZACION
		private var _linealCancelacionCot:ArrayCollection;
		public function setLinealCancelacionCot( $datos:ArrayCollection, $evento:EventoTableroClientes= null ):void{
			if($datos == null)
				_linealCancelacionCot = new ArrayCollection();
			else
				_linealCancelacionCot = $datos;
			
			dispatchEvent( new Event("regresaLinealCancelacionCotModeloTableroCliente") );
			
			if(_linealCancelacionCot!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealCancelacionCotModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealCancelacionCotModeloTableroCliente")]
		public function get listaLinealCancelacionCot():ArrayCollection{
			return _linealCancelacionCot;
		}
		//		/CANCELACION COTIZACION
		//		MIX PRODUCTOS
		private var _linealMixProductos:ArrayCollection;
		public function setLinealMixProductos( $datos:ArrayCollection, $evento:EventoTableroClientes= null ):void{
			if($datos == null)
				_linealMixProductos = new ArrayCollection();
			else
				_linealMixProductos = $datos;
			dispatchEvent( new Event("regresaLinealMixProductosModeloTableroCliente") );
			if(_linealMixProductos!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealMixProductosModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealMixProductosModeloTableroCliente")]
		public function get listaLinealMixProductos():ArrayCollection{
			return _linealMixProductos;
		}
		//		/MIX PRODUCTOS
		//		COTIZADO PEDIDO
		private var _linealCotPedido:ArrayCollection;
		public function setLinealCotPedido( $datos:ArrayCollection, $evento:EventoTableroClientes= null ):void
		{
			if($datos == null)
				_linealCotPedido = new ArrayCollection();
			else
				_linealCotPedido = $datos;
			
			
			dispatchEvent( new Event("regresaLinealCotPedidoModeloTableroCliente") );
			
			if(_linealCotPedido != null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealCotPedidoModeloTableroCliente");
				}
			}
			
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
			
		}
		[Bindable(event="regresaLinealCotPedidoModeloTableroCliente")]
		public function get listaLinealCotPedido():ArrayCollection{
			return _linealCotPedido;
		}
		//		/COTIZADO PEDIDO
		//		ENTREGAS
		private var _linealEntregas:ArrayCollection;
		public function setLinealEntregas( $datos:ArrayCollection, $evento:EventoTableroClientes= null):void{
			
			if($datos == null)
				_linealEntregas = new ArrayCollection();
			else
				_linealEntregas = $datos;
			
			dispatchEvent( new Event("regresaLinealEntregasModeloTableroCliente"));
			
			if(_linealEntregas!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealEntregasModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealEntregasModeloTableroCliente")]
		public function get listaLinealEntregas():ArrayCollection
		{
			return _linealEntregas;
		}
		//		/ENTREGAS
		//		PEDIDO
		private var _linealPedidos:ArrayCollection;
		public function setLinealPedidos( $datos:ArrayCollection, $evento:EventoTableroClientes= null):void{
			if($datos == null)
				_linealPedidos = new ArrayCollection();
			else
				_linealPedidos = $datos;
			dispatchEvent( new Event("regresaLinealPedidosModeloTableroCliente") );
			
			if(_linealPedidos!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealPedidosModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealPedidosModeloTableroCliente")]
		public function get listaLinealPedidos():ArrayCollection{
			return _linealPedidos;
		}
		//		/PEDIDO
		//		SEGUIMIENTOS
		private var _linealSeguimientos:ArrayCollection;
		public function setLinealSeguimientos( $datos:ArrayCollection,  $evento:EventoTableroClientes= null):void
		{
			if($datos == null)
				_linealSeguimientos = new ArrayCollection();
			else
				_linealSeguimientos = $datos;
			
			dispatchEvent( new Event("regresaLinealSeguimientosModeloTableroCliente") );
			
			if(_linealSeguimientos!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealSeguimientosModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealSeguimientosModeloTableroCliente")]
		public function get listaLinealSeguimientos():ArrayCollection{
			return _linealSeguimientos;
		}
		//		/SEGUIMIENTOS
		//		VENTAS PERIODO
		private var _linealVentasPeriodo:ArrayCollection;
		public function setLinealVentasPeriodo( $datos:ArrayCollection, $evento:EventoTableroClientes= null):void{
			if($datos == null){
				$datos = new ArrayCollection();
			}
			for(var d:int = 0; d<$datos.length ; d++){
				($datos[d] as ResumenConsulta).periodo = $evento.anio;	
			}
			_linealVentasPeriodo = $datos;
			dispatchEvent( new Event("regresaLinealVentasPeriodoModeloTableroCliente") );
			
			if(_linealVentasPeriodo!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealVentasPeriodoModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealVentasPeriodoModeloTableroCliente")]
		public function get listaLinealVentasPeriodo():ArrayCollection{
			
			return _linealVentasPeriodo;
		}
		
		//		/SEGUIMIENTOS
		//		VENTAS PERIODO DESDE EL CHECK
		private var _linealVentasPeriodoCheck:ArrayCollection;
		public function setLinealVentasPeriodoChek( $datos:ArrayCollection, $evento:EventoTableroClientes= null):void{
			if($datos == null){
				$datos = new ArrayCollection();
			}
			for(var d:int = 0; d<$datos.length ; d++){
				($datos[d] as ResumenConsulta).periodo = $evento.anio;	
			}
			_linealVentasPeriodoCheck = $datos;
			dispatchEvent( new Event("regresaLinealVentasPeriodoCheckModeloTableroCliente") );
			
			if(_linealVentasPeriodoCheck!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealVentasPeriodoCheckModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual){
				calcularLabelsIndividuales($evento);
			}
		}
		[Bindable(event="regresaLinealVentasPeriodoCheckModeloTableroCliente")]
		public function get listaLinealVentasPeriodoCheck():ArrayCollection{
			
			return _linealVentasPeriodoCheck;
		}
		//		/SEGUIMIENTOS
		//		MONTO OBJETIVO
		private var _montos:ArrayCollection;
		public function setMontoObjetivo( $datos:ArrayCollection, $event:EventoTableroClientes ):void{
			if($datos == null)
				_montos = new ArrayCollection();
			else
				_montos = $datos;
			dispatchEvent( new Event("regresaMontoObjetivoModeloTableroCliente") );
			
			if(_montos!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaMontoObjetivoModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaMontoObjetivoModeloTableroCliente")]
		public function get montoObjetivo():ArrayCollection
		{
			return _montos;
		}
		
		//		/SEGUIMIENTOS
		//		MONTO OBJETIVO FUNDAMENTALES
		private var _montosFundamentales:ArrayCollection;
		public function setMontoObjetivoFundamental( $datos:ArrayCollection, $event:EventoTableroClientes ):void{
			if($datos == null)
				_montosFundamentales = new ArrayCollection();
			else
				_montosFundamentales = $datos;
			dispatchEvent( new Event("regresaMontoObjetivoFundamentalModeloTableroCliente") );
			
			if(_montosFundamentales!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaMontoObjetivoFundamentalModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaMontoObjetivoFundamentalModeloTableroCliente")]
		public function get montoObjetivoFundamental():ArrayCollection
		{
			return _montosFundamentales;
		}
		
		//		/VENTAS PERIODO 7772133942
		//		COMPORTAMIENTO PAGOS
		private var _linealComportamientoPagos:ArrayCollection;
		public function setLinealComportamientoPagos( $datos:ArrayCollection,$evento:EventoTableroClientes= null ):void
		{
			
			if($datos == null)
				_linealComportamientoPagos = new ArrayCollection();
			else
				_linealComportamientoPagos = $datos;
			
			dispatchEvent( new Event("regresaLinealComportamientoPagosModeloTableroCliente") );
			
			if(_linealComportamientoPagos!= null)
			{
				if(actualizarEspera!= null && currentEnEspera)
				{
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaLinealComportamientoPagosModeloTableroCliente");
				}
			}
			if($evento != null && $evento.isIndividual)
			{
				calcularLabelsIndividuales($evento);
			}
		}
		
		[Bindable(event="regresaLinealComportamientoPagosModeloTableroCliente")]
		public function get listaLinealComportamientoPagos():ArrayCollection
		{
			return _linealComportamientoPagos;
		}
		
		private function verificarSiElExistenLosTiposDeEvento($tiposEventos:Array):Boolean
		{
			for (var i:int = 0; i < $tiposEventos.length; i++) 
			{
				try
				{
					if((EventoTableroClientes[$tiposEventos[i]])== null)
					{
						return false;
					}
					else
					{
						return true;
					}
				}
				catch(error:Error) 
				{
					trace(error + "El Tipo de Evento: \""+$tiposEventos[i] + "\" No se encuentra en: EventoTableroClientes// NO SE COLOCARÁ LA PANTALLA DE BLOQUEO")
					return false;
				}
			}
			return false;
		}
		
		private var currentEnEspera:Boolean;
		private var actualizarEspera:Object = new Object;
		private var numServices:uint;
		private var numServicioCompletos:uint;
		private var serviciosCompletosDifKey:Object = new Object;
		/*private var  nextService:Boolean=false;*/
		public function setControlDeBloqueoPantalla(mensaje:String,$tiposEvento:Array,$idCurrentBottons:Array,$errorOrWhoFinish:Object):void
		{
			if(mensaje == "iniciarEspera")
			{
				if(!currentEnEspera)
				{
					_servicesConsultados = new Object();
					if(Boolean(verificarSiElExistenLosTiposDeEvento($tiposEvento)))
					{
						numServicioCompletos=0;
						numServices = 0;
						actualizarEspera = new Object();
						serviciosCompletosDifKey = new Object();
						
						if($tiposEvento.length >0 && $tiposEvento[0] == "CONSULTA_LINEAL")
						{
							$tiposEvento.shift();
						}
						if($tiposEvento.length>0)
						{
							numServices += $tiposEvento.length;
						}
						currentEnEspera = true;
						actualizarEspera.isBusy = true;
						actualizarEspera["idCurrentButtons"] = $idCurrentBottons;
						alertaSingleton.show(catalogoAlertas.INICIAR_ESPERA,"","","","","","",null,true);
					}
				}
				else
				{
					if(Boolean(verificarSiElExistenLosTiposDeEvento($tiposEvento)))
						numServices += $tiposEvento.length;
				}
			}
			else if (mensaje =="terminaEspera")
			{
				
				/*if (numServices>10)
				nextService = true;*/
				
				if(!serviciosCompletosDifKey.hasOwnProperty($errorOrWhoFinish as String))
				{
					numServicioCompletos++;
					serviciosCompletosDifKey[($errorOrWhoFinish as String)] = ($errorOrWhoFinish as String);
				}
				
				if(numServicioCompletos == numServices)
				{
					alertaSingleton.remove(true);
					actualizarEspera.isBusy=false;
					currentEnEspera = false;
					numServices = 0;
					dispatchEvent( new Event("actualizaEsperaYBloqueoModeloTableroClientes") );
				}
			}
			else if(mensaje =="error")
			{
				if (VistaDefaultGestion.tablero == "clientes" )
				{
					alertaSingleton.remove(true);
					currentEnEspera = false;
					/*if(AbstractInvoker.excepcion){
					var event:EventoEnvioCorreoError = new EventoEnvioCorreoError(EventoEnvioCorreoError.ENVIO_CORREO_ERROR);
					event.excepcion = new ExepcionEnvio();
					event.excepcion.mensaje = AbstractInvoker.excepcion.mensaje;
					event.excepcion.metodo = AbstractInvoker.excepcion.metodo;
					event.excepcion.parametros = AbstractInvoker.excepcion.parametros;
					event.excepcion.servicio = AbstractInvoker.excepcion.servicio;
					dispatchEvent(event);
					}*/
					alertaSingleton.showReintentar( $errorOrWhoFinish.toString(), catalogoAlertas.TIT_ERR);
					actualizarEspera.isBusy=false;
					dispatchEvent( new Event("actualizaEsperaYBloqueoModeloTableroClientes") );
				}
			}
			
			
		}
		[Bindable(event="actualizaEsperaYBloqueoModeloTableroClientes")]
		public function get actualizarEstadoDeEsperaYBloqueo():Object
		{
			return actualizarEspera;
		}
		
		private var _servicesConsultados:Object;
		public function setNumeroServiciosConsultados($tipo:String):void
		{
			if(!_servicesConsultados.hasOwnProperty($tipo))
			{
				_servicesConsultados[$tipo] = $tipo;
				numServices ++;
			}
		}
		
		private var _porcientoCotNoPed:ArrayCollection;
		public function setCotNoPedPorciento( $datos:ArrayCollection ):void{
			if($datos == null)
				_porcientoCotNoPed = new ArrayCollection();
			else
				_porcientoCotNoPed = $datos;
			
			dispatchEvent( new Event("regresaPorcientoCotNoPedModeloTableroCliente") );
		}
		[Bindable(event="regresaPorcientoCotNoPedModeloTableroCliente")]
		public function get porcientoCotNoPed():ArrayCollection
		{
			return _porcientoCotNoPed;
		}
		
		
		//////////////////////////////  DATOS DISTRIBUCION (MIX PRODUCTOS)  /////////////////////////////////
		private var _datosDistribucion:ArrayCollection;
		public function setDatosDistribucion( $datos:ArrayCollection ):void{
			if($datos == null)
				_datosDistribucion = new ArrayCollection();
			else
			{
				for(var i:int=0; i < $datos.length; i++)
				{
					var reg:ResumenConsulta = $datos[i] as ResumenConsulta;
					if(reg.conceptoResultado.toLowerCase() == "aaplus")
					{
						($datos[i] as ResumenConsulta).conceptoResultado = "AA+";
					}
				}
				_datosDistribucion = $datos;
			}
			
			dispatchEvent( new Event("regresaDatosDistribucionModeloTableroCliente") );
		}
		[Bindable(event="regresaDatosDistribucionModeloTableroCliente")]
		public function get datosDistribucion():ArrayCollection
		{
			return _datosDistribucion;
		}
		
		
		///////////////////////////////////////////////// COMPORTAMIENTO PAGOS  /////////////////////////////////
		
		private var _listaMensual:ArrayCollection = new ArrayCollection([
			"Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"
		]);
		
		private var _listaQuincenal:ArrayCollection = new ArrayCollection([{11:"11",valor:"1ra. Enero"},{12:"12",valor:"2da. Enero"},{21:"21",valor:"1ra. Febrero"},{22:"22",valor:"2da. Febrero"},{31:"31",valor:"1ra. Marzo"},{32:"32",valor:"2da. Marzo"},{41:"41",valor:"1ra. Abril"},
			{42:"42",valor:"2da. Abril"},{51:"51",valor:"1ra. Mayo"},{52:"52",valor:"2da. Mayo"},{61:"61",valor:"1ra. Junio"},{62:"62",valor:"2da. Junio"},{71:"71",valor:"1ra. Julio"},{72:"72",valor:"2da. Julio"},{81:"81",valor:"1ra. Agosto"},{82:"82",valor:"2da. Agosto"},
			{91:"91",valor:"1ra. Septiembre"},{92:"92",valor:"2da. Septiembre"},{101:"101",valor:"1ra. Octubre"},{102:"102",valor:"2da. Octubre"},{111:"111",valor:"1ra. Noviembre"},{112:"112",valor:"2da. Noviembre"},{121:"121",valor:"1ra. Diciembre"},{122:"122",valor:"2da. Diciembre"}]);
		
		private var _periodo1:String = "undefined";
		private var _periodo2:String = "undefined";
		private var _periodo3:String = "undefined";
		private var _periodo4:String = "undefined";
		private var _periodo5:String = "undefined";
		protected function generarLabelsPeriodo( $minimoMeses:int, $maximoMeses:int,$lineal:Number,$tipoPeriodo:String):void
		{
			var quincena:String; 
			if( $lineal == 0 ) // periodico
			{	
				
				if($tipoPeriodo.toLowerCase() == "quincenal")
				{
					_periodo1 = _listaQuincenal[$minimoMeses].valor + " "+_event.parametros.anio;
					_periodo2 = _listaQuincenal[$minimoMeses].valor + " "+(_event.parametros.anio -1 );
					_periodo3 = _listaQuincenal[$minimoMeses].valor + " "+(_event.parametros.anio -2 );
					_periodo4 = _listaQuincenal[$minimoMeses].valor + " "+(_event.parametros.anio -3 );
					_periodo5 = _listaQuincenal[$minimoMeses].valor + " "+(_event.parametros.anio -4 );
				}
				else
				{
					_periodo1 = generatePeriodoStr( _event.parametros.anio, ($minimoMeses - 1), ($maximoMeses - 1) ); 
					_periodo2 = generatePeriodoStr( (_event.parametros.anio - 1), ($minimoMeses - 1), ($maximoMeses - 1));
					_periodo3 = generatePeriodoStr( (_event.parametros.anio - 2), ($minimoMeses - 1), ($maximoMeses - 1));
					_periodo4 = generatePeriodoStr( (_event.parametros.anio - 3), ($minimoMeses - 1), ($maximoMeses - 1));
					_periodo5 = generatePeriodoStr( (_event.parametros.anio - 4), ($minimoMeses - 1), ($maximoMeses - 1));
				}
			}
			else// lineal
			{
				if($tipoPeriodo.toLowerCase() == "quincenal")
				{
					var currentAnio:Number = _event.parametros.anio;
					_periodo1 = _listaQuincenal[$minimoMeses].valor + " "+ currentAnio;
					for (var j:int = 0; j < 4; j++) 
					{
						if($minimoMeses==0)
						{
							$minimoMeses=23;
							currentAnio--;
						}
						else
						{
							$minimoMeses--;
						}
						var currentPeriodo:String = "_periodo"+(j+2);
						this [currentPeriodo] = _listaQuincenal[$minimoMeses].valor + " " + currentAnio;
					}
				}
				else
				{
					var diferenciaMeses:int = (_event.parametros.rangoMaxMes - _event.parametros.rangoMinMes);
					
					////////////////////////////////////////////////////////////////////////////////////////////
					var anioDos:int = _event.parametros.anio;
					var rangoDosMax:int = _event.parametros.rangoMinMes - 2;
					if( rangoDosMax < 0 )
					{
						rangoDosMax += 12;
						anioDos--;
					}
					
					var rangoDosMin:int = rangoDosMax - diferenciaMeses;
					if( rangoDosMin < 0 )	rangoDosMin += 12;
					////////////////////////////////////////////////////////////////////////////////////////////
					var anioTres:int = anioDos;
					var rangoTresMax:int = rangoDosMin - 1;
					if( rangoTresMax < 0 )
					{
						rangoTresMax += 12;
						anioTres--;
					}
					var rangoTresMin:int = (rangoTresMax - diferenciaMeses);
					if( rangoTresMin < 0 )	rangoTresMin += 12;
					////////////////////////////////////////////////////////////////////////////////////////////
					var anioCuatro:int = anioTres;
					var rangoCuatroMax:int = rangoTresMin - 1;
					if( rangoCuatroMax < 0 )
					{
						rangoCuatroMax += 12;
						anioCuatro--;
					}
					var rangoCuatroMin:int = (rangoCuatroMax - diferenciaMeses);
					if( rangoCuatroMin < 0 )	rangoCuatroMin += 12;
					////////////////////////////////////////////////////////////////////////////////////////////	
					var anioCinco:int = anioCuatro;
					var rangoCincoMax:int = rangoCuatroMin - 1;
					if( rangoCincoMax < 0 ){
						rangoCincoMax += 12;
						anioCinco--;
					}
					var rangoCincoMin:int = (rangoCincoMax - diferenciaMeses);
					if( rangoCincoMin < 0 )	rangoCincoMin += 12;
					
					_periodo1 = generatePeriodoStr( _event.parametros.anio, _event.parametros.rangoMinMes-1, _event.parametros.rangoMaxMes-1);  
					_periodo2 = generatePeriodoStr( anioDos, rangoDosMin, rangoDosMax);
					_periodo3 = generatePeriodoStr( anioTres, rangoTresMin, rangoTresMax); 
					_periodo4 = generatePeriodoStr( anioCuatro, rangoCuatroMin, rangoCuatroMax); 
					_periodo5 = generatePeriodoStr( anioCinco, rangoCincoMin, rangoCincoMax); 
				}
			} 
		}
		
		protected function generatePeriodoStr( $anio:int, $minMes:int, $maxMes:int):String
		{
			var strReturn:String = "";
			
			if( $minMes > -1 && $maxMes < 12 )
			{
				if( $minMes < 1 && $maxMes > 10 )
				{
					strReturn = 'ANUAL ' + String( $anio );
					return strReturn.toUpperCase();
				}
				else if( $minMes == $maxMes )
				{
					strReturn = _listaMensual[ $minMes ] + ' ' + String( $anio );
					return strReturn.toUpperCase();
				}
				else
				{
					strReturn = _listaMensual[ $minMes ] + ' - ' + _listaMensual[ $maxMes ] + ' ' + String( $anio );
					return strReturn.toUpperCase();
				}
			}
			return strReturn.toUpperCase();
		}
		
		
		/**
		 ************************************************************************************************************************************************************************************************************************************************************************************
		 ************************************************************************************************************************************************************************************************************************************************************************************* 
		 * 																												Resumen análisis ventas en Periodo max
		 * ************************************************************************************************************************************************************************************************************************************************************************************
		 */
		
		
		
		/// +++++++++++++++++++++++++++++++++++++++  TODOS   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		private var _listaResumentVentasTodos:ArrayCollection;
		public function setResibeListaDeResumenVentasTodos($datos:ArrayCollection):void
		{
			if($datos.length > 0)
			{
				_listaResumentVentasTodos = ordenarFilasYEnumerarlas($datos,false);
			}
			else
			{
				_listaResumentVentasTodos = new ArrayCollection;
			}
			
			dispatchEvent( new Event("enviarListaResumenVentasTODOSEnPeriodoMaxModeloTableroClientes"));
			
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"enviarListaResumenVentasTODOSEnPeriodoMaxModeloTableroClientes");
			}
		}
		
		[Bindable(event="enviarListaResumenVentasTODOSEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasTodos():ArrayCollection
		{
			return _listaResumentVentasTodos;
		}
		
		
		
		/// +++++++++++++++++++++++++++++++++++++++  ESAC   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		private var _listaResumentVentasESAC:ArrayCollection;
		public function setResibeListaDeResumenVentasESAC($datos:ArrayCollection):void
		{
			if($datos.length > 0)
			{
				_listaResumentVentasESAC = ordenarFilasYEnumerarlas($datos,true);
			}
			else
			{
				_listaResumentVentasESAC = new ArrayCollection;
			}
			
			dispatchEvent( new Event("enviarListaResumenVentasEnPeriodoMaxModeloTableroClientes"));
			
			dispatchEvent(new Event("enviarInfoChartTodosClientesEnPeriodoMaxModeloTableroClientes"))
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"enviarListaResumenVentasEnPeriodoMaxModeloTableroClientes");
			}
		}
		
		[Bindable(event="enviarListaResumenVentasEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasESAC():ArrayCollection
		{
			return _listaResumentVentasESAC;
		}
		
		[Bindable(event="enviarInfoChartTodosClientesEnPeriodoMaxModeloTableroClientes")]
		public function get mandarInfoCharTodosClientes():ArrayCollection
		{
			return resumeGraficaTodosClientes;
		}
		
		/// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		private var _listaResumentVentasEV:ArrayCollection;
		public function setResibeListaDeResumenVentasEV($datos:ArrayCollection):void
		{
			if($datos && $datos.length > 0)
			{
				_listaResumentVentasEV = ordenarFilasYEnumerarlas($datos,false);
			}
			else
			{
				_listaResumentVentasEV = new ArrayCollection;
			}
			
			dispatchEvent( new Event("enviarListaResumenVentasEVMaxModeloTableroClientes"));
			
			
			if(actualizarEspera!= null && currentEnEspera){
				setControlDeBloqueoPantalla("terminaEspera",null,null,"enviarListaResumenVentasEVMaxModeloTableroClientes");
			}
		}
		
		[Bindable(event="enviarListaResumenVentasEVMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasEV():ArrayCollection
		{
			return _listaResumentVentasEV;
		}
		
		/// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		private var resumeGraficaTodosClientes:ArrayCollection;
		private function ordenarFilasYEnumerarlas($lista:ArrayCollection, $esac:Boolean):ArrayCollection
		{
			var item:ResumenVentasESAC;
			var listaOrdenada:Array = new Array();
			var totales:ResumenVentasESAC = new ResumenVentasESAC();
			
			var itemClientesClave:ResumenConsulta = new ResumenConsulta();
			itemClientesClave.etiqueta = "CLAVE";
			
			var itemClientesResto:ResumenConsulta = new ResumenConsulta();
			itemClientesResto.etiqueta = "NORMAL";
			
			
			if($lista) 
			{
				listaOrdenada = $lista.source;
				listaOrdenada.sortOn("totalVentaEsac",Array.DESCENDING | Array.NUMERIC);
				
				for (var i:int = 0; i < listaOrdenada.length; i++) 
				{
					item = listaOrdenada[i] as ResumenVentasESAC;
					item.numFila = i+1;
					
					totales.tgridCAAplus += item.clientesAAplus;
					totales.clientesAAplus += item.clientesAAplus;
					
					totales.tgridMAAplus += item.ventaAAplus;
					totales.ventaAAplus += item.ventaAAplus;
					
					totales.tgridCAA += item.clientesAA;
					totales.clientesAA += item.clientesAA;
					
					totales.tgridMAA += item.ventaAA;
					totales.ventaAA += item.ventaAA;
					
					totales.tgridCAM += item.clientesAM;
					totales.clientesAM += item.clientesAM;
					totales.tgridMAM += item.ventaAM;
					totales.ventaAM += item.ventaAM;
					
					totales.tgridCAB += item.clientesAB;
					totales.clientesAB += item.clientesAB;
					totales.tgridMAB += item.ventaAB;
					totales.ventaAB += item.ventaAB;
					
					////////  ALTOS  ////////  
					item.totalAltos = (item.ventaAAplus + item.ventaAA + item.ventaAM + item.ventaAB);
					item.totalAltos_ant = (item.ventaAAplus_Ant + item.ventaAA_Ant + item.ventaAM_Ant + item.ventaAB_Ant);
					totales.totalGlobalAltos += (item.ventaAAplus + item.ventaAA + item.ventaAM + item.ventaAB);
					totales.totalGlobalAltos_ant += (item.ventaAAplus_Ant + item.ventaAA_Ant + item.ventaAM_Ant + item.ventaAB_Ant);
					item.objFun_TotalAltos = (item.objFun_AAplus+item.objFun_AA+item.objFun_AM+item.objFun_AB);
					totales.objFun_GlobalTotalAltos += item.objFun_TotalAltos; 
					item.objDes_TotalAltos = (item.objDes_AAplus+item.objDes_AA+item.objDes_AM+item.objDes_AB);
					totales.objDes_GlobalTotalAltos += item.objDes_TotalAltos; 
					////////  ALTOS  ////////  
					
					
					totales.tgridCMA += item.clientesMA;
					totales.clientesMA += item.clientesMA;
					totales.tgridMMA += item.ventaMA;
					totales.ventaMA += item.ventaMA;
					
					totales.tgridCMM += item.clientesMM;
					totales.clientesMM += item.clientesMM;
					totales.tgridMMM += item.ventaMM;
					totales.ventaMM += item.ventaMM;
					
					totales.tgridCMB += item.clientesMB;
					totales.clientesMB += item.clientesMB;
					totales.tgridMMB += item.ventaMB;
					totales.ventaMB += item.ventaMB;
					
					////////  MEDIOS  ////////  
					item.totalMedios = (item.ventaMA + item.ventaMM + item.ventaMB);
					item.totalMedios_ant = (item.ventaMA_Ant + item.ventaMM_Ant + item.ventaMB_Ant);
					totales.totalGlobalMedios += (item.ventaMA + item.ventaMM + item.ventaMB);
					totales.totalGlobalMedios_ant += (item.ventaMA_Ant + item.ventaMM_Ant + item.ventaMB_Ant);
					item.objFun_TotalMedios = (item.objFun_MA+item.objFun_MM+item.objFun_MB);
					totales.objFun_GlobalTotalMedios += item.objFun_TotalMedios; 
					item.objDes_TotalMedios = (item.objDes_MA+item.objDes_MM+item.objDes_MB);
					totales.objDes_GlobalTotalMedios += item.objDes_TotalMedios; 
					////////  MEDIOS  ////////  
					
					totales.tgridCBajo += item.clientesBajos;
					totales.clientesBajos += item.clientesBajos;
					totales.tgridMBajo += item.ventaBajos;
					totales.ventaBajos += item.ventaBajos;
					
					////////  BAJOS  ////////  
					item.totalBajos = item.ventaBajos;
					item.totalBajos_ant = item.ventaBajos_Ant;
					totales.totalGlobalBajos += item.ventaBajos;
					totales.totalGlobalBajos_ant += item.ventaBajos_Ant = item.ventaBajos_Ant == 0 ? (600*item.clientesBajos):item.ventaBajos_Ant;
					item.objFun_TotalBajos = item.objFun_Bajo;
					totales.objFun_GlobalTotalBajos += item.objFun_TotalBajos; 
					item.objDes_TotalBajos = item.objDes_Bajo;
					totales.objDes_GlobalTotalBajos += item.objDes_TotalBajos; 
					////////  BAJOS  ////////  
					
					
					totales.tgridCNuevos += item.clientesNuevos;
					totales.clientesNuevos += item.clientesNuevos;
					totales.tgridMNuevos += item.ventaNuevos;
					totales.ventaNuevos += item.ventaNuevos;
					
					////////  NUEVOS  ////////  
					item.totalNuevos = item.ventaNuevos;
					item.totalNuevos_ant = item.ventaNuevos_Ant;
					totales.totalGlobalNuevos += item.ventaNuevos;
					totales.totalGlobalNuevos_ant += item.ventaNuevos_Ant;
					item.objFun_TotalNuevos= item.objFun_Nuevo;
					totales.objFun_GlobalTotalNuevos += item.objFun_TotalNuevos; 
					item.objDes_TotalNuevos = item.objDes_Nuevo;
					totales.objDes_GlobalTotalNuevos += item.objDes_TotalNuevos; 
					////////  NUEVOS  ////////  
					
					
					
					totales.tgridCDis += item.clientesDistribuidor;
					totales.clientesDistribuidor += item.clientesDistribuidor;
					totales.tgridMDis += item.ventaDistribuidor;
					totales.ventaDistribuidor += item.ventaDistribuidor;
					
					////////  DISTRIBUIDOR  ////////  
					item.totalDistri = item.ventaDistribuidor;
					item.totalDistri_ant = item.ventaDistribuidor_ant; 
					totales.totalGlobalDistri += item.ventaDistribuidor;
					totales.totalGlobalDistri_ant+= item.ventaDistribuidor_ant; 
					item.objFun_TotalDistri= item.objFun_Distribuidor;
					totales.objFun_GlobalTotalDistri += item.objFun_TotalDistri; 
					item.objDes_TotalDistri = item.objDes_Distribuidor;
					totales.objDes_GlobalTotalDistri += item.objDes_TotalDistri; 
					////////  DISTRIBUIDOR  ////////  
					
					////////  CARTERAS  ////////  
					totales.totalCarterasAltos += item.carterasAltos;
					totales.totalCarterasMedios += item.carterasMedios;
					totales.totalCarterasBajos += item.carterasBajos;
					totales.totalCarterasNuevos += item.carterasNuevos;
					totales.totalCarterasDistribuidor += item.carterasDistribuidor;
					////////  CARTERAS  ////////  
					
					////////  TODO  ////////  
					item.totalTodo = (item.totalAltos + item.totalMedios + item.totalBajos + item.totalNuevos + item.totalDistri);
					item.totalTodos_ant = (item.totalAltos_ant + item.totalMedios_ant + item.totalBajos_ant + item.totalNuevos_ant + item.totalDistri_ant);
					totales.totalGlobalTodo = (totales.totalGlobalAltos + totales.totalGlobalMedios + totales.totalGlobalBajos + totales.totalGlobalNuevos + totales.totalGlobalDistri);
					totales.totalGlobalTodos_ant = (totales.totalGlobalAltos_ant + totales.totalGlobalMedios_ant + totales.totalGlobalBajos_ant + totales.totalGlobalNuevos_ant + totales.totalGlobalDistri_ant);
					item.objFun_TotalTodos = (item.objFun_TotalAltos + item.objFun_TotalBajos + item.objFun_TotalMedios + item.objFun_TotalNuevos + item.objFun_TotalDistri);
					totales.objFun_GlobalTotalTodos = (totales.objFun_GlobalTotalAltos + totales.objFun_GlobalTotalMedios + totales.objFun_GlobalTotalBajos + totales.objFun_GlobalTotalNuevos + totales.objFun_GlobalTotalDistri);
					item.objDes_TotalTodos = (item.objDes_TotalAltos + item.objDes_TotalMedios + item.objDes_TotalBajos + item.objDes_TotalNuevos + item.objDes_TotalDistri);
					totales.objDes_GlobalTotalTodos = (totales.objDes_GlobalTotalAltos + totales.objDes_GlobalTotalMedios + totales.objDes_GlobalTotalBajos + totales.objDes_GlobalTotalNuevos + totales.objDes_GlobalTotalDistri);
					////////  TODO  ////////  
					
					totales.tgridMontoVentaAnterior += item.montoVentaAnterior;
					totales.montoVentaAnterior += item.montoVentaAnterior;
					totales.objetivoDeseado += item.objetivoDeseado;
					totales.objetivoFundamental += item.objetivoFundamental;
					
					totales.tgridClientes += item.totalClientes;
					totales.totalClientes += item.totalClientes;
					
					totales.tgridMontoAnterior += item.totalVentaEsac;
					totales.totalVentaEsac += item.totalVentaEsac;
				}
				
				for (var j:int = 0; j < listaOrdenada.length; j++) 
				{
					item = listaOrdenada[j] as ResumenVentasESAC;
					
					item.distribucionClientes = ((item.totalVentaEsac * 100) / totales.totalVentaEsac );
					item.distribucionClientesAnt = ((item.montoVentaAnterior * 100) / totales.tgridMontoVentaAnterior );
					item.participacion = ((item.totalVentaEsac * 100) / totales.tgridMontoAnterior );
					
					item.totalCarterasAltos = totales.totalCarterasAltos;
					item.totalCarterasMedios = totales.totalCarterasMedios;
					item.totalCarterasBajos = totales.totalCarterasBajos;
					item.totalCarterasNuevos = totales.totalCarterasNuevos;
					item.totalCarterasDistribuidor = totales.totalCarterasDistribuidor;
					
					item.totalGlobalAltos = totales.totalGlobalAltos;
					item.totalGlobalAltos_ant = totales.totalGlobalAltos_ant;
					item.totalGlobalMedios = totales.totalGlobalMedios;
					item.totalGlobalMedios_ant = totales.totalGlobalMedios_ant;
					item.totalGlobalBajos = totales.totalGlobalBajos;
					item.totalGlobalBajos_ant = totales.totalGlobalBajos_ant;
					item.totalGlobalNuevos = totales.totalGlobalNuevos;
					item.totalGlobalNuevos_ant= totales.totalGlobalNuevos_ant;
					item.totalGlobalDistri = totales.totalGlobalDistri;
					item.totalGlobalDistri_ant = totales.totalGlobalDistri_ant;
					
					item.distribucionTodos = ((item.totalTodo * 100) / totales.totalGlobalTodo);
					item.distribucionTodos_ant = ((item.totalTodos_ant * 100) / totales.totalGlobalTodos_ant);
					item.distribucionAltos = ((item.totalAltos * 100) / totales.totalGlobalAltos);
					item.distribucionAltos_ant = ((item.totalAltos_ant * 100) / totales.totalGlobalAltos_ant);
					item.distribucionMedios = ((item.totalMedios * 100) / totales.totalGlobalMedios);
					item.distribucionMedios_ant = ((item.totalMedios_ant * 100) / totales.totalGlobalMedios_ant);
					item.distribucionBajos = ((item.totalBajos * 100) / totales.totalGlobalBajos);
					item.distribucionBajos_ant = ((item.totalBajos_ant * 100) / totales.totalGlobalBajos_ant);
					item.distribucionNuevos = ((item.totalNuevos * 100) / totales.totalGlobalNuevos);
					item.distribucionNuevos_ant = ((item.totalNuevos_ant * 100) / totales.totalGlobalNuevos_ant);
					item.distribucionDistri = ((item.totalDistri * 100) / totales.totalGlobalDistri);
					item.distribucionDistri_ant = ((item.totalDistri_ant * 100) / totales.totalGlobalDistri_ant);
					
					totales.distribucionTotalAltos += item.distribucionAltos;
					totales.distribucionTotalMedios += item.distribucionMedios;
					totales.distribucionTotalBajos += item.distribucionBajos;
					totales.distribucionTotalNuevos += item.distribucionNuevos;
					totales.distribucionTotalDistri += item.distribucionDistri;
					
					
					totales.tgridDistribucion  += item.distribucionClientes; 
					totales.distribucionClientes  += item.distribucionClientes; 
					totales.distribucionClientesAnt  += item.distribucionClientesAnt; 
					totales.tgridParticipacion  += item.participacion; 
					totales.participacion  += item.participacion; 
					
				}
				
				itemClientesClave.total = totales.tgridMAAplus + totales.tgridMAA + totales.tgridMAM + totales.tgridMAB;
				itemClientesClave.totalIngresosPorcentaje = UtilsFormatosNumericos.truncarDecimalesCeil(((itemClientesClave.total * 100) / totales.tgridMontoAnterior),2);
				itemClientesClave.totalClientesPorcentaje = UtilsFormatosNumericos.truncarDecimalesCeil((((totales.tgridCAAplus + totales.tgridCAA + totales.tgridCAM + totales.tgridCAB)*100)/totales.tgridClientes),2);
				
				itemClientesResto.total = totales.tgridMMA + totales.tgridMMM + totales.tgridMMB + totales.tgridMDis + totales.tgridMBajo + totales.tgridMNuevos;
				itemClientesResto.totalIngresosPorcentaje = UtilsFormatosNumericos.truncarDecimalesCeil(((itemClientesResto.total * 100) / totales.tgridMontoAnterior),2);
				itemClientesResto.totalClientesPorcentaje = UtilsFormatosNumericos.truncarDecimalesCeil((((totales.tgridCMA + totales.tgridCMM + totales.tgridCMB + totales.tgridCDis + totales.tgridCBajo + totales.tgridCNuevos)*100)/totales.tgridClientes),2);
				
				if($esac)
				{
					resumeGraficaTodosClientes = new ArrayCollection;
					resumeGraficaTodosClientes.addItem(itemClientesClave);
					resumeGraficaTodosClientes.addItem(itemClientesResto);
				}
				
				
				if(totales.tgridDistribucion > 100)
					totales.tgridDistribucion = 100;
				
				if(totales.distribucionClientesAnt > 100)
					totales.distribucionClientesAnt = 100;
				
				if(totales.tgridParticipacion > 100)
					totales.tgridParticipacion = 100;
				
				if(totales.distribucionTotalAltos > 100)
					totales.distribucionTotalAltos = 100;
				
				
				listaOrdenada.unshift(totales);
			}
			
			return new ArrayCollection(listaOrdenada);
		}
		
		
		private var _listaDeClientesAltos:ArrayCollection;
		private var _listaDeClientesMedios:ArrayCollection;
		private var _listaDeClientesDist:ArrayCollection;
		private var _listaDeClientesBajos:ArrayCollection;
		private var _listaDeClientesNuevos:ArrayCollection;
		private var _listaResumentVentasClientesTodos:ArrayCollection;
		public function setResibeListaDeResumenVentasClientesTodos($clientes:ArrayCollection):void
		{
			if(!$clientes || $clientes.length == 0)
				return;
			
			_listaResumentVentasClientesTodos = $clientes;
			
			_listaDeClientesAltos = new ArrayCollection;
			_listaDeClientesMedios = new ArrayCollection;
			_listaDeClientesDist = new ArrayCollection;
			_listaDeClientesBajos = new ArrayCollection;
			_listaDeClientesNuevos = new ArrayCollection;
			
			for (var i:int = 0; i < $clientes.length; i++) 
			{
				var item:ResumenConsulta = $clientes[i];
				
				if(item.etiqueta == "ALTOS")
				{
					_listaDeClientesAltos.addItem(item);
				}
				else if(item.etiqueta == "MEDIOS")
				{
					_listaDeClientesMedios.addItem(item);
				}
				else if(item.etiqueta == "DISTRIBUIDOR")
				{
					_listaDeClientesDist.addItem(item);
				} 
				else if(item.etiqueta == "BAJO")
				{
					item.montoAnterior = item.montoAnterior == 0 ? 600:item.montoAnterior;	
					_listaDeClientesBajos.addItem(item);
				} 
				else if(item.etiqueta == "NUEVOS")
				{
					_listaDeClientesNuevos.addItem(item);
				} 
				
			}
			
			
			dispatchEvent( new Event("enviarListaResumenVentasDeTodosClientesEnPeriodoMaxModeloTableroClientes"));
			dispatchEvent( new Event("enviarListaResumenVentasDeTodosClientesAltosEnPeriodoMaxModeloTableroClientes"));
			dispatchEvent( new Event("enviarListaResumenVentasDeTodosClientesMediosEnPeriodoMaxModeloTableroClientes"));
			dispatchEvent( new Event("enviarListaResumenVentasDeTodosClientesDistribuidorEnPeriodoMaxModeloTableroClientes"));
			dispatchEvent( new Event("enviarListaResumenVentasDeTodosClientesBajosEnPeriodoMaxModeloTableroClientes"));
			dispatchEvent( new Event("enviarListaResumenVentasDeTodosClientesNuevosEnPeriodoMaxModeloTableroClientes"));
			
			if(actualizarEspera!= null && currentEnEspera)
			{
				setControlDeBloqueoPantalla("terminaEspera",null,null,"enviarListaResumenVentasDeTodosClientesAltosEnPeriodoMaxModeloTableroClientes");
			}
		}
		
		[Bindable(event="enviarListaResumenVentasDeTodosClientesEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasTodosClientes():ArrayCollection
		{
			return _listaResumentVentasClientesTodos;
		}
		
		[Bindable(event="enviarListaResumenVentasDeTodosClientesAltosEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasClientesAltos():ArrayCollection
		{
			return _listaDeClientesAltos;
		}
		
		[Bindable(event="enviarListaResumenVentasDeTodosClientesMediosEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasClientesMedios():ArrayCollection
		{
			return _listaDeClientesMedios;
		}
		
		[Bindable(event="enviarListaResumenVentasDeTodosClientesDistribuidorEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasClientesDistribuidor():ArrayCollection
		{
			return _listaDeClientesDist;
		}
		
		[Bindable(event="enviarListaResumenVentasDeTodosClientesBajosEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasClientesBajos():ArrayCollection
		{
			return _listaDeClientesBajos;
		}
		
		[Bindable(event="enviarListaResumenVentasDeTodosClientesNuevosEnPeriodoMaxModeloTableroClientes")]
		public function get mandarListaResumenVentasClientesNuevos():ArrayCollection
		{
			return _listaDeClientesNuevos;
		}
		
		
		/**
		 ************************************************************************************************************************************************************************************************************************************************************************************
		 ************************************************************************************************************************************************************************************************************************************************************************************* 
		 * 																												Resumen análisis ventas en Periodo max
		 * ************************************************************************************************************************************************************************************************************************************************************************************
		 */
		
		
		
		
		
		/**
		 ************************************************************** error **************************************************************
		 */
		public function error(objeto:Object):void{
			alertaSingleton.showReintentar( objeto.toString() );
		}
		
		private var _totalCotPedido:ArrayCollection;
		public function setTotalCotPedido( $datos:ArrayCollection, $evento:EventoTableroClientes= null ):void{
			if($datos == null)
				_totalCotPedido = new ArrayCollection();
			else
				_totalCotPedido = $datos;
			dispatchEvent( new Event("regresaTotalCotPedidoModeloTableroCliente") );
			if(_linealCotPedido!= null){
				if(actualizarEspera!= null && currentEnEspera){
					//setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaTotalCotPedidoModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaTotalCotPedidoModeloTableroCliente")]
		public function get listaTotalCotPedido():ArrayCollection{
			return _totalCotPedido;
		}
		
		/**
		 * Obtener Cliente por corporativo
		 */
		
		private var _clientesCorp:ArrayCollection;
		public function setClientesCorp( $datos:ArrayCollection ):void{
			if($datos == null)
				_clientesCorp = new ArrayCollection();
			else
				_clientesCorp = $datos;
			dispatchEvent( new Event("regresaClientesCorpModeloTableroCliente") );
			if(_clientesCorp!= null){
				if(actualizarEspera!= null && currentEnEspera){
					//setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaClientesCorpModeloTableroCliente");
				}
			}
		}
		[Bindable(event="regresaClientesCorpModeloTableroCliente")]
		public function get listaClientesCorp():ArrayCollection{
			return _clientesCorp;
		}
		public function faultError(error:Object):void{
			trace("fault");
			
		}
	}
}