package mx.com.proquifa.proquifanet.rsl.vista.utils
{
	//import flash.text.ReturnKeyLabel;
	
	import mx.collections.ArrayCollection;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.ListaProductos_clase;
	import mx.utils.ObjectUtil;
	
	public class Query
	{
		private var _indexCamposFiltro:Array;
		private var  _indexObject:Object;
		private var _universo:ArrayCollection;
		private var _dummy:ListaProductos_clase;
		//private var _directAcces:ArrayCollection
		
		private var _cronometro:Date;
		
		public function Query( $universo:ArrayCollection, $camposAIndexar:Array , $lowerCase:Boolean = false, $native:Boolean = false  )
		{
			_cronometro = new Date();
			var inicioTime:Number = _cronometro.time;
			
			if(!$native)
				_universo = ObjectUtil.copy( $universo ) as ArrayCollection;
			else
				_universo = $universo;
			
			_indexCamposFiltro = $camposAIndexar;
			
			if($lowerCase)
				_indexObject = indexarUniversoLowerCase( _universo, _indexCamposFiltro );
			else
				_indexObject = indexarUniverso( _universo, _indexCamposFiltro );
			
			var terminadoTime:Number = new Date().time;
			trace( 'Tiempo creacion index: ' + (terminadoTime - inicioTime) + ' ms, ' + $universo.length + ' fila(s) ' + $camposAIndexar.length + ' campo(s) [' + $camposAIndexar.toString() + '] ' );
		}
		
		
		public function get universo():ArrayCollection
		{
			return _universo;
		}
		
		public function set universo(value:ArrayCollection):void
		{
			_universo = value;
		}
		
		public function get indexObject():Object
		{
			return _indexObject;
		}
		
		public function set indexObject(value:Object):void
		{
			_indexObject = value;
		}
		
		public function indexarUniverso( $lista:ArrayCollection, $campos:Array ):Object{
			var indexObject:Object = new Object();
			indexObject["cache-query"] = [];
			//indexObject["FILA"] = []
			for( var v:int = 0; v < $lista.length; v++ ){
				var currentFila:* = $lista[v];
				for( var s:int = 0; s < $campos.length; s++ ){
					/* compruebo que la fila seleccionada tenga la propiedad que quiero indexar */
					if( currentFila.hasOwnProperty( $campos[s] ) ){
						/* si no esta seteado el campo lo declaro como nuevo */
						if( indexObject[ $campos[s] ] == null )  indexObject[ $campos[s] ] = new Object();
						/* inicio el array objetoIndex[nombreCampo][valor]*/
						if( indexObject[ $campos[s] ][ currentFila[ $campos[s] ]] == null ) indexObject[ $campos[s] ][ currentFila[ $campos[s] ]]= [];
						/* agrego el indice al objetoIndex[nombreCampo][valor] = current index*/
						indexObject[ $campos[s] ][ currentFila[ $campos[s] ]].push( v );
					}else{
						trace('No se pudo indexar la siguiente propiedad debido a que no existe en la clase: ' + $campos[s] );
					}
				}
			}
			return indexObject;
		}
		
		public function indexarUniversoLowerCase( $lista:ArrayCollection, $campos:Array ):Object{
			var indexObject:Object = new Object();
			indexObject["cache-query"] = [];
			//indexObject["FILA"] = []
			for( var v:int = 0; v < $lista.length; v++ ){
				var currentFila:* = $lista[v];
				for( var s:int = 0; s < $campos.length; s++ )
				{
					/* compruebo que la fila seleccionada tenga la propiedad que quiero indexar */
					var columna:String = $campos[s];
					if( currentFila.hasOwnProperty( columna ) ){
						/* si no esta seteado el campo lo declaro como nuevo */
						if( indexObject[ columna ] == null )  indexObject[ columna ] = new Object();
						/* inicio el array objetoIndex[nombreCampo][valor]*/
						if(isNaN( Number( currentFila[columna] ) ))
						{
							if( indexObject[ columna ][ currentFila[columna].toString().toLocaleLowerCase() ] == null ) indexObject[ columna ][ currentFila[ columna ].toString().toLocaleLowerCase()]= [];
							/* agrego el indice al objetoIndex[nombreCampo][valor] = current index*/
							indexObject[ columna ][ currentFila[ columna ].toString().toLocaleLowerCase()].push( v );
						}
						else
						{
							if( indexObject[ columna ][ currentFila[columna]] == null ) indexObject[ columna ][ currentFila[ columna ]]= [];
							/* agrego el indice al objetoIndex[nombreCampo][valor] = current index*/
							indexObject[ columna ][ currentFila[ columna]].push( v );
						}
						
					}else{
						trace('No se pudo indexar la siguiente propiedad debido a que no existe en la clase: ' + $campos[s] );
					}
				}
			}
			return indexObject;
		}
		
		
		public function getCampoLike( $propiedad:String, $valor:String ):Array{
			var arrayReturn:Array = [];
			var primaryKey:String = "";
			primaryKey = $propiedad + $valor;
			if( _indexObject["cache-query"][ primaryKey ] != null ){
				arrayReturn = _indexObject["cache-query"][ primaryKey ];
				return arrayReturn;
			}else{
				if( _indexObject.hasOwnProperty( $propiedad ) && _indexObject[ $propiedad ] != null ){
					for( var key:String in _indexObject[ $propiedad ] ){
						if( key.indexOf( $valor ) != -1 ){
							arrayReturn.push( key );	
						}
					}
				}else{
					trace( 'No existe la propiedad: ' + $propiedad + ' en ' + primaryKey );
				}
			}
			_indexObject["cache-query"][primaryKey] = arrayReturn;
			return arrayReturn;
		}
		
		public function getCampoLikeLowerCase( $propiedad:String, $valor:String ):Array{
			var arrayReturn:Array = [];
			var primaryKey:String = "";
			primaryKey = $propiedad + $valor;
			if( _indexObject["cache-query"][ primaryKey ] != null ){
				arrayReturn = _indexObject["cache-query"][ primaryKey ];
				return arrayReturn;
			}else{
				if( _indexObject.hasOwnProperty( $propiedad ) && _indexObject[ $propiedad ] != null ){
					for( var key:String in _indexObject[ $propiedad ] ){
						if( key.indexOf( $valor.toLocaleLowerCase() ) != -1 ){
							arrayReturn.push( key );	
						}
					}
				}else{
					trace( 'No existe la propiedad: ' + $propiedad + ' en ' + primaryKey );
				}
			}
			_indexObject["cache-query"][primaryKey] = arrayReturn;
			return arrayReturn;
		}
		
		public function getPunteros( $campos:Array, $omitirRepetidosEnCampo:String = "", $order:String = "" ):Array{
			var arrayReturn:Array = [];
			var collectionIndex:ArrayCollection = new ArrayCollection();
			var conteoApariciones:int = 0;
			/*genero la clave para el cache de la consulta*/
			var primaryKey:String = "";
			for( var c:int = 0; c < $campos.length; c++ ){
				if( $campos[c] != null && $campos[c] != _indexCamposFiltro[c])		primaryKey += $campos[c] + c.toString() + 'x' + '.';
				if( $campos[c] != null ) conteoApariciones++;
			}
			primaryKey = primaryKey + $omitirRepetidosEnCampo;
			if( primaryKey != "" && _indexObject["cache-query"].hasOwnProperty( primaryKey ) ){
				// regresa el cache
				arrayReturn = _indexObject["cache-query"][primaryKey];
				return arrayReturn;
			}else{
				// no existe cache de la consulta entonces prosigue
				_indexObject["cache-query"][primaryKey] = [];
				for( var g:int = 0; g < _indexCamposFiltro.length; g++ ){
					/* si el campo que se quiere consultar es diferente de null se prosigue a validar la existencia de dicha propiedad en el objeto index*/
					if( $campos[g] != null ){
						/* si el valor a buscar es igual al nombre del campo entonces devuelvo todos los valores en el campo*/
						if( $campos[g] == _indexCamposFiltro[g] ){
							for( var key:String in _indexObject[ _indexCamposFiltro[g] ] ){
								//collectionIndex.addItem( _indexObject[ _indexCamposFiltro[g] ][ key ]  );
								arrayReturn.push( key );
							}
							arrayReturn.sort(Array.CASEINSENSITIVE);
							return arrayReturn;
						}
						/* se valida que el objeto index tenga la propiedad con el nombre del campo a consultar*/
						if( _indexCamposFiltro[g] != "" && _indexObject.hasOwnProperty( _indexCamposFiltro[g] ) ){
							/* se valida que el campo tenga informacion*/
							if( _indexObject[ _indexCamposFiltro[g] ] != null ){
								/* se intenta accesar a los punteros de objetoIndex[propiedadClase][valor a buscar] */
								if( _indexObject[ _indexCamposFiltro[g] ][ $campos[ g ] ] != null ){
									/* se agregan los indices de ese campo */
									collectionIndex.addItem( _indexObject[ _indexCamposFiltro[g] ][ $campos[ g ] ]  );
								}
							}
						}
					}
				}
				/* se cruzan los indices para buscar coincidencias y eliminar los casos que solo aparecen una vez*/
				if( collectionIndex.length > 0 && collectionIndex.length == conteoApariciones ){
					arrayReturn = cruzarIndexs( collectionIndex, conteoApariciones );
					if( $omitirRepetidosEnCampo != "" ) arrayReturn = omitirValoresRepetidosEnCampo( arrayReturn, $omitirRepetidosEnCampo );
					_indexObject["cache-query"][primaryKey] = arrayReturn;
					return arrayReturn;
				}
			}
			return arrayReturn;
		}
		protected function omitirValoresRepetidosEnCampo( $indices:Array, $omitirRepetidosEnCampo:String ):Array{
			var arrayReturn:Array = [];
			var valoresCampoOmitir:Array = [];
			for( var t:int = 0; t < $indices.length; t++ ){
				var currentFila:* = _universo.getItemAt( $indices[t] );
				if( currentFila.hasOwnProperty( $omitirRepetidosEnCampo ) && valoresCampoOmitir.indexOf( currentFila[ $omitirRepetidosEnCampo] ) == -1 ){
					valoresCampoOmitir.push( currentFila[ $omitirRepetidosEnCampo] );
					arrayReturn.push( $indices[t] );
				}
			}
			return arrayReturn;
		}
		public function getValoresCampo( $propiedad:String, $indices:Array ):Array{
			var arrayReturn:Array = [];
			var primaryKey:String = $propiedad + $indices.toString();
			if( _indexObject["cache-query"][primaryKey] != null ){
				arrayReturn = _indexObject["cache-query"][primaryKey];
				return arrayReturn;
			}
			for( var t:int = 0; t < $indices.length; t++ ){
				var currentFila:* = _universo.getItemAt( $indices[t] );
				/* valido si la clase tiene la propiedad a agregar y agrego solo una vez el valor al arreglo final*/
				if( currentFila.hasOwnProperty( $propiedad ) && arrayReturn.indexOf( currentFila[ $propiedad] ) == -1 )	arrayReturn.push( currentFila[ $propiedad] );
			}
			_indexObject["cache-query"][primaryKey] = arrayReturn;
			return arrayReturn;
		}
		
		private var key:Object;
		public function getValoresCampoOmitiendoRepetidos( $propiedad:String, $indices:Array):Array{
			var arrayReturn:Array = [];
			key = new Object;
			var primaryKey:String = $propiedad + $indices.toString();
			
			if( _indexObject["cache-query"][primaryKey] != null ){
				arrayReturn = _indexObject["cache-query"][primaryKey];
				return arrayReturn;
			}
			
			for( var t:int = 0; t < $indices.length; t++ ){
				var currentFila:* = _universo.getItemAt( $indices[t] );
				
				if($propiedad.indexOf(".") > -1 ){
					var propiedades:Array = $propiedad.split(".");
					var ultimaPropiedad:String = propiedades.pop();
					
					//recorrer las propiedades, verificando que existen todas en el objeto o clase y así llegar a la propiedad que nos interesa
					var currentParent:* = currentFila;
					for (var i:int = 0; i < propiedades.length; i++) 
					{
						if(currentParent.hasOwnProperty(propiedades[i]))
							currentParent = currentParent[propiedades[i]];
					}
					
					if( currentParent.hasOwnProperty( ultimaPropiedad ) && !key.hasOwnProperty(currentParent[ ultimaPropiedad] ) && currentParent[ ultimaPropiedad] != null ){
						key[currentParent[ ultimaPropiedad]] = currentParent[ ultimaPropiedad];
						arrayReturn.push( currentParent[ultimaPropiedad] );
					}
					
				}else{
					
					/* valido si la clase tiene la propiedad a agregar y agrego solo una vez el valor al arreglo final*/
					if( currentFila.hasOwnProperty( $propiedad ) && !key.hasOwnProperty(currentFila[ $propiedad] ) && currentFila[ $propiedad] != null ){
						key[currentFila[ $propiedad]] = currentFila[ $propiedad];
						arrayReturn.push( currentFila[$propiedad] );
					}
				}
				
			}
			key = null;
			_indexObject["cache-query"][primaryKey] = arrayReturn;
			return arrayReturn;
		}
		
		
		public function getValoresCampoOmitiendoRepetidosDeTodoElUniverso( $propiedad:String):Array{
			var arrayReturn:Array = [];
			key = new Object;
			var primaryKey:String = $propiedad + _universo.source.toString();
			if( _indexObject["cache-query"][primaryKey] != null ){
				arrayReturn = _indexObject["cache-query"][primaryKey];
				return arrayReturn;
			}
			for( var t:int = 0; t < _universo.length; t++ ){
				var currentFila:* = _universo.getItemAt(t);
				/* valido si la clase tiene la propiedad a agregar y agrego solo una vez el valor al arreglo final*/
				if( currentFila.hasOwnProperty( $propiedad ) && !key.hasOwnProperty(currentFila[ $propiedad] ) && currentFila[ $propiedad] != null ){
					key[currentFila[ $propiedad]] = currentFila[ $propiedad];
					arrayReturn.push( currentFila[$propiedad] );
				}
			}
			key = null;
			_indexObject["cache-query"][primaryKey] = arrayReturn;
			return arrayReturn;
		}
		
		
		public function getSumarCampo( $propiedad:String, $indices:Array, $omitirRepetidosEnCampo:String = "", $universo:Boolean=false ):Number{
			var totalReturn:Number = 0;
			var primaryKey:String = $propiedad + $omitirRepetidosEnCampo + $indices.toString();
			var valoresCampoOmitir:Array = [];
			
			if( _indexObject["cache-query"][primaryKey] != null && !$universo)
			{
				totalReturn = _indexObject["cache-query"][primaryKey];
				return totalReturn;
			}
			
			var cont:int = $universo ? _universo.length:$indices.length;
			var currentFila:* ;
			for( var t:int = 0; t < cont; t++ ){
				
				if($universo)
				{
					currentFila = _universo.getItemAt(t);
				}
				else
				{
					currentFila = _universo.getItemAt( $indices[t] );
				}
				
				if($propiedad.indexOf(".") > -1 ){
					var isPropertyError:Boolean = false;
					var propiedades:Array = $propiedad.split(".");
					var ultimaPropiedad:String = propiedades.pop();
					
					//recorrer las propiedades, verificando que existen todas en el objeto o clase y así llegar a la propiedad que nos interesa
					var currentParent:* = currentFila;
					for (var i:int = 0; i < propiedades.length; i++) 
					{
						if(currentParent.hasOwnProperty(propiedades[i]))
							currentParent = currentParent[propiedades[i]];
						else
							isPropertyError = true;
					}
					
					if( currentParent.hasOwnProperty(ultimaPropiedad)){
						if( $omitirRepetidosEnCampo == "" ){
							if( currentParent[ ultimaPropiedad] is Number || currentParent[ $propiedad] is int ){
								totalReturn += currentParent[ ultimaPropiedad ];
							}else{
								trace('No se pudo sumar ' + currentParent[ ultimaPropiedad ] + ' debido a que no es number o int. Indices: [' + $indices.toString() + '] ' );
							}
						}else if( currentParent.hasOwnProperty( $omitirRepetidosEnCampo ) && valoresCampoOmitir.indexOf( currentParent[ $omitirRepetidosEnCampo] ) == -1 ){
							valoresCampoOmitir.push( currentParent[ $omitirRepetidosEnCampo] );
							totalReturn += currentParent[ ultimaPropiedad];
						}
					}else{
						isPropertyError = true;
					}
					
					if(isPropertyError){
						trace('No se pudo sumar la propiedad: ' + $propiedad.toString() );
					}
					
				}else{
					
					if( currentFila.hasOwnProperty( $propiedad ) ){
						if( $omitirRepetidosEnCampo == "" ){
							if( currentFila[ $propiedad] is Number || currentFila[ $propiedad] is int ){
								totalReturn += currentFila[ $propiedad];
							}else{
								trace('No se pudo sumar ' + currentFila[ $propiedad] + ' debido a que no es number o int. Indices: [' + $indices.toString() + '] ' );
							}
						}else if( currentFila.hasOwnProperty( $omitirRepetidosEnCampo ) && valoresCampoOmitir.indexOf( currentFila[ $omitirRepetidosEnCampo] ) == -1 ){
							valoresCampoOmitir.push( currentFila[ $omitirRepetidosEnCampo] );
							totalReturn += currentFila[ $propiedad];
						}
					}else{
						trace('No se pudo sumar la propiedad: ' + $propiedad.toString() );
					}
					
				}
			}
			_indexObject["cache-query"][primaryKey] = totalReturn;
			return totalReturn;
		}
		
		/**
		 * Obtiene el importe de dos campos dados, por ejemplo Precio Unitario y Numero de Piezas, entonces multiplica los campos, y suma todos los importes para 
		 * regresar un total
		 * */
		public function getImporteDeLosCampos( $campoPU:String, $campoCantidad:String,$indices:Array, $omitirRepetidosEnCampo:String = "" ):Number{
			var totalReturn:Number = 0;
			var primaryKey:String = $campoPU + $campoCantidad+ $omitirRepetidosEnCampo + $indices.toString();
			var valoresCampoOmitir:Array = [];
			
			if( _indexObject["cache-query"][primaryKey] != null ){
				totalReturn = _indexObject["cache-query"][primaryKey];
				return totalReturn;
			}
			for( var t:int = 0; t < $indices.length; t++ ){
				var currentFila:* = _universo.getItemAt( $indices[t] );
				if( currentFila.hasOwnProperty( $campoPU ) && currentFila.hasOwnProperty($campoCantidad) ){
					if( $omitirRepetidosEnCampo == "" ){
						if( (currentFila[ $campoPU] is Number || currentFila[ $campoPU] is int ) && (currentFila[ $campoCantidad] is Number || currentFila[$campoCantidad] is int )){
							totalReturn += currentFila[ $campoPU] * currentFila[$campoCantidad];
						}else{
							trace('No se pudo sumar ' + currentFila[ $campoPU] +' o '+ currentFila[ $campoCantidad] + ' debido a que no es number o int. Indices: [' + $indices.toString() + '] ' );
						}
					}else if( currentFila.hasOwnProperty( $omitirRepetidosEnCampo ) && valoresCampoOmitir.indexOf( currentFila[ $omitirRepetidosEnCampo] ) == -1 ){
						valoresCampoOmitir.push( currentFila[ $omitirRepetidosEnCampo] );
						if( (currentFila[ $campoPU] is Number || currentFila[ $campoPU] is int ) && (currentFila[ $campoCantidad] is Number || currentFila[$campoCantidad] is int )){
							totalReturn += currentFila[ $campoPU] * currentFila[$campoCantidad];
						}else{
							trace('No se pudo sumar ' + currentFila[ $campoPU] +' o '+ currentFila[ $campoCantidad] + ' debido a que no es number o int. Indices: [' + $indices.toString() + '] ' );
						}
					}
				}else{
					trace('No se pudo sumar la propiedad: ' + $campoPU.toString() + ' o ' + $campoCantidad.toString());
				}
			}
			_indexObject["cache-query"][primaryKey] = totalReturn;
			return totalReturn;
		}
		/**
		 * recibe un arrayCollection con arrays que contienen indices luego elimina los indices que no aparecen en todos los arreglos
		 */
		public function cruzarIndexs( $collection:ArrayCollection = null, $conteos:int = 0 ):Array{
			var final:Array = [];
			if( $collection == null ) return final;
			if( $collection.length == 1) final = $collection[0];
			if( $collection.length > 1 ){
				/*ordenar arrays por length de menor a mayor*/
				var longitudMenor:int = $collection[0].length;
				var collectionReOrder:ArrayCollection = new ArrayCollection();
				for( var t:int = 0; t < $collection.length; t++ ){
					if( $collection[t].length < longitudMenor ){
						// se agrega al principio y se define la nueva longitud menor
						collectionReOrder.addItemAt( $collection[t], 0 );
						longitudMenor = $collection[t];
					}else{
						// se agrega al final
						collectionReOrder.addItem( $collection[t] );
					}
				}
				var firstItem:Array = collectionReOrder[0] as Array;
				var conteosRequeridos:int = $conteos > 0 ? $conteos: collectionReOrder.length;
				for( var f:int = 0; f < firstItem.length; f++ ){
					var indice:int = firstItem[f]; 
					var conteoApariciones:int = 0;
					for( var g:int = 0; g < collectionReOrder.length; g++ ){
						/* el index debe existir en absolutamente todos los demas arrys para ser agregado al array final, se establece un contador */
						//if( indice == collectionReOrder[g][indice] )	conteoApariciones++;
						var pos:int = (collectionReOrder[g] as Array).indexOf( indice );
						if( (collectionReOrder[g] as Array).indexOf( indice ) > -1 ){
							conteoApariciones++;
						}
						if( conteoApariciones == conteosRequeridos ){
							final.push( indice );					
						}
					}
				}
			}
			return final;
		}
		
		public function armarLista( $punteros:Array ):ArrayCollection{
			var arrReturn:ArrayCollection = new ArrayCollection();
			for( var h:int = 0; h < $punteros.length; h++ ){
				arrReturn.addItem( _universo.getItemAt( $punteros[h] ) );
			}
			return arrReturn;
		}
		
		public function ensamblarLista( $campos:Array, $omitirRepetidosEnCampo:String = "" ):ArrayCollection{
			_cronometro = new Date();
			var inicioTime:Number = _cronometro.time;
			var camposConsulta:String = '';
			for( var h:int = 0; h < $campos.length; h++ ){
				if( $campos[h] != null ){
					camposConsulta += _indexCamposFiltro[h] + '='+  $campos[h] + ',';
				}
			}
			camposConsulta = ' [' + camposConsulta +'] ';
			var punteros:Array = getPunteros($campos);
			if( $omitirRepetidosEnCampo != "" ) punteros = omitirValoresRepetidosEnCampo( punteros, $omitirRepetidosEnCampo );
			var ensamble:ArrayCollection = armarLista( punteros );
			var terminadoTime:Number = new Date().time;
			trace( 'Tiempo ensamble: ' + (terminadoTime - inicioTime) + ' ms, ' + ensamble.length + '/' + _universo.length + ' fila(s) universo ' + camposConsulta );
			return ensamble;
		}
	}
}