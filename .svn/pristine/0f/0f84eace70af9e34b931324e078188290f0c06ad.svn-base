<?xml version="1.0" encoding="utf-8"?>
<graficaPie:ContenedorComparacionCompras xmlns:fx="http://ns.adobe.com/mxml/2009" 
										 titulo="COMPRAS" xmlns:graficaPie="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.*"
										 
										 xmlns:s="library://ns.adobe.com/flex/spark"
										 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
										 xmlns:chekbox="skins.skin.chekbox.*" 
										 xmlns:otros="skins.otros.*" 
										 xmlns:graficas="skins.skin.graficas.*"
										 xmlns:pq="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*" 
										 xmlns:comun="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.*" xmlns:compras="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.compras.proveedores.componentes.compras.*" xmlns:ventasDelPeriodo="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.ventasDelPeriodo.*" >
	
	<fx:Declarations>
		<mx:SeriesInterpolate id="fxInterpolateIn" duration="600"/>
		<s:SolidColorStroke id="trazoGruezo" color="0x{catalogoColores.LABEL_NEGRO}" weight="3"/>
		<s:SolidColorStroke id="trazoDelgado" color="0x{catalogoColores.LABEL_NEGRO}" weight="1"/>
		<mx:SolidColorStroke id = "sA" color="0x3b98af" weight="6"/>
		<mx:SolidColorStroke id = "sB" color="0x666666" weight="4"/>
		<mx:SolidColorStroke id = "sC" color="0x660099" weight="2"/>
		<mx:SolidColorStroke id = "sD" color="0xCC9900" weight="2"/>
		<mx:SolidColorStroke id = "sE" color="0xCC3333" weight="2"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.compras.proveedores.EventoTabProveedores;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosEtiquetas;
			
			[Bindable] private var arrReturn:ArrayCollection = new ArrayCollection();
			[Bindable] private var arrMinisChart:ArrayCollection = new ArrayCollection();
			private var _linealArrGrafica:ArrayCollection = new ArrayCollection();
			private var totalLegend1:Number = 0;
			private var totalLegend2:Number = 0;
			private var totalLegend3:Number = 0;
			private var totalLegend4:Number = 0;
			private var totalLegend5:Number = 0;
			
			private var _desempeno_0:Number = 0;
			private var _desempeno_1:Number = 0;
			private var _desempeno_2:Number = 0;
			private var _desempeno_3:Number = 0;
			private var _desempeno_4:Number = 0;
			private var _desempeno_5:Number = 0;
			private var _mesesTrabajados:Number = 0;
			private var _mesesActuales:Number = 0;
			private var fecha:Date = new Date();
			private var _valoresGrafica:ArrayCollection;
			
			private var _listaMensual:ArrayCollection = new ArrayCollection([
				"Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"
			]);
			
			private function formateoEje($valor:Number, $valorPrevio:Object, $eje:Object):String{
				var strRegreso:String = "";
				if($valor != 0 ) strRegreso =  '$ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( $valor );
				return strRegreso;
			}
			
			public function set resumenComparativaCompra(comparativa:ArrayCollection):void{ 
				if(comparativa == null) return;
				
				arrMinisChart = new ArrayCollection();
				_linealArrGrafica = comparativa;
				myChart.dataProvider = iniciarGrafica(_linealArrGrafica);
			}
			
			private function filtrarPeriodos( $lista:ArrayCollection ):ArrayCollection{
				arrReturn = new ArrayCollection();
				var objetoPeriodo1:Object = generateObjectItemBarChart( UtilsGrid.queryCampoX( $lista, "etiqueta", "OC_COMPRAS_0") );
				var objetoPeriodo2:Object = generateObjectItemBarChart( UtilsGrid.queryCampoX( $lista, "etiqueta", "OC_COMPRAS_1") );
				var objetoPeriodo3:Object = generateObjectItemBarChart( UtilsGrid.queryCampoX( $lista, "etiqueta", "OC_COMPRAS_2") );
				var objetoPeriodo4:Object = generateObjectItemBarChart( UtilsGrid.queryCampoX( $lista, "etiqueta", "OC_COMPRAS_3") );
				var objetoPeriodo5:Object = generateObjectItemBarChart( UtilsGrid.queryCampoX( $lista, "etiqueta", "OC_COMPRAS_4") );
				objetoPeriodo1.etiquetaX = _event.labelPeriodo1;
				objetoPeriodo2.etiquetaX = _event.labelPeriodo2;
				objetoPeriodo3.etiquetaX = _event.labelPeriodo3;
				objetoPeriodo4.etiquetaX = _event.labelPeriodo4;
				objetoPeriodo5.etiquetaX = _event.labelPeriodo5;
				arrReturn.addItem( objetoPeriodo5 );
				arrReturn.addItem( objetoPeriodo4 );
				arrReturn.addItem( objetoPeriodo3 );
				arrReturn.addItem( objetoPeriodo2 );
				arrReturn.addItem( objetoPeriodo1 );
				return arrReturn;
			}
			
			private function generateObjectItemBarChart( arrTemp:ArrayCollection):Object{
				
				var objeto:Object = new Object();
				objeto.proveedorCancelado = 0;
				objeto.montoCancelado = 0;
				objeto.ocCancelada = 0;
				objeto.partidasCanceladas = 0;
				objeto.piezasCanceladas = 0;
				
				objeto.proveedorConfirmado = 0;
				objeto.montoConfirmado = 0;
				objeto.ocConfirmada = 0;
				objeto.partidasConfirmadas = 0;
				objeto.piezasConfirmadas = 0;
				
				for( var i:int = 0 ; i < arrTemp.length ; i++){
					if(arrTemp[i].conceptoResultado == "Cancelada"){
						objeto.proveedorCancelado += arrTemp[i].clientes_proveedores;
						objeto.montoCancelado += arrTemp[i].total;
						objeto.ocCancelada += arrTemp[i].ocompras;
						objeto.partidasCanceladas += arrTemp[i].partidas;
						objeto.piezasCanceladas += arrTemp[i].piezasTotal;
					}else{
						objeto.proveedorConfirmado += arrTemp[i].clientes_proveedores;
						objeto.montoConfirmado += arrTemp[i].total;
						objeto.ocConfirmada += arrTemp[i].ocompras;
						objeto.partidasConfirmadas += arrTemp[i].partidas;
						objeto.piezasConfirmadas += arrTemp[i].piezasTotal;
					}
					
				}
				
				objeto.piezasCanceladas == 1 ? objeto.piezasCanceladasLabel = objeto.piezasCanceladas + ' pza' : objeto.piezasCanceladasLabel = objeto.piezasCanceladas + ' pzas';
				objeto.piezasConfirmadas == 1 ? objeto.piezasConfirmadasLabel = objeto.piezasConfirmadas + ' pza' : objeto.piezasConfirmadasLabel = objeto.piezasConfirmadas + ' pzas';
				return objeto;
			}
			
			private function iniciarGrafica( $lista:ArrayCollection ):ArrayCollection{
				totalLegend1 = 0;
				totalLegend2 = 0;
				totalLegend3 = 0;
				totalLegend4 = 0;
				totalLegend5 = 0;
				var m:int = 0;
				var arrReturn:ArrayCollection = new ArrayCollection();
				arrReturn.addItem(new Object());
				var objeto:Object;
				var cuenta:int = 1;
				var mes:Number = fecha.month + 1;
				_desempeno_0 = 0;
				_desempeno_1 = 0;
				_desempeno_2 = 0;
				_desempeno_3 = 0;
				_desempeno_4 = 0;
				_desempeno_5 = 0;
				while( cuenta < 13){
					//if(cuenta >= _minimoMeses && cuenta <= _maximoMeses)
					{
						objeto = new Object();
						objeto.numeroMes = cuenta;
						objeto.mes = _listaMensual[cuenta -1];
						objeto.montoUSD_0 = 0;
						objeto.montoUSD_1 = 0;
						objeto.montoUSD_2 = 0;
						objeto.montoUSD_3 = 0;
						objeto.montoUSD_4 = 0;
						objeto.totalPeriodo = 0;
						for( m = 0; m < $lista.length;m++ ){
							var resumen:ResumenConsulta = $lista[m] as ResumenConsulta;
							if(cuenta == resumen.mes){
								if( resumen.etiqueta == "OC_COMPRAS_0" && resumen.conceptoResultado == 'Confirmada'){
									totalLegend1 += objeto.montoUSD_0 += resumen.total;
									_desempeno_0 += resumen.total;
									_mesesActuales = ObjectUtil.copy(resumen.mes) as int;
								}
								if( resumen.etiqueta == "OC_COMPRAS_1" && resumen.conceptoResultado == 'Confirmada'){
									totalLegend2 += objeto.montoUSD_1 += resumen.total;
									_desempeno_1 += resumen.total;
								}
								if( resumen.etiqueta == "OC_COMPRAS_2" && resumen.conceptoResultado == 'Confirmada' ){
									totalLegend3 += objeto.montoUSD_2 += resumen.total;
									_desempeno_2 += resumen.total;
								}
								if( resumen.etiqueta == "OC_COMPRAS_3" && resumen.conceptoResultado == 'Confirmada' ){
									totalLegend4 += objeto.montoUSD_3 += resumen.total;
									_desempeno_3 += resumen.total;
								}
								if( resumen.etiqueta == "OC_COMPRAS_4" && resumen.conceptoResultado == 'Confirmada' ){
									totalLegend5 += objeto.montoUSD_4 += resumen.total;
									_desempeno_4 += resumen.total;
								}
								if( resumen.etiqueta == "OC_COMPRAS_5" && resumen.conceptoResultado == 'Confirmada' ){
									
									_desempeno_5 += resumen.total;
								}
							}
						}
						arrReturn.addItem(objeto);
					}
					cuenta++;
				}
				
				if(_anioFiltro == fecha.fullYear)
				{
					if (_mesesTrabajados > _maximoMeses)
					{
						_mesesTrabajados = _maximoMeses;
					}
					else
					{
						_mesesTrabajados =  _mesesActuales;
					}
				}
				else
				{
					_mesesTrabajados = _maximoMeses;
				}
				
				arrReturn.addItem( new Object() );
				establecerObjetivosPeriodos();
				
				lblPer1.text = _event.labelPeriodo1 + ' · $ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( totalLegend1 ) + ' ·';
				lblPer2.text = _event.labelPeriodo2 + ' · $ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( totalLegend2 ) + ' ·';
				lblPer3.text = _event.labelPeriodo3 + ' · $ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( totalLegend3 ) + ' ·';
				//lblPer4.text = _event.labelPeriodo4 + ' · $ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( totalLegend4 ) + ' .';
				//lblPer5.text = _event.labelPeriodo5 + ' · $ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( totalLegend5 ) ;
				
				var crecimientoActual:Number = comparaPeriodos( totalLegend1, totalLegend2 );
				var crecimientoPasado:Number = comparaPeriodos( totalLegend2, totalLegend3 );
				var crecimientoPosPasado:Number = comparaPeriodos( totalLegend3, totalLegend4 );
				var crecimientoUltraPasado:Number = comparaPeriodos( totalLegend4, totalLegend5 );
				
				var prefijo:String = (crecimientoActual > 0 ? '+': '' );
				if( crecimientoActual == 0 )
					prefijo = '';
				
				prefijo = (crecimientoPasado > 0 ? '+':  '' );
				if( crecimientoPasado == 0 )
					prefijo = '';
				
				prefijo = (crecimientoPosPasado > 0 ? '+':  '' );
				if( crecimientoPosPasado == 0 )
					prefijo = '';
				
				prefijo = (crecimientoUltraPasado > 0 ? '+':  '' );
				if( crecimientoUltraPasado == 0 )
					prefijo = '';
				
				var colorRojo:uint = uint('0x' + catalogoColores.LABEL_ROJO );
				var colorVerde:uint = uint('0x' + catalogoColores.LABEL_VERDE );
				
				if(_anioFiscal)
					return ordenarPeriodosFiscal(arrReturn);
				else
					return arrReturn;	
				
			}
			
			private function ordenarPeriodosFiscal($arreglo:ArrayCollection):ArrayCollection
			{
				if($arreglo.length == 0)
					return new ArrayCollection();
				
				$arreglo.removeItemAt($arreglo.length-1);
				$arreglo.removeItemAt(0);
				
				
				var arrayNew:ArrayCollection = new ArrayCollection();
				var tmpFin:ArrayCollection = new ArrayCollection();
				var tmpInicio:ArrayCollection = new ArrayCollection();
				var cont:int = 0;
				for(var t:int = 0; t < $arreglo.length; t++)
				{
					if(t < _event.mesFinFiscal)
					{
						tmpFin.addItem($arreglo[t]);
					}
					if(t >= _event.mesFinFiscal )
					{
						tmpInicio.addItem($arreglo[t]);
					}
				}
				
				for(var n:int = 0; n < tmpInicio.length; n++)
				{
					if(n==0)
						arrayNew.addItem(new Object());
					
					arrayNew.addItem(tmpInicio[n]);
				}
				
				for(var h:int = 0; h < tmpFin.length; h++)
				{
					arrayNew.addItem(tmpFin[h]);
				}
				
				arrayNew.addItem(new Object());
				return arrayNew;
				
			}
			
			private function establecerObjetivosPeriodos():void
			{
				var _meses:Number = _maximoMeses == 0 ? 1:_maximoMeses;
				var promFacPer_0:Number = _desempeno_0 / (_mesesTrabajados == 0 ? 1:_mesesTrabajados);
				var promFacPer_1:Number = _desempeno_1 / _meses;
				var promFacPer_2:Number = _desempeno_2 / _meses;
				var promFacPer_3:Number = _desempeno_3 / _meses;
				var promFacPer_4:Number = _desempeno_4 / _meses;
				var promFacPer_5:Number = _desempeno_5 / _meses;
				var proyecPeriodo_0:Number = (promFacPer_0 * _meses);
				var proyecPeriodo_1:Number = (promFacPer_1 * _meses);
				var proyecPeriodo_2:Number = (promFacPer_2 * _meses);
				var proyecPeriodo_3:Number = (promFacPer_3 * _meses);
				var proyecPeriodo_4:Number = (promFacPer_4 * _meses);
				var proyecPeriodo_5:Number = (promFacPer_5 * _meses);
				var obj:Object = new Object();
				_valoresGrafica = new ArrayCollection();
				
				lblDesempenoPeriodo_0.text =  "US $"+ UtilsFormatosNumericos.precisionADosDecimalesConComas(_desempeno_0);
				lblPromedioFactPeriodo_0.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(promFacPer_0);
				lblDiferencial_0.text =   UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_0/promFacPer_1)-1)*100).toString()+"%";
				lblProyecPeriodo_0.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(proyecPeriodo_0);
				lblProyecCrecimiento_0.text = UtilsFormatosNumericos.precisionADosDecimales(((proyecPeriodo_0/_desempeno_1)-1)*100).toString()+"%";
				
				
				
				lblDesempenoPeriodo_1.text =  "US $"+ UtilsFormatosNumericos.precisionADosDecimalesConComas(_desempeno_1);
				lblPromedioFactPeriodo_1.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(promFacPer_1);
				lblDiferencial_1.text =   UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_1/promFacPer_2)-1)*100).toString()+"%";
				lblProyecPeriodo_1.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(proyecPeriodo_1);
				lblProyecCrecimiento_1.text = UtilsFormatosNumericos.precisionADosDecimales(((proyecPeriodo_1/_desempeno_2)-1)*100).toString()+"%";
				
				
				lblDesempenoPeriodo_2.text =  "US $"+ UtilsFormatosNumericos.precisionADosDecimalesConComas(_desempeno_2);
				lblPromedioFactPeriodo_2.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(promFacPer_2);
				lblDiferencial_2.text =   UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_2/promFacPer_3)-1)*100).toString()+"%";
				lblProyecPeriodo_2.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(proyecPeriodo_2);
				lblProyecCrecimiento_2.text = UtilsFormatosNumericos.precisionADosDecimales(((proyecPeriodo_2/_desempeno_3)-1)*100).toString()+"%";
				
				
				lblDesempenoPeriodo_3.text =  "US $"+ UtilsFormatosNumericos.precisionADosDecimalesConComas(_desempeno_3);
				lblPromedioFactPeriodo_3.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(promFacPer_3);
				lblDiferencial_3.text =   UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_3/promFacPer_4)-1)*100).toString()+"%";
				lblProyecPeriodo_3.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(proyecPeriodo_3);
				lblProyecCrecimiento_3.text = UtilsFormatosNumericos.precisionADosDecimales(((proyecPeriodo_3/_desempeno_4)-1)*100).toString()+"%";
				
				
				lblDesempenoPeriodo_4.text =  "US $"+ UtilsFormatosNumericos.precisionADosDecimalesConComas(_desempeno_4);
				lblPromedioFactPeriodo_4.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(promFacPer_4);
				//lblDiferencial_4.text =  "ND";
				lblDiferencial_4.text =  promFacPer_5 == 0 ? "ND" : UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_4/promFacPer_5)-1)*100).toString()+"%";
				lblProyecPeriodo_4.text = "US $" + UtilsFormatosNumericos.precisionADosDecimalesConComas(proyecPeriodo_4);
				lblProyecCrecimiento_4.text = "ND";
				
				
				if(_event.parametros.anioFiscal)
				{
					lblAnio_0.text = String( _anioFiltro ) + ' - ' +  String( _anioFiltro +1 );
					lblAnio_1.text = String( _anioFiltro-1 ) + ' - ' +  String( _anioFiltro );
					lblAnio_2.text = String( _anioFiltro-2 ) + ' - ' +  String( _anioFiltro -1 );
					lblAnio_3.text = String( _anioFiltro-3 ) + ' - ' +  String( _anioFiltro -2 );
					lblAnio_4.text = String( _anioFiltro-4 ) + ' - ' +  String( _anioFiltro -3 );
					
					var meses:String = _listaMensual[ _event.mesInicioFiscal -1 ] + ' - ' + _listaMensual[ _event.mesFinFiscal - 1 ] ;
					lblPeriodo_0.text = lblPeriodo_1.text = lblPeriodo_2.text = meses.toUpperCase();
					lblPeriodo_3.text = lblPeriodo_4.text = meses.toUpperCase();
				}
				else
				{
					lblPeriodo_0.text = obtenerMes(_minimoMeses).toUpperCase()+" - "+obtenerMes(_mesesTrabajados).toUpperCase();
					lblAnio_0.text = (_anioFiltro).toString();
					lblAnio_1.text = (_anioFiltro-1).toString();
					lblAnio_2.text = (_anioFiltro-2).toString();
					lblAnio_3.text = (_anioFiltro-3).toString();
					lblAnio_4.text = (_anioFiltro-4).toString();
				}
				
				_valoresGrafica.addItem(new Object);
				
				obj = new Object();
				obj.anio = lblAnio_4.text;
				obj.monto = promFacPer_5 == 0 ? 0 : UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_4/promFacPer_5)-1)*100);
				obj.posicion = "";
				obj.valor = UtilsFormatosNumericos.precisionADosDecimales(_desempeno_4);
				_valoresGrafica.addItem(obj);
				
				obj = new Object();
				obj.anio = lblAnio_3.text;
				obj.monto = UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_3/promFacPer_4)-1)*100);
				obj.valor = UtilsFormatosNumericos.precisionADosDecimales(_desempeno_3);
				_valoresGrafica.addItem(obj);
				
				obj = new Object();
				obj.anio = lblAnio_2.text;
				obj.monto = UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_2/promFacPer_3)-1)*100);
				obj.valor = UtilsFormatosNumericos.precisionADosDecimales(_desempeno_2);
				_valoresGrafica.addItem(obj);
				
				obj = new Object();
				obj.anio = lblAnio_1.text;
				obj.monto = UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_1/promFacPer_2)-1)*100);
				obj.posicion = "origen";
				obj.valor = UtilsFormatosNumericos.precisionADosDecimales(_desempeno_1);
				_valoresGrafica.addItem(obj);
				
				obj = new Object();
				obj.anio = lblAnio_0.text;
				obj.monto = UtilsFormatosNumericos.precisionADosDecimales(((promFacPer_0/promFacPer_1)-1)*100);
				obj.posicion = "ultimo";
				obj.valor = UtilsFormatosNumericos.precisionADosDecimales(_desempeno_0);
				_valoresGrafica.addItem(obj);
				
				_valoresGrafica.addItem(new Object);
				
				graficasTendencias.recibeDatosGrafica(_valoresGrafica);
			}
			
			public function obtenerMes($mes:Number):String
			{
				var valor:String="";
				switch($mes)
				{
					case 1:	{valor ="ENERO"; break;}
					case 2:	{valor ="FEBRERO"; break;}
					case 3:	{valor ="MARZO"; break;}
					case 4:	{valor ="ABRIL"; break;}
					case 5:	{valor ="MAYO";	break;}
					case 6:	{valor ="JUNIO"; break;}
					case 7:	{valor ="JULIO"; break;}
					case 8:	{valor ="AGOSTO"; break;}
					case 9:	{valor ="SEPTIEMBRE"; break;}
					case 10:{valor ="OCTUBRE"; break;}
					case 11:{valor ="NOVIEMBRE"; break;}
					case 12:{valor ="DICIEMBRE"; break;}
				}
				return valor;
			}
			
			
			protected function comparaPeriodos( $current:Number, $previo:Number ):Number
			{
				var porcentaje:Number = 0;
				
				if ($current == 0 && $previo==0){
					porcentaje = 0;
				}else{
					var _valor:Number = $previo == 0 ? 1 : $previo;
					porcentaje = ( ($current * 100 ) / _valor ) - 100;
					trace( porcentaje.toString() );
					if( porcentaje == Infinity || porcentaje == -Infinity || isNaN(Number(porcentaje)) )
						porcentaje = 0;
					return Math.round( porcentaje );
				}
				return Math.round( porcentaje );
			}
			
			private var _event:EventoTabProveedores;
			private var _minimoMeses:int=1;
			private var _maximoMeses:int=12;
			private var _keyAnterior:String = "";
			private var _anioFiltro:Number;
			private var _anioFiscal:Boolean;
			
			public function set recibirFiltrosTableroProveedores(etiqueta:EventoTabProveedores):void{
				if(etiqueta == null) return;
				
				_event = etiqueta;
				_minimoMeses = _event.parametros.mesInicio;
				_maximoMeses = _event.parametros.mesFin;
				_anioFiltro = _event.parametros.anio;
				_anioFiscal = _event.parametros.anioFiscal;
				
				lblPer1.text = _event.labelPeriodo1;
				lblPeriodo_1.text = lblPer2.text = _event.parametros.periodo.toUpperCase();
				lblPeriodo_2.text = lblPer3.text = _event.parametros.periodo.toUpperCase();
				lblPeriodo_3.text = _event.parametros.periodo.toUpperCase();
				lblPeriodo_4.text =_event.parametros.periodo.toUpperCase();
				var Lineal:int = _event.parametros.lineal;
				
				myChart.dataProvider = iniciarGrafica( _linealArrGrafica );
			}
			
			private function lblFunction( $value:Object, $etiqueta:Object ):String{
				return _listaMensual[ int($etiqueta) -1 ].toUpperCase();
			}
			
		]]>
	</fx:Script>
	
	<graficaPie:contenido>
		<!-- CHART COMPARACION -->
		<s:VGroup width="100%" height="100%" paddingTop="-15" >
			
			<s:HGroup width="100%" height="100% ">
				
				
				
				<mx:LineChart height="100%" width="100%" id="myChart"
							  mouseSensitivity="5" 
							  dataTipRenderer="{DataToolTipCobro}" 
							  showDataTips="true" 
							  showDataTipTargets="false"  
							  dataTipMode="single" 
							  paddingRight="30" paddingLeft="20" paddingTop="20"
							  seriesFilters="[]"
							  >
					<mx:series>
						<!-- CURRENT -->
						<mx:LineSeries yField="montoUSD_0" xField="numeroMes" form="segment" lineStroke="{sA}" width="100%" showDataEffect="{fxInterpolateIn}" />
						<mx:PlotSeries id="montoObjetivo1" yField="montoUSD_0" xField="numeroMes" displayName="Ventas" width="100%" showDataEffect="{fxInterpolateIn}">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXItemRenderer>
										<fx:Script>
											<![CDATA[
												import skins.catalogos.catalogoColores;
											]]>
										</fx:Script>
										<s:Ellipse width="8" height="8" horizontalCenter="0" verticalCenter="0" depth="50">
											<s:fill>
												<s:SolidColor color="0x{catalogoColores.LABEL_VERDE_AZUL}"/>
											</s:fill>		
										</s:Ellipse>
									</s:MXItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:PlotSeries>
						<!-- AYER -->
						<mx:LineSeries yField="montoUSD_1" xField="numeroMes" form="segment" lineStroke="{sB}" width="100%" showDataEffect="{fxInterpolateIn}" />
						<mx:PlotSeries id="montoObjetivo2" yField="montoUSD_1" xField="numeroMes" displayName="Ventas" width="100%" showDataEffect="{fxInterpolateIn}">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXItemRenderer>
										<s:Ellipse width="8" height="8" horizontalCenter="0" verticalCenter="0" depth="50">
											<s:fill>
												<s:SolidColor color="0x666666"/>
											</s:fill>		
										</s:Ellipse>
									</s:MXItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:PlotSeries>
						<!-- PASADO -->
						<mx:LineSeries yField="montoUSD_2" xField="numeroMes" form="segment" lineStroke="{sC}" width="100%" showDataEffect="{fxInterpolateIn}" />
						<mx:PlotSeries id="montoObjetivo3" yField="montoUSD_2" xField="numeroMes" displayName="Ventas" width="100%" showDataEffect="{fxInterpolateIn}">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXItemRenderer>
										<s:Ellipse width="8" height="8" horizontalCenter="0" verticalCenter="0" depth="50">
											<s:fill>
												<s:SolidColor color="0x660099"/>
											</s:fill>		
										</s:Ellipse>
									</s:MXItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:PlotSeries>
						<!-- POSPASADO -->
						<mx:LineSeries yField="montoUSD_3" xField="numeroMes" form="segment" lineStroke="{sD}" width="100%" showDataEffect="{fxInterpolateIn}" />
						<mx:PlotSeries id="montoObjetivo4" yField="montoUSD_3" xField="numeroMes" displayName="Ventas" width="100%" showDataEffect="{fxInterpolateIn}">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXItemRenderer>
										<s:Ellipse width="8" height="8" horizontalCenter="0" verticalCenter="0" depth="50">
											<s:fill>
												<s:SolidColor color="0xCC9900"/>
											</s:fill>		
										</s:Ellipse>
									</s:MXItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:PlotSeries>
						<!-- ULTRAPASADO -->
						<mx:LineSeries yField="montoUSD_4" xField="numeroMes" form="segment" lineStroke="{sE}" width="100%" showDataEffect="{fxInterpolateIn}" />
						<mx:PlotSeries id="montoObjetivo5" yField="montoUSD_4" xField="numeroMes" displayName="Ventas" width="100%" showDataEffect="{fxInterpolateIn}">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXItemRenderer>
										<s:Ellipse width="8" height="8" horizontalCenter="0" verticalCenter="0" depth="50">
											<s:fill>
												<s:SolidColor color="0xCC3333"/>
											</s:fill>		
										</s:Ellipse>
									</s:MXItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:PlotSeries>
						
					</mx:series>
					<mx:horizontalAxis>
						<mx:CategoryAxis id="ventasMes" categoryField="numeroMes"  />
					</mx:horizontalAxis>
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer axis="{ventasMes}" axisStroke="{trazoGruezo}" tickPlacement="none" showLine="true" showLabels="true"
										 fontFamily="Helvetica" fontSize="11" fontWeight="bold" fontStyle="normal" labelFunction="lblFunction" />
					</mx:horizontalAxisRenderers>
					<mx:verticalAxis>
						<mx:LinearAxis id="vCantidad" labelFunction="formateoEje" autoAdjust="false" padding="1"  minimum="0"/>
					</mx:verticalAxis>
					<mx:verticalAxisRenderers>
						<mx:AxisRenderer axis="{vCantidad}" showLine="false" tickPlacement="none" styleName="axisVerticalLabels"/>
					</mx:verticalAxisRenderers>
					
				</mx:LineChart>	
				<compras:ComprasMax_GraficaTendencias id="graficasTendencias" width="100%" height="100%"/>			
			</s:HGroup>
		</s:VGroup>	
	</graficaPie:contenido>
</graficaPie:ContenedorComparacionCompras>	