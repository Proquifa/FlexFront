<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:botoneraFlotante="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.botoneraFlotante.*"
		 xmlns:requerimientos="vista.vistas.reporte.visita.requerimientos.*" 
		 xmlns:boton="skins.skin.botones.boton.*"
		 xmlns:otros="skins.otros.*"
		 creationComplete="group1_creationCompleteHandler(event)"
		 width="100%" height="100%" 
		 >
	
	
	
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoEsperar;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.alertPqNet.EventoAlertaPqNet;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientes_General;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Campana;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Correo;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cotizacion;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Direccion;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Empleado;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Producto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.ReportarVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.VisitaCliente;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.newPlantillaReporte;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.itemRenderer.vistaPrincipal.CatClientes_IR_Item_imagen;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.popUpAutorizacionCatClientes;
			import mx.com.proquifa.vista.vistas.skin.botoneramenu.DataItem;
			import mx.containers.Form;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoIconosBotoneras;
			import skins.catalogos.catalogoIconosBotones;
			import skins.otros.divicionDegradadaDelgadahorizontal;
			
			import vista.evento.reportarVisita.EventoReportarVisita;
			import vista.vistas.reporte.visita.cotizar.CotizarReportarVisita;
			import vista.vistas.reporte.visita.cotizar.componentes.popUPCorreoCotizacion;
			import vista.vistas.reporte.visita.hallazgos.HallazgoReportarVisita;
			import vista.vistas.reporte.visita.pendientes.PendientesReportarVisita;
			import vista.vistas.reporte.visita.reporteFinal.VistaInicialReporteFinal;
			import vista.vistas.reporte.visita.requerimientos.RequerimientrosReportarVisita;
			import vista.vistas.reporte.visita.requisitar.RequisitarReportarVisita;
			
			
			
			
			private var _currentCliente:VisitaCliente;
			private var empleadoAct:Empleado = DatosGlobales.getInstance()._usuario;
			private var _indexVisita:int;
			private var timeLineData:ArrayList = new ArrayList(['REQUERIMIENTOS', 'PENDIENTES',
				'HALLAZGOS', 'REQUISITAR', 'COTIZAR', 'REPORTE FINAL']);
			
			private var requerimientos:RequerimientrosReportarVisita;
			private var pendientes:PendientesReportarVisita;
			private var hallazgos:HallazgoReportarVisita;
			private var requisitar:RequisitarReportarVisita;
			public var cotizar:CotizarReportarVisita;
			private var reporteFinal:VistaInicialReporteFinal;
			private var irAservicio:Boolean = true;
			private var iniciarVistaPendientes:Boolean = true;
			private var iniciarHallazgos:Boolean = true;
			private var iniciarVistaRequisitar = true;
			private var query:Query;
			public static  var visitaClienteActual:VisitaCliente;
			private var cotizacionesCargadas:Boolean;
			private var estafinalizando:Boolean;
			
			public function recibeCliente(idCliente:int):void{
				var item:CatClientes_IR_Item_imagen = new CatClientes_IR_Item_imagen();
				
				try
				{
					imagenAct.source = 	imgCliente.getInstance()["cliente_"+ idCliente ];
				}
				catch (error:Error)
				{
					imagenAct.source = imgCliente.getInstance().default_Select;
					
				}
			}
			
			public static var reportarVisita:ReportarVisita;
			public function set recibeReportarVisitasCliente(reportarVisita:ReportarVisita):void{
				if (!reportarVisita)
					return;
				if (vieneDe != "guardar" ) {
					VistaOperacionReportarVisita.reportarVisita = reportarVisita;
					timeLine.dispatchEvent(new Event("avanzarVista"));
					
				}
				else {
					VistaOperacionReportarVisita.reportarVisita.pendientes = reportarVisita.pendientes;
					VistaOperacionReportarVisita.reportarVisita.requisicion = reportarVisita.requisicion;
					VistaOperacionReportarVisita.reportarVisita.hallazgos = reportarVisita.hallazgos;
					if (hallazgos)
						hallazgos.iniciaVista(reportarVisita.hallazgos, currentCliente);
					if (pendientes)
						pendientes.iniciaVista(reportarVisita.pendientes, currentCliente);
					if (requisitar)
						requisitar.iniciaVista(reportarVisita.requisicion, currentCliente);
					VistaOperacionReportarVisita.reportarVisita.cotizacion = reportarVisita.cotizacion;
				}
				vieneDe = ""
			}
			
			
			
			[Bindable]
			public function get currentCliente():VisitaCliente
			{
				return _currentCliente;
			}
			
			public function set currentCliente(value:VisitaCliente):void
			{
				cotizacionesCargadas = false;
				if(cotizar != null)
				cotizar.limpiarSeccionCotizacion();
				irAservicio = true;
				iniciarVistaPendientes = true;
				iniciarHallazgos = true;
				iniciarVistaRequisitar = true;
				zonaTrabajoTimeLine.removeAllElements();
				timeLine.selectedIndex = -1;
				timeLine.Cmenu();
				visitaClienteActual = value;
				_currentCliente = value;
				recibeCliente(value.cliente.idCliente);
				timeLine.selectedIndex = 0;
				
				if(reporteFinal != null)
				{
					reporteFinal.observaciones.text = "";
					reporteFinal.calificacionDeVisita = 0;
				}
					
				 
				
				if (!requerimientos)
					requerimientos = new RequerimientrosReportarVisita();
				zonaTrabajoTimeLine.addElement(requerimientos);
				
			}
			
			public static var roll:String;
			[Bindable] public var leftRectAmarillo:Number = -12;
			[Bindable] public var unscaledWidthAnt:Number;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				trace(unscaledWidth);
				if(unscaledWidth != unscaledWidthAnt){
					if(this.parentApplication.applicationID == "EV"){
						if(unscaledWidth < 1964){
							if(newPlantillaReporte.ocultarMenu)
								leftRectAmarillo = -12;													
							else
								leftRectAmarillo = 12;	
						}else if(unscaledWidth < 2007){
							leftRectAmarillo = -24;
						}else if(unscaledWidth >= 2007){
							if(newPlantillaReporte.ocultarMenu)
								leftRectAmarillo = -12;													
							else
								leftRectAmarillo = 12;						
						}
					} else if(this.parentApplication.applicationID == "CoordinadorVentas"){
						if(unscaledWidth < 1964){
							if(newPlantillaReporte.ocultarMenu)
								leftRectAmarillo = -12;													
							else
								leftRectAmarillo = 12;	
						}else if(unscaledWidth < 2007){
							leftRectAmarillo = -24;
						}else if(unscaledWidth >= 2007){
							if(newPlantillaReporte.ocultarMenu)
								leftRectAmarillo = 0;													
							else
								leftRectAmarillo = 12;						
						}
					}
				}
				
				unscaledWidthAnt = unscaledWidth;
				
			}
			
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				timeLine.data = timeLineData;
				timeLine.conPalomita = false;
				
				minuteTimer.addEventListener(TimerEvent.TIMER_COMPLETE, obtenerProductos); 

				addEventListener( EventoReportarVisita.APLICAR_FILTROS_A_LISTA_PRODUCTOS, aplicarFiltros,false,0,true );
				
				
				agregarlineas();
				
			
			}
			
			
			protected function timeLine_cambiarVista(event:Event):void
			{
				zonaTrabajoTimeLine.removeAllElements();
				minuteTimer.stop(); 
				switch(timeLineData.source[timeLine.selectedIndex])
				{
					case 'REQUERIMIENTOS':
					{
						if (!requerimientos)
							requerimientos = new RequerimientrosReportarVisita();
						zonaTrabajoTimeLine.addElement(requerimientos);
						requerimientos.iniciaVista(reportarVisita.requerimientos);
						btnFinalizar.visible = btnFinalizar.includeInLayout = false;
						btnFinalizarGris.visible = btnFinalizarGris.includeInLayout = false;
						estafinalizando = false;
						break;
					}
					case 'PENDIENTES':
					{
						if(!pendientes)
							pendientes = new PendientesReportarVisita();
						zonaTrabajoTimeLine.addElement(pendientes);
						if(iniciarVistaPendientes)
						pendientes.iniciaVista(reportarVisita.pendientes, currentCliente); 
						btnFinalizar.visible = btnFinalizar.includeInLayout = false;
						iniciarVistaPendientes = false;
						estafinalizando = false;
						break;
					}
					case 'HALLAZGOS':
					{
						if (!hallazgos)
							hallazgos = new HallazgoReportarVisita();
						zonaTrabajoTimeLine.addElement(hallazgos);
						if(iniciarHallazgos)
						hallazgos.iniciaVista(reportarVisita.hallazgos, currentCliente);
						btnFinalizar.visible = btnFinalizar.includeInLayout = false;
						btnFinalizarGris.visible = btnFinalizarGris.includeInLayout = false;
						estafinalizando = false;
						iniciarHallazgos = false;
						break;
					}
					case 'REQUISITAR':
					{
						if (!requisitar)
							requisitar = new RequisitarReportarVisita();
						zonaTrabajoTimeLine.addElement(requisitar);
						if(iniciarVistaRequisitar)
						requisitar.iniciaVista(reportarVisita.requisicion, currentCliente);
						btnFinalizar.visible = btnFinalizar.includeInLayout = false;
						btnFinalizarGris.visible = btnFinalizarGris.includeInLayout = false;
						estafinalizando = false;
						iniciarVistaRequisitar = false;
						break;
					}
					case 'COTIZAR':
					{
						if (!cotizar)
							cotizar = new CotizarReportarVisita();
						zonaTrabajoTimeLine.addElement(cotizar);
						
						
						if(irAservicio)
						{
							cotizar.iniciaVista(reportarVisita.hallazgos, currentCliente);
							minuteTimer.start();
							cotizacionesCargadas = true;
						}
						btnFinalizar.visible = btnFinalizar.includeInLayout = false;
						btnFinalizarGris.visible = btnFinalizarGris.includeInLayout = false;
						estafinalizando = false;
						
						break;
					}
					case 'REPORTE FINAL':
					{
						if (!reporteFinal)
							reporteFinal = new VistaInicialReporteFinal();
						    zonaTrabajoTimeLine.addElement(reporteFinal);
							reporteFinal.iniciaVista();
							btnFinalizar.visible = btnFinalizar.includeInLayout = false;
							btnFinalizarGris.visible = btnFinalizarGris.includeInLayout = true;
							estafinalizando = true;
						
						break;
					}
						
					default:
					{
						break;
					}
				}
			}
			
			private var minuteTimer:Timer = new Timer(1000, 1); 
			private var regresoDeProductos:Boolean;
			private function obtenerProductos(event:TimerEvent):void{
				
				regresoDeProductos = false;
				var eventPC:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.OBTENER_PRODUCTOS_CON_CAMPANA);
				eventPC.idCliente = currentCliente.cliente.idCliente;
				eventPC.nivelCliente = currentCliente.cliente.nivelIngreso;
				dispatchEvent(eventPC);
				
				
				var evtLCO:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.OBTENER_COTIZACIONES_DE_VISITA);
				evtLCO.idVisita = currentCliente.idVisitaCliente;
				dispatchEvent(evtLCO);
				
				
				
				
				irAservicio = false;
				iniciaEspera(true);
				
			}
			
			
			private var inEspera:Boolean = false;
			public function iniciaEspera(iniciar:Boolean):void
			{
				if(iniciar)
				{
					alertaSingleton.show(catalogoAlertas.INICIAR_ESPERA,"","","","","","",null,true);
					inEspera = true;
				}
				else
				{
					inEspera = false;
					alertaSingleton.remove(true);
				}
			}
			
			/*var punteros2:Array = query.getPunteros(['feum']);*/
			private var universoProductos:ArrayCollection = new ArrayCollection;
			public static var productos:ArrayCollection;
			public function set recibeListadDeProductos(pro:ArrayCollection):void {
				
				if(!pro)
					return;
				
				if(pro.length > 0)
				{
					regresoDeProductos = true;
					universoProductos = ObjectUtil.copy(pro) as ArrayCollection;
					obtenerlistasCombos(pro);
				}
				else{
					iniciaEspera(false);
				}
			
				/*cotizar.listaProductos.dataProvider = pro as ArrayCollection;
				cotizar.listaTodosLosProductos = pro as ArrayCollection;
				iniciaEspera(false);*/
			}
			
			private var listaCampanas:ArrayCollection = new ArrayCollection();
			public function set reciveCampanas(campanas:ArrayCollection):void {
				
				if(!campanas)
					return;
				
				listaCampanas = campanas;
			
			}
			
			private var listaMarcas:ArrayCollection = new ArrayCollection;
			private var listaCostos:ArrayCollection = new ArrayCollection;
			private var listaFamilia:ArrayCollection = new ArrayCollection;
			private var preciosOrdenados:ArrayCollection = new ArrayCollection;
			
			private function obtenerlistasCombos(lista:ArrayCollection):void
			{
				query = new Query(lista, ['fabrica','costo','familiaString','tipo','subtipo','control']);
				var punteros:Array = query.getPunteros(['fabrica']);
				var punterosCosto:Array = query.getPunteros([null,'costo']);
				var punterosFamilia:Array = query.getPunteros([null,null,'familiaString']);
				listaMarcas= new ArrayCollection;
				listaCostos= new ArrayCollection;
				listaFamilia = new ArrayCollection;
				var listaCamp:ArrayCollection = new ArrayCollection;
				
				if(punteros != null && punteros.length > 0)
				{
					for (var n:int = 0; n < punteros.length; n++) 
					{
						var marca:Object = new Object();
						if(n==0)
						{
							marca.valor = "Todas las Marcas";
							marca.llave = n;
							listaMarcas.addItem(marca);
							
							marca = new Object();
							marca.valor = punteros[n];
							marca.llave = n+1;
							listaMarcas.addItem(marca);
							
						}
						else {
							
							marca.valor = punteros[n];
							marca.llave = n+1;
							listaMarcas.addItem(marca);
						}
						
						
					}
				}
				
				
				if(punterosCosto != null && punterosCosto.length > 0)
				{
					for (var p:int = 0; p < punterosCosto.length; p++) 
					{
						var costo:Object = new Object();
						if(p==0)
						{
							costo.valor = "Todos los Precios";
							costo.llave = p;
							listaCostos.addItem(costo);
							
							costo = new Object();
							costo.valor = punterosCosto[p];
							costo.llave = p+1;
							listaCostos.addItem(costo);
							
						}
						else {
							
							costo.valor = punterosCosto[p];
							costo.llave = p+1;
							listaCostos.addItem(costo);
						}
						
						
					}
					
					preciosOrdenados =  Util.sortArray(listaCostos as ArrayCollection,'valor',true);
					
					
				}
				
				
				if(punterosFamilia != null && punterosFamilia.length > 0)
				{
					for (var p:int = 0; p < punterosFamilia.length; p++) 
					{
						var familia:Object = new Object();
						if(p==0)
						{
							familia.valor = "Todas las Familias";
							familia.llave = p;
							listaFamilia.addItem(familia);
							
							familia = new Object();
							familia.valor = punterosFamilia[p];
							familia.llave = p+1;
							listaFamilia.addItem(familia);
							
						}
						else {
							
							familia.valor = punterosFamilia[p];
							familia.llave = p+1;
							listaFamilia.addItem(familia);
						}
						
						
					}
				}
				
				
				if(listaCampanas != null && listaCampanas.length > 0)
				{
					for (var c:int = 0; c < listaCampanas.length; c++) 
					{
						var campana:Object = new Object();
						if(c==0)
						{
							campana.valor = "Todas las Campañas";
							campana.llave = c;
							listaCamp.addItem(campana);
							
							campana = new Object();
							campana.valor = listaCampanas[c].nombre;
							campana.llave = listaCampanas[c].id_Camapana;
							listaCamp.addItem(campana);
							
						}
						else {
							
							campana.valor = listaCampanas[c].nombre;
							campana.llave = listaCampanas[c].id_Camapana;
							listaCamp.addItem(campana);
						}
						
						
					}
				}
				
				cotizar.marcas = listaMarcas;
				cotizar.precios = preciosOrdenados;
				cotizar.familias = listaFamilia;
				cotizar.campanas = listaCamp;
			
				cotizar.cmbMarcas.selectedIndex = 0;
				cotizar.cmbPrecios.selectedIndex = 0;
				cotizar.cmbfamilias.selectedIndex = 0;
				cotizar.cmbCampanas.selectedIndex = 0;
				
			}
			
			protected function guardadoGeneral(event:MouseEvent):void
			{			
				var eventEsperar:EventoEsperar = new EventoEsperar(EventoEsperar.CONFIGURAR_ESPERA);
				eventEsperar.mensaje = "iniciarEspera";
				eventEsperar.idButtons = [];
				eventEsperar.tipoEventos  = [];
				eventEsperar.idButtons.push("btnGuardar");
				eventEsperar.tipoEventos.push("GUARDADO_GENERAL");
				dispatchEvent(eventEsperar);
				
				setTimeout(dispararEvento, 500);
			}
			
			private function dispararEvento():void{
				//reportarVisita.requisicion.partidaRequisicion
				var informacionCorreta:Boolean = true;
				eliminarCotizaciones = false;
				var listaCot:ArrayCollection = new ArrayCollection();
				
				if( cotizar != null && cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider != null && cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider.length > 0)
				{
					for (var i:int = 0; i < cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider.length; i++) 
					{
						if(cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider[i].partidas.length > 0)
							listaCot.addItem(cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider[i]);
					}
					
					if(!verificarProductosEncotizaciones(listaCot))
					{
						alertaSingleton.show("Necesitas configurar las cotizaciones antes de guardar");
						return;
					}
					
				}
				
				
				
				if(listaCot.length == 0 && cotizar != null && cotizar.listaProSeleccionados.dataProvider.length > 0)
				{
					alertaSingleton.show("Necesitas configurar las cotizaciones antes de guardar");
					return;
				}
				
				if(tieneCotizaciones && listaCot.length == 0 && cotizacionesCargadas && !estafinalizando)
				{
					informacionCorreta  = false;
					alertaSingleton.show("¿Esta seguro que desea eliminar todas las cotizaciones guardadas?",catalogoAlertas.TIT_ADV_atencion,"","","","SI","NO",null,false,respuestaEliminarCotizacionesGuardadas);
					tieneCotizaciones = false;
				}
				
				if(informacionCorreta)
				{
					var evento:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.GUARDADO_GENERAL);
					reportarVisita.cotizacion = listaCot;
					
					if(reportarVisita.requisicion != null)
					{
						reportarVisita.requisicion.idEmpleadoEsac = empleadoAct.idEmpleado;
						reportarVisita.requisicion.idEmpleadoEv = empleadoAct.idEmpleado;
					}
					evento.current = reportarVisita;
					evento.idVisita = currentCliente.idVisitaCliente;
					evento.eliminarCotizaciones = eliminarCotizaciones;
					evento.finalizarVisita = false;
					evento.visitaCli = currentCliente;
					dispatchEvent(evento);
				}
				
			}
			private var eliminarCotizaciones:Boolean;
			private function respuestaEliminarCotizacionesGuardadas($dato:EventoAlertaPqNet):void{
			
				if( $dato.respuesta.botonSeleccionado == "SI"){
					
					eliminarCotizaciones = true;
					
					var evento:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.GUARDADO_GENERAL);
					reportarVisita.cotizacion = listaCot;
					evento.current = reportarVisita;
					evento.idVisita = currentCliente.idVisitaCliente;
					evento.eliminarCotizaciones = eliminarCotizaciones;
					evento.finalizarVisita = false;
					evento.visitaCli = currentCliente;
					dispatchEvent(evento);
				}
			}
			
			
			
			private function verificarProductosEncotizaciones(listaCotizaciones:ArrayCollection):Boolean{
				
				var todosProductosCotizados:Boolean;
				
				for (var i:int = 0; i < cotizar.listaProSeleccionados.dataProvider.length; i++) 
				{
					todosProductosCotizados = false;
					
					for (var j:int = 0; j < listaCotizaciones.length; j++) 
					{
						for (var k:int = 0; k < listaCotizaciones[j].partidas.length; k++) 
						{
							if(cotizar.listaProSeleccionados.dataProvider[i].idProducto ==listaCotizaciones[j].partidas[k].producto.idProducto)
							{
								todosProductosCotizados = true;
							}
						}
					}
					
					if(!todosProductosCotizados)
						break;
					
				}
				
				return todosProductosCotizados;
			}
			
			private var vieneDe:String = "";
			public function set recibeRespuestaReportarVisitasCliente(respuesta:Boolean):void {
				trace(respuesta);
				if (!respuesta) return;
				vieneDe = "guardar"
					
				var event:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.OBTENER_INFORMACION_TIME_LINE);
				event.current = currentCliente.idVisitaCliente;
				dispatchEvent(event);
				
				if(estafinalizando && verificarRequeriminetosYreporteFinal())
				{
					btnFinalizarGris.visible = btnFinalizarGris.includeInLayout = false;
					btnFinalizar.visible = btnFinalizar.includeInLayout = true;
				} 
				
					alertaSingleton.show("Guardado Exitoso");
					
					verificarRequeriminetosYreporteFinal();
					
					if(!requerimientosCompletos)
					{
						timeLine.conAlerta(true,0)
						
					}
					else{
						timeLine.conAlerta(false,0)
					}
					
					if(!reporteFinalCompleto)
					{
						timeLine.conAlerta(true,5)
					}
					else{
						timeLine.conAlerta(false,5)
					}
				
				
				
			}
			
			private var requerimientosCompletos:Boolean;
			private var reporteFinalCompleto:Boolean;
			private function verificarRequeriminetosYreporteFinal():Boolean
			{
				var respuesta:Boolean = true;
				var numRequerimientos:Number = 0;
				var resRfinal:Boolean = true;
				
				numRequerimientos = reportarVisita.requerimientos.length;	
				
				for (var i:int = 0; i < reportarVisita.requerimientos.length; i++) 
				{
					if(reportarVisita.requerimientos[i].calificacion == 0 || reportarVisita.requerimientos[i].respuesta =="" || reportarVisita.requerimientos[i].respuesta == null)
					{
						respuesta = false;
						break;
					}
				}
				
				requerimientosCompletos = respuesta;
				
				if(respuesta)
				{
					if( reporteFinal != null && reporteFinal.calificacionDeVisita == 0) 
					{
						resRfinal = false;
						respuesta = false;
					}
				}
				
				reporteFinalCompleto = resRfinal;
				
				
				return respuesta;
			}
			
			protected function btnmenu_clickHandler(event:MouseEvent):void
			{
				var evento:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.CAMBIAR_VISTA);
				evento.index = 0;
				dispatchEvent(evento);
			}

			[Bindable]
			public function get indexVisita():int
			{
				return _indexVisita;
			}

			public function set indexVisita(value:int):void
			{
				_indexVisita = value;
			}
			
			[Bindable]	
			private var marcas:ArrayCollection = new ArrayCollection();
			public function aplicarFiltros(event:EventoReportarVisita):void
			{
				var listaFiltrada:ArrayCollection = new ArrayCollection;
				var todosLosProductos:ArrayCollection = ObjectUtil.copy(event.listaProductos) as ArrayCollection;
				var confiltros:Boolean = false;
			/*	'fabrica','costo','familiaString','tipo','subtipo','control'*/
				
				if(event.idcampana && event.idcampana > 0)
				{
					listaFiltrada = agruparPorCampana(event.idcampana);
					confiltros = true;
					
				}
				
				
				
				if(event.marca)
				{
					if(listaFiltrada.length > 0)
					listaFiltrada = agruparPorMarca(listaFiltrada,event.marca);
					
					else{
						if(confiltros)
							listaFiltrada = agruparPorMarca(listaFiltrada,event.marca);	
						else
							listaFiltrada = agruparPorMarca(todosLosProductos,event.marca);
					}
					confiltros = true;
				}
				
				
				if(event.costo && event.costo > 0)
				{
					
					if(listaFiltrada.length > 0)
						listaFiltrada = agruparPorCosto(listaFiltrada,event.costo);
					else
					{
						if(confiltros)
							listaFiltrada = agruparPorCosto(listaFiltrada,event.costo);	
						else
							listaFiltrada = agruparPorCosto(todosLosProductos,event.costo);
					}
						
					
					confiltros = true;
				}
					
				
				if(event.familia)
				{
					
					var arreglo:Array;
					var tipo:String;
					var subtipo:String;
					var control:String;

					arreglo = event.familia.split(' · ');
					
					tipo = arreglo[0];
					
					if(arreglo.length >= 1)
						subtipo = arreglo[1];
					
					if(arreglo.length >= 2)
						control = arreglo[2];
					
					
					if(listaFiltrada.length > 0)
						listaFiltrada = agruparPorFamilia(listaFiltrada,tipo,subtipo,control);
					else
					{
						if(confiltros)
							listaFiltrada = agruparPorFamilia(listaFiltrada,tipo,subtipo,control);
						else
							listaFiltrada = agruparPorFamilia(todosLosProductos,tipo,subtipo,control);
					}
					
					confiltros = true;
				}
				
				
				if(confiltros)
				 cotizar.listaProductos.dataProvider = listaFiltrada;
				else
				 cotizar.listaProductos.dataProvider = todosLosProductos;
				
			}
			
			
			private function agruparPorMarca(lista:ArrayCollection,marca:String):ArrayCollection
			{
				/*	'fabrica','costo','familiaString','tipo','subtipo','control'*/
				var lista:ArrayCollection = ObjectUtil.copy(lista) as ArrayCollection;
				
				if(marca)
				{
					var sqlmarca:Query = new Query(lista,["fabrica"],true);
					var punteros:Array;
					var lisPro:ArrayCollection = new ArrayCollection();
					punteros = sqlmarca.getPunteros([marca.toLowerCase()]);
					for (var k:int = 0; k < punteros.length; k++) 
					{
						var productoTemp:Producto;
						productoTemp = ObjectUtil.copy(sqlmarca.universo.getItemAt(punteros[k])) as Producto;
						lisPro.addItem(productoTemp);
					}
					return lisPro;
				}
				else
					return lista;
				
			}
			
			private function agruparPorCampana(idCampanaB:Number):ArrayCollection
			{
				var auxCam:Campana;
				var listaPro:ArrayCollection = new ArrayCollection;
				var listaCam = ObjectUtil.copy(listaCampanas) as ArrayCollection;
				var sqlCampanas:Query = new Query(listaCam,["id_Camapana"],true);
				var punteros:Array;
				punteros = sqlCampanas.getPunteros([idCampanaB]);
				
				if(punteros.length >0)
				{
					auxCam = ObjectUtil.copy(sqlCampanas.universo.getItemAt(punteros[0])) as Campana;
					listaPro = auxCam.productos;
				}
				
				
				    listaPro = auxCam.productos;
				
				 return listaPro;
				
				
				
				
				
			}
			
			
			private function agruparPorCosto(listaMarcas:ArrayCollection,costo:Number):ArrayCollection
			{
				var lista:ArrayCollection = ObjectUtil.copy(listaMarcas) as ArrayCollection;
				
				if(costo && costo > 0)
				{
					var sqlCosto:Query = new Query(lista,["costo"],true);
					var punterosCosto:Array;
					var productos:ArrayCollection = new ArrayCollection();
					punterosCosto = sqlCosto.getPunteros([costo]);
					
					for (var k:int = 0; k < punterosCosto.length; k++) 
					{
						var productoTemp:Producto;
						productoTemp = ObjectUtil.copy(sqlCosto.universo.getItemAt(punterosCosto[k])) as Producto;
						productos.addItem(productoTemp);
					}
					return productos;
				}
				
				else 
					return lista;
				
				
			}
			
			private function agruparPorFamilia(lista:ArrayCollection,tipo:String,subtipo:String,control:String):ArrayCollection
			{
				var lista:ArrayCollection = ObjectUtil.copy(lista) as ArrayCollection;
				var listaFiltrada:ArrayCollection = new ArrayCollection();
				var listaTemp:ArrayCollection = new ArrayCollection();
				var punteros:Array;

				
				if(tipo)
				{
					var sqlTipo:Query = new Query(lista,["tipo"],true);
					punteros = new Array;
					punteros = sqlTipo.getPunteros([tipo.toLowerCase()]);
					
					for (var k:int = 0; k < punteros.length; k++) 
					{
						var productoTemp:Producto;
						productoTemp = ObjectUtil.copy(sqlTipo.universo.getItemAt(punteros[k])) as Producto;
						listaTemp.addItem(productoTemp);
					}
					productoTemp = ObjectUtil.copy(sqlTipo.universo.getItemAt(punteros[k])) as Producto;
					listaFiltrada = ObjectUtil.copy(listaTemp) as ArrayCollection;
					
				}
					
				if(subtipo)
				{
					listaTemp = new ArrayCollection;
					var sqlSubtipo:Query = new Query(listaFiltrada,["subtipo"],true);
					punteros = new Array;
					punteros = sqlSubtipo.getPunteros([subtipo.toLowerCase()]);
					
					
					for (var k:int = 0; k < punteros.length; k++) 
					{
						var productoTemp:Producto;
						productoTemp = ObjectUtil.copy(sqlSubtipo.universo.getItemAt(punteros[k])) as Producto;
						listaTemp.addItem(productoTemp);
					}
					
					listaFiltrada = ObjectUtil.copy(listaTemp) as ArrayCollection;
				}
				
				if(control)
				{
					
					listaTemp = new ArrayCollection;
					var sqlControl:Query = new Query(listaFiltrada,["control"],true);
					punteros = new Array;
					punteros = sqlControl.getPunteros([control.toLowerCase()]);
					
					
					for (var kn:int = 0; kn < punteros.length; kn++) 
					{
						var productoTemp:Producto;
						productoTemp = ObjectUtil.copy(sqlControl.universo.getItemAt(punteros[kn])) as Producto;
						listaTemp.addItem(productoTemp);
					}
					
					listaFiltrada = ObjectUtil.copy(listaTemp) as ArrayCollection;
					
				}
				
				
				return listaFiltrada;
				
				
			}
			
			private var listacotVisita:ArrayCollection = null;
			public var tieneCotizaciones:Boolean = false;
			public function set recibeListaDecotizacionDeVisita(cot:ArrayCollection):void {
				tieneCotizaciones = false;
				
				if(cot == null)
					return;
				
				if(cot.length > 0)
					tieneCotizaciones = true;
				
				listacotVisita = cot;
				verificarProductos();
				
			
			}
			
			private function verificarProductos():void
			{
				
				if(!regresoDeProductos)
					setTimeout(verificarProductos,500);
				else
					alistarVista();
			}
			
			
			private function alistarVista():void{
			
				var auxUniversoP:ArrayCollection = ObjectUtil.copy(universoProductos) as ArrayCollection;
				var listP:ArrayCollection = new ArrayCollection();
				var totalCP:Number = 0;
				var totalCO:Number = 0;
				var cotizacionesSistema:ArrayCollection = new ArrayCollection();
				if(listacotVisita != null && listacotVisita.length > 0){
					
					for (var i:int = 0; i < listacotVisita.length; i++) 
					{
						
						if(listacotVisita[i].partidas != null && listacotVisita[i].partidas.length > 0)
						{
							totalCO = 0;
							for (var j:int = 0; j < listacotVisita[i].partidas.length; j++) 
							{
								
								var arrayTemp:ArrayCollection = UtilsGrid.indexQueryCampoX(auxUniversoP, "idProducto",listacotVisita[i].partidas[j].producto.idProducto);
								if (arrayTemp.length > 0 )
								{
									var prod:Producto = auxUniversoP[arrayTemp.getItemAt(0) as int];
									
									if(listacotVisita[i].imoneda == 'Euros')
									{
										listacotVisita[i].monedaAbreviatura = "EUR";
										listacotVisita[i].monedaSimbolo	= "€";
										listacotVisita[i].partidas[j].monedaAbreviatura = "EUR";
										listacotVisita[i].partidas[j].monedaSimbolo	= "€";
										prod.costoAux =  Math.round(listacotVisita[i].partidas[j].producto.costo * prod.edolar);  
										listacotVisita[i].partidas[j].producto.costo = Math.round(prod.costoAux / prod.edolar);
										listacotVisita[i].partidas[j].producto.totalCostoPiezas = listacotVisita[i].partidas[j].producto.costo * listacotVisita[i].partidas[j].producto.cantPiezas;
									}
									else if(listacotVisita[i].imoneda == 'Pesos')
									{
										listacotVisita[i].monedaAbreviatura = "MXN";
										listacotVisita[i].monedaSimbolo	= "$";
										listacotVisita[i].partidas[j].monedaAbreviatura = "MXN";
										listacotVisita[i].partidas[j].monedaSimbolo	= "$";
										prod.costoAux =  Math.round(listacotVisita[i].partidas[j].producto.costo / prod.pdolar);  
										listacotVisita[i].partidas[j].producto.costo = Math.round(prod.costoAux * prod.pdolar);
										listacotVisita[i].partidas[j].producto.totalCostoPiezas = listacotVisita[i].partidas[j].producto.costo * listacotVisita[i].partidas[j].producto.cantPiezas;
									}
									else if(listacotVisita[i].imoneda == 'Dolares')
									{
										listacotVisita[i].monedaAbreviatura = "USD";
										listacotVisita[i].monedaSimbolo	= "$";
										listacotVisita[i].partidas[j].monedaAbreviatura = "USD";
										listacotVisita[i].partidas[j].monedaSimbolo	= "$";
										prod.costoAux =  listacotVisita[i].partidas[j].producto.costo;
										listacotVisita[i].partidas[j].producto.totalCostoPiezas = listacotVisita[i].partidas[j].producto.costo * listacotVisita[i].partidas[j].producto.cantPiezas;
									}
									prod.cantPiezas = listacotVisita[i].partidas[j].producto.cantPiezas;
									prod.totalCostoPiezas = prod.costoAux * prod.cantPiezas;
									prod.asignado = true;
									totalCP = totalCP + prod.totalCostoPiezas;
									totalCO = totalCO + listacotVisita[i].partidas[j].producto.totalCostoPiezas;
									listP.addItem(prod);
									auxUniversoP.removeItemAt(arrayTemp.getItemAt(0) as int);
								}
							}
							
							listacotVisita[i].totalCosto = totalCO;
							
							
						}
						
						
					}
					
					
					cotizacionesSistema = revisarProductosDeCarrito(listP,listacotVisita);
				}
				
				if(cotizacionesSistema.length > 0)
				{
					listacotVisita.addAll(cotizacionesSistema);
					cotizar.vistaConfiguracion.listaOrdenada =  Util.sortArray(listacotVisita,'numCotizacion',false);
					cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider = cotizar.vistaConfiguracion.listaOrdenada;
					cotizar.vistaConfiguracion.asinarValoresAlistas();
				}else
				{
					cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider = listacotVisita;
				}
				
				cotizar.listaProductos.dataProvider = auxUniversoP;
				cotizar.listaTodosLosProductos = auxUniversoP;
				cotizar.universoDeproductos = auxUniversoP;
				cotizar.listaProSeleccionados.dataProvider = listP;
				cotizar.dataProviderProductosSelect = listP;
				cotizar.totalListaProductos = totalCP;
				cotizar.actualizarVista();
				iniciaEspera(false);
				
				
			}
			
			private function revisarProductosDeCarrito(listaPro:ArrayCollection,listaCot:ArrayCollection):ArrayCollection
			{
				var existenProGenerales:Boolean;
				var existenProPublicaciones:Boolean;
				var existenProControlados:Boolean;
				var crearGenerales:Boolean = true;
				var crearPublicaciones:Boolean = true;
				var crearControlados:Boolean = true;
				var pro:Producto = new Producto();
				var listaOr:ArrayCollection = new ArrayCollection();
				var listaCotizaciones:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < listaPro.length; i++) 
				{
					pro = listaPro[i];
					if(pro.tipo)
					{
						if(pro.tipo.toLowerCase() != 'Publicaciones')
						{
							if(pro.control)
							{
								if(pro.control.toLowerCase() !='origen' && pro.control.toLowerCase() != 'mundiales' && pro.control.toLowerCase() != 'nacionales')
								{
									existenProGenerales = true;
								}
								else{
									existenProControlados = true;
								}
								
							}
							else{
								existenProPublicaciones = true;
							}
						}
						else if(pro.tipo.toLowerCase() == 'Publicaciones')
						{
							existenProPublicaciones = true;
						}
					}
					else{
						existenProGenerales = true;
						
					}
				}
				
				
				if(existenProGenerales)
				{
					for (var j:int = 0; j < listaCot.length; j++) 
					{
						if(listaCot[j].tipoCotizacion == "generales" && listaCot[j].deSistema)
						{
							 crearGenerales= false;
						}
					}
					if(crearGenerales)
					{
						var cot:Cotizacion = new Cotizacion;
						cot.nombreCotizacion = "Productos generales ";
						cot.tipoCotizacion = "generales";
						cot.deSistema = true;
						cot.idCotizacion = 0;
						cot.cliente = currentCliente.cliente;
						cot.contacto = currentCliente.contacto.nombreCompleto;
						cot.contactos = currentCliente.contacto;
						cot.vendedor = empleadoAct.usuario;
						cot.moneda = currentCliente.cliente.monedaFactura;
						if(currentCliente.cliente.aceptaParciales)
							cot.parciales = "SI";
						else
							cot.parciales = "NO";
						cot.cpago = currentCliente.cliente.condicionesPago;
						cot.zona = currentCliente.cliente.zona;
						cot.estado = 'Cotizada';
						cot.imoneda = 'Dolares';
						cot.monedaAbreviatura = "USD";
						cot.monedaSimbolo = "$";
						cot.gravaIva = true;
						cot.idContacto = currentCliente.contacto.idContacto;
						cot.infoFacturacion = false;
						cot.cotizo = empleadoAct.usuario;
						cot.abierto = true;
						cot.idVisita = currentCliente.idVisitaCliente;
						cot.factura = currentCliente.cliente.empresaFactura;
						cot.numPartidas = 0;
						cot.numCotizacion = 1;
						cot.totalCosto = 0;
						cot.partidas =  new ArrayCollection();
						listaCotizaciones.addItem(cot);
					}
					
				}
				
				if(existenProPublicaciones)
				{
					for (var j:int = 0; j < listaCot.length; j++) 
					{
						if(listaCot[j].tipoCotizacion == "publicaciones" && listaCot[j].deSistema)
						{
							crearPublicaciones= false;
						}
					}
					
					if(crearPublicaciones)
					{
						var cot:Cotizacion = new Cotizacion;
						cot.nombreCotizacion = "Publicaciones";
						cot.tipoCotizacion = "publicaciones";
						cot.deSistema = true;
						cot.idCotizacion = 0;
						cot.cliente = currentCliente.cliente;
						cot.contacto = currentCliente.contacto.nombreCompleto;
						cot.contactos = currentCliente.contacto;
						cot.vendedor = empleadoAct.usuario;
						cot.moneda = currentCliente.cliente.monedaFactura;
						if(currentCliente.cliente.aceptaParciales)
							cot.parciales = "SI";
						else
							cot.parciales = "NO";
						
						cot.cpago = currentCliente.cliente.condicionesPago;
						cot.zona = currentCliente.cliente.zona;
						cot.estado = 'Cotizada';
						cot.imoneda = 'Dolares';
						cot.monedaAbreviatura = "USD";
						cot.monedaSimbolo = "$";
						cot.gravaIva = false;
						cot.idContacto = currentCliente.contacto.idContacto;
						cot.infoFacturacion = false;
						cot.cotizo = empleadoAct.usuario;
						cot.abierto = true;
						cot.idVisita = currentCliente.idVisitaCliente;
						cot.numPartidas = 0;
						cot.factura = "GOLOCAER";
						cot.canceladaDesde = null;
						cot.confirmo = null;
						cot.numCotizacion = 2;
						cot.totalCosto = 0;
						cot.partidas =  new ArrayCollection();
						listaCotizaciones.addItem(cot);
					}
					
					
				}
				
				if(existenProControlados){
					for (var j:int = 0; j < listaCot.length; j++) 
					{
						if(listaCot[j].tipoCotizacion == "controlados" && listaCot[j].deSistema)
						{
							crearControlados= false;
						}
					}
					
					if(crearControlados)
					{
						var cot:Cotizacion = new Cotizacion;
						cot.nombreCotizacion = "Sustancias Controladas";
						cot.tipoCotizacion = "controlados";
						cot.deSistema = true;
						cot.idCotizacion = 0;
						cot.cliente = currentCliente.cliente;
						cot.contacto = currentCliente.contacto.nombreCompleto;
						cot.contactos = currentCliente.contacto;
						cot.vendedor = empleadoAct.usuario;
						cot.moneda = currentCliente.cliente.monedaFactura;
						if(currentCliente.cliente.aceptaParciales)
							cot.parciales = "SI";
						else
							cot.parciales = "NO";
						
						cot.cpago = currentCliente.cliente.condicionesPago;
						cot.zona = currentCliente.cliente.zona;
						cot.estado = 'Cotizada';
						cot.imoneda = 'Dolares';
						cot.monedaAbreviatura = "USD";
						cot.monedaSimbolo = "$";
						cot.gravaIva = true;
						cot.idContacto = currentCliente.contacto.idContacto;
						cot.infoFacturacion = false;
						cot.cotizo = empleadoAct.usuario;
						cot.abierto = true;
						cot.idVisita = currentCliente.idVisitaCliente;
						cot.numPartidas = 0;
						cot.factura = currentCliente.cliente.empresaFactura;
						cot.numCotizacion = 3;
						cot.totalCosto = 0;
						cot.partidas =  new ArrayCollection();
						listaCotizaciones.addItem(cot);
					}
					
				}
				
				return listaCotizaciones;
				
			}
			
			
		
			
			
			
			private var listaCot:ArrayCollection = new ArrayCollection();
			protected function eventoFVisita(event:MouseEvent):void
			{
				var abrirPop:Boolean;
				idAutorizacion = 0;
				listaCot = new ArrayCollection;
				if( cotizar != null && cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider != null && cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider.length > 0)
				{
					
					for (var i:int = 0; i < cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider.length; i++) 
					{
						cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider[i].generada = true;
						
						if(cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider[i].partidas != null && cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider[i].partidas.length > 0)
						{
							for (var j:int = 0; j < cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider[i].partidas.length; j++) 
							{
								if(cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider[i].partidas[j].indicePrecio == 9)
									abrirPop = true;
							}
							
						}
						
						
					}
					
					listaCot = cotizar.vistaConfiguracion.listaCOtizaciones.dataProvider as ArrayCollection;
				}
				
				if(abrirPop)
				{
					abrirPopUpAutorizacion();
				}
				
				else if(!abrirPop && listaCot.length > 0)
				{
					abrirpopEspecificarCorreo();
				}
				else if(!abrirPop && listaCot.length == 0)
				{
					finalizarVista(0);	
				}
					
				
			}
			
			
			public function set recibeRespuestaFinalizarVisita(respuesta:Boolean):void {
			
				if(respuesta )
				{
					var eventRS:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.OBTENER_VISITA_CLIENTES_POR_SPRINT);
					eventRS.current = empleadoAct.idEmpleado; 
					dispatchEvent(eventRS);
					
					var evento:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.CAMBIAR_VISTA);
					evento.index = 0;
					dispatchEvent(evento);
					
					alertaSingleton.show("Reporte Exitoso");
				}
					
				    
			}
			
			private var popAutorizacion:popUpAutorizacionCatClientes;
			
			private function abrirPopUpAutorizacion():void
			{
				var eve:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.OBTENER_CONTRASENAS_VALIDAS_CAMBIO_PRECIO);
				eve.tipoAutorizacion = "ModificarPrecioProducto";
				dispatchEvent( eve );
				
				if( popAutorizacion == null ){
					popAutorizacion = popUpAutorizacionCatClientes(PopUpManager.createPopUp( this, popUpAutorizacionCatClientes, true ) );
					PopUpManager.centerPopUp( popAutorizacion );
					
				
					popAutorizacion.cliente = currentCliente.cliente.idCliente + "";
					popAutorizacion.usuarioSolicitante = DatosGlobales.getInstance()._usuario.usuario;
					
					popAutorizacion.addEventListener("cerrarPopUp",cerrarPopAutorizacion);
					popAutorizacion.addEventListener("aceptarPopUp",aceptarPopAutorizacion);
				}else{
					PopUpManager.addPopUp( popAutorizacion , this, true );
				}
			}
			
			private function cerrarPopAutorizacion(event:Event):void
			{
				PopUpManager.removePopUp( popAutorizacion );
				popAutorizacion = null;
			}
			
			private var idAutorizacion:Number = 0;
			private function aceptarPopAutorizacion(event:Event):void	
			{
				idAutorizacion = popAutorizacion.idAutorizacion;
				PopUpManager.removePopUp( popAutorizacion );
				popAutorizacion = null;
				abrirpopEspecificarCorreo();
				
			}
			
			private var cuerpoCorreo:String = "";
			private var ccCorreo:String = "";
			private var mail:String = "";
			private function finalizarVista(idAutorizacion:Number):void
			{
				var evetFinalizar:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.FINALIZAR_REPORTE_VISITA);
				
				if(idAutorizacion > 0)
				{
					for (var i:int = 0; i < listaCot.length; i++) 
					{
						if(listaCot[i].partidas != null)
						{
							for (var j:int = 0; j < listaCot[i].partidas.length; j++) 
							{
								listaCot[i].partidas[j].idAutorizacion = idAutorizacion;
							}
							
						}
					}
					
				}
				
				if(listaCot.length > 0)
				{
					var correo:Correo = new Correo();
					correo.cuerpoCorreo = cuerpoCorreo;
					correo.correo = mail;
					correo.ccorreo = ccCorreo;
					reportarVisita.correo = correo;
				}
			
				reportarVisita.cotizacion = listaCot;
				reportarVisita.reporte = reporteFinal.observaciones.text;
				reportarVisita.calificacion = reporteFinal.calificacionDeVisita;
				if(reportarVisita.requisicion != null)
				{
					reportarVisita.requisicion.idEmpleadoEv = empleadoAct.idEmpleado;
					reportarVisita.requisicion.idEmpleadoEsac = empleadoAct.idEmpleado;
					reportarVisita.requisicion.nombreCliente = currentCliente.cliente.nombre;
					reportarVisita.requisicion.nombreContacto = currentCliente.contacto.nombre;
					reportarVisita.requisicion.nombreEmpleadoEv = empleadoAct.nombre;
					reportarVisita.requisicion.nombreEsac = empleadoAct.nombre;
					reportarVisita.requisicion.importe = 0;
					reportarVisita.requisicion.fecha = new Date();
				}
				evetFinalizar.current = reportarVisita;
				evetFinalizar.idVisita = currentCliente.idVisitaCliente;
				evetFinalizar.eliminarCotizaciones = false;
				evetFinalizar.finalizarVisita = true;
				
				var dir:Direccion = new Direccion();
				
				dir.calle = currentCliente.cliente.calleFiscal;
				dir.codigoPostal = currentCliente.cliente.codigoPostalFiscal;
				dir.pais = currentCliente.cliente.pais;
				dir.estado = currentCliente.cliente.estado;
				dir.municipio = currentCliente.cliente.delegacionFiscal;
				
				currentCliente.contacto.direccion = dir;
				evetFinalizar.visitaCli = currentCliente; 
			
				
			    dispatchEvent(evetFinalizar);
			}
			
			
			private var popEnviarCotiza:popUPCorreoCotizacion;
			private function abrirpopEspecificarCorreo():void
			{
				if( popEnviarCotiza == null ){
					popEnviarCotiza = popUPCorreoCotizacion(PopUpManager.createPopUp( this, popUPCorreoCotizacion, true ) );
					PopUpManager.centerPopUp( popEnviarCotiza );
					popEnviarCotiza.correoContacto = currentCliente.contacto.EMail;
					popEnviarCotiza.addEventListener("reportarVisitaFinalizar",enviarVisita);
				}else{
					PopUpManager.addPopUp( popEnviarCotiza , this, true );
				}
			}
			
		
			private function enviarVisita(event:Event):void	
			{
				cuerpoCorreo = "";
				ccCorreo = "";
				mail = "";
				
				cuerpoCorreo = popEnviarCotiza.txtArea.text;
				ccCorreo = popEnviarCotiza.txtCC.text;
				mail = popEnviarCotiza.txtContacto.text;
				finalizarVista(idAutorizacion);
				
				PopUpManager.removePopUp( popEnviarCotiza );
				popEnviarCotiza = null;
				
			}
			
			
			private var lineaV:division;
			private function agregarlineas():void
			{
				for (var i:int = 0; i < 46; i++) 
				{
					lineaV = new division();
					lineaV.colorLinea = 'naranja';
					lineas.addElement(lineaV);
				}
				
			}
			
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" height="100%" id="vgHeader" verticalAlign="middle" paddingLeft="-5" gap="3">
		<s:Image id="btnmenu" click="btnmenu_clickHandler(event)"
				 source="{catalogoIconosBotoneras.getInstance().flechaIzquierdaupdown}" verticalCenter="0"
				 mouseOver="{ btnmenu.source = catalogoIconosBotoneras.getInstance().flechaIzquierdaover}"
				 mouseOut="{ btnmenu.source = catalogoIconosBotoneras.getInstance().flechaIzquierdaupdown}"/>
		<s:Label id="lblTitulo" styleName="cat_pro_titulo_bgothl_30" text="Visita #{indexVisita}" />
		<s:Label styleName="cat_pro_titulo_bgothl_30" text="·" />
		<s:Label styleName="cat_pro_titulo_bgothl_30" text="{currentCliente.cliente.nombre}" color="#0C8893" />
	</s:HGroup> 
	
	
	<s:HGroup width="100%" height="100%" >
		
		<s:Group width="15%" height="100%" >
			<s:Rect width="100%" height="100%" left="{leftRectAmarillo}">
				<s:fill>
					<s:SolidColor color="#F1F1A9" />
				</s:fill>
			</s:Rect>
			
			<mx:Canvas horizontalScrollPolicy="off" verticalScrollPolicy="off" height="100%" width="100%" >
				<s:VGroup width="100%" height="100%" id="lineas" gap="23" paddingTop="70" paddingRight="10" >
					
				</s:VGroup>  
				
			</mx:Canvas>
			
			
			<s:VGroup width="100%" height="100%" >
				<s:Label text="Notas" paddingLeft="{leftRectAmarillo == -12 ? 4 : leftRectAmarillo+2}" fontWeight="bold" paddingTop="10" fontSize="18" />
			</s:VGroup>  
			
			
			<s:VGroup width="100%" height="100%" paddingTop="60" paddingRight="10" >
				
				<s:Label text="{currentCliente.notas}" width="100%" height="100%" lineHeight="23" fontStyle="italic" />
				
			</s:VGroup>  
			
			
		</s:Group>  
		
		
		<s:Group width="85%" height="100%" >
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#FFFFFF" />
				</s:fill>
			</s:Rect>
			
			<s:VGroup width="100%" height="100%" padding="20" >
				<s:HGroup width="100%" verticalAlign="middle">
					<s:HGroup width="25%" height="100%" gap="15" >
						<s:Image id="imagenAct" visible="true" includeInLayout="true" smoothingQuality="default" smooth="true"/>
						<s:VGroup width="100%" paddingTop="32" >
							<s:Label  styleName="tab_texto_12_Helvetica"  text="{currentCliente.cliente.nombre}" color="#008894" fontWeight="bold" fontSize="16" />
							<s:Label text="Cliente" />
						</s:VGroup>  
						
					</s:HGroup>  
					
					<s:HGroup width="2%" height="100%" >
						
					</s:HGroup>  
					
					
					<s:VGroup width="73%" verticalAlign="middle" gap="10">
						<s:HGroup width="100%" >
							<mx:Image source="{catalogoIconosBotones.getInstance().contacto_svg}" />
							<s:Label styleName="tab_texto_12_Helvetica" text="{currentCliente.contacto.nombre}"
									 fontSize="20" color="#008894" fontWeight="bold"/>
						</s:HGroup>  
						<s:HGroup width="100%" >
							<mx:Image source="{catalogoIconosBotones.getInstance().mail_svg}" />
							<s:Label styleName="tab_texto_12_Helvetica" text="{currentCliente.contacto.EMail}"
									 fontSize="16" />
						</s:HGroup>  
						<s:HGroup width="100%" >
							<mx:Image source="{catalogoIconosBotones.getInstance().telefono_svg}" />
							<s:Label styleName="tab_texto_12_Helvetica" text="{currentCliente.contacto.telefono} · EXT. {currentCliente.contacto.telefono}"
									 fontSize="16" />
						</s:HGroup>  
					</s:VGroup>  
				</s:HGroup> 
				
				<s:VGroup width="100%" paddingTop="20" >
					<otros:division	width="100%" />	
				</s:VGroup>  
				
				<s:VGroup width="100%" paddingTop="28" paddingBottom="28"> 
					<botoneraFlotante:botonSecciones id="timeLine" width="100%" avanzarVista="timeLine_cambiarVista(event)" regresarVista="timeLine_cambiarVista(event)" />
				</s:VGroup> 
				
				<s:Group id="zonaTrabajoTimeLine" width="100%" height="100%" />
				
				<s:HGroup width="100%" height="90" verticalAlign="middle" horizontalAlign="right" >
					<boton:BotonDefault width="200" height="40" conTexto="true" color="#0C8893" label="GUARDAR" id="btnGuardar"
										horizontalCenter="0" verticalCenter="0" styleNameLabel="titulo_blanco_Novecento" mouseDown="guardadoGeneral(event)" />
					
					
					<boton:BotonDefault width="200" height="40" conTexto="true" color="#50a635" label="FINALIZAR" id="btnFinalizar" visible="false" includeInLayout="false"
										horizontalCenter="0" verticalCenter="0" styleNameLabel="titulo_blanco_Novecento" mouseDown="eventoFVisita(event)" />
					
					
					<boton:BotonDefault width="200" height="40" conTexto="true" color="#eaeaea" label="FINALIZAR" id="btnFinalizarGris" visible="false" includeInLayout="false"
										horizontalCenter="0" verticalCenter="0" styleNameLabel="titulo_blanco_Novecento" />
				</s:HGroup>  
				
				
			</s:VGroup>  
			
			
		</s:Group>  
		
	</s:HGroup>  
	
</s:Group>
