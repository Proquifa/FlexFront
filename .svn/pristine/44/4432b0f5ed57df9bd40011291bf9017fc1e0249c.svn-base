<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" initialize="inicia()"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:otros="skins.otros.*" xmlns:pqNet="skins.botones.pqNet.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.expofarma.RegistroExpoFarma;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.core.FlexGlobals;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosEtiquetas;
			
			import spark.events.TextOperationEvent;
			
			import vista.evento.EventoEVReqMovil;
			import vista.evento.EventoEvExpoMed;
			import vista.vistas.popUp.VendedorContactosPopUp;
			import vista.vistas.popUp.expofarma.CuestionarioExpoFarma;
			import vista.vistas.popUp.expofarma.CuestionarioExpoMed;
			
			private var _listaClientesUniverso:ArrayCollection;
			private var _listaFiltradaDeClientes:ArrayCollection;
			[Bindable]
			public var _contacto:Contacto; 
			
			private var _popUpContacto:VendedorContactosPopUp = null;
			
			[Bindable]
			private var _idClienteSeleccionado:int = 0;
			
			[Bindable]
			private var _contactoSeleccionado:int = 0;
			
			[Bindable]
			private var _origen:String = "";
			
			private var _poopUpCuestionario:CuestionarioExpoFarma = null;
			private var _poopUpCuestionarioMed:CuestionarioExpoMed = null;
			
			
			public function validaOrigen( $origen:String = '' ):void{
				if( $origen == 'expoPharma' || $origen == "expoMed"){
					btnRequisitar.visible = false;
					btnCheckIn.visible = true;
				}else{
					btnRequisitar.visible = true;
					btnCheckIn.visible = false;
				}
				_origen = $origen;
			}
			private function inicia():void{
				_contactoSeleccionado = 0;
				this.addEventListener( ResizeEvent.RESIZE, acomodaPopUp );
			}
			
			
			private function acomodaPopUp( evt:Event ):void{
				if( _popUpContacto != null ){
					setTimeout(retraso, 750);
				}
				if(_origen == "expoPharma"){
					if( _poopUpCuestionario != null ){
						setTimeout(retraso2, 750);
					}
				}else{
					if( _poopUpCuestionarioMed != null ){
						setTimeout(retraso2ExpoMed, 750);
					}
				}
			}
			
			
			
			private function retraso():void{
				if( this.parent.width <= 1400){
					_popUpContacto.x = (this.stage.width/2 ) - 275;
					_popUpContacto.y = 5 ;
				}else{
					PopUpManager.centerPopUp( _popUpContacto );
				}
				_popUpContacto.visible = true;
			}
			
			
			
			
			private function limpiaBusquedaCuestExpo( evt:EventoEVReqMovil ):void{
				
				txtBusqueda.text = '';
				_listaFiltradaDeClientes = new ArrayCollection();
				_listaFiltradaDeClientes = ObjectUtil.copy( UtilsGrid.queryCampoXLike( _listaClientesUniverso, 'empresa', txtBusqueda.text ) ) as ArrayCollection;
				if( _listaFiltradaDeClientes != null ){
					if( _listaFiltradaDeClientes.length > 1 ){
						lstCliente.selectedIndex = 0;
						_idClienteSeleccionado = ( _listaFiltradaDeClientes[0] as Contacto ).idEmpresa;
					}
				}
				
				if(_origen == "expoPharma"){
					agrupaClientes( _listaFiltradaDeClientes );
					
					var evt:EventoEVReqMovil = new EventoEVReqMovil(EventoEVReqMovil.OBTENER_INFO_GRAFICOS_EXPOFARMA);
					dispatchEvent(evt); 
				}else if(_origen == "expoMed"){
					agrupaContactosConSql( _listaFiltradaDeClientes );
  					var evt2:EventoEvExpoMed = new EventoEvExpoMed(EventoEvExpoMed.OBTENER_INFO_GRAFICOS_EXPO_MED);
					dispatchEvent(evt2);   
				}
				
				
			}
			
			private function retraso2():void{
				PopUpManager.centerPopUp( _poopUpCuestionario );
				if( this.parent.width <= 1400){
					_poopUpCuestionario.y = 20 ;
					_poopUpCuestionario.x = (this.stage.width/2) - 468;
				}
				_poopUpCuestionario.visible = true;
			}

			private function retraso2ExpoMed():void{
				PopUpManager.centerPopUp( _poopUpCuestionarioMed );
				if( this.parent.width <= 1400){
					_poopUpCuestionarioMed.y = 20 ;
					_poopUpCuestionarioMed.x = (this.stage.width/2) - 468;
				}else{
					_poopUpCuestionarioMed.x = (_poopUpCuestionarioMed.x - 234);
				}
				_poopUpCuestionarioMed.visible = true;
			}
			
			public function set recibirContactos( $lista:ArrayCollection ):void{
				txtBusqueda.text = "";
				if($lista == null){
					return;
				}
				if(_origen == "normal" || _origen == "expoPharma"){
					_listaClientesUniverso = new ArrayCollection();
					_listaClientesUniverso = ObjectUtil.copy( $lista ) as ArrayCollection;
					agrupaClientes( $lista );
				}
			}
			
			public function set recibirContactosParaExpoMed( $lista:ArrayCollection ):void{
				
				if($lista == null){
					return;
				}
				
				if(_origen == "expoMed"){
					_listaClientesUniverso = new ArrayCollection();
					_listaClientesUniverso = ObjectUtil.copy( $lista ) as ArrayCollection;
					agrupaContactosConSql( $lista );
				}
			}
			private function filtraClientes( event:TextOperationEvent ):void{
				_listaFiltradaDeClientes = new ArrayCollection();
				_listaFiltradaDeClientes = ObjectUtil.copy( UtilsGrid.queryCampoXLike( _listaClientesUniverso, 'empresa', txtBusqueda.text ) ) as ArrayCollection;
				if( _listaFiltradaDeClientes != null ){
					if( _listaFiltradaDeClientes.length > 1 ){
						lstCliente.selectedIndex = 0;
						_idClienteSeleccionado = ( _listaFiltradaDeClientes[0] as Contacto ).idEmpresa;
					}
				}
				agrupaClientes( _listaFiltradaDeClientes );
			}
			
			
			
			private var _listaTemp:ArrayCollection;
			
			private function agrupaClientes( $lista:ArrayCollection ):void{
				_listaTemp = new ArrayCollection();
				lstCliente.dataProvider = new ArrayCollection;
				
				var inicia:Number = new Date().time; 
				
				for( var i:int = 0; i< $lista.length; i++ ){
					if( i == 0 ){ 
						_listaTemp.addItem( $lista[i] ); 
						(_listaTemp[0] as Contacto).totalContactosPorEmpresa = 1;
					}else{
						var agregado:Boolean = false;
						for( var t:int = 0; t < _listaTemp.length; t++ ){
							if( ($lista[i] as Contacto).idEmpresa == (_listaTemp[t] as Contacto).idEmpresa ){
								(_listaTemp[t] as Contacto).totalContactosPorEmpresa = (_listaTemp[t] as Contacto).totalContactosPorEmpresa + 1;
								agregado = true;
								t = _listaTemp.length;
							}
						}
						if( !agregado ){
							_listaTemp.addItem( $lista[i] ); 
							(_listaTemp[_listaTemp.length - 1] as Contacto).totalContactosPorEmpresa = 1;
						}
					}
				}
				
				var termina:Number = new Date().time;
				
				trace("Agrupando por Fors tardÃ³: " + (termina-inicia) + "ms");
				
				
				//se agrega total de empresas
				var contactoTemp:Contacto = new Contacto();
				contactoTemp.totalClientes = _listaTemp.length;
				_listaTemp.addItem( contactoTemp );
				
				lstCliente.dataProvider = _listaTemp;
				
				if (_idClienteSeleccionado == 0 ){
					this.lstCliente.selectedIndex = 0;
				}else{
					for( var c:int = 0; c < this.lstCliente.dataProvider.length; c++){
						if( _idClienteSeleccionado  == ( this.lstCliente.dataProvider[c] as Contacto).idEmpresa ){
							this.lstCliente.selectedIndex = c;
							c = this.lstCliente.dataProvider.length;
						}else{
							this.lstCliente.selectedIndex = 0;
						}
					}
				}
				
				cargaListaContactos();
				setTimeout( retarda, 1500 );
			}
			
			
			
			private var sql:Query;
			private function agrupaContactosConSql($listaContactos:ArrayCollection):void{
				_listaTemp = new ArrayCollection;
				lstCliente.dataProvider = new ArrayCollection;
				
				sql = new Query($listaContactos,["idEmpresa"]);
				keys = new Object;
				var arrayTemp:Array = ObjectUtil.copy($listaContactos.source) as Array;
				var otro:Array = arrayTemp.filter(quitaDuplicados);
				
				
				if(sql != null){
					
					if(sql.indexObject.hasOwnProperty("idEmpresa")){
						var punterosidEmpresas:Object = sql.indexObject.idEmpresa;
					} 
					
					for (var i:int = 0; i < otro.length; i++) 
					{
						if(punterosidEmpresas.hasOwnProperty((otro[i] as Contacto).idEmpresa))
						{
							(otro[i] as Contacto).totalContactosPorEmpresa =( (punterosidEmpresas[(otro[i] as Contacto).idEmpresa]) as Array).length;  
						}
					}
				}
				
				
				var contactoTemp:Contacto = new Contacto();
				contactoTemp.totalClientes = otro.length;
				otro.push( contactoTemp );
				
				lstCliente.dataProvider = new ArrayCollection(otro);
				
				if (_idClienteSeleccionado == 0 ){
					this.lstCliente.selectedIndex = 0;
				}else{
					for( var c:int = 0; c < this.lstCliente.dataProvider.length; c++){
						if( _idClienteSeleccionado  == ( this.lstCliente.dataProvider[c] as Contacto).idEmpresa ){
							this.lstCliente.selectedIndex = c;
							c = this.lstCliente.dataProvider.length;
						}else{
							this.lstCliente.selectedIndex = 0;
						}
					}
				}
				
				cargaListaContactos();
				setTimeout( retarda, 1500 );
			}
			private var keys:Object;
			private function quitaDuplicados(item:Contacto, id:uint, array:Array):Boolean
			{
				if(keys.hasOwnProperty(item.idEmpresa)){
					return false;
				}else{
					keys[item.idEmpresa] = item.idEmpresa;
					return true;
				}
			}
			
			
			private function retarda():void{
				lstCliente.ensureIndexIsVisible( this.lstCliente.selectedIndex )
			}
			
			private function seleccionaContacto( $evt:EventoEVReqMovil):void{
				_contactoSeleccionado = $evt.idContacto;
				cargaListaContactos();
			}
			
			
			private var indiceSeleccionado:int; 
			private function cargaListaContactos():void{
				
				if( lstCliente.selectedIndex == (lstCliente.dataProvider.length-1) ){
					if(isNaN(indiceSeleccionado) || indiceSeleccionado == 0){
						indiceSeleccionado = 0;
					}
					lstCliente.selectedIndex = indiceSeleccionado;
					return;
				}
				
				indiceSeleccionado = lstCliente.selectedIndex ;
				var listaTemp:ArrayCollection = new ArrayCollection();
				
				_idClienteSeleccionado =  ( lstCliente.selectedItem as Contacto ).idEmpresa;
				
				for( var i:int = 0; i < _listaClientesUniverso.length; i++ ){
					if( (this.lstCliente.selectedItem as Contacto).idEmpresa == (_listaClientesUniverso[i] as Contacto ).idEmpresa ){
						listaTemp.addItem( _listaClientesUniverso[i] );
						( listaTemp[listaTemp.length - 1] as Contacto ).numFila = listaTemp.length;
						( listaTemp[listaTemp.length - 1] as Contacto ).totalContactosPorEmpresa = NaN;
					}
				}
				if( _contactoSeleccionado != 0 ){
					for( var t:int = 0; t < listaTemp.length; t++){
						if( (listaTemp[t] as Contacto).idContacto == _contactoSeleccionado){
							_contactoSeleccionado = ObjectUtil.copy( t ) as int;
							t = listaTemp.length;
						}
					}
				}
				var contactoTemp:Contacto = new Contacto();
				contactoTemp.totalContactosPorEmpresa = listaTemp.length;
				lstContacto.dataProvider = new ArrayCollection();
				lstContacto.dataProvider = ObjectUtil.copy( listaTemp ) as ArrayCollection;
				lstContacto.dataProvider.addItem( contactoTemp );
				if( lstCliente.dataProvider.length > 1 ){
					lblNombreCliente.text =  (lstCliente.selectedItem as Contacto).empresa;
					lblGiroCliente.text = (lstCliente.selectedItem as Contacto).industria + ' Â· ' + ( lstCliente.selectedItem as Contacto).nivelIngresos ;
				}
				listaTemp = new ArrayCollection();
				this.lstContacto.selectedIndex = _contactoSeleccionado;
				cargaDatosContacto();
			}
			
			private var contactoSeleccionado:int;
			private function cargaDatosContacto():void{
				if( lstContacto.selectedIndex == (lstContacto.dataProvider.length-1) ){
					lstContacto.selectedIndex = contactoSeleccionado;
					return;
				}
				contactoSeleccionado = lstContacto.selectedIndex;
				this._contacto = new Contacto();
				_contactoSeleccionado = 0;
				if( lstContacto.dataProvider.length > 1 ){
					_contacto = lstContacto.selectedItem;
				}
				if( _contacto != null ){
					if( _contacto.direccion != null && !isNaN( _contacto.direccion.idLugar ) &&  _contacto.direccion.idLugar != 0 ){
						grpDirecciones.visible  = true;
						grpDireccionesNula.visible = false;
					}else{
						grpDirecciones.visible  = false;
						grpDireccionesNula.visible = true;						
					}
					
				}
			}
			[Bindable]
			private var popUPContactosPriemraVez:Boolean = false;
			private function abrirPopUpContacto( $accion:String = '' ):void{
				
				if( lstCliente.dataProvider.length <= 1 ){
					alertaSingleton.show( "Es necesario seleccionar un cliente", catalogoAlertas.TIT_ADV_operacionImposible );
					return;
				}
				if( this._popUpContacto == null ){
					_popUpContacto = new VendedorContactosPopUp();
					_popUpContacto = VendedorContactosPopUp( PopUpManager.createPopUp( this, VendedorContactosPopUp, true ) );
					_popUpContacto.addEventListener( EventoEVReqMovil.RECIBE_DATOS_CONTACTO_POUP, guardaContactoPopUp );
					_popUpContacto.addEventListener( EventoEVReqMovil.CANCELA_DATOS_CONTACTO_POUP, cierraPopUpContactos );
					_popUpContacto.addEventListener( EventoEVReqMovil.SELECCIONA_CONTACTO, seleccionaContacto );
				}else{
					_popUpContacto.visible = false;
					PopUpManager.addPopUp( _popUpContacto, this, true );
				}
				if( $accion == 'editar'){
					_popUpContacto.editaContacto(_contacto, (lstCliente.selectedItem as Contacto).idEmpresa );
				}else if( $accion == 'nuevo' ){
					_popUpContacto.creaContacto(  _contacto );
				}
				_popUpContacto.validaOrigen( this._origen );
				if( !popUPContactosPriemraVez ){
					_popUpContacto.x = (this.stage.fullScreenWidth/2 ) - 275;
					_popUpContacto.y = (this.stage.fullScreenHeight/2 ) - 385;
					popUPContactosPriemraVez = true;
				}else{
					setTimeout(retraso, 750);
				}
			}
			private function guardaContactoPopUp( $evt:EventoEVReqMovil ):void{
				_contacto = $evt.nuevoContacto;
			}
			private function cierraPopUpContactos( $evt:EventoEVReqMovil ):void{
				PopUpManager.removePopUp( _popUpContacto );
			}
			
			protected function botonpqnetlargo1_clickHandler(event:MouseEvent):void{
				var evt:EventoEVReqMovil = new EventoEVReqMovil( EventoEVReqMovil.MUESTRA_VISTA );
				evt.ubicacion = '_compRequisitar';
				evt.nuevoContacto = this._contacto;
				dispatchEvent( evt );
			}
			public function seleccionaNuevoCliente( $idCliente:int ):void{
				for( var i:int = 0; i < lstCliente.dataProvider.length ; i++ ){
					if( (lstCliente.dataProvider[i] as Contacto).idEmpresa == $idCliente ){
						lstCliente.selectedIndex = i ; 
						setTimeout( retarda, 1500 );
					}
				}
				cargaListaContactos();
			}
			
			[Bindable]
			private var _regsitroExpoFarma:RegistroExpoFarma;
			[Bindable]
			private var soloUnPop:Boolean = false;
			protected function realizarCuestionario():void{
				
				if(_origen == "expoPharma"){
					var evetFolioExpo:EventoEVReqMovil = new EventoEVReqMovil( EventoEVReqMovil.REGISTRO_EXPO_FARMA );
					evetFolioExpo.registroExpo = new RegistroExpoFarma();
					evetFolioExpo.registroExpo.idCliente = _contacto.idEmpresa;
					evetFolioExpo.registroExpo.idContacto = _contacto.idContacto;
					dispatchEvent( evetFolioExpo );
					soloUnPop = true;
				}else{
					var evetFolioExpoMed:EventoEvExpoMed = new EventoEvExpoMed( EventoEvExpoMed.REGISTRO_EXPO_MED );
					evetFolioExpoMed.registroExpoMed = new RegistroExpoFarma();
					evetFolioExpoMed.registroExpoMed.idCliente = _contacto.idEmpresa;
					evetFolioExpoMed.registroExpoMed.idContacto = _contacto.idContacto;
					dispatchEvent( evetFolioExpoMed );
					soloUnPop = true;
					
				}
				
			}
			[Bindable]
			private var popUpCuestionarioPrimeraVez:Boolean;
			public function set confirmaRegistoExpo( $dato:RegistroExpoFarma ):void{
				if( $dato == null ){
					return;
				}
				if( soloUnPop ){
					
					_regsitroExpoFarma = new RegistroExpoFarma();
					_regsitroExpoFarma = $dato;
					if( _regsitroExpoFarma.registrado ){
						alertaSingleton.show( 'Usted ya ha sido registrado, agradecemos su visita.');
					}else{ 
						//var app:DisplayObject = Application.application as DisplayObject;
						
						
						if(_origen == "expoPharma"){
							var app:DisplayObject = FlexGlobals.topLevelApplication as DisplayObject;
							if( this._poopUpCuestionario == null ){
								_poopUpCuestionario = CuestionarioExpoFarma( PopUpManager.createPopUp( app, CuestionarioExpoFarma, true ) );
								this._poopUpCuestionario.addEventListener( EventoEVReqMovil.LIMPIA_BUSQUEDA_CONTACTO_DESDE_CUESTIONARIO, limpiaBusquedaCuestExpo );
							}else{	
								_poopUpCuestionario.visible = false;
								PopUpManager.addPopUp( _poopUpCuestionario, this, true);
							}
							_poopUpCuestionario.iniciaCuestionario( this._contacto, this._regsitroExpoFarma );
							if( !popUpCuestionarioPrimeraVez ){
								PopUpManager.centerPopUp(_poopUpCuestionario);	
								popUpCuestionarioPrimeraVez = true;
							}else{
								setTimeout(retraso2, 750);
							}
						}else{
							
							var appExpoMed:DisplayObject = FlexGlobals.topLevelApplication as DisplayObject;
							
							if( this._poopUpCuestionarioMed == null ){
								_poopUpCuestionarioMed = CuestionarioExpoMed( PopUpManager.createPopUp( appExpoMed, CuestionarioExpoMed, true ) );
								this._poopUpCuestionarioMed.addEventListener( EventoEVReqMovil.LIMPIA_BUSQUEDA_CONTACTO_DESDE_CUESTIONARIO, limpiaBusquedaCuestExpo );
							}else{	
								_poopUpCuestionarioMed.visible = false;
								PopUpManager.addPopUp( _poopUpCuestionarioMed, this, true);
							}
							_poopUpCuestionarioMed.iniciaCuestionario( this._contacto, this._regsitroExpoFarma );
							
							if( !popUpCuestionarioPrimeraVez ){
								PopUpManager.centerPopUp(_poopUpCuestionarioMed);	
								popUpCuestionarioPrimeraVez = true;
							}else{
								setTimeout(retraso2ExpoMed, 750);
							}
							
						}
					}
					soloUnPop = false;
				}
			}
			
		]]>
		
	</fx:Script>
	<s:HGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
		<s:VGroup  height="100%" width="100%" gap="0">
			<s:Spacer height="15"/>
			<s:TextInput id="txtBusqueda" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" fontStyle="normal" change="filtraClientes(event)" />
			<s:Spacer height="15"/>
			<otros:division width="100%"/>
			<s:List id="lstCliente" height="100%" width="100%" borderVisible="false" itemRenderer="vista.vistas.ev_VendedorReqMovil.itemR.VendedorListaClienteIR"
					mouseDown="cargaListaContactos();" horizontalScrollPolicy="off"/>
		</s:VGroup>
		<s:Spacer width="10" />
		<otros:VDivisionHueca height="100%"/>
		<s:Spacer width="10" />
		<s:VGroup height="100%" width="100%" gap="0" horizontalAlign="center">
			<s:Label id="lblNombreCliente" fontWeight="bold" fontSize="19" width="100%" maxDisplayedLines="2" textAlign="center"/>
			<s:Spacer height="10"/>
			<s:Label id="lblGiroCliente" color="0x{catalogoColores.LABEL_GRIS}" fontWeight="bold" fontSize="15" width="100%" maxDisplayedLines="2" textAlign="center"/>
			<s:Spacer height="15"/>
			<otros:division width="100%"/>
			<s:List id="lstContacto" height="100%" width="100%" borderVisible="false" itemRenderer="vista.vistas.ev_VendedorReqMovil.itemR.VendedorListaContactosIR"
					horizontalScrollPolicy="off" mouseDown="cargaDatosContacto()"/>
			<s:Spacer height="15"/>
			<pqNet:botonPqNetLargo width="70%" botonRedondo="true" label="NUEVO CONTACTO" click="abrirPopUpContacto('nuevo')"/>
		</s:VGroup>
		<s:Spacer width="10" />
		<otros:VDivisionHueca height="100%"/>
		<s:Spacer width="10" />
		<s:VGroup height="100%" width="100%" gap="0" horizontalAlign="center">
			<s:Label id="lblNombreContacto" fontWeight="bold" fontSize="19" width="100%" maxDisplayedLines="2" textAlign="center" text="{_contacto.titulo +' '+_contacto.nombre }"/>
			<s:Spacer height="10"/>
			<s:Label id="lblPuestoContacto" color="0x{catalogoColores.LABEL_GRIS}" fontWeight="bold" fontSize="15" width="100%" maxDisplayedLines="2" textAlign="center" text="{ _contacto.puesto }"/>
			<s:Spacer height="10"/>
			<otros:divisionGruesa width="100%"/>
			<s:VGroup width="100%" height="100%">
				<s:HGroup width="100%" height="25%" paddingLeft="20" verticalAlign="middle">
					<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_mailSmall }"/>
					<s:Spacer height="15" />
					<s:Label width="100%" color="0x{ catalogoColores.LABEL_GRIS }" fontWeight="bold" text="{_contacto.EMail }"/>
				</s:HGroup>
				<otros:division width="100%"/>
				<s:HGroup width="100%" height="25%" paddingLeft="20" verticalAlign="middle">
					<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_telSmall }"/>
					<s:Spacer height="15" />
					<s:VGroup height="100%" verticalAlign="middle" width="100%">
						<s:Label color="0x{ catalogoColores.LABEL_GRIS }" fontWeight="bold" text="{_contacto.telefono }" width="100%"/>
						<s:Spacer height="15"/>
						<s:Label  color="0x{ catalogoColores.LABEL_GRIS }" fontWeight="bold" text="{_contacto.telefonoN }" width="100%"/>
					</s:VGroup>
				</s:HGroup>
				<otros:division width="100%"/>
				<s:HGroup width="100%" height="25%" paddingLeft="20" verticalAlign="middle">
					<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_faxSmall }"/>
					<s:Spacer height="15" />
					<s:VGroup width="100%" height="100%" verticalAlign="middle">
						<s:Label color="0x{ catalogoColores.LABEL_GRIS }" fontWeight="bold" text="{ _contacto.fax }"/>
					</s:VGroup>
				</s:HGroup>
				<otros:division width="100%"/>
				<s:HGroup width="100%" height="25%" paddingLeft="20" verticalAlign="middle">
					<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_direcccionSmall }"/>
					<s:Spacer height="15" />
					<s:Group height="100%" width="100%">
						<s:VGroup height="100%" verticalAlign="middle" id="grpDirecciones"  width="100%">
							<s:Label color="0x{ catalogoColores.LABEL_GRIS }" width="100%"
									 text="{_contacto.direccion.calle+' Â· '+_contacto.direccion.municipio  }"/>
							<s:Spacer height="15"/>
							<s:Label  color="0x{ catalogoColores.LABEL_GRIS }" width="100%"
									  text="{_contacto.direccion.pais+' '+_contacto.direccion.estado+' Â· '+_contacto.direccion.codigoPostal+' : '+  _contacto.direccion.zonaMensajeria }"/>
						</s:VGroup>
						<s:VGroup height="100%" verticalAlign="middle" id="grpDireccionesNula" visible="false">
							<s:Label color="0x{ catalogoColores.LABEL_GRIS }" 
									 text="No Disponible"/>
						</s:VGroup>
					</s:Group>
				</s:HGroup>
				<otros:division width="100%"/>
				<s:Spacer height="15"/>
				<s:HGroup width="100%"  verticalAlign="bottom" >
					<pqNet:botonPqNetLargo width="33%"  label="Editar" colorBase="0x2e99b4" click="abrirPopUpContacto('editar')"/>
					<s:Spacer width="100%"/>
					<s:Group width="33%">
						<pqNet:botonPqNetLargo width="100%"  label="Requisitar" click="botonpqnetlargo1_clickHandler(event)" id="btnRequisitar" visible="false"/>
						<pqNet:botonPqNetLargo width="100%"  label="Check-In" click="realizarCuestionario()" id="btnCheckIn"/>
					</s:Group>	
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
	</s:HGroup>
</s:Group>
