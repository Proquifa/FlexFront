<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:botonera="vistas.vistaVisitas.botonera.*" 
		 xmlns:pq="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.pq.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init(event)"
		 >
	
	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.HorarioCalendario;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.HorarioTiempo;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.VisitaCliente;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import eventos.EventoVisitasVendedorMobil;
			
			[Bindable]private var sizeFontProvee:Number = 25;
			[Bindable]private var heightFlecha:Number = 21;/*30*/
			[Bindable]private var widthFlecha:Number = 14;/*20*/
			
			private var listaFechas:ArrayCollection;
			private var indiceDiaActivo:int;
			private var nombreDias:Array = ["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"];
			private var meses:Array = ["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"];
			private var nombreDiasCorto:Array = ["Dom","Lun","Mar","Miér","Jue","Vie","Sáb"];
			public function setListaFechas(lista:ArrayCollection):void
			{
				var today:Date = new Date();
				txtFecha.text = "de "+meses[today.getMonth()]+" "+today.getFullYear();
				txtFechaDia.text = nombreDias[today.getDay()]+" "+today.getDate();
				
				
				///////ELEJIR PRIMERA
				listaFechas = lista;
				
				cargarItemsVisita(listaFechas);		
				setTimeout(enviarlistaFechas,1000);
			}
			private function enviarlistaFechas():void
			{
				botoneraSemana.listaFechas(listaFechas);
				botoneraSprint.listaFechas(listaFechas);	
				
				seleccionarDiaActualBotoneras();
			}
			
			private function cargarItemsVisita(listaFechas:ArrayCollection):void
			{
				for each (var fechas:HorarioCalendario in listaFechas) 
				{
					fechas.calendario = new ArrayCollection;
					fechas.totalHoras = 0;
					
					var listaDia:ArrayCollection = new ArrayCollection;
					for (var i:int = 0; i < 24; i++) 
					{
						var obj:HorarioTiempo = new HorarioTiempo;
						obj.hora = "";
						obj.descripcion = "";
						obj.horario = "";
						obj.visitaCliente = new VisitaCliente;
						obj.totalHoras = 0;
						obj.hora = i+":00";
						
						listaDia.addItem(obj);
					}
					fechas.calendario = listaDia;
				}
				
				cargarListaDia(listaFechas);
				
			}
			
			private function cargarListaDia(listaVisitas:ArrayCollection):void
			{
				var today:Date = new Date()
				var encontrado:Boolean;
				var indiceEncontrado:int;
				for (var i:int = 0; i < listaVisitas.length; i++) 
				{
					var temp:HorarioCalendario = listaVisitas[i];
					if(today.getDate() == temp.numeroDia && today.getMonth() == temp.numeroMes && today.getFullYear() == temp.anio){
						encontrado = true;
						indiceEncontrado = i;
						break;
					}
				}
				
				if(encontrado){
					gridPorDia.dataProvider = listaVisitas[indiceEncontrado].calendario; 
					indiceDiaActivo = indiceEncontrado;
				}else{
					gridPorDia.dataProvider = crearDiaVacioActual();
				}
			}
			
			public function acomodarVisita(visita:VisitaCliente):void
			{
				for each (var vistaTemp:HorarioCalendario in listaFechas) 
				{
					if(visita.fechaVisita.date == vistaTemp.numeroDia && visita.fechaVisita.month == vistaTemp.numeroMes){
						var objTemp:HorarioTiempo = vistaTemp.calendario[visita.fechaVInicioHora];
						var hora:String = regresarCadenaTiempo(visita.fechaVInicioHora)
							+":"+regresarCadenaTiempo(visita.fechaVInicioMinuto)+" - "
							+regresarCadenaTiempo(visita.fechaVFinHora)+":"
							+regresarCadenaTiempo(visita.fechaVFinMinuto);
						
						objTemp.totalHoras += visita.fechaVFinHora - visita.fechaVInicioHora;
						objTemp.horario = hora;
						objTemp.descripcion = visita.nombreCliente;
						objTemp.visitaCliente = ObjectUtil.copy(visita) as VisitaCliente;
						vistaTemp.calendario.setItemAt(objTemp,visita.fechaVInicioHora);
						
						for (var i:int = visita.fechaVInicioHora+1; i < visita.fechaVFinHora; i++) 
						{
							var tiempo:HorarioTiempo = vistaTemp.calendario[i];
							tiempo.descripcion = "objetoVacio";
							/*tiempo.visitaCliente = ObjectUtil.copy(visita) as VisitaCliente;*/
							vistaTemp.calendario.setItemAt(tiempo,i);
						}
						
						break;
					}
				}
			}
			private function regresarCadenaTiempo(tiempo:int):String
			{
				var tiempoString:String = "";
				if(tiempo < 10)
					tiempoString = "0"+tiempo;
				else
					tiempoString = ""+tiempo
				return tiempoString;
			}
			
			protected function retrocederDiaCalendario(event:MouseEvent):void
			{
				if((indiceDiaActivo-1) > -1){
					indiceDiaActivo -= 1;
					gridPorDia.dataProvider = listaFechas[indiceDiaActivo].calendario;
					txtFecha.text = "de "+listaFechas[indiceDiaActivo].mesNombre+" "+listaFechas[indiceDiaActivo].anio;
					txtFechaDia.text = listaFechas[indiceDiaActivo].diaNombre+" "+listaFechas[indiceDiaActivo].numeroDia;
				}
			}
			
			protected function avanzarDiaCalendario(event:MouseEvent):void
			{
				if((indiceDiaActivo+1) < listaFechas.length){
					indiceDiaActivo += 1;
					gridPorDia.dataProvider = listaFechas[indiceDiaActivo].calendario; 
					txtFecha.text = "de "+listaFechas[indiceDiaActivo].mesNombre+" "+listaFechas[indiceDiaActivo].anio;
					txtFechaDia.text = listaFechas[indiceDiaActivo].diaNombre+" "+listaFechas[indiceDiaActivo].numeroDia;
				}
			}
			
			protected function init(event:FlexEvent):void
			{
				addEventListener(EventoVisitasVendedorMobil.CAMBIO_BOTONERA_TIEMPO, cambioStack);
				
				addEventListener(EventoVisitasVendedorMobil.CAMBIO_BOTONERA_DIA_EN_SEMANA,verificarDiaDisponible,true);
				addEventListener(EventoVisitasVendedorMobil.CAMBIO_BOTONERA_DIA_EN_SPRINT,verificarDiaDisponibleSprint,true);
			}
			
			private function cambioStack(event:EventoVisitasVendedorMobil):void
			{
				if(event.tipoSelect == "dia")
					stackPrincipal.selectedIndex = 0;
				else if(event.tipoSelect == "semana")
					stackPrincipal.selectedIndex = 1;
				else if(event.tipoSelect == "sprint")
					stackPrincipal.selectedIndex = 2;
			}
			////////CAMBIO DE DIA POR SEMANA
			private function verificarDiaDisponible(event:EventoVisitasVendedorMobil):void
			{
				var horarioCalendario:HorarioCalendario = event.diaCalendario;
				var encontrado:Boolean;
				for each (var temp:HorarioCalendario in listaFechas) 
				{
					if(horarioCalendario.numeroDia == temp.numeroDia && horarioCalendario.numeroMes == temp.numeroMes &&
					horarioCalendario.anio == temp.anio){
						gridPorSemana.dataProvider = temp.calendario;
						encontrado = true;
						break;
					}
				}
				if(!encontrado)
					gridPorSemana.dataProvider = crearDiaVacioActual();
				
				txtFechaSemana.text = "de "+meses[horarioCalendario.numeroMes]+" "+horarioCalendario.anio;
				txtFechaDiaSemana.text = horarioCalendario.diaNombre+" "+horarioCalendario.numeroDia;
			}
			
			private function verificarDiaDisponibleSprint(event:EventoVisitasVendedorMobil):void
			{
				var horarioCalendario:HorarioCalendario = event.diaCalendario;
				var encontrado:Boolean;
				for each (var temp:HorarioCalendario in listaFechas) 
				{
					if(horarioCalendario.numeroDia == temp.numeroDia && horarioCalendario.numeroMes == temp.numeroMes &&
						horarioCalendario.anio == temp.anio){
						gridPorSprint.dataProvider = temp.calendario;
						encontrado = true;
						break;
					}
				}
				if(!encontrado)
					gridPorSprint.dataProvider = crearDiaVacioActual();
				
				txtFechaSprint.text = "de "+meses[horarioCalendario.numeroMes]+" "+horarioCalendario.anio;
				txtFechaDiaSprint.text = horarioCalendario.diaNombre+" "+horarioCalendario.numeroDia;
			}
			
			[Bindable]private var calendarioVacio:ArrayCollection;
			private function crearDiaVacioActual():ArrayCollection
			{
				if(!calendarioVacio){
					var listaDia:ArrayCollection = new ArrayCollection;
					for (var i:int = 0; i < 24; i++) 
					{
						var obj:HorarioTiempo = new HorarioTiempo;
						obj.hora = "";
						obj.descripcion = "";
						obj.horario = "";
						obj.visitaCliente = new VisitaCliente;
						obj.totalHoras = 0;
						obj.hora = i+":00";
						
						listaDia.addItem(obj);
					}
					calendarioVacio = listaDia;
				}
				
				return calendarioVacio;
			}
			
			public function seleccionarDiaActualBotoneras():void
			{
				botoneraSemana.buscarDiaActual();
				botoneraSprint.buscarDiaActual();
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" >
		<botonera:botoneraTiempovisita width="100%" height="30%" maxHeight="45" id="botoneraTiempo"/>
		<pq:MobViewStack id="stackPrincipal" width="100%" height="100%" paddingBottom="10">
			<s:VGroup width="100%" height="100%" gap="0">
				<s:Group width="100%" height="10%" depth="2">
					<s:HGroup height="100%" width="100%" verticalAlign="middle" paddingLeft="20" paddingRight="20">
						<!--<mx:Image source="{catalogoIconosBotones.getInstance().flechaIR}" width="{widthFlecha}" height="{heightFlecha}" rotation="180" click="retrocederDiaCalendario(event)"
								  id="btnAvanzar"/>-->
						<s:Label  height="100%" textAlign="center" color="#0b8894" verticalAlign="middle" 
								  fontFamily="Helvetica" fontSize="{sizeFontProvee}" id="txtFechaDia"/>
						
						<s:Label  height="100%" textAlign="center" color="#5f5f5f" verticalAlign="middle" 
								  fontFamily="Helvetica" fontSize="{sizeFontProvee}" id="txtFecha"/>
						<s:Spacer width="100%" />
						<!--<mx:Image source="{catalogoIconosBotones.getInstance().flechaIR}" width="{widthFlecha}" height="{heightFlecha}" click="avanzarDiaCalendario(event)" id="btnRetroceder"/>-->
					</s:HGroup>
					<s:Rect width="100%" height="1" bottom="0">
						<s:fill>
							<s:SolidColor color="#e9e9e9" />
						</s:fill>
						<s:filters>
							<s:DropShadowFilter alpha="0.5" angle="90" blurX="4" blurY="4" color="#000000" 
												distance="2" knockout="false" 
												quality="{BitmapFilterQuality.HIGH}" strength="1"/>
						</s:filters>
					</s:Rect>
				</s:Group>  
				
				
				<s:List width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off" depth="1"
						id="gridPorDia" contentBackgroundAlpha="0" itemRenderer="vistas.vistaVisitas.IR.IR_CeldaCalendarioVendedorMobil"
						/>
			</s:VGroup>
			<s:VGroup width="100%" height="100%" gap="0">
				<botonera:botoneraTiempoSemana width="100%" height="30%" maxHeight="60" id="botoneraSemana"/>
				<s:Group width="100%" height="10%" depth="2">
					<s:HGroup height="100%" width="100%" verticalAlign="middle" paddingLeft="20" paddingRight="20">
						<s:Label  height="100%" textAlign="center" color="#0b8894" verticalAlign="middle" 
								  fontFamily="Helvetica" fontSize="{sizeFontProvee}" id="txtFechaDiaSemana"/>
						
						<s:Label  height="100%" textAlign="center" color="#5f5f5f" verticalAlign="middle" 
								  fontFamily="Helvetica" fontSize="{sizeFontProvee}" id="txtFechaSemana"/>
					</s:HGroup>
					<s:Rect width="100%" height="1" bottom="0">
						<s:fill>
							<s:SolidColor color="#e9e9e9" />
						</s:fill>
						<s:filters>
							<s:DropShadowFilter alpha="0.5" angle="90" blurX="4" blurY="4" color="#000000" 
												distance="2" knockout="false" 
												quality="{BitmapFilterQuality.HIGH}" strength="1"/>
						</s:filters>
					</s:Rect>
				</s:Group>  
				
				<s:List width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off" depth="1"
						id="gridPorSemana" contentBackgroundAlpha="0" itemRenderer="vistas.vistaVisitas.IR.IR_CeldaCalendarioVendedorMobil"
						/>
			</s:VGroup>	
			<s:VGroup width="100%" height="100%" gap="0">
				<botonera:botoneraVisitasSprint width="100%" height="30%" maxHeight="60" id="botoneraSprint"/>
				<s:Group width="100%" height="10%" depth="2">
					<s:HGroup height="100%" width="100%" verticalAlign="middle" paddingLeft="20" paddingRight="20">
						<s:Label  height="100%" textAlign="center" color="#0b8894" verticalAlign="middle" 
								  fontFamily="Helvetica" fontSize="{sizeFontProvee}" id="txtFechaDiaSprint"/>
						
						<s:Label  height="100%" textAlign="center" color="#5f5f5f" verticalAlign="middle" 
								  fontFamily="Helvetica" fontSize="{sizeFontProvee}" id="txtFechaSprint"/>
					</s:HGroup>
					<s:Rect width="100%" height="1" bottom="0">
						<s:fill>
							<s:SolidColor color="#e9e9e9" />
						</s:fill>
						<s:filters>
							<s:DropShadowFilter alpha="0.5" angle="90" blurX="4" blurY="4" color="#000000" 
												distance="2" knockout="false" 
												quality="{BitmapFilterQuality.HIGH}" strength="1"/>
						</s:filters>
					</s:Rect>
				</s:Group>  
				
				<s:List width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off" depth="1"
						id="gridPorSprint" contentBackgroundAlpha="0" itemRenderer="vistas.vistaVisitas.IR.IR_CeldaCalendarioVendedorMobil"
						/>
			</s:VGroup>	
		</pq:MobViewStack>
	</s:VGroup>  
	
</s:Group>
