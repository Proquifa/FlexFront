<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:menuFlotante="skins.skin.menuFlotante.*"
		  width="100%" height="100%" gap="0" 
		  creationComplete="init(event)" xmlns:otros="skins.otros.*"
		  >
	<fx:Script>
		<![CDATA[
			import flash.filesystem.File;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientes_General;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cliente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Corporativo;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.StringFunciones;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			private var _clientesArray:ArrayCollection;
			private var _valoresActuales:ArrayCollection;
			private var _botonActual:String;
			private var clickeado:String;
			private var _clickeado:String;
			private var _currentIndex:Number;
			private var _nivelSelected:String;
			private var _rutaSelected:String;
			private var _todos:Boolean;
			private var _sql:Query;
			private var _sqlCorp:Query;
			private var _nombresCorporativos:Array;
			private var listaCorporativos:ArrayCollection;
			private var _esacArreglo:Array;
			private var _vendedorArreglo:Array;
			private var _animacionesActivas:Number=0;
			
			private var arregloNiveles:Array = new Array (
				'AA+','AA','AM','AB','MA','MM','MB','BAJO','DIST');
			
			private var arregloRutas:Array = new Array (
				'LOCAL','FORÁNEO','GUADALAJARA','CENTROAMÉRICA','SUDAMÉRICA','RESTO DEL MUNDO');
			
			protected function init(event:FlexEvent):void
			{
				addEventListener("escuchaSubMenuBusqueda",busquedaSubMenu,false,0,true);
				addEventListener("terminoAnimacion",terminoAnimacion,false,0,true);
				addEventListener("empezoAnimacion",empezoAnimacion,false,0,true);
				btn0.arrayValores = arregloNiveles;
				btn3.arrayValores = arregloRutas;
				btn2.seleccionar();
				_botonActual = clickeado = "clientes";
				_todos = true;
			}
			
			private function sendClientesPadre($arreglo:ArrayCollection):void
			{
				var evt:EventoCatClientes_General = new EventoCatClientes_General(EventoCatClientes_General.ENVIO_CLIENTES_BUSCADOS);
				evt.clientesResultantes = $arreglo;
				dispatchEvent(evt);	
			}
			
			private function sendCorporativosPadre($arreglo:ArrayCollection):void
			{
				var evt:EventoCatClientes_General = new EventoCatClientes_General(EventoCatClientes_General.ENVIO_CORPORATIVOS_BUSCADOS);
				evt.corporativosResultantes = $arreglo;
				dispatchEvent(evt);	
			}
			
			public function recibeClientes($array:ArrayCollection):void
			{
				if ($array)
				{
					_esacArreglo = new Array();
					_clientesArray = $array;
					_valoresActuales = ObjectUtil.copy(_clientesArray) as ArrayCollection;
					_sql = new Query(_clientesArray,["nombre","nivelIngreso","ruta","nombreCorporativo","idCorporativo","nombreESAC","nombreEjecutivoVenta"],true);
					_todos = false;
					_esacArreglo = _sql.getPunteros([null,null,null,null,null,"nombreESAC"],"nombreESAC"); 
					_vendedorArreglo = _sql.getPunteros([null,null,null,null,null,null,"nombreEjecutivoVenta"],"nombreEjecutivoVenta"); 
					btn5.arrayValores = _esacArreglo;
					btn6.arrayValores = _vendedorArreglo;
					deseleccionarBotones(2);
					seleccionarBoton("clientes");
				}
			}
			
			private function empezoAnimacion(evt:Event):void
			{
				_animacionesActivas++;
			}
			
			private function terminoAnimacion(evt:Event):void
			{
				_animacionesActivas = _animacionesActivas - 1;
				if(_clickeado != _botonActual && _animacionesActivas == 0)
				{
					//deseleccionarBotones();
					seleccionarBoton(_botonActual);
				} 
			}
			
			public function switchClientes():void
			{
				textBusqueda.text = "";
				deseleccionarBotones(2);
				btn2.seleccionar();
				clickeado = "clientes";
				sendClientesPadre(_valoresActuales);
				_todos = true;
			}
			
			private function deseleccionarBotones($index:Number):void
			{
				switch($index)
				{
					case 0:
					{
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						btn4.deseleccionar();
						btn5.deseleccionar();
						btn6.deseleccionar();
						break;
					}
					case 1:
					{
						btn0.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						btn4.deseleccionar();
						btn5.deseleccionar();
						btn6.deseleccionar();
						break;
					}
					case 2:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn3.deseleccionar();
						btn4.deseleccionar();
						btn5.deseleccionar();
						btn6.deseleccionar();
						break;
					}
					case 3:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn4.deseleccionar();
						btn5.deseleccionar();
						btn6.deseleccionar();
						break;
					}
					case 4:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						btn5.deseleccionar();
						btn6.deseleccionar();
						break;
					}
					case 5:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						btn4.deseleccionar();
						btn6.deseleccionar();
						break;
					}
					case 6:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						btn4.deseleccionar();
						btn5.deseleccionar();
						break;
					}
				}
			}
			
			protected function clickBotoneraBusqueda(event:Event):void
			{
				
				if(_clickeado != event.currentTarget.tipoBoton)
				{
					clickeado = event.currentTarget.tipoBoton;
					seleccionarBoton(clickeado);
					//deseleccionarBotones();
					//seleccionarBoton(clickeado);
				}  	
			}
			
			private function seleccionarBoton($boton:String):void
			{
				switch($boton)
				{
					case "nivelIngreso":
					{
						_currentIndex = 0;
						break;
					}
					case "corporativo":
					{
						_currentIndex = 1;
						if(_botonActual != "corporativo")
							enviarCorporativos();
						_botonActual = _clickeado = $boton
						textBusqueda.text = "";
						deseleccionarBotones(_currentIndex);
						btn1.seleccionar();
						break;
					}
					case "clientes":
					{
						_currentIndex = 2;
						if(!_todos)
						{
							_todos = true;
							textBusqueda.text = "";
							deseleccionarBotones(_currentIndex);
							sendClientesPadre(_clientesArray);
							_valoresActuales = ObjectUtil.copy(_clientesArray) as ArrayCollection;
						}
						_botonActual =_clickeado = $boton;
						btn2.seleccionar();
						break;
					}
					case "ruta":
					{
						_currentIndex = 3;
						break;
					}
					case "cuentaClave":
					{
						_currentIndex = 4;
						if(_botonActual != "cuentaClave")
							buscaCuentasClaves();
						_botonActual =_clickeado = $boton;
						textBusqueda.text = "";
						deseleccionarBotones(_currentIndex);
						btn4.seleccionar();
						
						break;
					}
					case "esac":
					{
						_currentIndex = 5;
						break;
					}
					case "ev":
					{
						_currentIndex = 6;
						break;
					}
				}
			}
			
			private function busquedaSubMenu(evt:Event):void
			{
				var menu:String="";
				var menuArray:Array = new Array();
				var nuevoUniverso:ArrayCollection = new ArrayCollection();
				
				if(_currentIndex == 0)
				{
					btn0.seleccionar();
					_botonActual = _clickeado = clickeado;
					textBusqueda.text = "";
					deseleccionarBotones(_currentIndex);
					menu = StringFunciones.noAccent(btn0.subMenuSelected.toLowerCase());
					if (menu == "aa+")
						menu = "aaplus";
					if (menu == "dist")
						menu = "distribuidor";
					menuArray = _sql.getPunteros([null,menu]);
					nuevoUniverso = _sql.armarLista(menuArray);
					_valoresActuales = ObjectUtil.copy(nuevoUniverso) as ArrayCollection;
					sendClientesPadre(nuevoUniverso);
					_todos = false;
				}
				if(_currentIndex == 3)
				{
					btn3.seleccionar();
					_botonActual = _clickeado = clickeado;
					textBusqueda.text = "";
					deseleccionarBotones(_currentIndex);
					menu = StringFunciones.noAccent( btn3.subMenuSelected.toLowerCase());
					menuArray= _sql.getPunteros([null,null,menu]);
					nuevoUniverso = _sql.armarLista(menuArray);
					_valoresActuales = ObjectUtil.copy(nuevoUniverso) as ArrayCollection;
					sendClientesPadre(nuevoUniverso);
					_todos = false;
				}
				if(_currentIndex == 5)
				{
					btn5.seleccionar();
					_botonActual = _clickeado = clickeado;
					textBusqueda.text = "";
					deseleccionarBotones(_currentIndex);
					menu =  btn5.subMenuSelected.toLowerCase();
					menuArray= _sql.getPunteros([null,null,null,null,null,menu]);
					nuevoUniverso = _sql.armarLista(menuArray);
					_valoresActuales = ObjectUtil.copy(nuevoUniverso) as ArrayCollection;
					sendClientesPadre(nuevoUniverso);
					_todos = false;
				}
				if(_currentIndex == 6)
				{
					btn6.seleccionar();
					_botonActual = _clickeado = clickeado;
					textBusqueda.text = "";
					deseleccionarBotones(_currentIndex);
					menu =  btn6.subMenuSelected.toLowerCase();
					menuArray= _sql.getPunteros([null,null,null,null,null,null,menu]);
					nuevoUniverso = _sql.armarLista(menuArray);
					_valoresActuales = ObjectUtil.copy(nuevoUniverso) as ArrayCollection;
					sendClientesPadre(nuevoUniverso);
					_todos = false;
				}
			}
			
			private function buscaCuentasClaves():void
			{
				var punterosCuentas:Array = new Array();
				var tmpPunteros:Array = new Array();
				var arregloCuentas:Array = new Array("aaplus","aa","am","ab");
				var nuevoUniverso:ArrayCollection = new ArrayCollection();
				for(var i:int=0; i< arregloCuentas.length;i++)
				{
					tmpPunteros = _sql.getPunteros([null,arregloCuentas[i]]);
					if(tmpPunteros.length > 0)
					{
						for (var j:int=0; j<tmpPunteros.length; j++)
						{
							punterosCuentas.push(tmpPunteros[j]);
						}
					}
				}
				_todos = false;
				if(punterosCuentas.length>0)
				{
					nuevoUniverso = _sql.armarLista(punterosCuentas);
					sendClientesPadre(nuevoUniverso);
				}
				else
				{
					sendClientesPadre(_valoresActuales);
				}
			}
			
			private function enviarCorporativos($arregloOpcional:ArrayCollection=null):void
			{
				_todos = false;
				var punterosCuentas:Array = new Array();
				var tmpPunteros:Array = new Array();
				var nombres:Array = _sql.getValoresCampoOmitiendoRepetidosDeTodoElUniverso("nombreCorporativo");
				
				var nuevoUniverso:ArrayCollection = new ArrayCollection();
				for(var i:int=0; i< nombres.length;i++)
				{
					tmpPunteros = _sql.getPunteros([null,null,null,nombres[i].toString().toLowerCase()]);
					if(tmpPunteros.length > 0)
					{
						punterosCuentas.push(tmpPunteros);
					}
				}
				tmpPunteros = new Array();
				tmpPunteros = generateArrayBiToArrayUni(punterosCuentas);
				
				var arregloTe:ArrayCollection = _sql.armarLista(StringFunciones.removerDuplicados(tmpPunteros));
				var lista:ArrayCollection = armarCorporativos(arregloTe); 
				
				if(lista.length>0)
				{
					sendCorporativosPadre(lista);
				}
				else
				{
					sendCorporativosPadre(new ArrayCollection());
				}  
				
			}
			
			private function armarCorporativos($array:ArrayCollection):ArrayCollection
			{
				_sqlCorp = new Query($array,["nombreCorporativo","nombre"],true);
				var currentCorp:Corporativo;
				listaCorporativos = new ArrayCollection();
				var nombres:Array = _sqlCorp.getValoresCampoOmitiendoRepetidosDeTodoElUniverso("nombreCorporativo");
				
				for (var n:int=0;n<nombres.length;n++)
				{
					var listaClientes:ArrayCollection = new ArrayCollection();
					currentCorp = new Corporativo();
					for(var j:int=0; j<$array.length;j++)
					{
						if(($array[j] as Cliente).nombreCorporativo == nombres[n])
							listaClientes.addItem($array[j]);
					}
					currentCorp.nombre = (listaClientes[0] as Cliente).nombreCorporativo;
					currentCorp.idCorporativo = (listaClientes[0] as Cliente).idCorporativo;
					currentCorp.clientes = listaClientes;
					listaCorporativos.addItem(currentCorp);  
				}
				return listaCorporativos;
			}
			
			
			private function generateArrayBiToArrayUni($collection:Array):Array
			{
				var arreTemp:Array = new Array()
				for ( var i:int=0;i<$collection.length;i++)
				{
					if ($collection[i].length > 1)
					{
						for(var j:int=0; j<$collection[i].length; j++)
						{
							arreTemp.push($collection[i][j]);
						}
					}
					else
						arreTemp.push($collection[i][0]);
				}
				return arreTemp;
			}
			
			// +++++++++++++++++++++++++++++++++++++++ BUSQUEDA +++++++++++++++++++++++++++++++++++++++
			/**
			 * funcion que busca las conincidencias en el universo de partidas segun el texto ingresado al Textinput
			 */ 
			private	var temporizador:Timer;
			private function filtroPorTexto():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaHab:ArrayCollection = new ArrayCollection();
				var _listaDeshab:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _clientesArray ) as ArrayCollection;
				
				if (StringUtil.trim(textBusqueda.text).length > 0 )
				{
					if(temporizador == null)
					{
						temporizador = new Timer(500,0);
						temporizador.addEventListener(TimerEvent.TIMER,filtrarClientes,false,0,true);
					}
					if(temporizador)
					{
						if(temporizador.running)
						{
							temporizador.reset();
							temporizador.start();
						}
						else
						{
							temporizador.start();
						}
					}
				}
				else
				{
					if(clickeado != "corporativo")
					{
						sendClientesPadre(_valoresActuales);
					}
					else
					{
						sendCorporativosPadre(armarCorporativos(_valoresActuales));
					}
				}
			}
			
			
			private function filtrarClientes(event:TimerEvent):void
			{
				temporizador.stop();
				if (StringUtil.trim( textBusqueda.text).length > 0)
				{
					var sqlBusqueda:Query;
					var punteroCliente:Array = new Array();
					var nom:String;
					var parecidos:Array = new Array();
					var arreTemp:Array = new Array();
					var arregloTe:ArrayCollection = new ArrayCollection();
					
					if(clickeado != "corporativo")  //  DIFERENTES DE CORPORATIVO
					{
						sqlBusqueda = new Query(_valoresActuales,["nombre"],true);
						punteroCliente = new Array();
						nom = StringUtil.trim( textBusqueda.text).toLowerCase();
						parecidos = sqlBusqueda.getCampoLikeLowerCase("nombre",nom);
						
						if (parecidos.length > 0)
						{
							for ( var i:int = 0; i<parecidos.length; i++)
							{
								punteroCliente.push(sqlBusqueda.getPunteros([parecidos[i],null]));
							}
						}
						
						//  ---------------------------------- ORDENA Y ELIMINA REPETIDOS  ----------------------------------
						arreTemp = generateArrayBiToArrayUni(punteroCliente);
						arregloTe = sqlBusqueda.armarLista(StringFunciones.removerDuplicados(arreTemp));
						sendClientesPadre(arregloTe);
					}
					else  //  SOLO ES CORPORATIVO
					{
						sqlBusqueda = new Query(_valoresActuales,["nombre","nombreCorporativo"],true);
						punteroCliente = new Array();
						nom = StringUtil.trim( textBusqueda.text).toLowerCase();
						parecidos = sqlBusqueda.getCampoLikeLowerCase("nombre",nom);
						var parecidosCorp:Array = sqlBusqueda.getCampoLikeLowerCase("nombreCorporativo",nom);
						
						if (parecidos.length > 0)
						{
							for ( var x:int = 0; x<parecidos.length; x++)
							{
								punteroCliente.push(sqlBusqueda.getPunteros([parecidos[x],null]));
							}
						}
						
						if (parecidosCorp.length > 0)
						{
							for ( var h:int = 0; h<parecidosCorp.length; h++)
							{
								punteroCliente.push(sqlBusqueda.getPunteros([null,parecidosCorp[h]]));
							}
						}
						//  ---------------------------------- ORDENA Y ELIMINA REPETIDOS  ----------------------------------
						arreTemp = generateArrayBiToArrayUni(punteroCliente);
						arregloTe = sqlBusqueda.armarLista(StringFunciones.removerDuplicados(arreTemp));
						var lista:ArrayCollection = armarCorporativos(arregloTe);
						sendCorporativosPadre(lista);
					}
				}
			}
			
			// +++++++++++++++++++++++++++++++++++++++ BUSQUEDA +++++++++++++++++++++++++++++++++++++++
			
			public function crearExportacion():void
			{
				var file:File = new File();
				var hoja:ArrayCollection = new ArrayCollection();
				var fila1:Array = null;
				
				fila1 = new Array();
				fila1[0] =  hoja.addItem("#");
				fila1[1] =  hoja.addItem("Nombre");
				fila1[2] =  hoja.addItem("Razón Social");
				fila1[3] =  hoja.addItem("RFC");
				fila1[4] =  hoja.addItem("Industria");
				fila1[5] =  hoja.addItem("ESAC");
				fila1[6] =  hoja.addItem("EV");
				fila1[7] =  hoja.addItem("Cobrador");
				fila1[8] =  hoja.addItem("Rol");
				fila1[9] =  hoja.addItem("Sector");
				fila1[10] = hoja.addItem("Pais");
				fila1[11] = hoja.addItem("Ruta");
				
				var arrayTemp:ArrayCollection= new ArrayCollection();
				arrayTemp = ObjectUtil.copy( _valoresActuales ) as ArrayCollection;
				
				for(var i:int = 0 ; i< arrayTemp.length ; i++ )
				{
					fila1 = new Array();	
					fila1[0] = i + 1;
					fila1[1] = '"'+( arrayTemp[i] as Cliente ).nombre+'"';
					fila1[2] = '"'+( arrayTemp[i] as Cliente ).razonSocial+'"';
					fila1[3] = '"'+( arrayTemp[i] as Cliente ).rfc+'"';
					fila1[4] = '"'+( arrayTemp[i] as Cliente ).industria+'"';
					fila1[5] = '"'+( arrayTemp[i] as Cliente ).vendedor+'"';
					fila1[6] = '"'+( arrayTemp[i] as Cliente ).ejecutivoVenta+'"';
					fila1[7] = '"'+( arrayTemp[i] as Cliente ).cobrador+'"';
					fila1[8] = '"'+( arrayTemp[i] as Cliente ).rol+'"';
					fila1[9] = '"'+( arrayTemp[i] as Cliente ).sector+'"';
					fila1[10] = '"'+( arrayTemp[i] as Cliente ).pais+'"';
					fila1[11] = '"'+( arrayTemp[i] as Cliente ).ruta+'"';
					hoja.addItem('\r' + fila1 );
				} 
				file.save( hoja, 'ConsultaClientes-'+ UtilsFecha.formatoPAraGuardarFechaDDMMMYYYYHHMM( new Date() )+'.csv');
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		
		<s:VGroup width="100%" height="100%" paddingTop="93" horizontalAlign="center" gap="10" >
			<otros:division width="100%" />
			<s:TextInput fontStyle="normal" id="textBusqueda" width="350" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" 
						 prompt="Clientes" text="" change="filtroPorTexto()" />
		</s:VGroup>
		
		<s:VGroup width="100%" height="80" gap="0" >
			<otros:divisionGruesa width="100%"/>
			<s:Group width="100%" horizontalCenter="1" >
				<s:layout>
					<s:HorizontalLayout gap="0" horizontalAlign="center"/>
				</s:layout>
				<menuFlotante:OverLayerMenu id="btn0" tipoBoton="nivelIngreso" click="clickBotoneraBusqueda(event)" width="100%"/>
				<menuFlotante:OverLayerMenu id="btn1" tipoBoton="corporativo" click="clickBotoneraBusqueda(event)" width="100%"/>
				<menuFlotante:OverLayerMenu id="btn3" tipoBoton="ruta" click="clickBotoneraBusqueda(event)" width="100%"/>
				<menuFlotante:OverLayerMenu id="btn2" tipoBoton="clientes" click="clickBotoneraBusqueda(event)" width="100%"/>
				<menuFlotante:OverLayerMenu id="btn4" tipoBoton="cuentaClave" click="clickBotoneraBusqueda(event)" width="100%"/>
				<menuFlotante:OverLayerMenu id="btn5" tipoBoton="esac" click="clickBotoneraBusqueda(event)" width="100%"/>
				<menuFlotante:OverLayerMenu id="btn6" tipoBoton="ev" click="clickBotoneraBusqueda(event)" width="100%"/>
			</s:Group>
		</s:VGroup>
	</s:Group>
</s:VGroup>
