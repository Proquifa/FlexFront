<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 creationComplete="inicia('provConPAC');consultaPendientes()" minWidth="320"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="320" height="100%" xmlns:acordeon="skins.skin.acordeon.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.compradorPhs.vistas.eventos.EventoGeneralCompradorPhs;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.ActividadPendiente;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.controls.Button;
			import mx.controls.Label;
			
			import spark.components.NavigatorContent;
			[Bindable]
			private var _arrayTipoDocumentos:ArrayCollection = new ArrayCollection([{label:"Proveedores con PAC",valor:"provConPAC",conteo:"000", nombre:"Proveedores con PAC" },
																					{label:"PAC rechazados",valor:"provConPacRechazo",conteo:"000", nombre:"Proveedores con PAC rechazados"}]);
			[Bindable]
			private var _arrayProforma:ArrayCollection = new ArrayCollection([{label:"Proformas a Colocar",valor:"proformaCol",conteo:"000", nombre:"Proforma a Colocar"},
																			  {label:"Proformas a Confirmar",valor:"proformaCon",conteo:"000", nombre:"Proformas a Confirmar"}]);
			/**
			 * funcion que dispara un evento para que el mapa general de pendientes phs regrese la cantidad de pendientes por realizar
			 */ 
			private function consultaPendientes():void{
				lstGestor.addEventListener("actualizaSeccion",actualizaSeccion, false, 0, true);
				lstTramitador.addEventListener("actualizaSeccion",actualizaSeccion, false, 0, true);
				var evento:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs( EventoGeneralCompradorPhs.OBTENER_TIPO_Y_TOTAL_PENDOENTES );
				evento.usuario =  DatosGlobales.getInstance()._usuario.usuario; 
				dispatchEvent( evento );
			}
			
			
			public function actualizaSeccion(event:Event):void{
				inicia(event.currentTarget.selectedItem.valor);
			}
			
			/**
			 * Funcion para cambiar a la Opcion Seleccionada del Menu. Al dispara el evento se dirige al componente 
			 * padre (ViewStackGeneral.mxml) a la funcion ( seleccionaHijoMenu() );
			 */ 
			
			private function inicia( _id:String ):void{
				var evento:EventoGeneralCompradorPhs = new EventoGeneralCompradorPhs( EventoGeneralCompradorPhs.UTILIZA_OPCION_MENU );
				evento.idOpcionSeleccionada = _id;
				dispatchEvent( evento );
			}
			
			/*private function cambiarAOpcion( event:MouseEvent ):void{
				inicia(  (event.currentTarget as Button).id );
			} */
			/**
			 * funcion que recibe del mapaGeneralDePendientes.mxml los datos del tipo y cantidad de partidas a trabajar globalmente 
			 */ 
			public function set recibeTipoYTotalPartidas( dato:ArrayCollection ):void{
				if( dato == null ){
					return;
				}
				for( var i:int = 0; i < dato.length; i++ ){
					if( ( dato.getItemAt(i) as ActividadPendiente).rol == "Comprador PHS" ){
						if(( dato.getItemAt(i) as ActividadPendiente).nombre == "Proforma a Colocar" ||  (dato.getItemAt(i) as ActividadPendiente).nombre == "Proformas a Confirmar"){
							for(var tp:int = 0; tp < _arrayProforma.length; tp++){
								if(( dato.getItemAt(i) as ActividadPendiente).nombre ==  _arrayProforma[tp].nombre){
									_arrayProforma[tp].conteo =  ( dato.getItemAt(i) as ActividadPendiente).totalPendiente.toString();
								}
							} 
						}else{
							for(var cp:int = 0; cp < _arrayTipoDocumentos.length; cp++){
								if(( dato.getItemAt(i) as ActividadPendiente).nombre ==  _arrayTipoDocumentos[cp].nombre){
									_arrayTipoDocumentos[cp].conteo =  ( dato.getItemAt(i) as ActividadPendiente).totalPendiente.toString();
	 							}
							} 
						}
					}
				}
				_arrayTipoDocumentos.refresh();
				_arrayProforma.refresh();
			}
		]]>
		
	</fx:Script>
	<!--<acordeon:acordeonPqNet headerHeight="40" width="100%" height="100%" selectedIndex="0" openDuration="300" borderVisible="false" creationPolicy="all">-->
	<acordeon:acordeonPqNet headerHeight="40" width="100%" height="100%" selectedIndex="0" openDuration="300" borderVisible="false">
		<mx:VBox width="100%" height="100%" label="Gestor de producto PHS" >
			<s:List id="lstGestor" width="100%" height="100%" dataProvider="{_arrayTipoDocumentos}" selectionColor="#5294df" rollOverColor="#70b2fd" borderVisible="false" contentBackgroundColor="#eaeaea" 
					itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.renders.renderMenuConteo" > <!--click="inicia(event.currentTarget.selectedItem.valor)"-->
			</s:List>
		</mx:VBox>
		<mx:VBox width="100%" height="100%" label="Tramitador de OC PHS" >
			<s:List id="lstTramitador" width="100%" height="100%" dataProvider="{_arrayProforma}" selectionColor="#5294df" rollOverColor="#70b2fd" borderVisible="false" contentBackgroundColor="#eaeaea" 
					itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.renders.renderMenuConteo" > <!--click="inicia(event.currentTarget.selectedItem.valor)"-->
			</s:List>
		</mx:VBox>	
	</acordeon:acordeonPqNet>
</s:HGroup>
