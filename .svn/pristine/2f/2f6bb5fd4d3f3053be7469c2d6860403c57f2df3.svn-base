<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" width="100%" height="100%" gap="15" creationComplete="inicia()"
		 xmlns:s="library://ns.adobe.com/flex/spark"  paddingBottom="25" paddingLeft="30" paddingRight="30" paddingTop="25"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:label="skins.skin.label.*" xmlns:otros="skins.otros.*" xmlns:pqNet="skins.botones.pqNet.*" 
		 xmlns:cmbCat="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.*"
		 xmlns:textoBorde="skins.skin.textInputBordeadopPQNet.*" xmlns:chekbox="skins.skin.chekbox.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.soliciud.EventoSolicitudGeneral;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.alertPqNet.ResultAlert;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.CatalogoItem;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cliente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Empleado;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Referencia;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Usuario;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.SolicitudVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.plantillaProquifa.solicitud.popUP.SolicitudReferenciasPopUop;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.ChannelSet;
			import mx.messaging.Consumer;
			import mx.messaging.Producer;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.events.MessageFaultEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosEtiquetas;
			
			import spark.components.PopUpAnchor;
			
			[Bindable]
			private var _contacto:Contacto;
			[Bindable] public var _idUsuario:Number;
			
			
			private var popUpReferencias:SolicitudReferenciasPopUop = null;
			import spark.events.TextOperationEvent;
			
			private var _listaClientesUniverso:ArrayCollection;
			
			//////////////////////////////////////////////// PARA PUSH
			private var consumidorDocSalientes:Consumer= new Consumer();
			private var canalVerificacion:AMFChannel;
			private var canalesVerificacion:ChannelSet;
			private var productorDocSalientes:Producer = new Producer();
			////////////////////////////////////////////////
			
			public function inicia():void{
				
				this.consumidorDocSalientes.destination = "actualizacionService";
				this.consumidorDocSalientes.addEventListener("fault",falloconsumidor);
				this.consumidorDocSalientes.addEventListener(MessageEvent.MESSAGE, recibirMensajePendientes);
				this.canalVerificacion = new AMFChannel("my-polling-amf", Destinos.END_POINT_MENSAJERIA);
				this.canalesVerificacion = new ChannelSet();
				this.canalesVerificacion.addChannel(canalVerificacion);
				this.consumidorDocSalientes.channelSet = this.canalesVerificacion;
				this.consumidorDocSalientes.subscribe();
				
				this.canalVerificacion = new AMFChannel("my-polling-amf", Destinos.END_POINT_MENSAJERIA);
				//this.canalesVerificacion = new ChannelSet();
				//this.canalesVerificacion.addChannel(canalVerificacion); 
				this.productorDocSalientes.destination = "actualizacionService";
				this.productorDocSalientes.addEventListener(MessageFaultEvent.FAULT,falloproductor);
				this.productorDocSalientes.channelSet = this.canalesVerificacion;
				
				this.calendario.selectedDate = new Date();
				this.calendario.text = UtilsFecha.formatoFechaDDMMMYY( new Date() );
				this.txtComentarios.prompt = "Registra aquí la justificación de la visita"; 
				this.addEventListener( ResizeEvent.RESIZE, acomodaPopUp );
				this.chkBajo.selected = true;
				this.chkAlta.seleccionaColor('rojo');
				this.chkMedio.seleccionaColor('amarillo');
				this.chkBajo.seleccionaColor('verde');
			}
			
			private function falloconsumidor(event:MessageFaultEvent):void{
				alertaSingleton.show(catalogoAlertas.ERR_channelConsumidor, catalogoAlertas.TIT_ERR);
			}
			
			private function falloproductor(event:MessageFaultEvent):void{
				//Alert.show("Se ha producido un error en el Productor","Error");
				alertaSingleton.show( catalogoAlertas.ERR_channelProductor, catalogoAlertas.TIT_ERR);
			}
			
			private function recibirMensajePendientes(mensajeRecibido:MessageEvent):void{
				if(mensajeRecibido.message.body == "eventoGestionarVisitas"){
					var event:EventoSolicitudGeneral = new EventoSolicitudGeneral(EventoSolicitudGeneral.GESTIONAR_VISITA_PRINCIPAL,true);
					event.idEmpleado = _idUsuario;
					dispatchEvent(event);	
				}
			}
			
			public function set recibirContactos( $lista:ArrayCollection ):void{
				if($lista == null){
					return;
				}
				_listaClientesUniverso = new ArrayCollection();
				_listaClientesUniverso = ObjectUtil.copy( $lista ) as ArrayCollection;
				agrupaClientes( $lista );
			}
			
			[Bindable]
			private var _listaTemp:ArrayCollection;
			
			[Bindable]
			private var _idClienteSeleccionado:int = 0;
			
			private function agrupaClientes( $lista:ArrayCollection ):void{
				_listaTemp = new ArrayCollection();
				for( var i:int = 0; i< $lista.length; i++ ){
					if( i == 0 ){ 
						_listaTemp.addItem( $lista[i] ); 
						(_listaTemp[0] as Contacto).totalContactosPorEmpresa = 1;
					}else{
						var agregado:Boolean = false;
						for( var t:int = 0; t < _listaTemp.length; t++ ){
							if( ($lista[i] as Contacto).idEmpresa == (_listaTemp[t] as Contacto).idEmpresa ){
								(_listaTemp[t] as Contacto).totalContactosPorEmpresa = (_listaTemp[t] as Contacto).totalContactosPorEmpresa + 1;
								agregado = true;
								t = _listaTemp.length;
							}
						}
						if( !agregado ){
							_listaTemp.addItem( $lista[i] ); 
							(_listaTemp[_listaTemp.length - 1] as Contacto).totalContactosPorEmpresa = 1;
						}
					}
				}
				var contactoTemp:Contacto = new Contacto();
				contactoTemp.totalClientes = _listaTemp.length;
				_listaTemp.addItem( contactoTemp );
				if (_idClienteSeleccionado == 0 ){
					this.lstCliente.selectedIndex = 0;
				}else{
					for( var c:int = 0; c < this.lstCliente.dataProvider.length; c++){
						if( _idClienteSeleccionado  == ( this.lstCliente.dataProvider[c] as Contacto).idEmpresa ){
							this.lstCliente.selectedIndex = c;
							c = this.lstCliente.dataProvider.length;
						}else{
							this.lstCliente.selectedIndex = 0;
						}
					}
				}
				cargaListaContactos();
				setTimeout( retarda, 1500 );
			}
			private function retarda():void{
				lstCliente.ensureIndexIsVisible( this.lstCliente.selectedIndex )
			}
			
			[Bindable]
			private var _contactoSeleccionado:int = 0;
			private function cargaListaContactos():void{
				var listaTemp:ArrayCollection = new ArrayCollection();
				_idClienteSeleccionado =  ( lstCliente.selectedItem as Contacto ).idEmpresa;
				for( var i:int = 0; i < _listaClientesUniverso.length; i++ ){
					if( (this.lstCliente.selectedItem as Contacto).idEmpresa == (_listaClientesUniverso[i] as Contacto ).idEmpresa ){
						listaTemp.addItem( _listaClientesUniverso[i] );
						( listaTemp[listaTemp.length - 1] as Contacto ).numFila = listaTemp.length;
					}
				}
				if( _contactoSeleccionado != 0 ){
					for( var t:int = 0; t < listaTemp.length; t++){
						if( (listaTemp[t] as Contacto).idContacto == _contactoSeleccionado){
							_contactoSeleccionado = ObjectUtil.copy( t ) as int;
							t = listaTemp.length;
						}
					}
				}
				var contactoTemp:Contacto = new Contacto();
				contactoTemp.totalContactosPorEmpresa = listaTemp.length;
				lstContacto.dataProvider = new ArrayCollection();
				lstContacto.dataProvider = ObjectUtil.copy( listaTemp ) as ArrayCollection;
				lstContacto.dataProvider.addItem( contactoTemp );
				if( lstCliente.dataProvider.length > 1 ){
					lblNombreCliente.text =  (lstCliente.selectedItem as Contacto).empresa;
					lblGiroCliente.text = (lstCliente.selectedItem as Contacto).industria + ' · ' + ( lstCliente.selectedItem as Contacto).nivelIngresos ;
				}
				listaTemp = new ArrayCollection();
				this.lstContacto.selectedIndex = _contactoSeleccionado;
				 cargaDatosContacto(); 
			}
			
			private function cargaDatosContacto():void{
				this._contacto = new Contacto();
				_contactoSeleccionado = 0;
				if( lstContacto.dataProvider.length > 1 ){
					_contacto = lstContacto.selectedItem;
					if( isNaN( _contacto.direccion.idLugar ) ||  _contacto.direccion.idLugar == 0 ){
						lblDireccionContacto.text = "Sin dirección";
					}else{
						//lblDireccionContacto.text = _contacto.direccion.calle+' · '+_contacto.direccion.municipio+' · '+_contacto.direccion.pais+' · '+_contacto.direccion.estado+' · '+_contacto.direccion.codigoPostal;
						lblDireccionContacto.text = _contacto.direccion.domicilio;
					}
				}
			}
			private var _listaFiltradaDeClientes:ArrayCollection;
			private function filtraClientes( event:TextOperationEvent ):void{
				_listaFiltradaDeClientes = new ArrayCollection();
				_listaFiltradaDeClientes = ObjectUtil.copy( UtilsGrid.queryCampoXLike( _listaClientesUniverso, 'empresa', txtBusqueda.text ) ) as ArrayCollection;
				if( _listaFiltradaDeClientes != null ){
					if( _listaFiltradaDeClientes.length > 1 ){
						lstCliente.selectedIndex = 0;
						_idClienteSeleccionado = ( _listaFiltradaDeClientes[0] as Contacto ).idEmpresa;
					}
				}
				agrupaClientes( _listaFiltradaDeClientes );
			}
			
			[Bindable]
			private var _listaReferencias:ArrayCollection;
			protected function botonpqnetlargo1_clickHandler(event:MouseEvent):void{
				if(popUpReferencias == null){
					_listaReferencias = new ArrayCollection();
					popUpReferencias = SolicitudReferenciasPopUop( PopUpManager.createPopUp( this, SolicitudReferenciasPopUop, true ) ); 
					popUpReferencias.addEventListener( EventoSolicitudGeneral.CERRAR_POP_UP, cerrarPopUp );
					popUpReferencias.addEventListener( EventoSolicitudGeneral.ENVIA_REFERENCIAS, recibeReferencias );
				}else{	
					PopUpManager.addPopUp( popUpReferencias, this, true);
				}
				var consulta:EventoSolicitudGeneral = new EventoSolicitudGeneral(EventoSolicitudGeneral.CONSULTA_POP_REFERENCIAS);
				consulta.vieneD = '';
				dispatchEvent(consulta);
				
				popUpReferencias.group1_creationCompleteHandler( _listaReferencias );
				PopUpManager.centerPopUp( popUpReferencias);
			}
			
			private function recibeReferencias( $evt:EventoSolicitudGeneral):void{
				this._listaReferencias = $evt.listaReferencias;
			}
			
			private function acomodaPopUp( evt:Event ):void{
				if (popUpReferencias != null ){
					setTimeout(retraso, 600);
				}
			}
			private function retraso():void{
				PopUpManager.centerPopUp( popUpReferencias );
			}
			private function cerrarPopUp( $evt:EventoSolicitudGeneral ):void{
				PopUpManager.removePopUp( popUpReferencias );
			}
			public function set confirmarVista( $confirma:Boolean ):void{
				if( !$confirma ){
					return;
				}
				this.calendario.selectedDate = new Date();
				this.calendario.text = UtilsFecha.formatoFechaDDMMMYYYY( new Date() );
				/* this.cmbUrgencia.selectedIndex = 0; */
				changeRadioButton('baja');
			 	this.txtComentarios.text = "";
				this.txtComentarios.prompt = "Registra aquí la justificación de la visita"; 
				this._listaReferencias = new ArrayCollection();
				alertaSingleton.show( 'Su Solicitud de visita se ha guardado' , catalogoAlertas.TIT_CONF_operacionExitosa );
				
				var mensaje:AsyncMessage = new AsyncMessage();
				mensaje.body = "eventoGestionarVisitas";
				this.productorDocSalientes.send( mensaje );
				
			}
			
			private var _soloUnaVez:Boolean;
			private function warning():void{
				 if( this.txtComentarios.text == ""){
					alertaSingleton.show('Es necesario tener una justificación', catalogoAlertas.TIT_ADV_operacionImposible );
					return;
				} 
				var hoy:Date = new Date();
				if( this.calendario.selectedDate.getTime() <= hoy.getTime()  ){
					alertaSingleton.show('La fecha de solicitud requerida, debe ser posterior al día actual', catalogoAlertas.TIT_ADV_operacionImposible );
					return;
				}
				/* if( this.cmbUrgencia.selectedIndex == 0 ){
					alertaSingleton.show( 'Es necesario seleccionar el nivel de Urgencia', catalogoAlertas.TIT_ADV_operacionImposible );
					return;
				} */
				_soloUnaVez = true;
				if(this._listaReferencias == null){ this._listaReferencias = new ArrayCollection(); } 
				if( this._listaReferencias.length > 1  ){
					alertaSingleton.show( 'Se guardara la solicitud de visita.\n¿Desea continuar?' ,catalogoAlertas.TIT_ADV_atencion,'plantillaSolicitudVisita','','','SI','NO')
				}else{
					alertaSingleton.show( 'La Solicitud de visita no contiene Referencias.\n¿Desea continuar?' ,catalogoAlertas.TIT_ADV_atencion,'plantillaSolicitudVisita','','','SI','NO')
				}
			}
			public function set recibeDelAlert( $dato:ResultAlert ):void{
				if( $dato == null || $dato.vieneD == null ){
					return;
				}
				if( _soloUnaVez ){
					if( $dato.vieneD == "plantillaSolicitudVisita" && $dato.botonSeleccionado == "SI"){
						var evt:EventoSolicitudGeneral = new EventoSolicitudGeneral( EventoSolicitudGeneral.GUARDA_VISITA );
						evt.listaReferencias = ObjectUtil.copy( this._listaReferencias ) as ArrayCollection;
						if( this._listaReferencias.length > 1  ){
							evt.listaReferencias.removeItemAt( evt.listaReferencias.length - 1 );
							for( var i:int = 0; i<evt.listaReferencias.length; i++ ){
								(evt.listaReferencias[i] as Referencia).folio = null;
							}
						}
						evt.solicitudVisita = new SolicitudVisita();
						evt.solicitudVisita.fechaRegistro = new Date();
						/* evt.solicitudVisita.idCliente = this._contacto.idEmpresa;
						evt.solicitudVisita.idContacto = this._contacto.idContacto; */
						//evt.solicitudVisita.fechaDeseadaRealizar = this.calendario.selectedDate;
						evt.solicitudVisita.cliente = new Cliente();
						evt.solicitudVisita.cliente.idCliente = this._contacto.idEmpresa;	
						evt.solicitudVisita.cliente.idEjecutivoVenta = DatosGlobales.getInstance()._usuario.idEmpleado;
						evt.solicitudVisita.contacto = new Contacto;
						evt.solicitudVisita.contacto.idContacto = this._contacto.idContacto;
						evt.solicitudVisita.empleado = new Empleado();
						_idUsuario = evt.solicitudVisita.empleado.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado;
						evt.solicitudVisita.fechaDeseadaRealizacion = this.calendario.selectedDate;
						if( chkAlta.selected ){
							evt.solicitudVisita.urgencia = "Alta";
						}else if(chkMedio.selected ){
							evt.solicitudVisita.urgencia = "Media";
						}else{
							evt.solicitudVisita.urgencia = "Baja";
						}
						evt.solicitudVisita.justificacion = this.txtComentarios.regresaJustificacion();
						evt.solicitudVisita.referencias = ObjectUtil.copy( evt.listaReferencias ) as ArrayCollection;
						if( evt.solicitudVisita.referencias == null ){
							evt.solicitudVisita.referencias = new ArrayCollection();
						}
						dispatchEvent( evt );
						_soloUnaVez = false;
					}
				}
			}
			private function changeRadioButton( validar:String='baja' ):void{
				this.chkAlta.selected = false;
				this.chkBajo.selected = false;
				this.chkMedio.selected = false;
				if( validar == 'alta' ){
					this.chkAlta.selected = true;
				}else if( validar == 'media' ){
					this.chkMedio.selected = true;
				}else{
					this.chkBajo.selected = true;
				}
			}
		]]>
	</fx:Script>
	<label:labelTitulo_Otros text="VISITA A CLIENTE" width="100%"/>
	<otros:divisionGruesa width="100%"/>
	<s:HGroup width="100%" height="100%">
		<s:VGroup height="100%" width="25%" >
			<s:Spacer height="20"/>
			<s:TextInput id="txtBusqueda" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" fontStyle="normal" change="filtraClientes(event)" 
						 prompt="cliente"/>
			<s:Spacer height="15"/>
			<s:VGroup height="100%" width="100%" horizontalAlign="center" gap="0">
				<otros:division width="100%"/>
				<s:List id="lstCliente" height="100%" width="100%" borderVisible="false" horizontalScrollPolicy="off" dataProvider="{_listaTemp}" mouseDown="cargaListaContactos()"
						itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.plantillaProquifa.solicitud.itemRenderer.SolicitudListaClienteIR"/>
			</s:VGroup>
		</s:VGroup>
		<s:Spacer width="10"/>
		<otros:VDivisionHueca height="100%" />
		<s:Spacer width="10"/>
		<s:VGroup height="100%" width="30%" horizontalAlign="center" paddingTop="15">
			<s:Spacer height="15"/>
			<s:Label id="lblNombreCliente" fontWeight="bold" fontSize="20" width="100%" maxDisplayedLines="2" textAlign="center"/>
			<s:Label id="lblGiroCliente" color="0x{catalogoColores.LABEL_CASI_NEGRO}"   width="100%" maxDisplayedLines="2" textAlign="center"/>
			<s:Spacer height="5"/>
			<s:VGroup height="100%" width="100%" horizontalAlign="center" gap="0">
				<otros:division width="100%"/>
				<s:List id="lstContacto" height="100%" width="100%" borderVisible="false" horizontalScrollPolicy="off" mouseDown="cargaDatosContacto()"
						itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.plantillaProquifa.solicitud.itemRenderer.SolicitudListaContactosIR"/>
			</s:VGroup>
		</s:VGroup>
		<s:Spacer width="10"/>
		<otros:VDivisionHueca height="100%"/>
		<s:Spacer width="10"/>
		<s:VGroup height="100%" width="45%"  paddingTop="30">
			<s:HGroup width="100%" verticalAlign="middle" paddingLeft="-15">
				<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_solicitudes}"/>
				<s:Label text="SOLICITUD DE VISITA" fontWeight="bold" fontSize="20" color="0x{catalogoColores.LABEL_VERDE_AZUL }" width="100%" />
			</s:HGroup>
			<!--<s:Spacer height="5"/>-->
			<otros:division width="100%"/>
			<s:HGroup width=" 100%">
				<s:VGroup width="50%" height="100%"  paddingTop="15">
					<s:Label fontWeight="bold" fontSize="14" width="100%" text="{ _contacto.titulo +' '+ _contacto.nombre }" maxDisplayedLines="2"/>
					<s:Label width="100%" text="{ _contacto.puesto + ' · ' +  _contacto.departamento }" color="0x{catalogoColores.LABEL_CASI_NEGRO }" />
					<s:Spacer height="5"/>
					<s:Label width="100%" text="NIVEL DE DECISIÓN · { _contacto.nivelDecision }" color="0x{catalogoColores.LABEL_VERDE_AZUL }" fontWeight="bold"/>
					<s:Spacer height="5"/> 
					<s:Label width="100%" color="0x{catalogoColores.LABEL_CASI_NEGRO}" id="lblDireccionContacto" />
					<s:Spacer height="5"/>
					<s:Label width="100%"   text="{ _contacto.direccion.zonaMensajeria  }" color="0x{catalogoColores.LABEL_ROJO}"/>
					<s:Spacer height="15"/>
				</s:VGroup>
				<otros:VDivisionClaro height="100%"/>
				<s:VGroup width="50%" height="100%" paddingTop="15" paddingLeft="15">
					<s:Label text="FDR:" fontWeight="bold"/>
					<mx:DateField id="calendario" fontStyle="normal" width="150"/>
					<s:Spacer height="15"/>
					<s:Label text="Urgencia:" fontWeight="bold"/>
					<s:HGroup width="100%"  height="30">
						<!--<cmbCat:ComboCatalogos id="cmbUrgencia" creationComplete="cmbUrgencia.cargaUrgencias()" width="150" labelField="valor" selectedIndex="0"/>-->
						<chekbox:checkBoxRadio  verticalCenter="0" id="chkBajo" click="changeRadioButton('baja')" />
						<s:Label fontSize="18"  color="0x{catalogoColores.LABEL_VERDE}" text="BAJA" height="100%" verticalAlign="middle" paddingTop="3" paddingLeft="5" click="changeRadioButton('baja')"/>
						<s:Spacer width="100%"/>
						<chekbox:checkBoxRadio verticalCenter="0" id="chkMedio" click="changeRadioButton('media')"/>
						<s:Label fontSize="18"  color="0x{catalogoColores.LABEL_AMARILLO}" text="MEDIA" height="100%" verticalAlign="middle" paddingTop="3" paddingLeft="5" click="changeRadioButton('media')"/>
						<s:Spacer width="100%"/>
						<chekbox:checkBoxRadio verticalCenter="0"  id="chkAlta" click="changeRadioButton('alta')"/>
						<s:Label fontSize="18"  color="0x{catalogoColores.LABEL_ROJO}" text="ALTA" height="100%" verticalAlign="middle" paddingTop="3" paddingLeft="5" click="changeRadioButton('alta')"/>
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			<otros:division width="100%"/>
			<s:Spacer height="20"/>
			<!--<s:TextArea width="100%" id="txtComentarios" skinClass="skins.skin.textarea.TextAreaPunteadoAlargadoSkin" height="100%"  fontStyle="normal" />-->
			<textoBorde:TextInputConBordePunteado id="txtComentarios" height="100%" width="100%"  fontStyle="normal" obligatorio="true"/>
			<s:Spacer height="20"/>
			<otros:divisionGruesa width="100%"/>
			<s:Spacer height="10"/>
			<s:HGroup width="100%">
				<pqNet:botonPqNetLargo label="Referencias" gradientePqnet="true" colorBase="#fe8a01" click="botonpqnetlargo1_clickHandler(event)"/>
				<s:Spacer width="100%"/>
				<pqNet:botonPqNetLargo label="Registrar" click="warning()" icono="registrarpeque"/>
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
	
</s:VGroup>
