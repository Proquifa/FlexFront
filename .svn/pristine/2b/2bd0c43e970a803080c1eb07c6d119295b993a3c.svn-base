<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  click="clic_item(event)"
		  paddingTop="10"
		  >	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.proveedores.EventoCatProGeneral;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.comun.menuCatalogos.assets.ImagenesBotonesMenuCatalogos;
			
			import skins.catalogos.catalogoColores;
			
			[Bindable] private var _imageDown:Class;
			[Bindable] private var _imageUp:Class;
			[Bindable] private var tempCurrent:itemMenuCatalogosClass;
			
			private var _select:Boolean;
			private var _dataProvider:Object;
			private var disable:Boolean = true;
			
			public function minimiza():void
			{
				labelDisplay.visible = labelDisplay.includeInLayout = false;
			}
			
			public function set dataProvider(value:Object):void
			{
				_dataProvider = value;
				
				if(value is itemMenuCatalogosClass)
				{
					tempCurrent = value as itemMenuCatalogosClass;
					labelDisplay.text = tempCurrent.titulo;
					imageUp = ImagenesBotonesMenuCatalogos.getInstance()[tempCurrent.image];
					imageDown = ImagenesBotonesMenuCatalogos.getInstance()[tempCurrent.image + "Selected"];
					lblNumero.text = tempCurrent.indicador1Count.toString();
					checkStatus();
					checkEnable();
					checkNumContactos();
				}
			}
			
			private function checkNumContactos():void
			{
				if(tempCurrent.esConindicador1)
					lblNumero.visible = lblNumero.includeInLayout = true;
				else
					lblNumero.visible = lblNumero.includeInLayout = false;
			}
			
			private function checkEnable():void
			{
				if(tempCurrent.disable)
				{
					disable = false;
					imgIcono.enabled = false;
					labelDisplay.enabled = false;
				}
				else
				{
					disable = true;
					imgIcono.enabled = true;
					labelDisplay.enabled = true;
				}
			}
			
			private function checkStatus():void
			{
				if(tempCurrent.selected)
				{
					imgIcono.source = imageDown;
					labelDisplay.setStyle("color","0x"+catalogoColores.LABEL_VERDE_AZUL);
					lblNumero.setStyle("color","0x"+catalogoColores.LABEL_VERDE_AZUL);   
				}
				else
				{
					imgIcono.source = imageUp;
					labelDisplay.setStyle("color",0x000000);
					lblNumero.setStyle("color",0x000000);
				}
			}
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			[Bindable]
			public function get imageDown():Class
			{
				return _imageDown;
			}
			
			public function set imageDown(value:Class):void
			{
				_imageDown = value;
			}
			
			[Bindable]
			public function get imageUp():Class
			{
				return _imageUp;
			}
			
			public function set imageUp(value:Class):void
			{
				_imageUp = value;
			}
			
			[Bindable]
			public function get select():Boolean
			{
				return _select;
			}
			
			public function set select(value:Boolean):void
			{
				_select = value;
				checkStatus();
			}
			
			
			protected function clic_item(event:MouseEvent):void
			{
				if(disable)
				{
					dispatchEvent(new Event("limpiarBotones",true));
					imgIcono.source = imageDown;
					labelDisplay.setStyle("color","0x"+catalogoColores.LABEL_VERDE_AZUL);   
					lblNumero.setStyle("color","0x"+catalogoColores.LABEL_VERDE_AZUL);   
					
					var evento:EventoCatProGeneral = new EventoCatProGeneral(EventoCatProGeneral.CLIC_BOTONERA_MENU);
					evento.componente = tempCurrent.evento;
					evento.tipo = tempCurrent.titulo;
					dispatchEvent(evento);
				}
			}
			
			public function deselect():void
			{
				imgIcono.source = imageUp;
				labelDisplay.setStyle("color",0x000000);   
				lblNumero.setStyle("color",0x000000);   
			}
			
		]]>
	</fx:Script>
	
	
	
	<s:states>
		<s:State name="up" stateGroups="normal" />
		<s:State name="over" stateGroups="normal"/>
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<s:Group>
		<s:Image id="imgIcono" bottom="0" backgroundAlpha="0" />
		<s:Group  verticalCenter="-10" right="-10" >
			<s:Label id="lblNumero" visible="true" includeInLayout="true" />
		</s:Group>
	</s:Group>
	
	<s:Label id="labelDisplay" maxDisplayedLines="1" fontSize="14" height="100%" verticalAlign="bottom"
			 text="sin definir" left="{imgIcono.width +10}" right="10" top="2" bottom="2">
	</s:Label>
	
</s:HGroup>
