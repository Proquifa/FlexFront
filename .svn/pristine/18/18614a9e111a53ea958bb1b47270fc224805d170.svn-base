<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		width="100%" height="100%"
		currentStateChanging="skin1_currentStateChangingHandler(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("spark.components.Button")]
	</fx:Metadata>
	
	
	<fx:Script>
		<![CDATA[
			import mx.events.StateChangeEvent;
			
			import spark.filters.BevelFilter;
			
			private var _holeTriangle:Boolean = false;
			private var _positionSelect:String;
			private var _color:uint;
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				
				var wtriangulo:Number; 
				
				var htriangulo:Number; 
				
				graphics.clear();
				
				// Background
				if ( currentState == 'up')
					graphics.beginFill(color);
				else if (currentState == 'over' )
					graphics.beginFill(color,0.8);
				else if (currentState == 'down')
					graphics.beginFill(color,0.9);
				
				//Rectangulo
				
				graphics.moveTo(0,unscaledHeight);
				graphics.lineTo(0,0);
				//graphics.lineTo(unscaledWidth,0);
				
				if (holeTriangle ){ //&& ( currentState == 'upAndSelected' || currentState == 'overAndSelected' || currentState == 'downAndSelected' ) ){
					
					if (positionSelect == 'left'){
						wtriangulo = unscaledWidth/4;
						htriangulo = unscaledHeight;
					}else{
						wtriangulo = (unscaledWidth/4) * 3;
						htriangulo = unscaledHeight;
					}
					
					//Hacer el hueco del triangulo
					graphics.lineTo(wtriangulo-20,0);
					graphics.lineTo(wtriangulo,15);
					graphics.lineTo(wtriangulo+20,0);
				}
				graphics.lineTo(unscaledWidth,0);
				graphics.lineTo(unscaledWidth,unscaledHeight);
				graphics.lineTo(0,unscaledHeight);
				graphics.endFill();
				var sha:spark.filters.BevelFilter = new spark.filters.BevelFilter; 
			}
			
			public function get holeTriangle():Boolean
			{
				return _holeTriangle;
			}
			
			public function set holeTriangle(value:Boolean):void
			{
				_holeTriangle = value;
			}
			
			[Bindable]
			public function get color():uint
			{
				return _color;
			}
			
			public function set color(value:uint):void
			{
				_color = value;
			}
			
			public function get positionSelect():String
			{
				return _positionSelect;
			}
			
			public function set positionSelect(value:String):void
			{
				_positionSelect = value;
				invalidateDisplayList();
			}
			
			protected function skin1_currentStateChangingHandler(event:StateChangeEvent):void
			{
				// TODO Auto-generated method stub
				invalidateDisplayList();
			}
			
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="down" stateGroups="selected" />
		<s:State name="over" />
		<s:State name="up" />
	</s:states>
	
	<!-- SkinParts
	name=iconDisplay, type=spark.primitives.BitmapImage, required=false
	name=labelDisplay, type=spark.core.IDisplayText, required=false
	-->
	
	<s:HGroup width="100%" height="100%" horizontalAlign="center" horizontalCenter="0" verticalAlign="middle">
		
		<s:Label textAlign="center" id="labelDisplay" width="90%" horizontalCenter="0" verticalCenter="0" fontFamily="MyriadProProqui" fontWeight="bold" fontStyle="normal" fontSize="18" paddingTop="3" maxDisplayedLines="3"
				 color="#FFFFFF" 
				 color.up="#FFFFFF"
				 color.selected="#FFFFFF"  
				 alpha="0.9" alpha.disabled="0.5" />
		
	</s:HGroup>
	
</s:Skin>
