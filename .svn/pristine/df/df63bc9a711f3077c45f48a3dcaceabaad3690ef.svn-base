<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:botoneramenu="mx.com.proquifa.vista.vistas.skin.botoneramenu.*" 
		 
		 >
	
	<fx:Metadata>
		[Event(name="ordenarDias",type="mx.com.proquifa.vista.eventos.MonitorearOCNoArribada.EventoMonitorearOcNoArribada")]
		[Event(name="ordenarDiasBO",type="mx.com.proquifa.vista.eventos.gestionarBackOrder.EventoGestionarBackOrder")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.MonitorearOcNoArribada;
			import mx.com.proquifa.vista.eventos.MonitorearNacionales.EventoMonitorearNacionales;
			import mx.com.proquifa.vista.eventos.MonitorearOCNoArribada.EventoMonitorearOcNoArribada;
			import mx.com.proquifa.vista.eventos.gestionarBackOrder.EventoGestionarBackOrder;
			
			import spark.components.Group;
			import spark.components.Label;
			import spark.components.PopUpPosition;
			import spark.primitives.Rect;
			
			import skins.catalogos.catalogoIconosBotones;
			
			
			
			
			
			private var _color:uint = 0x0b8894;
			private var _colorSelected:uint = 0x0b8894;
			private var _botonMenuIndex:int = 0;
			private var _selectedItem:*;
			private var _selectedIndex:int;
			private var _selectIndex:int;
			private var _clicDia:String;
			
			private var toHeight:Boolean;
			private var _dataProvider:ArrayCollection;
			
			private const MIN_WIDTH:Number = 100;
			
			private var _gap:Number;
			private var _widthElement:Number;
			private var _horizontal:String;
			public var diaSeleccionado:*;
			private var _tipoSelect:String;
			
			[Bindable] public var ayer:int;
			[Bindable] public var hoy:int;
			[Bindable] public var manana:int;
			[Bindable] public var antier:int;
			[Bindable] public var pasadoManana:int;
			[Bindable] public var pasado:int;
			[Bindable] public var futuro:int;
			[Bindable] public var todo:int;
			[Bindable] private var current2:MonitorearOcNoArribada;
			
			
			[Bindable] public var txtAyer:String;
			[Bindable] public var txtHoy:String;
			[Bindable] public var txtManana:String;
			[Bindable] public var txtAntier:String;
			[Bindable] public var txtPasadoManana:String;
			[Bindable] public var txtPasado:String;
			[Bindable] public var txtFuturo:String;
			[Bindable] public var txtTodo:String;
			
			
			
			
			public function get clicDia():String
			{
				return _clicDia;
			}
			
			public function set clicDia(value:String):void
			{
				_clicDia = value;
			}
			
			public function get tipoSelect():String
			{
				return _tipoSelect;
			}
			
			public function set tipoSelect(value:String):void
			{
				_tipoSelect = value;
			}
			
			override public function set height(value:Number):void
			{
				grupoBotonera.height = value;
			}
			
			[Bindable]
			public function get color():uint
			{
				return _color;
			}
			
			public function set color(value:uint):void
			{
				_color = value;
			}
			
			[Bindable]
			public function get colorSelected():uint
			{
				return _colorSelected;
			}
			
			public function set colorSelected(value:uint):void
			{
				_colorSelected = value;
			}
			
			[Bindable]
			public function get botonMenuIndex():int
			{
				return _botonMenuIndex;
			}
			
			public function set botonMenuIndex(value:int):void
			{
				_botonMenuIndex = value;
			}
			
			public function get selectedItem():*
			{
				return _selectedItem;
			}
			
			public function set selectedItem(value:*):void
			{
				_selectedItem = value;
			}
			
			public function get selectedIndex():int
			{
				return _selectedIndex;
			}
			
			public function set selectedIndex(value:int):void
			{
				_selectedIndex = value;
			}
			
			[Inspectable(category="General", arrayType="botonera.DataItem")]
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
				grupoBotonera.gap = gap ? gap : 0;
				var index:int = 0;
				grupoBotonera.removeAllElements();
				for each (var data:DataItem in value) 
				{
					crearBoton(data, index++);
				}
				
			}
			
			private function crearBoton(data:DataItem, index:int):void
			{
				var group:Group = new Group();
				group.id = index.toString();
				group.addEventListener(MouseEvent.MOUSE_OVER, botonOver);
				group.addEventListener(MouseEvent.MOUSE_OUT, botonOut);
				group.addEventListener(MouseEvent.CLICK, selectedBoton);
				group.width = widthElement ? widthElement : MIN_WIDTH;
				group.percentHeight = 100;
				var rect:Rect = new Rect();
				rect.percentHeight = 100;
				rect.percentWidth = 100;
				rect.fill = solidColor;
				rect.stroke = scsBorder;
				
				var label:Label = new Label();
				label.text = data.boton;
				label.percentWidth = 100;
				label.setStyle("textAlign",horizontal);
				label.setStyle("color", "#ffffff");
				label.verticalCenter = 0;
				
				group.addElement(rect);
				group.addElement(label);
				
				if (botonMenuIndex == index)
				{
					if(currentState == "normal")
					{
						imgLineas.left = 10;
						imgLineas.verticalCenter = 0;
						group.addElement(imgLineas);
						imgCerrar.left = 10
						imgCerrar.verticalCenter = 0;
						group.addElement(imgCerrar);
					}
						
					else if(currentState == "open")
					{
						
					}
					
					
					
				}
				
				grupoBotonera.addElement(group);
			}
			
			protected function botonnormal(event:MouseEvent):void
			{
				currentState = "normal";
				imgCerrar.visible = false;
				imgLineas.visible = true;
			}
			
			
			protected function botonOver(event:MouseEvent):void
			{
				event.currentTarget.getElementAt(0).alpha = 0.8;
			}
			
			protected function botonOut(event:MouseEvent):void
			{
				event.currentTarget.getElementAt(0).alpha = 1;
			}
			
			protected function selectedBoton(event:MouseEvent):void
			{
				if (selectedItem)
				{
					selectedItem.getElementAt(0).fill = solidColor;
					if (selectedIndex == botonMenuIndex)
						currentState = "normal";
					
				}
				event.currentTarget.getElementAt(0).fill = solidColorSelected;
				selectedItem = event.currentTarget;
				selectedIndex = event.currentTarget.id;
				if (selectedIndex == botonMenuIndex)
				{
					currentState = "open";
					if (diaSeleccionado)
						this[diaSeleccionado].currentState = "seleccionado";
				}
				
				imgCerrar.visible = true;
				imgLineas.visible = false;
			}
			
			public function get gap():Number
			{
				return _gap;
			}
			
			public function set gap(value:Number):void
			{
				_gap = value;
			}
			
			[Bindable]
			public function get widthElement():Number
			{
				return _widthElement;
			}
			
			public function set widthElement(value:Number):void
			{
				_widthElement = value;
			}
			
			[Inspectable(enumeration="left,center,right")]
			public function get horizontal():String
			{
				return _horizontal;
			}
			
			public function set horizontal(value:String):void
			{
				_horizontal = value;
			}
			
			
			protected function btn3_clickHandler(event:MouseEvent):void
			{
				currentState = "normal";
				imgCerrar.visible = false;
				imgLineas.visible = true;
				selectedItem.getElementAt(1).text = event.currentTarget.label1;
				diaSeleccionado = event.currentTarget.id;
				var fechah:Date=new Date(2016,05,9-1);
				//var fechahoy:String = formatoFechaDDMMMYYYY(fechah);
				//var diasDelMes:int = Calendar.diasDelMes(month+1, year);
				
				if(diaSeleccionado=="btn1")
				{
					clicDia = "AYER";
				}
				if(diaSeleccionado=="btn2")
				{
					clicDia = "DIA0";
				}
				if(diaSeleccionado=="btn3")
				{
					clicDia = "DIA1";
				}
				if(diaSeleccionado=="btn4")
				{
					clicDia = "ANTIER";
				}
				if(diaSeleccionado=="btn5")
				{
					clicDia = "DIA2";
				}
				if(diaSeleccionado=="btn6")
				{
					clicDia = "PASADO";
				}
				if(diaSeleccionado=="btn7")
				{
					clicDia = "TODOS";
				}
				if(diaSeleccionado=="btn8")
				{
					clicDia = "FUTURO";
				}
				
				
				dispatchEvent(new EventoMonitorearOcNoArribada(EventoMonitorearOcNoArribada.ORDENAR_DIAS));
				dispatchEvent(new EventoMonitorearNacionales(EventoMonitorearNacionales.ORDENAR_DIAS));
				dispatchEvent(new EventoGestionarBackOrder(EventoGestionarBackOrder.ORDENAR_DIASBO));
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:SolidColor color="{color}" id="solidColor" />
		<s:SolidColor color="#FFFFFF" id="solidColorBlanco" />
		<s:SolidColor color="{colorSelected}" id="solidColorSelected" />
		<s:SolidColorStroke id="scsBorder" caps="none" color="#93aaae" joints="miter" miterLimit="4" weight="1"/>
		
		<s:Group mouseDown="botonnormal(event)" width="15" height="15" id="imgCerrar" visible="false" buttonMode="true">
			<mx:Image smoothBitmapContent="true" source="{catalogoIconosBotones.getInstance().cerrar_blanco}" width="15" height="15" />
		</s:Group>
		<mx:Image smoothBitmapContent="true" source="{catalogoIconosBotones.getInstance().lineas_menu}" id="imgLineas"  width="31" height="17" y="0" x="0" />
		
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
	</s:states>
	
	<s:HGroup width="100%" height="100%" id="grupoBotonera" />
	
	<s:PopUpAnchor id="popUp" displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
				   top="{grupoBotonera.height}" itemDestructionPolicy="auto"
				   left="{(widthElement ? widthElement : MIN_WIDTH) * botonMenuIndex}"
				   width="{widthElement ? widthElement : MIN_WIDTH + 5}"
				   popUpPosition="{PopUpPosition.BELOW}" popUpWidthMatchesAnchorWidth="true"
				   >
		
		<!--- 
		This includes borders, background colors, scrollers, and filters. 
		@copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<s:Group id="dropDown" >
			<s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0" distance="7"
									 angle="90" color="#000000" left="0" top="0" right="0" bottom="19"/>
			
			<!-- border -->
			<!--- @private -->
			<s:Rect id="border" left="0" right="3" top="0" bottom="19" alpha="0">
				<s:fill>
					<s:SolidColor color="#FFFFFF" />
				</s:fill>
				<s:stroke>
					<!--- @private -->
					<s:SolidColorStroke id="borderStroke" weight="0"/>
				</s:stroke>
			</s:Rect>
			
			<!-- fill -->
			<!--- Defines the appearance of drop-down list's background fill. -->
			<s:Rect id="background" left="0" right="0" top="0" bottom="4" >
				<s:fill>
					<!---  
					@private
					The color of the drop down's background fill.
					The default color is 0xFFFFFF.
					-->
					<s:SolidColor id="bgFill" color="#FFFFFF" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#e5e8e9" weight="1"/>
				</s:stroke>
				<s:filters>
					<!-- drop shadow -->
					<!--- @private -->
					<s:DropShadowFilter blurY="20" blurX="20" alpha="0.45" distance="7" angle="90" color="#000000" quality="{BitmapFilterQuality.HIGH}" />
				</s:filters>
			</s:Rect>
			
			<s:Group width="100%" height="100%" left="15" right="15" top="15" bottom="15" >
				
				<s:Group width="100%">
					<s:layout>
						<botoneramenu:LayoutBotoneraReporteAHyM minGap="1" minWidthElement="{((widthElement ? widthElement : MIN_WIDTH)/3)-15}" /> 		
					</s:layout>
					<botoneramenu:botonReporteAHyM id="btn1" tipoBoton="ayer" label1="AYER" click="btn3_clickHandler(event)" total="{ayer}" label2="{txtAyer}" /> 
					<botoneramenu:botonReporteAHyM id="btn2" tipoBoton="hoy" label1="HOY" click="btn3_clickHandler(event)" total="{hoy}" label2="{txtHoy}"/> 
					<botoneramenu:botonReporteAHyM id="btn3" tipoBoton="manana" label1="MAÑANA" click="btn3_clickHandler(event)" total="{manana}" label2="{txtManana}"/> 
					<botoneramenu:botonReporteAHyM id="btn4" tipoBoton="antier" label1="ANTIER" click="btn3_clickHandler(event)" total="{antier}" label2="{txtAntier}"/> 
					<botoneramenu:botonReporteAHyM id="btn5" tipoBoton="pasadomanana" label1="PASADO MAÑANA" click="btn3_clickHandler(event)" total="{pasadoManana}" label2="{txtPasadoManana}"/>
					<botoneramenu:botonReporteAHyM id="btn6" tipoBoton="pasado" label1="PASADO" click="btn3_clickHandler(event)" total="{pasado}" label2="{txtPasado}"/> 
					<botoneramenu:botonReporteAHyM id="btn7" tipoBoton="todo" label1="TODOS" click="btn3_clickHandler(event)" total="{todo}" label2="{txtTodo}"/>
					<botoneramenu:botonReporteAHyM id="btn8" tipoBoton="futuro" label1="FUTURO" click="btn3_clickHandler(event)" total="{futuro}" label2="{txtFuturo}"/> 
				</s:Group>
			</s:Group>  
			
			
		</s:Group>
	</s:PopUpAnchor>
	
</s:Group>
