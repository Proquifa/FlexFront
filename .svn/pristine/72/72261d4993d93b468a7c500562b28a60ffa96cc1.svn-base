package mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.documentosRecibidos
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	
	import mx.collections.ArrayCollection;
	import mx.com.proquifa.proquifanet.rsl.vista.eventos.consultas.comun.documentosRecibidos.EventoDocumentosRecibidos;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.DocumentoRecibido;
	import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
	import mx.controls.Alert;
	
	import skins.catalogos.catalogoAlertas;

	public class ModeloDocumentosRecibidos extends EventDispatcher
	{
		public function ModeloDocumentosRecibidos(target:IEventDispatcher = null)
		{
			super(target);
		}
		
		private var _documento:DocumentoRecibido;
		private var _documentos:ArrayCollection;
		private var _clientes:ArrayCollection;
		private var _proveedores:ArrayCollection;
		private var _usuarios:ArrayCollection;
		
		/**
		 * Funcion de result de busqueda de documento por folio
		 */
		public function setDocumentoXFolio(documentos:ArrayCollection):void{
			
			if(documentos == null) return;
			_documentos = new ArrayCollection();
			for(var i:int = 0; i < documentos.length; i++){
				(documentos.getItemAt(i) as DocumentoRecibido).numFila = i + 1;
				if( (documentos.getItemAt( i ) as DocumentoRecibido).numero == null || (documentos.getItemAt( i ) as DocumentoRecibido).numero == "0" || (documentos.getItemAt( i ) as DocumentoRecibido).numero == "" ){
					(documentos.getItemAt( i ) as DocumentoRecibido).numero = "ND";
				}
				if( i == documentos.length - 1) documentos[i].finLista = true;
			}
			this._documentos = documentos ;
			dispatchEvent(new Event ("regresaDocumentosRecibidosConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="regresaDocumentosRecibidosConsultaDoctosRecibidos")]
		public function get documentoXFolio():ArrayCollection{
			if(_documentos!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaDocumentosRecibidosConsultaDoctosRecibidos");
				}
			}
			return this._documentos;
		}
		
		
		/**
		 * Funcion de result de búsqueda de documentos por avanzada 
		 */
		public function setDocumentosRecibidos(documentos:ArrayCollection):void{
				if(documentos == null) return;
				_documentos = new ArrayCollection();
			for(var i:int = 0; i < documentos.length; i++){
				(documentos.getItemAt(i) as DocumentoRecibido).numFila = i + 1;
				if( (documentos.getItemAt( i ) as DocumentoRecibido).numero == null || (documentos.getItemAt( i ) as DocumentoRecibido).numero == "0" || (documentos.getItemAt( i ) as DocumentoRecibido).numero == "" ){
					(documentos.getItemAt( i ) as DocumentoRecibido).numero = "ND";
				}
				if( i == documentos.length - 1) documentos[i].finLista = true;
			}
			//this._documentos = FuncionesEstaticas.getInstance().formatoObjetos( documentos ) ;
			this._documentos = documentos ;
			dispatchEvent(new Event ("regresaListaDocumentosRecibidosConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="regresaListaDocumentosRecibidosConsultaDoctosRecibidos")]
		public function get documentosRecibidos():ArrayCollection{
			if(_documentos!= null){
				if(actualizarEspera!= null && currentEnEspera){
					setControlDeBloqueoPantalla("terminaEspera",null,null,"regresaListaDocumentosRecibidosConsultaDoctosRecibidos");
				}
			}
			return this._documentos;
		} 
		
		/**
		 * Funcion de result de busqueda de ESAC'S
		 */
		public function UsuariosEncontrados(usuarios:ArrayCollection):void{
			this._usuarios = usuarios;
			dispatchEvent(new Event ("regresarUsuariosEncontradosConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="regresarUsuariosEncontradosConsultaDoctosRecibidos")]
		public function get regresarUsuarios():ArrayCollection{
			return this._usuarios;
		}
		
		/**
		 * Funcion que muestra tab garficas false- ocultar , true - muestra
		 */ 
		private var _tab:Boolean;
		public function setMostrarOcultaInfoGrafica(tab:Boolean):void{
			_tab = tab;
			dispatchEvent(new Event ("muestraOcultaTabGraficaConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="muestraOcultaTabGraficaConsultaDoctosRecibidos")]
		public function get mostrarOcultaInfoGrafica():Boolean{
			return this._tab;
		}
		
		/**
		 * Funcion para info de graficos secundarios 
		 */
		private var _grafico:ArrayCollection;
		public function setInfoGraficoSecundario(infoGrafico:ArrayCollection):void{
			for(var d:int = 0; d<infoGrafico.length ; d++){
				if(infoGrafico[d].tipo == 'OTROS') infoGrafico[d].tipo = 'Otros';
			}
			_grafico = infoGrafico;
			dispatchEvent(new Event ("consultaInfoGraficoConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="consultaInfoGraficoConsultaDoctosRecibidos")]
		public function get infoGraficoSecundario():ArrayCollection{
			return this._grafico;
			
		}
		
		/**
		 * Funcion para el tipo de filto de graficos secundarios 
		 */
		private var _filtro:String;
		public function setFiltroGraficoSecundario(tipo:String):void{
			_filtro = tipo;
			dispatchEvent(new Event ("consultaTipoFiltroInfoGraficoConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="consultaTipoFiltroInfoGraficoConsultaDoctosRecibidos")]
		public function get filtroGraficoSecundario():String{
			return this._filtro;
			
		}
		
		/**
		 * Función para control de graficos secundarios
		 */ 
		private var _control:Object;
		public function setControlGrafico(grafico:Object):void{
			_control = grafico;
			dispatchEvent(new Event ("obtenerControlGraficoConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="obtenerControlGraficoConsultaDoctosRecibidos")]
		public function get controlGrafico():Object{
			return this._control;
		}
		
		/**
		 * Función para control de Update graficos secundarios
		 */ 
		private var _update:Boolean;
		public function setControlUpdateGrafico(grafico:Boolean):void{
			_update = grafico;
			dispatchEvent(new Event ("obtenerControlUpdateGraficoConsultaDoctosRecibidos"));
		}
		
		[Bindable(event="obtenerControlUpdateGraficoConsultaDoctosRecibidos")]
		public function get controlUpdateGrafico():Boolean{
			return this._update;
		}
		/**
		 *	********************************************************Funcion que obtiene la  info para la gráfica ET y FT Secundaria ********************************************************
		 * 
		 */
		private var _infoVsETFTSecundaria:ArrayCollection;
		public function pasarInfoAGraficaETvsFT(array:ArrayCollection):void{
			if(array == null) return;
			_infoVsETFTSecundaria = array;
			dispatchEvent( new Event("pasaInfoaGraficaETvsFTSecundariaModeloDocumentosRecibidos") );
		}
		[Bindable(event="pasaInfoaGraficaETvsFTSecundariaModeloDocumentosRecibidos")]
		public function get enviarInfoAGraficaETvsFT():ArrayCollection{
			return _infoVsETFTSecundaria;
		}
/**
 * ************************************************************************************************************************
 * */
		private function verificarSiElExistenLosTiposDeEvento($tiposEventos:Array):Boolean
		{
			for (var i:int = 0; i < $tiposEventos.length; i++) 
			{
				if((EventoDocumentosRecibidos[$tiposEventos[i]])== null){
					return false;
				}
			}
			return true;
		}
		
		private var currentEnEspera:Boolean;
		private var actualizarEspera:Object = new Object;
		private var numServices:uint;
		private var numServicioCompletos:uint;
		private var serviciosCompletosDifKey:Object = new Object;
		public function setControlDeBloqueoPantalla(mensaje:String,$tiposEvento:Array,$idCurrentBottons:Array,$errorOrWhoFinish:Object):void
		{
			if(mensaje == "iniciarEspera"){
				if(Boolean(verificarSiElExistenLosTiposDeEvento($tiposEvento))){
					numServicioCompletos=0;
					numServices = 0;
					actualizarEspera = new Object();
					serviciosCompletosDifKey = new Object();
					numServices = $tiposEvento.length;
					currentEnEspera = true;
					actualizarEspera.isBusy = true;
					actualizarEspera["idCurrentButtons"] = $idCurrentBottons;
					alertaSingleton.show(catalogoAlertas.INICIAR_ESPERA,"","","","","","",null,true);
				}
			}else if (mensaje =="terminaEspera"){
				if(!serviciosCompletosDifKey.hasOwnProperty($errorOrWhoFinish as String)){
					numServicioCompletos++;
					serviciosCompletosDifKey[($errorOrWhoFinish as String)] = ($errorOrWhoFinish as String);
				}
				if(numServicioCompletos == numServices){
					alertaSingleton.remove(true);
					actualizarEspera.isBusy=false;
					currentEnEspera = false;
					numServices = 0;
				}
			}else if(mensaje =="error"){
				alertaSingleton.remove(true);
				currentEnEspera = false;
				alertaSingleton.showReintentar( $errorOrWhoFinish.toString(), catalogoAlertas.TIT_ERR);
				actualizarEspera.isBusy=false;
			}
			
			dispatchEvent( new Event("actualizaEsperaYBloqueoModeloConsultaCompras") );
		}
		[Bindable(event="actualizaEsperaYBloqueoModeloConsultaCompras")]
		public function get actualizarEstadoDeEsperaYBloqueo():Object
		{
			return actualizarEspera;
		}
		
		
		
		/**
		 * el Fault de busqueda de cientes y proveedores
		 */
		public function faultClientesProveedoresUsuarios(objeto:Object):void{
			alertaSingleton.showReintentar("Fallo al traer la información");
		}
		
		/**
		 * el Fault de busqueda de documento por folio
		 */
		public function faultDocumentoRecibido(objeto:Object):void{
			alertaSingleton.showReintentar("No hay coincidencias");
		}
		
		public function limpiarGrid(objeto:Object):void
		{
			_documentos = new ArrayCollection();
			dispatchEvent(new Event ("regresaDocumentosRecibidos"));
		}
		
		public function faultErrorPorFolio(error:Object):void{
			alertaSingleton.showReintentar( error.toString(), catalogoAlertas.TIT_ERR);
		}
	}
}