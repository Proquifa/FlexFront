<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="100%" height="100%"
		  xmlns:otros="skins.otros.*" 
		  xmlns:label="skins.skin.label.*" 
		  xmlns:textinput="skins.skin.textinput.*" 
		  xmlns:spacers="skins.skin.spacers.*" 
		  xmlns:chekbox="skins.skin.chekbox.*"
		  xmlns:pqNet="skins.botones.pqNet.*"
		  creationComplete="itemrenderer1_creationCompleteHandler(event)"
		  xmlns:lay="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.itemRenderer.empresasGeneral.*" 
		  xmlns:combobox="skins.skin.combobox.*" 
		  >
	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientesContactos;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.soliciud.EventoSolicitarVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.ClienteCuadroContacto;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.ClientePanelContactosAnimado;
			import mx.events.FlexEvent;
			import mx.geom.TransformOffsets;
			import mx.utils.StringUtil;
			
			import spark.components.Group;
			import spark.events.IndexChangeEvent;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotoneras;
			import skins.catalogos.catalogoIconosEtiquetas;
			
			
			private var currentAncho:Number;
			private var isShowHabilitados:Boolean = true;
			[Bindable]	private var _listaSemestre:ArrayCollection = new ArrayCollection([{valor:"Enero - Junio",llave:1},{valor:"Julio - Diciembre",llave:2}]);
			
			private var nombreCliente:String;
			private var idCliente:Number;
			public function recibirNombreIdCliente(idCliente:Number,nombreCliente:String):void
			{
				this.nombreCliente = nombreCliente;
				this.idCliente = idCliente;
			}
			
			private var _listaDificultad:ArrayCollection = new ArrayCollection([
				{valor:"-- NINGUNO --",llave:0,numero:0},
				{valor:"COMPLICADO",llave:1,numero:5},
				{valor:"MUY DIFÍCIL",llave:2,numero:4},
				{valor:"DIFÍCIL",llave:3,numero:3},
				{valor:"FÁCIL",llave:4,numero:2},
				{valor:"MUY FÁCIL",llave:5,numero:1}]);
			
			private var _listaMantenimiento:ArrayCollection = new ArrayCollection([
				{valor:"-- NINGUNO --",llave:0,numero:0},
				{valor:"MUY ALTO",llave:1,numero:5},
				{valor:"ALTO",llave:2,numero:4},
				{valor:"MEDIO",llave:3,numero:3},
				{valor:"BAJO",llave:4,numero:2},
				{valor:"MUY BAJO",llave:5,numero:1}]);
			
			private var _listaMeses:ArrayCollection = new ArrayCollection([
				{valor:"--",llave:0,numero:0},
				{valor:"ENERO",llave:1,numero:1},
				{valor:"FEBRERO",llave:2,numero:2},
				{valor:"MARZO",llave:3,numero:3},
				{valor:"ABRIL",llave:4,numero:4},
				{valor:"MAYO",llave:5,numero:5},
				{valor:"JUNIO",llave:6,numero:6},
				{valor:"JULIO",llave:7,numero:7},
				{valor:"AGOSTO",llave:8,numero:8},
				{valor:"SEPTIEMBRE",llave:9,numero:9},
				{valor:"OCTUBRE",llave:10,numero:10},
				{valor:"NOVIEMBRE",llave:11,numero:11},
				{valor:"DICIEMBRE",llave:12,numero:12}]);
			
			private var _listaAno:ArrayCollection = new ArrayCollection();
			
			public function llenarAnos():void{
				var fecha:Date=new Date();
				var objet0:Object = new Object();
				objet0.valor = "--";
				objet0.llave= 0;
				objet0.numero=0;
				_listaAno.addItem(objet0);
				for (var i:int=fecha.getFullYear(); i>=1930; i--) {
					var objet:Object = new Object();
					objet.valor = i;
					objet.llave= i;
					objet.numero=i;
					_listaAno.addItem(objet);
				}
			}
			
			private var _listaDias:ArrayCollection = new ArrayCollection();
			
			public function llenarDias(cuantosDias):void{
				_listaDias.removeAll();
				var objet0:Object = new Object();
				objet0.valor = "--";
				objet0.llave= 0;
				objet0.numero=0;
				_listaDias.addItem(objet0);
				for(var i:int= 1; i<=cuantosDias; i++) {
					var objet:Object = new Object();
					objet.valor = i;
					objet.llave= i;
					objet.numero=i;
					_listaDias.addItem(objet);
				}
			}
			
			public	function cuantosDias(mes:int, anyo:int):int
			{
				var cuantosDias:int = 31;
				if (mes == 4 || mes == 6 || mes == 9 || mes == 11)
					cuantosDias = 30;
				if (mes == 2 && (anyo/4) != Math.floor(anyo/4))
					cuantosDias = 28;
				if (mes == 2 && (anyo/4) == Math.floor(anyo/4))
					cuantosDias = 29;
				return cuantosDias;
			}
			
			public function llenarInfo():void
			{
				isShowHabilitados = (this.owner.parent as ClientePanelContactosAnimado).isCurrentHabilitados;
			}
			
			private var myXForm:TransformOffsets;
			private function crearCubo($item:*,$id:int):Group
			{
				var content:ClienteCuadroContacto = new ClienteCuadroContacto;
				content.id = "button_"+$id;
				myXForm = new TransformOffsets;
				content.postLayoutTransformOffsets = myXForm;
				content.isHabilitado = isShowHabilitados;
				
				
				if(($item as Object).hasOwnProperty("CuboAgregar")){
					
					content.tipoDeCubo = "agregar";
				}else{
					content.tipoDeCubo = "contacto";
					
					if($item.titulo != null && StringUtil.trim($item.titulo).length > 0 && $item.titulo != "ND")
						content.nombreContacto = $item.titulo + " " + $item.nombre;
					else
						content.nombreContacto = $item.nombre;
					
					content.item = $item;
					content.area = $item.departamento;
					content.puesto = $item.puesto;
					content.pqConnect = $item.usuarioPConnect;
					
					
					content.email =$item.EMail; 
					content.contatenarTel1($item.telefono,$item.extension1);
					content.contatenarTel2($item.telefonoN,$item.extension2);
					
				}
				
				return content;
			}
			
			private var lastIdButtonSelected:String;
			private var lastButtomSelected:Object;
			[Bindable]
			private var _contacto:Contacto; 
			
			protected function btnAgregar_clickHandler(event:MouseEvent):void
			{
				var evtAgrega:EventoSolicitarVisita = new EventoSolicitarVisita(EventoSolicitarVisita.GUARDAR_CONTACTO_NUEVO);
				
				evtAgrega.contacto = new Contacto();
				evtAgrega.tipo = 'inserta';
				evtAgrega.contacto.habilitado = true;
				evtAgrega.contacto.tipo = 'Clientes';
				evtAgrega.contacto.idContacto = 0;
				evtAgrega.contacto.idEmpresa = 0;
				
				//Faltan
				evtAgrega.contacto.empresa = nombreCliente;
				evtAgrega.contacto.idEmpresa = idCliente;
				
				if( txtNombre.text == '' ){
					alertaSingleton.show( 'Debe establecer el nombre del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtApellido.text == '' ){
					alertaSingleton.show( 'Debe establecer el apellido del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtTitulo.text == ''){
					alertaSingleton.show( 'Debe establecer el título del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtPuesto.text == ''){
					alertaSingleton.show( 'Debe establecer el puesto del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtDepto.text == ''){
					alertaSingleton.show( 'Debe establecer el departamento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtTel.text == ''){
					alertaSingleton.show( 'Debe establecer el t1 del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtEmail.text == ''){
					alertaSingleton.show( 'Debe establecer el e-Mail del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( cmbDiaFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Dia de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				else
				{
					if( cmbDiaFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Dia de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbMesFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Mes de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbMesFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Mes de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbAnoFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Año de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbAnoFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Año de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbMesLD.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Mes de Fecha en la que empezó a laborar el contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbMesLD.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Mes de Fecha en la que empezó a laborar del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbAnoLD.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Año de Fecha  la que empezó a laborar el contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbAnoLD.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Año de Fecha en la que empezó a laborar del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				
				var evt:EventoSolicitarVisita = new EventoSolicitarVisita(EventoSolicitarVisita.OBTENER_CLIENTES);
				evt.user = DatosGlobales.getInstance()._usuario;
				evt.habilitado = 1;
				dispatchEvent( evt );
				
				evtAgrega.contacto.nombre = txtNombre.text.toUpperCase();
				evtAgrega.contacto.apellidos = txtApellido.text.toUpperCase();
				evtAgrega.contacto.titulo = txtTitulo.text.toUpperCase();
				evtAgrega.contacto.departamento = txtDepto.text.toUpperCase();
				evtAgrega.contacto.dificultad = cmbDificultad.selectedItem.numero;
				evtAgrega.contacto.mantenimiento = cmbMantenimiento.selectedItem.numero;
				evtAgrega.contacto.EMail = txtEmail.text;
				evtAgrega.contacto.fax = txtFax.text.toUpperCase();
				evtAgrega.contacto.puesto = txtPuesto.text.toUpperCase();
				evtAgrega.contacto.telefono = txtTel.text.toUpperCase();
				evtAgrega.contacto.telefonoN = txtTel2.text.toUpperCase();
				evtAgrega.contacto.extension1 = txtExt1.text.toUpperCase();
				evtAgrega.contacto.extension2 = txtExt2.text.toUpperCase();
				evtAgrega.contacto.celular = txtMovil.text.toUpperCase();
				evtAgrega.contacto.antiguedadMes = cmbMesLD.selectedItem.numero;
				evtAgrega.contacto.antiguedadAnio = cmbAnoLD.selectedItem.numero;
				var fechaN:Date=new Date();
				fechaN.date = cmbDiaFN.selectedItem.numero;
				fechaN.month = cmbMesFN.selectedItem.numero;
				fechaN.fullYear = cmbAnoFN.selectedItem.numero;
				evtAgrega.contacto.fechaNacimiento = fechaN;
				dispatchEvent(evtAgrega);
				
				dispatchEvent( new Event('aceptarPopUP',true));
			}
			
			protected function interacionConLosTextImputs_focusOutHandler(event:FocusEvent):void
			{
				
				if(event.currentTarget != null){
					
					event.stopImmediatePropagation();
					event.preventDefault();
					
					switch(event.currentTarget.id)
					{
						//a donde se va al darle TAB
						case "txtNombre":{txtApellido.setFocus();break;}
						case "txtApellido":{cmbDiaFN.setFocus();break;}
						case "cmbDiaFN":{cmbMesFN.setFocus();break;}
						case "cmbMesFN":{cmbAnoFN.setFocus();break;}
						case "cmbAnoFN":{txtTitulo.setFocus();break;}	
						case "txtTitulo":{txtPuesto.setFocus();break;}
						case "txtPuesto":{txtDepto.setFocus();break;}
						case "txtDepto":{cmbMesLD.setFocus();break;}
						case "cmbMesLD":{cmbAnoLD.setFocus();break;}
						case "cmbAnoLD":{txtEmail.setFocus();break;}
						case "txtEmail":{txtTel.setFocus();break;}
						case "txtTel":{txtExt1.setFocus();break;}
						case "txtExt1":{txtTel2.setFocus();break;}
						case "txtTel2":{txtExt2.setFocus();break;}
						case "txtExt2":{txtMovil.setFocus();break;}
						case "txtMovil":{txtFax.setFocus();break;}
						case "txtFax":{cmbDificultad.setFocus();break;}
						case "cmbDificultad":{cmbMantenimiento.setFocus();break;}
							/*case "cmbMantenimiento":{btnModificar.setFocus();break;}*/
						case "btnModificar":{txtNombre.setFocus();break;}
					}
				}
			}
			
			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				cmbDificultad.dataProvider = _listaDificultad;
				cmbMantenimiento.dataProvider = _listaMantenimiento;
				llenarAnos();
				llenarDias(31);
				cmbAnoLD.dataProvider = _listaAno;
				cmbMesLD.dataProvider = _listaMeses;
				cmbAnoFN.dataProvider = _listaAno;
				cmbMesFN.dataProvider = _listaMeses;
				cmbDiaFN.dataProvider = _listaDias;
				cmbDificultad.selectedIndex = 0;
				cmbMantenimiento.selectedIndex = 0;
				cmbAnoFN.selectedIndex=0;
				cmbMesFN.selectedIndex=0;
				cmbDiaFN.selectedIndex=0;
				cmbAnoLD.selectedIndex=0;
				cmbMesLD.selectedIndex=0;
				
			}
			
			protected function diasXmes(event:IndexChangeEvent):void
			{
				var diaSelec:int = 1;
				if(cmbDiaFN.selectedItem != undefined)
				{
					diaSelec=cmbDiaFN.selectedItem.valor;
				}
				
				if(cmbAnoFN.selectedItem == undefined)
				{
					var fecha:Date=new Date();
					llenarDias(cuantosDias(cmbMesFN.selectedItem.numero,fecha.fullYear));
					cmbDiaFN.dataProvider = _listaDias;
					if(diaSelec>(cuantosDias(cmbMesFN.selectedItem.numero,fecha.fullYear)))
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor('0','numero');
					}
					else
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor(diaSelec.toString(),'numero');
					}
				}
				else
				{
					llenarDias(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor));
					cmbDiaFN.dataProvider = _listaDias;
					if(diaSelec>(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor)))
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor('0','numero');
					}
					else
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor(diaSelec.toString(),'numero');
					}
				}
			}
			
			protected function cmbAnoFN_changeHandler(event:IndexChangeEvent):void
			{
				var diaSelec:int = 1;
				if(cmbDiaFN.selectedItem != undefined)
				{
					diaSelec=cmbDiaFN.selectedItem.valor;
				}
				
				if(cmbMesFN.selectedItem != undefined)
				{
					llenarDias(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor));
					cmbDiaFN.dataProvider = _listaDias;
					if(diaSelec>(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor)))
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor('1','numero');
					}
					else
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor(diaSelec.toString(),'numero');
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%" id="grpTodosModificar" height="100%" visible="true" >
		<!--<s:Spacer width="{paddingLeft}"/>-->
		<!--<s:SkinnableContainer  id="grpModificar" height="100%" width="100%" 
		skinClass="skins.skin.contenedores.CatalogoProveedores.ContenedorEditarContactoSkin">--> 
		
		<s:Group id="grpContenidoModificar" width="100%" height="600" visible="true"> <!--FIX VISIBLE FALSE-->
			<s:Rect width="100%" height="100%">
				<s:fill >
					<s:SolidColor color="#2a2a2a" />
				</s:fill>
			</s:Rect>
			
			<s:HGroup width="100%" height="100%" paddingTop="15" paddingBottom="15" paddingLeft="8" paddingRight="8" gap="3">
				<spacers:spacerVerticalPqNet/>
				<s:VGroup width="100%" paddingTop="15">
					<s:HGroup  width="100%" verticalAlign="middle">
						<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_proveedoresContacto }"/>
						<label:TextoBankGothic_18_Blanco text="Contacto"/>
					</s:HGroup>
					<s:HGroup width="100%" >
						<s:VGroup height="100%" horizontalAlign="left" gap="7" paddingTop="8">
							<label:TextoBankGothic_16_Blanco text="Nombres: "/>
							<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.nombre }" id="txtNombre" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
							<label:TextoBankGothic_16_Blanco text="Apellidos: "/>
							<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.apellidos }" id="txtApellido" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
							<label:TextoBankGothic_16_Blanco text="Fecha de Nacimiento: "/>
							<s:HGroup width="100%" height="100%" >
								<combobox:comboNegroDefaultPQNet width="64" height="100%"  id="cmbDiaFN" selectedIndex="{cmbDiaFN.seleccionarValor(_contacto.fechaNacimiento.date.toString(),'numero')}" fontStyle="normal"
																 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase" restrict="0-5" maxChars="1" />
								<combobox:comboNegroDefaultPQNet width="150" id="cmbMesFN"  selectedIndex="{cmbMesFN.seleccionarValor(_contacto.fechaNacimiento.month.toString(),'numero')}" fontStyle="normal"
																 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" change="diasXmes(event)"/>
								<combobox:comboNegroDefaultPQNet width="80" id="cmbAnoFN"  selectedIndex="{cmbAnoFN.seleccionarValor(_contacto.fechaNacimiento.fullYear.toString(),'numero')}" fontStyle="normal"
																 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" change="cmbAnoFN_changeHandler(event)"/>
							</s:HGroup>
							<label:TextoBankGothic_16_Blanco text="Título: "/>
							<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.titulo }" id="txtTitulo" maxChars="5" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
							<label:TextoBankGothic_16_Blanco text="Puesto: "/>
							<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.puesto }" id="txtPuesto" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
							<label:TextoBankGothic_16_Blanco text="Departamento: "/>
							<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.departamento }" id="txtDepto" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
							<label:TextoBankGothic_16_Blanco text="Laborando Desde: "/>
							<s:HGroup width="100%" >
								<combobox:comboNegroDefaultPQNet width="218"  id="cmbMesLD" selectedIndex="{cmbMesLD.seleccionarValor(_contacto.antiguedadMes.toString(),'numero')}" fontStyle="normal"
																 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase" restrict="0-5" maxChars="1"/>
								<combobox:comboNegroDefaultPQNet width="80" id="cmbAnoLD"  selectedIndex="{cmbAnoLD.seleccionarValor(_contacto.antiguedadAnio.toString(),'valor')}" fontStyle="normal"
																 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)"/>
								
							</s:HGroup>
							<s:HGroup id="grpPconnect" width="100%" horizontalAlign="left" paddingTop="25" >
								<s:Button skinClass="skins.botones.pqNet.skinPConnect" id="btnPconnect" visible="false" />
							</s:HGroup>
							
						</s:VGroup>
						
						<s:HGroup height="100%" width="55">
							<s:Spacer height="100%" width="55"/>
						</s:HGroup>
						
						
						<s:VGroup height="100%" horizontalAlign="left" gap="7" paddingTop="8">
							<label:TextoBankGothic_16_Blanco text="e-Mail:"/>
							<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.EMail }" id="txtEmail" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" />
							<s:HGroup width="100%" >
								<s:VGroup>
									<label:TextoBankGothic_16_Blanco text="Telefono1:"/>
									<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.telefono}" id="txtTel" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								</s:VGroup>
								<s:VGroup>
									<label:TextoBankGothic_16_Blanco text="Ext:"/>
									<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.extension1}" id="txtExt1" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								</s:VGroup>
							</s:HGroup>
							<s:HGroup width="100%" >
								<s:VGroup>
									<label:TextoBankGothic_16_Blanco text="Telefono2:"/>
									<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.telefonoN}" id="txtTel2" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								</s:VGroup>
								<s:VGroup>
									<label:TextoBankGothic_16_Blanco text="Ext:"/>
									<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.extension2}" id="txtExt2" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								</s:VGroup>
							</s:HGroup>
							<label:TextoBankGothic_16_Blanco text="Movil:"/>
							<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.celular}" id="txtMovil" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
							<label:TextoBankGothic_16_Blanco text="Fax:"/>
							<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.fax}" id="txtFax" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
							<label:TextoBankGothic_16_Blanco text="Dificultad: "/>
							<combobox:comboNegroDefaultPQNet width="100%"  id="cmbDificultad" selectedIndex="{cmbDificultad.seleccionarValor(_contacto.dificultad,'numero')}" fontStyle="normal"
															 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase" restrict="0-5" maxChars="1"/>
							<label:TextoBankGothic_16_Blanco text="Mantenimiento: "/>
							<combobox:comboNegroDefaultPQNet width="100%" id="cmbMantenimiento"  selectedIndex="{cmbMantenimiento.seleccionarValor(_contacto.mantenimiento,'numero')}" fontStyle="normal"						 
															 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)"/>
							
						</s:VGroup>
						
					</s:HGroup>
					<s:HGroup width="100%" horizontalAlign="right" paddingTop="-37" paddingRight="0">
						
						<!--<pqNet:botonPqNetLargo id="btnModificar" label="Modificar" click="btnModificar_clickHandler(event)" chromeColor="0x{ catalogoColores.LABEL_AZUL_TENUE}"/>-->
						
						<pqNet:botonPqNetLargo id="btnAgregar" label="Agregar" click="btnAgregar_clickHandler(event)" chromeColor="0x{ catalogoColores.LABEL_AZUL_TENUE}"/>							
						
					</s:HGroup>
				</s:VGroup> 
				<spacers:spacerVerticalPqNet/>
			</s:HGroup>
			
			<s:Image id="imgOcultarModificar" right="10" top="10" source="{catalogoIconosBotoneras.getInstance().botoncerrar}" click="dispatchEvent( new Event('aceptarPopUP',true));"/>
			
		</s:Group>
		<!--</s:SkinnableContainer>-->
	</s:HGroup>
</s:VGroup>
