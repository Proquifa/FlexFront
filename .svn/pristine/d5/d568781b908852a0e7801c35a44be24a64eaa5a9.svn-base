<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:menuFlotante="skins.skin.menuFlotante.*" 
		  xmlns:otros="skins.otros.*"
		  creationComplete="inicio()"
		  width="100%" 
		  >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.carteras.EventoCatClientes_Carteras;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.clientes.EventoTableroClientes;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.StringFunciones;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			private var _clickeado:String;
			private var clickeado:String;
			private var _currentIndex:Number;
			private var _botonActual:String;
			private var _todos:Boolean;
			private var _seleccion:String;
			private var _valorRespaldo:ArrayCollection;
			private var _arreglo:ArrayCollection;
			private var _universoNew:ArrayCollection;
			private var _sql:Query;
			public var busqueda:String;
			private var _animacionesActivas:Number=0;
			private var _subMenu:String;
			
			private var arregloAltos:Array = new Array (
				'AA+','AA','AM','AB');
			
			private var arregloMedios:Array = new Array (
				'MA','MM','MB');
			
			public function inicio():void
			{
				addEventListener("escuchaSubMenuBusqueda",busquedaSubMenu,false,0,true);
				addEventListener("terminoAnimacion",terminoAnimacion,false,0,true);
				addEventListener("empezoAnimacion",empezoAnimacion,false,0,true); 
				btn1.arrayValores = arregloAltos;
				btn2.arrayValores = arregloMedios;
				_botonActual = clickeado = "analisis_todos";
				seleccionarBoton("analisis_todos");
				_todos = true;
			}
			
			protected function clickBotoneraBusqueda(event:Event):void
			{
				
				if(_clickeado != event.currentTarget.tipoBoton)
				{
					clickeado = event.currentTarget.tipoBoton;
					seleccionarBoton(clickeado);
				}  	
			}
			
			private function empezoAnimacion(evt:Event):void
			{
				_animacionesActivas++;
			}
			
			private function terminoAnimacion(evt:Event):void
			{
				_animacionesActivas = _animacionesActivas - 1;
				if(_clickeado != _botonActual && _animacionesActivas == 0)
				{
					seleccionarBoton(_botonActual);
				} 
			}
			
			private function seleccionarBoton($boton:String):void
			{
				switch($boton)
				{
					case "analisis_todos":
					{
						_currentIndex = 0;
						if(!_todos)
						{
							_todos = true;
							deseleccionarBotones(_currentIndex);
							sendClientesPadre(_valorRespaldo);
							_universoNew = ObjectUtil.copy(_arreglo) as ArrayCollection;
						} 
						deseleccionarBotones(_currentIndex);
						_botonActual =_clickeado = $boton;
						btn0.seleccionar();
						break;
					}
					case "analisis_altos":
					{
						_currentIndex = 1;
						_seleccion = "altos";
						break;
					}
					case "analisis_medios":
					{
						_currentIndex = 2;
						_seleccion = "medios";
						break;
					}
					case "analisis_bajos":
					{
						_currentIndex = 3;
						deseleccionarBotones(_currentIndex);
						btn3.seleccionar();
						_seleccion = "bajos";
						_botonActual = _clickeado = $boton
						obtenerPunteros("bajos");
						break;
					}
					/* case "analisis_nuevos":
					{
						_currentIndex = 4;
						deseleccionarBotones(_currentIndex);
						btn4.seleccionar();
						_seleccion = "nuevos";
						_botonActual = _clickeado = $boton
						hacerBusqueda();
						break;
					} */
					case "analisis_distribuidores":
					{
						_currentIndex = 5;
						deseleccionarBotones(_currentIndex);
						btn5.seleccionar();
						_seleccion = "distribuidor";
						_botonActual = _clickeado = $boton
						obtenerPunteros("distribuidor");
						break;
					}
				}
			}
			
			private function deseleccionarBotones($index:Number):void
			{
				switch($index)
				{
					case 0:
					{
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						//btn4.deseleccionar();
						btn5.deseleccionar();
						break;
					}
					case 1:
					{
						btn0.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						//btn4.deseleccionar();
						btn5.deseleccionar();
						break;
					}
					case 2:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn3.deseleccionar();
						//btn4.deseleccionar();
						btn5.deseleccionar();
						break;
					}
					case 3:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn2.deseleccionar();
						//btn4.deseleccionar();
						btn5.deseleccionar();
						break;
					}
					case 4:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						btn5.deseleccionar();
						break;
					}
					case 5:
					{
						btn0.deseleccionar();
						btn1.deseleccionar();
						btn2.deseleccionar();
						btn3.deseleccionar();
						//btn4.deseleccionar();
						break;
					}
				}
			}
			
			private function obtenerPunteros($tipo:String):void
			{
				var tmp:Array = new Array();
				var fin:Array = new Array();
				switch($tipo)
				{
					case "bajos":
					{
						fin = _sql.getPunteros([null,"bajo"]);
						break;
					}
					case "distribuidor":
					{
						fin = _sql.getPunteros([null,"distribuidor"]);
						break;
					}
				}
				_universoNew = _sql.armarLista(fin);
				_valorRespaldo = ObjectUtil.copy(_universoNew) as ArrayCollection;
				sendClientesPadre(_universoNew);
			}
			
			public function set recibeClientesDisponibles($array:ArrayCollection):void
			{
				if($array == null)
					return;
				
				_todos = false;
				_valorRespaldo = ObjectUtil.copy($array) as ArrayCollection;
				_universoNew = ObjectUtil.copy($array) as ArrayCollection;
				_arreglo = new ArrayCollection();
				_arreglo = ObjectUtil.copy($array) as ArrayCollection;
				_sql = new Query(_arreglo,["nombre","nivelIngreso"],true);
			}
			
			private function hacerBusqueda():void
			{
				if(_sql == null)
					return;
				
				
				var arrayTemp:Array = new Array();
				var nivel:String = _seleccion == "" ? null:_seleccion;
				
				var valor:String = nivel;
				if (valor == "aa+")
					valor = "aaplus";
				if (valor == "dist")
					valor = "distribuidor";
				
				/* arrayTemp = _sql.getPunteros([null,valor]);
				_universoNew = _sql.armarLista(arrayTemp); */
				
				if(StringUtil.trim(textBusqueda.text).length > 0 )
				{
					var sqlBusqueda:Query;
					var punteroCliente:Array = new Array();
					var nom:String;
					var parecidos:Array = new Array();
					var arreTemp:Array = new Array();
					var arregloTe:ArrayCollection = new ArrayCollection();
					var _valoresActuales:ArrayCollection = ObjectUtil.copy(_universoNew.length > 0 ? _universoNew:_arreglo) as ArrayCollection;
					
					sqlBusqueda = new Query(_valoresActuales,["nombre"],true);
					punteroCliente = new Array();
					nom = StringUtil.trim(textBusqueda.text).toLowerCase();
					parecidos = sqlBusqueda.getCampoLikeLowerCase("nombre",nom);
					
					if (parecidos.length > 0)
					{
						for ( var i:int = 0; i<parecidos.length; i++)
						{
							punteroCliente.push(sqlBusqueda.getPunteros([parecidos[i],null]));
						}
					}
					
					//  ---------------------------------- ORDENA Y ELIMINA REPETIDOS  ----------------------------------
					arreTemp = generateArrayBiToArrayUni(punteroCliente);
					arregloTe = sqlBusqueda.armarLista(StringFunciones.removerDuplicados(arreTemp));
					//_universoNew = arregloTe;
					
				}
				sendClientesPadre(arregloTe);
			}
			
			private function generateArrayBiToArrayUni($collection:Array):Array
			{
				var arreTemp:Array = new Array()
				for ( var i:int=0;i<$collection.length;i++)
				{
					if ($collection[i].length > 1)
					{
						for(var j:int=0; j<$collection[i].length; j++)
						{
							arreTemp.push($collection[i][j]);
						}
					}
					else
						arreTemp.push($collection[i][0]);
				}
				return arreTemp;
			}
			
			private function sendClientesPadre($arreglo:ArrayCollection):void
			{
				var evt:EventoCatClientes_Carteras = new EventoCatClientes_Carteras(EventoCatClientes_Carteras.ENVIAR_NUEVO_UNIVERSO_BUSQUEDA);
				evt.universoNew = $arreglo;
				dispatchEvent(evt);
			}
			
			private function busquedaSubMenu(evt:Event):void
			{
				var menu:String="";
				var menuArray:Array = new Array();
				var nuevoUniverso:ArrayCollection = new ArrayCollection();
				
				if(_currentIndex == 1)
				{
					btn1.seleccionar();
					_botonActual = _clickeado = clickeado;
					textBusqueda.text = "";     
					deseleccionarBotones(_currentIndex);
					_subMenu = menu = StringFunciones.noAccent(btn1.subMenuSelected.toLowerCase());
					if (menu == "aa+")
						menu = "aaplus";
					if (menu == "dist")
						menu = "distribuidor";
					menuArray = _sql.getPunteros([null,menu]);
					nuevoUniverso = _sql.armarLista(menuArray);
					_universoNew = ObjectUtil.copy(nuevoUniverso) as ArrayCollection;
					sendClientesPadre(nuevoUniverso);
					_todos = false;
				}
				if(_currentIndex == 2)
				{
					btn2.seleccionar();
					_botonActual = _clickeado = clickeado;
					textBusqueda.text = "";
					deseleccionarBotones(_currentIndex);
					_subMenu = menu = StringFunciones.noAccent( btn2.subMenuSelected.toLowerCase());
					menuArray = _sql.getPunteros([null,menu]);
					nuevoUniverso = _sql.armarLista(menuArray);
					_universoNew = ObjectUtil.copy(nuevoUniverso) as ArrayCollection;
					sendClientesPadre(nuevoUniverso);
					_todos = false;
				}
			}
			
			private	var temporizador:Timer;
			private function filtroPorTexto():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaHab:ArrayCollection = new ArrayCollection();
				var _listaDeshab:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _universoNew ) as ArrayCollection;
				
				if (StringUtil.trim(textBusqueda.text).length > 0 )
				{
					if(temporizador == null)
					{
						temporizador = new Timer(500,0);
						temporizador.addEventListener(TimerEvent.TIMER,filtar,false,0,true);
					}
					if(temporizador)
					{
						if(temporizador.running)
						{
							temporizador.reset();
							temporizador.start();
						}
						else
						{
							temporizador.start();
						}
					}
				}
				else
				{
					sendClientesPadre(_universoNew);
				}
			}
			
			private function filtar(event:TimerEvent):void
			{
				temporizador.stop();
				if (StringUtil.trim( textBusqueda.text).length > 0)
				{
					hacerBusqueda();
				}
				else
				{
					sendClientesPadre(_universoNew);
				}
			}
			
			public function limpiarBusqueda():void
			{
				textBusqueda.text="";
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="45" gap="0" >
		
		<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="10" paddingTop="15" paddingBottom="15">
			<s:TextInput fontStyle="normal" id="textBusqueda" width="350" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" 
						 prompt="Clientes" text="" change="filtroPorTexto()" />
		</s:VGroup>
		
		<otros:division width="100%" />
		<s:Group width="100%" horizontalCenter="1" >
			<s:layout>
				<s:HorizontalLayout gap="0" horizontalAlign="center"/>
			</s:layout>
			<menuFlotante:OverLayerMenuAnalisis id="btn0" tipoBoton="analisis_todos" click="clickBotoneraBusqueda(event)" maxWidth="290"/>
			<menuFlotante:OverLayerMenuAnalisis id="btn1" tipoBoton="analisis_altos" click="clickBotoneraBusqueda(event)" maxWidth="290"/>
			<menuFlotante:OverLayerMenuAnalisis id="btn2" tipoBoton="analisis_medios" click="clickBotoneraBusqueda(event)" maxWidth="290"/>
			<menuFlotante:OverLayerMenuAnalisis id="btn3" tipoBoton="analisis_bajos" click="clickBotoneraBusqueda(event)" maxWidth="290"/>
			<menuFlotante:OverLayerMenuAnalisis id="btn5" tipoBoton="analisis_distribuidores" click="clickBotoneraBusqueda(event)" maxWidth="290"/>
		</s:Group>
	</s:VGroup>
	
</s:VGroup>
