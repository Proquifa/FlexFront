<?xml version="1.0" encoding="utf-8"?>
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  skinClass="skins.botones.pqNet.skinBotonPqNetLargo"
		  focusColor="0x257d92"
		  creationComplete="fillColorBase()" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!--el color focusColor="0x257d92"-->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.states.State;
			
			import spark.filters.DropShadowFilter;
			
			import skins.catalogos.catalogoIconosBotones;
			import skins.catalogos.catalogoIconosGrid;
			
			[Bindable]	public var colorBase:String=""; //="ea00ff";
			[Inspectable(category="General", enumeration="true,false", defaultValue="false")]
			[Bindable]	public var gradientePqnet:Boolean = false;
			[Inspectable(category="General", enumeration="agregar,agrupar,amparo,canalizar,contactos,editar,editar_lapiz,editar_lapizRojo,flechaBlancaIzquierda,flechaArribaEnCirculo,guardar,globoAgregaNota,inspector,palomita,requisicion,requisitar,todo,cargar,proforma,registrarpeque,triangulo,seleccionar,iconosalir,iconoasociar,globito,marcadoresAgrupar,ojoblanco,enviarblanco,chart,tache,tacheRojo,infopopup,ojomordor,exportar,flechaabajo,iconoActualizarNormal,agregarPequenio,bote_basura,lapiz,ico_cartera,recargarImg,recargar_negro,recargar_sinFondo", defaultValue="agregar")]
			[Bindable]	public var icono:String="";
			[Bindable]	public var botonRedondo:Boolean= false;
			[Bindable]	public var sombraPq:Boolean= false;
			[Bindable]	public var botonGris:Boolean= false;
			[Bindable]	public var sizeFuente:String = "";
			[Inspectable(category="General",enumeration="true,false",defaultValue="false")]
			
			private var _isBusyActualizar:Boolean = false;
			public var isCurrentButtonActualizar:Boolean = false;
			
			private var _rendererPq:String = "";
			private var _linkButton:Boolean = false;
			
			[Bindable]private var _colorOver:String ="";
			private var colorGradiente:String ="";
			
			private var rojoInicio:uint = new uint();
			private var verdeInicio:uint=new uint();
			private var azulInicio:uint =new uint();
			
			private var rojoFinal:String;
			private var verdeFinal:String;
			private var azulFinal:String;
			
			public function get linkButton():Boolean
			{
				return _linkButton;
			}
			
			public function set linkButton(value:Boolean):void
			{
				_linkButton = value;
			}
			
			[Inspectable(category="General", enumeration="enfoque,enfoquedown,espantosaequis,direccion,direcciondown,enfoquedownNaranja,render_engraneGris20x20", defaultValue="enfoque")]
			[Bindable]
			public function get rendererPq():String
			{
				if( _rendererPq != "" ) skinBotonPqNetLargo(skin).icono.source = catalogoIconosGrid.getInstance()[_rendererPq];
				return _rendererPq;
			}
			
			public function set rendererPq(value:String):void
			{
				_rendererPq = value;
				if( value != "" && skin != null ) skinBotonPqNetLargo(skin).icono.source = catalogoIconosGrid.getInstance()[_rendererPq];
			}
			
			private function fillColorBase():void{
				if( rendererPq != "" ){
					skinBotonPqNetLargo(skin).rectFondo.includeInLayout = skinBotonPqNetLargo(skin).rectFondo.visible = false; 
					skinBotonPqNetLargo(skin).icono.source = catalogoIconosGrid.getInstance()[rendererPq];
					skinBotonPqNetLargo(skin).labelDisplay.includeInLayout = skinBotonPqNetLargo(skin).labelDisplay.visible = false;
					skinBotonPqNetLargo(skin).width = skinBotonPqNetLargo(skin).icono.width; 
					return;
				}
				// BOTON GRIS
				if( botonGris ){
					colorBase = "0xf3f3f3";
					gradientePqnet = true;
					skinBotonPqNetLargo(skin).labelDisplay.setStyle( "color","0x000000" ); 
				}
				
				// TAMAÃ‘O FUENTE LABEL
				if (sizeFuente != "")
				{
					skinBotonPqNetLargo(skin).labelDisplay.setStyle("fontSize",sizeFuente);
				}
				///			COLOR
				if(this.colorBase != ""){
					if(colorBase.indexOf('#') != -1){
						colorBase = colorBase.substr(1,6);
					}else if(colorBase.indexOf('0x') != -1){
						colorBase = colorBase.substr(2,6);
					}
					rojoInicio = convertStringToUint( colorBase.substr(0,2) );
					verdeInicio = convertStringToUint( colorBase.substr(2,2) );
					azulInicio = convertStringToUint( colorBase.substr(4,2) );
					/**
					 * separo el color en 3 pares, luego convierto a decimal cada par y les resto 30, 
					 * si el resultado es menor de 0 los igualo a cero para evitar numeros negativos
					 */
					/*if(this.colorOver == "")
					{*/
						var quita:int = 30;
						rojoFinal = ((rojoInicio - quita < 0 ? rojoInicio = 0 : rojoInicio -= quita)).toString(16);
						rojoFinal.length < 2 ? rojoFinal = "0" + rojoFinal : rojoFinal;
						verdeFinal = ((verdeInicio - quita < 0 ? verdeInicio = 0 : verdeInicio -= quita)).toString(16);
						verdeFinal.length < 2 ? verdeFinal = "0" + verdeFinal : verdeFinal;
						azulFinal = ((azulInicio - quita < 0 ? azulInicio = 0 : azulInicio -= quita)).toString(16);
						azulFinal.length < 2 ? azulFinal = "0" + azulFinal : azulFinal;
						colorOver = "0x" + rojoFinal + verdeFinal + azulFinal;
					/*}*/
					
					skinBotonPqNetLargo(skin).colorNormal = uint("0x" + colorBase);
					skinBotonPqNetLargo(skin).colorOver = uint(colorOver);
					///			GRADIENTE
					if(this.gradientePqnet == true){
						rojoInicio = convertStringToUint( colorBase.substr(0,2) );
						verdeInicio = convertStringToUint( colorBase.substr(2,2) );
						azulInicio = convertStringToUint( colorBase.substr(4,2) );
						var cantQuitar:int = 75;// 95
						rojoFinal = ((rojoInicio - cantQuitar < 0 ? rojoInicio = 0 : rojoInicio -= cantQuitar)).toString(16);
						rojoFinal.length < 2 ? rojoFinal = "0" + rojoFinal : rojoFinal;
						verdeFinal = ((verdeInicio - cantQuitar < 0 ? verdeInicio = 0 : verdeInicio -= cantQuitar)).toString(16);
						verdeFinal.length < 2 ? verdeFinal = "0" + verdeFinal : verdeFinal;
						azulFinal = ((azulInicio - cantQuitar < 0 ? azulInicio = 0 : azulInicio -= cantQuitar)).toString(16);
						azulFinal.length < 2 ? azulFinal = "0" + azulFinal : azulFinal;
						colorGradiente = "0x" + rojoFinal + verdeFinal + azulFinal;
						skinBotonPqNetLargo(skin).colorGradiente = uint(colorGradiente);
						skinBotonPqNetLargo(skin).colorGradienteAbajo = uint(colorGradiente);
					}else{
						skinBotonPqNetLargo(skin).colorGradiente = uint("0x" + colorBase);
						skinBotonPqNetLargo(skin).colorGradienteAbajo = uint(colorOver);
					}
				}
				//				 	REDONDEAR
				if( this.botonRedondo){
					this.height = 42;
					skinBotonPqNetLargo(skin).rectFondo.topLeftRadiusX = 15;
					skinBotonPqNetLargo(skin).rectFondo.topRightRadiusX = 15;
					skinBotonPqNetLargo(skin).rectFondo.bottomRightRadiusX = 15;
					skinBotonPqNetLargo(skin).rectFondo.bottomLeftRadiusX = 15;
				}
				//					SOMBRA
				if( sombraPq == false){
					skinBotonPqNetLargo(skin).sombraBoton.alpha = 0;
				}
				///					ICONO
				if(this.icono != ""){
					skinBotonPqNetLargo(skin).icono.source = catalogoIconosBotones.getInstance()[icono];
					if( label == "") skinBotonPqNetLargo(skin).labelDisplay.includeInLayout = skinBotonPqNetLargo(skin).labelDisplay.visible = false;
					
					if(icono == "iconoActualizarNormal")
						isCurrentButtonActualizar = true;
					if(this.icono == "recargar_sinFondo" )
					{
						skinBotonPqNetLargo(skin).icono.height=15;
						skinBotonPqNetLargo(skin).icono.width=15;
					}
						
			
						
					
				}else{
					skinBotonPqNetLargo(skin).icono.visible = false;
					skinBotonPqNetLargo(skin).icono.includeInLayout = false;
				}
				
				if( linkButton ){
					skinBotonPqNetLargo(skin).rectFondo.visible = !_linkButton;
					skinBotonPqNetLargo(skin).rectFondo.includeInLayout = !_linkButton;
					
					skinBotonPqNetLargo(skin).grpIcoLabel.visible = !_linkButton;
					skinBotonPqNetLargo(skin).grpIcoLabel.includeInLayout = !_linkButton;
					
					skinBotonPqNetLargo(skin).labelDisplay2.visible = _linkButton;
					skinBotonPqNetLargo(skin).labelDisplay2.includeInLayout = _linkButton;
					
					skinBotonPqNetLargo(skin).labelDisplay2.text = label;
				}
			}
			
			public function CambiarToActualizarTipoBoton($isActualizarInfo:Boolean):void
			{
				if($isActualizarInfo){
					isCurrentButtonActualizar = true;
					skinBotonPqNetLargo(skin).icono.source = catalogoIconosBotones.getInstance()["iconoActualizarNormal"]; 
				}else{
					isCurrentButtonActualizar = false;
					skinBotonPqNetLargo(skin).icono.source = catalogoIconosBotones.getInstance()["ojomordor"]; 
				}
			}
			
			public function convertStringToUint(value:String):uint  
			{  
				var colorString:String = "0x" + value;  
				var colorUint:uint = uint(colorString);
				return colorUint;
			}  
			
			public function get isBusyActualizar():Boolean
			{
				return _isBusyActualizar;
			}
			
			public function set isBusyActualizar(value:Boolean):void
			{
				_isBusyActualizar = value;
				if(value)
					skinBotonPqNetLargo(skin).icono.source = catalogoIconosBotones.getInstance()["iconoActualizarDown"];
				else
					skinBotonPqNetLargo(skin).icono.source = catalogoIconosBotones.getInstance()["iconoActualizarNormal"]; 
			}
			
			public function get colorOver():String
			{
				return _colorOver;
			}
			
			public function set colorOver(value:String):void
			{
				_colorOver = value;
			}
			
			public function cambiarColor($color:String):void
			{
				colorBase = $color;
				
				fillColorBase();
			}
			
		]]>
	</fx:Script>
</s:Button>
