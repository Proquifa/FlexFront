<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" width="100%"
				xmlns:otros="skins.otros.*" 
				xmlns:label="skins.skin.label.*" 
				xmlns:textinput="skins.skin.textinput.*" 
				xmlns:spacers="skins.skin.spacers.*" 
				xmlns:chekbox="skins.skin.chekbox.*"
				xmlns:pqNet="skins.botones.pqNet.*"
				currentStateChanging="itemrenderer1_currentStateChangingHandler(event)"
				creationComplete="itemrenderer1_creationCompleteHandler(event)"
				xmlns:lay="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.itemRenderer.empresasGeneral.*" xmlns:combobox="skins.skin.combobox.*"
				>
	
	
	<fx:Declarations>
		<s:Parallel id="mostrarModificar" effectEnd="mostrarModificar_effectEndHandler(event)">
			<s:Resize heightFrom="0" heightTo="595" duration="267"/>
			<s:Fade startDelay="50" duration="100" alphaFrom="0.1" alphaTo="1"/>
		</s:Parallel>
		<s:Parallel id="ocultarModificar" effectStart="ocultarModificar_effectStartHandler(event)" effectEnd="ocultarModificar_effectEndHandler(event)">
			<s:Resize  heightFrom="595" heightTo="0" duration="200"/>
			<s:Fade startDelay="0" duration="200" alphaFrom="1" alphaTo="0"/>
		</s:Parallel>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientesContactos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.ClienteCuadroContacto;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.ClientePanelContactosAnimado;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.geom.TransformOffsets;
			import mx.utils.StringUtil;
			
			import spark.components.Group;
			import spark.components.VGroup;
			import spark.events.IndexChangeEvent;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotoneras;
			import skins.catalogos.catalogoIconosBotones;
			import skins.catalogos.catalogoIconosEtiquetas;
			import skins.skin.contenedores.CatalogoProveedores.ContenedorEditarContactoSkin;
			
			
			private var currentAncho:Number;
			private var isShowHabilitados:Boolean = true;
			[Bindable]	private var _listaSemestre:ArrayCollection = new ArrayCollection([{valor:"Enero - Junio",llave:1},{valor:"Julio - Diciembre",llave:2}]);
			
			private var _listaDificultad:ArrayCollection = new ArrayCollection([
				{valor:"-- NINGUNO --",llave:0,numero:0},
				{valor:"COMPLICADO",llave:1,numero:5},
				{valor:"MUY DIFÍCIL",llave:2,numero:4},
				{valor:"DIFÍCIL",llave:3,numero:3},
				{valor:"FÁCIL",llave:4,numero:2},
				{valor:"MUY FÁCIL",llave:5,numero:1}]);
			
			private var _listaMantenimiento:ArrayCollection = new ArrayCollection([
				{valor:"-- NINGUNO --",llave:0,numero:0},
				{valor:"MUY ALTO",llave:1,numero:5},
				{valor:"ALTO",llave:2,numero:4},
				{valor:"MEDIO",llave:3,numero:3},
				{valor:"BAJO",llave:4,numero:2},
				{valor:"MUY BAJO",llave:5,numero:1}]);
			
			private var _listaMeses:ArrayCollection = new ArrayCollection([
				{valor:"--",llave:0,numero:0},
				{valor:"ENERO",llave:1,numero:1},
				{valor:"FEBRERO",llave:2,numero:2},
				{valor:"MARZO",llave:3,numero:3},
				{valor:"ABRIL",llave:4,numero:4},
				{valor:"MAYO",llave:5,numero:5},
				{valor:"JUNIO",llave:6,numero:6},
				{valor:"JULIO",llave:7,numero:7},
				{valor:"AGOSTO",llave:8,numero:8},
				{valor:"SEPTIEMBRE",llave:9,numero:9},
				{valor:"OCTUBRE",llave:10,numero:10},
				{valor:"NOVIEMBRE",llave:11,numero:11},
				{valor:"DICIEMBRE",llave:12,numero:12}]);
			
			private var _listaAno:ArrayCollection = new ArrayCollection();
			
			public function llenarAnos():void{
				var fecha:Date=new Date();
				var objet0:Object = new Object();
				objet0.valor = "--";
				objet0.llave= 0;
				objet0.numero=0;
				_listaAno.addItem(objet0);
				for (var i:int=fecha.getFullYear(); i>=1930; i--) {
					var objet:Object = new Object();
					objet.valor = i;
					objet.llave= i;
					objet.numero=i;
					_listaAno.addItem(objet);
				}
			}
			
			private var _listaDias:ArrayCollection = new ArrayCollection();
			
			public function llenarDias(cuantosDias):void{
				_listaDias.removeAll();
				var objet0:Object = new Object();
				objet0.valor = "--";
				objet0.llave= 0;
				objet0.numero=0;
				_listaDias.addItem(objet0);
				for(var i:int= 1; i<=cuantosDias; i++) {
					var objet:Object = new Object();
					objet.valor = i;
					objet.llave= i;
					objet.numero=i;
					_listaDias.addItem(objet);
				}
			}
			
			public	function cuantosDias(mes:int, anyo:int):int
			{
				var cuantosDias:int = 31;
				if (mes == 4 || mes == 6 || mes == 9 || mes == 11)
					cuantosDias = 30;
				if (mes == 2 && (anyo/4) != Math.floor(anyo/4))
					cuantosDias = 28;
				if (mes == 2 && (anyo/4) == Math.floor(anyo/4))
					cuantosDias = 29;
				return cuantosDias;
			}
			
			
			
			
			override public function set data(value:Object):void{
				grpTodo.removeAllElements();
				isShowHabilitados = (this.owner.parent as ClientePanelContactosAnimado).isCurrentHabilitados;
				
				for (var i:int = 0; i < value.length; i++) 
				{
					grpTodo.addElement(crearCubo(value[i],i));
				}
				
			}
			
			private var myXForm:TransformOffsets;
			private function crearCubo($item:*,$id:int):Group
			{
				var content:ClienteCuadroContacto = new ClienteCuadroContacto;
				content.id = "button_"+$id;
				myXForm = new TransformOffsets;
				content.postLayoutTransformOffsets = myXForm;
				content.isHabilitado = isShowHabilitados;
				
				
				if(($item as Object).hasOwnProperty("CuboAgregar")){
					
					content.tipoDeCubo = "agregar";
				}else{
					content.tipoDeCubo = "contacto";
					
					if($item.titulo != null && StringUtil.trim($item.titulo).length > 0 && $item.titulo != "ND")
						content.nombreContacto = $item.titulo + " " + $item.nombre + ($item.apellidos != null && $item.apellidos != '' && $item.apellidos != "ND" && $item.apellidos != "N/D" ? ' ' + $item.apellidos : '');
					else
						content.nombreContacto = $item.nombre + ($item.apellidos != null && $item.apellidos != '' && $item.apellidos != "ND" && $item.apellidos != "N/D" ? ' ' + $item.apellidos : '');
					
					content.item = $item;
					content.area = $item.departamento;
					content.puesto = $item.puesto;
					content.pqConnect = $item.usuarioPConnect;
					
					
					content.email =$item.EMail; 
					content.contatenarTel1($item.telefono,$item.extension1);
					content.contatenarTel2($item.telefonoN,$item.extension2);
					
				}
				
				content.addEventListener("DisparandoEventoCustomCuboCatClientesContacto",escuchaEventClickButtonContacto,false,0,true); 
				
				return content;
			}
			
			[Bindable]
			private var paddingLeft:Number
			private var lastIdButtonSelected:String;
			private var lastButtomSelected:Object;
			private function escuchaEventClickButtonContacto(eve:Event):void
			{
				
				if(!mostrarModificar.isPlaying && !ocultarModificar.isPlaying)
				{
					
					if(grpTodosModificar.width > 740)
					{
						grpModificar.width = 740;
						
						if(eve.currentTarget.hasOwnProperty("puntoMedio")){
							
							var temp:Number =(eve.currentTarget as ClienteCuadroContacto).puntoMedio - (grpModificar.width / 2); 
							var temp2:Number =(eve.currentTarget as ClienteCuadroContacto).puntoMedio + (grpModificar.width / 2); 
							
							if(temp <= 0){
								paddingLeft = 0;
								(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as ClienteCuadroContacto).puntoMedio;
							}else if(temp2 > grpTodosModificar.width){
								paddingLeft = (grpTodosModificar.width - grpModificar.width)-10;
								(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as ClienteCuadroContacto).puntoMedio - paddingLeft;
							}else{
								paddingLeft = temp;
								(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as ClienteCuadroContacto).puntoMedio - paddingLeft;
							}
							
						}
					}
					else
					{
						paddingLeft = 0;
						grpModificar.width = grpTodosModificar.width-10;
						if(eve.currentTarget.hasOwnProperty("puntoMedio")){
							(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as ClienteCuadroContacto).puntoMedio;
						}
					}
					
					if(grpTodosModificar.visible)
					{
						
						if(lastIdButtonSelected != eve.currentTarget.id)
						{				
							lastIdButtonSelected = eve.currentTarget.id;
							
							(lastButtomSelected as ClienteCuadroContacto).setCurrentState("normal");
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
							
							lastButtomSelected = eve.currentTarget;
							
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleX + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleY + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = (lastButtomSelected as Group).postLayoutTransformOffsets.x - 4.7;
							
							
							if((eve.currentTarget as ClienteCuadroContacto).tipoDeCubo == "contacto"){
								btnModificar.visible = btnModificar.includeInLayout = true;
								btnAgregar.visible = btnAgregar.includeInLayout = false;
								_contacto = eve.currentTarget.item as Contacto;
								if(_contacto.apellidos == null || _contacto.apellidos == "")
								{
									_contacto.apellidos = "ND";
								}
								if(_contacto.celular == null || _contacto.celular == "")
								{
									_contacto.celular = "ND";
								}
							}else{
								btnAgregar.visible = btnAgregar.includeInLayout = true;
								btnModificar.visible = btnModificar.includeInLayout = false;
								_contacto = new Contacto;
								/* var fecha:Date=new Date();
								cmbDiaFN.selectedIndex=0;
								cmbDiaFN.selectedIndex=0;
								cmbAnoFN.selectedIndex=0;*/
								//cmbAnoFN.selectedIndex(cmbAnoFN.seleccionarValor(fecha.getFullYear().toString(),'numero'));
								/*cmbMesLD.selectedIndex=0;
								cmbAnoLD.selectedIndex=0;*/
								//cmbAnoLD.selectedIndex(cmbAnoLD.seleccionarValor(fecha.getFullYear().toString(),'numero'));*/
							}
							
						}
						else
						{
							
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
							
							lastIdButtonSelected = null;
							
							if(!mostrarModificar.isPlaying && !ocultarModificar.isPlaying){
								grpTodosModificar.visible = false;
							}
							
						}
					}
					else
					{
						
						if(lastIdButtonSelected != eve.currentTarget.id){
							
							lastIdButtonSelected = eve.currentTarget.id;
							lastButtomSelected = eve.currentTarget;
							
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleX + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleY + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = (lastButtomSelected as Group).postLayoutTransformOffsets.x - 7.7;
							
							if((eve.currentTarget as ClienteCuadroContacto).tipoDeCubo == "contacto"){
								btnModificar.visible = btnModificar.includeInLayout = true;
								btnAgregar.visible = btnAgregar.includeInLayout = false;
								
								if(isShowHabilitados)
								{
									lblHabilitar.visible = false;
									checkBoxHabitar.includeInLayout = checkBoxHabitar.visible = false;
								}
								else
								{
									lblHabilitar.visible = true;
									checkBoxHabitar.includeInLayout = checkBoxHabitar.visible = true;
								}
								
								_contacto = eve.currentTarget.item as Contacto;
								if(_contacto.apellidos == null || _contacto.apellidos == "")
								{
									_contacto.apellidos = "ND";
								}
								if(_contacto.celular == null || _contacto.celular == "")
								{
									_contacto.celular = "ND";
								}
							}else{
								lblHabilitar.visible = false;
								checkBoxHabitar.includeInLayout = checkBoxHabitar.visible = false;
								
								btnAgregar.visible = btnAgregar.includeInLayout = true;
								btnModificar.visible = btnModificar.includeInLayout = false;
								_contacto = new Contacto();
							}
							
							grpTodosModificar.percentWidth = 100;
							grpTodosModificar.visible = true;
						}
					}
				}
			}
			
			protected function itemrenderer1_currentStateChangingHandler(event:StateChangeEvent):void
			{
				if(event.newState == "normal" && grpTodosModificar.visible){
					grpTodosModificar.visible = false;
					
					(lastButtomSelected as ClienteCuadroContacto).setCurrentState("normal");
					(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
					(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
					(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
					
					lastIdButtonSelected = null;
				}
			}
			
			protected function imgCerrar_clickHandler(event:MouseEvent):void
			{
				grpTodosModificar.visible = false;
				
				(lastButtomSelected as ClienteCuadroContacto).setCurrentState("normal");
				(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
				(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
				(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
				
				lastIdButtonSelected = null;
			}
			
			protected function mostrarModificar_effectEndHandler(event:EffectEvent):void
			{
				grpContenidoModificar.percentWidth = 100;
				grpTodosModificar.percentWidth  = 100;
				grpContenidoModificar.visible = true;
			}
			
			//OCULTAR GRP MODIFICAR
			
			protected function ocultarModificar_effectStartHandler(event:EffectEvent):void
			{
				grpContenidoModificar.visible = false;
			}
			
			protected function ocultarModificar_effectEndHandler(event:EffectEvent):void
			{
				grpContenidoModificar.percentWidth = 100;
				grpTodosModificar.height = 0;
				grpTodosModificar.percentWidth = 100;
			}
			
			private function testMailExt(mail:String):Boolean{
				return(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.(?: |com|org|net|biz|info|mobi|mx|cat|es|ar)$/i.test(mail));
			}
			
			[Bindable]
			private var _contacto:Contacto; 
			protected function btnModificar_clickHandler(event:MouseEvent):void
			{
				//dispatchEvent(new Event("probandoQueSuba",true,false));
				var modificar:EventoCatClientesContactos = new EventoCatClientesContactos(EventoCatClientesContactos.MODIFICAR_CONTACTO_VISTA_CLIENTE);
				modificar.contacto = _contacto;
				modificar.contacto.tipo = "Clientes";
				
				
				if( StringUtil.trim(txtNombre.text) == '' ){
					alertaSingleton.show( 'Debe establecer el nombre del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( StringUtil.trim(txtApellido.text) == '' ){
					alertaSingleton.show( 'Debe establecer el apellido del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( StringUtil.trim(txtTitulo.text) == ''){
					alertaSingleton.show( 'Debe establecer el título del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( StringUtil.trim(txtPuesto.text) == ''){
					alertaSingleton.show( 'Debe establecer el puesto del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( StringUtil.trim(txtDepto.text) == ''){
					alertaSingleton.show( 'Debe establecer el departamento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( StringUtil.trim(txtTel.text) == ''){
					alertaSingleton.show( 'Debe establecer el t1 del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( !testMailExt(txtEmail.text) ){
					alertaSingleton.show( 'Debe establecer el e-Mail del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				/*if( cmbDiaFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Dia de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				else
				{
					if( cmbDiaFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Dia de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbMesFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Mes de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbMesFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Mes de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbAnoFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Año de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbAnoFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Año de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbMesLD.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Mes de Fecha en la que empezó a laborar el contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbMesLD.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Mes de Fecha en la que empezó a laborar del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbAnoLD.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Año de Fecha  la que empezó a laborar el contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbAnoLD.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Año de Fecha en la que empezó a laborar del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				}*/ 
				
				
				modificar.contacto.departamento = txtDepto.text.toUpperCase();
				modificar.contacto.EMail = txtEmail.text;
				modificar.contacto.fax = txtFax.text.toUpperCase();
				modificar.contacto.titulo = txtTitulo.text.toUpperCase();
				modificar.contacto.nombre = txtNombre.text.toUpperCase();
				modificar.contacto.apellidos = txtApellido.text.toUpperCase();
				modificar.contacto.puesto = txtPuesto.text.toUpperCase();
				modificar.contacto.telefono = txtTel.text.toUpperCase();
				modificar.contacto.telefonoN = txtTel2.text.toUpperCase();
				modificar.contacto.dificultad = cmbDificultad.selectedItem.numero;
				modificar.contacto.mantenimiento = cmbMantenimiento.selectedItem.numero;
				modificar.contacto.extension1 = txtExt1.text.toUpperCase();
				modificar.contacto.extension2 = txtExt2.text.toUpperCase();
				modificar.contacto.habilitado = checkBoxHabitar.selected;
				
				
				modificar.contacto.celular = txtMovil.text.toUpperCase();
				modificar.contacto.antiguedadMes = cmbMesLD.selectedItem.numero;
				modificar.contacto.antiguedadAnio = cmbAnoLD.selectedItem.numero;
				var fechaN:Date=new Date();
				fechaN.date = cmbDiaFN.selectedItem.numero;
				fechaN.month = cmbMesFN.selectedItem.numero;
				fechaN.fullYear = cmbAnoFN.selectedItem.numero;
				modificar.contacto.fechaNacimiento = fechaN;
				
				dispatchEvent(modificar);
			}
			
			protected function btnAgregar_clickHandler(event:MouseEvent):void
			{
				var evtAgrega:EventoCatClientesContactos = new EventoCatClientesContactos(EventoCatClientesContactos.AGREGAR_CONTACTO_VISTA_CLIENTE);
				
				evtAgrega.contacto = new Contacto();
				evtAgrega.contacto.habilitado = true;
				evtAgrega.contacto.tipo = 'Clientes';
				evtAgrega.contacto.idContacto = 0;
				evtAgrega.contacto.idEmpresa = 0;
				
				if( txtNombre.text == '' ){
					alertaSingleton.show( 'Debe establecer el nombre del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtApellido.text == '' ){
					alertaSingleton.show( 'Debe establecer el apellido del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtTitulo.text == ''){
					alertaSingleton.show( 'Debe establecer el título del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtPuesto.text == ''){
					alertaSingleton.show( 'Debe establecer el puesto del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtDepto.text == ''){
					alertaSingleton.show( 'Debe establecer el departamento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtTel.text == ''){
					alertaSingleton.show( 'Debe establecer el t1 del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtEmail.text == ''){
					alertaSingleton.show( 'Debe establecer el e-Mail del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( cmbDiaFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Dia de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				else
				{
					if( cmbDiaFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Dia de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbMesFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Mes de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbMesFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Mes de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbAnoFN.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Año de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbAnoFN.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Año de Fecha de Nacimento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbMesLD.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Mes de Fecha en la que empezó a laborar el contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbMesLD.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Mes de Fecha en la que empezó a laborar del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				if( cmbAnoLD.selectedItem == undefined){
					alertaSingleton.show( 'Debe establecer Año de Fecha  la que empezó a laborar el contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				else
				{
					if( cmbAnoLD.selectedItem.numero == 0){
						alertaSingleton.show( 'Debe establecer Año de Fecha en la que empezó a laborar del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
						return;
					}
				} 
				
				evtAgrega.contacto.nombre = txtNombre.text.toUpperCase();
				evtAgrega.contacto.apellidos = txtApellido.text.toUpperCase();
				evtAgrega.contacto.titulo = txtTitulo.text.toUpperCase();
				evtAgrega.contacto.departamento = txtDepto.text.toUpperCase();
				evtAgrega.contacto.dificultad = cmbDificultad.selectedItem.numero;
				evtAgrega.contacto.mantenimiento = cmbMantenimiento.selectedItem.numero;
				evtAgrega.contacto.EMail = txtEmail.text;
				evtAgrega.contacto.fax = txtFax.text.toUpperCase();
				evtAgrega.contacto.puesto = txtPuesto.text.toUpperCase();
				evtAgrega.contacto.telefono = txtTel.text.toUpperCase();
				evtAgrega.contacto.telefonoN = txtTel2.text.toUpperCase();
				evtAgrega.contacto.extension1 = txtExt1.text.toUpperCase();
				evtAgrega.contacto.extension2 = txtExt2.text.toUpperCase();
				evtAgrega.contacto.celular = txtMovil.text.toUpperCase();
				evtAgrega.contacto.antiguedadMes = cmbMesLD.selectedItem.numero;
				evtAgrega.contacto.antiguedadAnio = cmbAnoLD.selectedItem.numero;
				var fechaN:Date=new Date();
				fechaN.date = cmbDiaFN.selectedItem.numero;
				fechaN.month = cmbMesFN.selectedItem.numero;
				fechaN.fullYear = cmbAnoFN.selectedItem.numero;
				evtAgrega.contacto.fechaNacimiento = fechaN;
				dispatchEvent(evtAgrega);
			}
			
			protected function interacionConLosTextImputs_focusOutHandler(event:FocusEvent):void
			{
				
				if(event.currentTarget != null){
					
					event.stopImmediatePropagation();
					event.preventDefault();
					
					switch(event.currentTarget.id)
					{
						//a donde se va al darle TAB
						case "txtNombre":{txtApellido.setFocus();break;}
						case "txtApellido":{cmbDiaFN.setFocus();break;}
						case "cmbDiaFN":{cmbMesFN.setFocus();break;}
						case "cmbMesFN":{cmbAnoFN.setFocus();break;}
						case "cmbAnoFN":{txtTitulo.setFocus();break;}	
						case "txtTitulo":{txtPuesto.setFocus();break;}
						case "txtPuesto":{txtDepto.setFocus();break;}
						case "txtDepto":{cmbMesLD.setFocus();break;}
						case "cmbMesLD":{cmbAnoLD.setFocus();break;}
						case "cmbAnoLD":{txtEmail.setFocus();break;}
						case "txtEmail":{txtTel.setFocus();break;}
						case "txtTel":{txtExt1.setFocus();break;}
						case "txtExt1":{txtTel2.setFocus();break;}
						case "txtTel2":{txtExt2.setFocus();break;}
						case "txtExt2":{txtMovil.setFocus();break;}
						case "txtMovil":{txtFax.setFocus();break;}
						case "txtFax":{cmbDificultad.setFocus();break;}
						case "cmbDificultad":{cmbMantenimiento.setFocus();break;}
						case "cmbMantenimiento":{btnModificar.setFocus();break;}
						case "btnModificar":{txtNombre.setFocus();break;}
					}
				}
			}
			
			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				cmbDificultad.dataProvider = _listaDificultad;
				cmbMantenimiento.dataProvider = _listaMantenimiento;
				llenarAnos();
				llenarDias(31);
				cmbAnoLD.dataProvider = _listaAno;
				cmbMesLD.dataProvider = _listaMeses;
				cmbAnoFN.dataProvider = _listaAno;
				cmbMesFN.dataProvider = _listaMeses;
				cmbDiaFN.dataProvider = _listaDias;
				cmbDificultad.selectedIndex = 0;
				cmbMantenimiento.selectedIndex = 0;
				cmbAnoFN.selectedIndex=0;
				cmbMesFN.selectedIndex=0;
				cmbDiaFN.selectedIndex=0;
			}
			
			protected function diasXmes(event:IndexChangeEvent):void
			{
				var diaSelec:int = 1;
				if(cmbDiaFN.selectedItem != undefined)
				{
					diaSelec=cmbDiaFN.selectedItem.valor;
				}
				
				if(cmbAnoFN.selectedItem == undefined)
				{
					var fecha:Date=new Date();
					llenarDias(cuantosDias(cmbMesFN.selectedItem.numero,fecha.fullYear));
					cmbDiaFN.dataProvider = _listaDias;
					if(diaSelec>(cuantosDias(cmbMesFN.selectedItem.numero,fecha.fullYear)))
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor('0','numero');
					}
					else
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor(diaSelec.toString(),'numero');
					}
				}
				else
				{
					llenarDias(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor));
					cmbDiaFN.dataProvider = _listaDias;
					if(diaSelec>(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor)))
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor('0','numero');
					}
					else
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor(diaSelec.toString(),'numero');
					}
				}
			}
			
			protected function cmbAnoFN_changeHandler(event:IndexChangeEvent):void
			{
				var diaSelec:int = 1;
				if(cmbDiaFN.selectedItem != undefined)
				{
					diaSelec=cmbDiaFN.selectedItem.valor;
				}
				
				if(cmbMesFN.selectedItem != undefined)
				{
					llenarDias(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor));
					cmbDiaFN.dataProvider = _listaDias;
					if(diaSelec>(cuantosDias(cmbMesFN.selectedItem.numero,cmbAnoFN.selectedItem.valor)))
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor('1','numero');
					}
					else
					{
						cmbDiaFN.selectedIndex=cmbDiaFN.seleccionarValor(diaSelec.toString(),'numero');
					}
				}
			}
			
		]]>
	</fx:Script>
	
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:Group id="grpTodo" width="100%" height="255">
		<s:layout>
			<lay:LayoutFilaBottonPanelContactos/>
		</s:layout>
	</s:Group>
	
	<s:HGroup width="100%" id="grpTodosModificar" height="0" visible="false" showEffect="{mostrarModificar}" hideEffect="{ocultarModificar}">
		<s:Spacer width="{paddingLeft}"/>
		<s:SkinnableContainer  id="grpModificar" height="100%" width="600" 
							   skinClass="skins.skin.contenedores.CatalogoProveedores.ContenedorEditarContactoSkin"> <!--HEIGHT 0, visible false-->
			
			<s:Group id="grpContenidoModificar" width="100%" height="600" visible="false"> <!--FIX VISIBLE FALSE-->
				
				<s:HGroup width="100%" height="100%" paddingTop="15" paddingLeft="15" gap="3">
					<spacers:spacerVerticalPqNet/>
					<s:VGroup width="100%" paddingTop="15">
						<s:HGroup  width="100%" verticalAlign="middle">
							<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_proveedoresContacto }"/>
							<label:TextoBankGothic_18_Blanco text="Contacto"/>
						</s:HGroup>
						<s:HGroup width="100%" >
							<s:VGroup height="100%" horizontalAlign="left" gap="7" paddingTop="8">
								<label:TextoBankGothic_16_Blanco text="Nombres: "/>
								<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.nombre }" id="txtNombre" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<label:TextoBankGothic_16_Blanco text="Apellidos: "/>
								<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.apellidos }" id="txtApellido" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<label:TextoBankGothic_16_Blanco text="Fecha de Nacimiento: "/>
								<s:HGroup width="100%" >
									<combobox:comboNegroDefaultPQNet width="64"  id="cmbDiaFN" selectedIndex="{cmbDiaFN.seleccionarValor(_contacto.fechaNacimiento.date.toString(),'numero')}" fontStyle="normal"
																	 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase" restrict="0-5" maxChars="1" />
									<combobox:comboNegroDefaultPQNet width="150" id="cmbMesFN"  selectedIndex="{cmbMesFN.seleccionarValor(_contacto.fechaNacimiento.month.toString(),'numero')}" fontStyle="normal"
																	 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" change="diasXmes(event)"/>
									<combobox:comboNegroDefaultPQNet width="80" id="cmbAnoFN"  selectedIndex="{cmbAnoFN.seleccionarValor(_contacto.fechaNacimiento.fullYear.toString(),'numero')}" fontStyle="normal"
																	 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" change="cmbAnoFN_changeHandler(event)"/>
								</s:HGroup>
								<label:TextoBankGothic_16_Blanco text="Título: "/>
								<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.titulo }" id="txtTitulo" maxChars="5" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<label:TextoBankGothic_16_Blanco text="Puesto: "/>
								<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.puesto }" id="txtPuesto" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<label:TextoBankGothic_16_Blanco text="Departamento: "/>
								<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.departamento }" id="txtDepto" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<label:TextoBankGothic_16_Blanco text="Laborando Desde: "/>
								<s:HGroup width="100%" >
									<combobox:comboNegroDefaultPQNet width="218"  id="cmbMesLD" selectedIndex="{cmbMesLD.seleccionarValor(_contacto.antiguedadMes.toString(),'numero')}" fontStyle="normal"
																	 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase" restrict="0-5" maxChars="1"/>
									<combobox:comboNegroDefaultPQNet width="80" id="cmbAnoLD"  selectedIndex="{cmbAnoLD.seleccionarValor(_contacto.antiguedadAnio.toString(),'valor')}" fontStyle="normal"
																	 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)"/>
									
								</s:HGroup>
								<s:HGroup id="grpPconnect" width="100%" horizontalAlign="left" paddingTop="25" >
									<!--skinClass="skins.botones.pqNet.skinPConnect"-->
									<mx:Image source="{catalogoIconosBotones.getInstance().pconnect_blanco}" id="btnPconnect" visible="{_contacto.usuarioPConnect}" />
								</s:HGroup>
								
							</s:VGroup>
							
							<s:HGroup height="100%" width="55">
								<s:Spacer height="100%" width="55"/>
							</s:HGroup>
							
							
							<s:VGroup height="100%" horizontalAlign="left" gap="7" paddingTop="8">
								<label:TextoBankGothic_16_Blanco text="e-Mail:"/>
								<textinput:txtInputNegroDefaultPQNet width="304" fontStyle="normal" text="{ _contacto.EMail }" id="txtEmail"/>
								<s:HGroup width="100%" >
									<s:VGroup>
										<label:TextoBankGothic_16_Blanco text="Telefono1:"/>
										<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.telefono}" id="txtTel" restrict="[0-9]" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
									</s:VGroup>
									<s:VGroup>
										<label:TextoBankGothic_16_Blanco text="Ext:"/>
										<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.extension1}" id="txtExt1" restrict="[0-9]" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
									</s:VGroup>
								</s:HGroup>
								<s:HGroup width="100%" >
									<s:VGroup>
										<label:TextoBankGothic_16_Blanco text="Telefono2:"/>
										<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.telefonoN}" id="txtTel2" restrict="[0-9]" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
									</s:VGroup>
									<s:VGroup>
										<label:TextoBankGothic_16_Blanco text="Ext:"/>
										<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.extension2}" id="txtExt2" restrict="[0-9]" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
									</s:VGroup>
								</s:HGroup>
								<label:TextoBankGothic_16_Blanco text="Movil:"/>
								<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.celular}" id="txtMovil" restrict="[0-9]" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<label:TextoBankGothic_16_Blanco text="Fax:"/>
								<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.fax}" id="txtFax" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<label:TextoBankGothic_16_Blanco text="Dificultad: "/>
								<combobox:comboNegroDefaultPQNet width="100%"  id="cmbDificultad" selectedIndex="{cmbDificultad.seleccionarValor(_contacto.dificultad,'numero')}" fontStyle="normal"
																 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase" restrict="0-5" maxChars="1"/>
								<label:TextoBankGothic_16_Blanco text="Mantenimiento: "/>
								<combobox:comboNegroDefaultPQNet width="100%" id="cmbMantenimiento"  selectedIndex="{cmbMantenimiento.seleccionarValor(_contacto.mantenimiento,'numero')}" fontStyle="normal"						 
																 keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)"/>
								
								<label:TextoBankGothic_16_Blanco text="Habilitar: " id="lblHabilitar"/>
								<chekbox:checkBoxCuadroBlanco id="checkBoxHabitar" selected="{_contacto.habilitado}"/>
								
							</s:VGroup>
							
						</s:HGroup>
						<s:HGroup width="100%" horizontalAlign="right" paddingTop="-37" paddingRight="15">
							
							<pqNet:botonPqNetLargo id="btnModificar" label="Modificar" click="btnModificar_clickHandler(event)" chromeColor="0x{ catalogoColores.LABEL_AZUL_TENUE}"/>
							
							<pqNet:botonPqNetLargo id="btnAgregar" label="Agregar" click="btnAgregar_clickHandler(event)" chromeColor="0x{ catalogoColores.LABEL_AZUL_TENUE}"/>							
							
						</s:HGroup>
					</s:VGroup> 
					
					<!--	<s:VGroup  horizontalAlign="left"> 
					<s:Button skinClass="skins.botones.pqNet.skinPConnect" id="btnPconnect" visible="{!_contacto.usuarioPConnect}" />
					</s:VGroup> -->
					
					
					
					<spacers:spacerVerticalPqNet/>
				</s:HGroup>
				
				<s:Image id="imgOcultarModificar" right="10" top="28" source="{catalogoIconosBotoneras.getInstance().botoncerrar}"/>
				<!--Area de selección para el botón, fue implementado así por que la imagen por si misma no recibía bien el click en toda su area, aunque se le indicaba al group que 
				activara los eventos en áreas transparentes, /mouseEnableWhereIsTransparent/-->
				<s:Graphic buttonMode="true" right="5" top="28" mouseEnabledWhereTransparent="false" toolTip="Cerrar" useHandCursor="true" click="imgCerrar_clickHandler(event)">
					<s:Rect id="hit1" width="24" height="17">
						<s:fill>
							<s:SolidColor color="red" alpha="0"/>
						</s:fill>
					</s:Rect>
				</s:Graphic>
				
			</s:Group>
		</s:SkinnableContainer>
	</s:HGroup>
</s:ItemRenderer>
