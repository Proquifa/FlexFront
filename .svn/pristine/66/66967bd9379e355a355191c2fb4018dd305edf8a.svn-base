<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:componentes="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*" 
		  xmlns:pq="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.pq.*" 
		  xmlns:otros="skins.otros.*" 
		  xmlns:pqNet="skins.botones.pqNet.*"
		  paddingRight="20" paddingLeft="20" paddingTop="25" paddingBottom="15"
		  width="100%" height="100%" xmlns:label="skins.skin.label.*" xmlns:AdvancedDataGrid="skins.skin.AdvancedDataGrid.*" xmlns:grafica="skins.botones.grafica.*"
		  >
	
	<fx:Declarations>		
		<mx:SeriesInterpolate id="fxInterpolateIn" duration="300"/>
		<s:SolidColorStroke id="trazoGruezo" color="0x{catalogoColores.LABEL_NEGRO}" weight="5"/>
		<s:SolidColorStroke id="trazoDelgado" color="0x{catalogoColores.LABEL_NEGRO}" weight="1"/>
		<s:LinearGradient id="sc1" rotation="90">
			<s:GradientEntry alpha="1.0" color="#b4c871" ratio="0"/>
			<s:GradientEntry alpha="1.0" color="#8da741" ratio="1"/>
		</s:LinearGradient>
		<s:LinearGradient id="sc2" rotation="90">
			<s:GradientEntry alpha="1.0" color="#990429" ratio="0"/>
			<s:GradientEntry alpha="1.0" color="#910824" ratio="1"/>
		</s:LinearGradient>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			import flash.utils.setTimeout;
			
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.Series;
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.comun.advancedDataGrid.EventoDataGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.productos.EventoTableroProductos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.RutasPdF;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.tableros.compras.proveedores.ObjetoTabla;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.tableros.productos.PagoProducto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.tableros.productos.ParametrosBusquedaProducto;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.compras.proveedores.componentes.pagos.DataTipRenderPagos;
			import mx.events.ListEvent;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoColores;			
			
			[Bindable]
			private var _pagosGrafica:ArrayCollection; 
			[Bindable]
			private var _pagosTabla:ArrayCollection;
			[Bindable]
			private var _datoPago:ObjetoTabla;
			[Bindable] public var _etiquetaPeriodo:String = "";
			private var _listaMensual:ArrayCollection = new ArrayCollection(["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"]);
			private var _anioInicio:int = 0;
			private var _anioFin:int = 0;
			private var _anioMultiple:Boolean;
			private var yallegaronLosPagos:Boolean = false;
			private var _pagoUniverso:ArrayCollection;
			private var _minimoMeses:int=1;
			private var _maximoMeses:int=12;
			private var _sql:Query;
			
			public function set recibePagos(comparativa:ArrayCollection):void{
				if(comparativa == null) return;
				
				this._pagoUniverso = new ArrayCollection();
				this._pagoUniverso = comparativa;				
				yallegaronLosPagos  = true;
			}
			
			private function gridItemClickEvent(evento:EventoDataGrid):void{	 	        	
				
				var click:ListEvent = evento.itemClick;
				var urlreq:URLRequest;
				var ruta:String;
				
				if (click.columnIndex == 3 
					&& (click.currentTarget.selectedItem as PagoProducto).ordenCompra != null
					&& (click.currentTarget.selectedItem as PagoProducto).ordenCompra != ""
				){
					var path:Object = Util.rutaNueva((click.currentTarget.selectedItem as PagoProducto).ordenCompra);
					ruta = RutasPdF.GENERAL_RUTA  + RutasPdF.COMPRAS_RUTA + path.ruta + (click.currentTarget.selectedItem as PagoProducto).ordenCompra + "-P.pdf";
					urlreq = new URLRequest ( ruta );
					navigateToURL( urlreq );
				}
				if (click.columnIndex == 6 
					&& (click.currentTarget.selectedItem as PagoProducto).folioFP != null
					&& (click.currentTarget.selectedItem as PagoProducto).folioFP != ""
				){
					var path:Object = Util.rutaNueva((click.currentTarget.selectedItem as PagoProducto).folioFP);
					ruta = RutasPdF.GENERAL_RUTA  + RutasPdF.FACTURAS_PROVEEDOR_RUTA + path.ruta + (click.currentTarget.selectedItem as PagoProducto).folioFP + ".pdf";
					urlreq = new URLRequest ( ruta );
					navigateToURL( urlreq );
				}
			}
			
			public function set recibeFiltros(parametros:ParametrosBusquedaProducto):void{
				
				if(parametros == null) return;
				
				_anioMultiple = parametros.aniosMultiple;		
				
				if(_anioMultiple){
					_anioInicio = parametros.anioInicio;
					_anioFin = parametros.anioFin;
				}else{
					_minimoMeses = parametros.mesInicio;
					_maximoMeses = parametros.mesFin;
				}
				this._etiquetaPeriodo = parametros.labelPeriodo1;
				llamarAIniciarGrafica();				
			}
			
			private function llamarAIniciarGrafica():void
			{
				if(yallegaronLosPagos)
				{					
					yallegaronLosPagos = false;
					if(_anioMultiple){
						iniciarGraficaAniosMulti( _pagoUniverso );
					}else{
						iniciarGrafica( _pagoUniverso );
					}
				}
				else
				{
					setTimeout(llamarAIniciarGrafica,300);
				}
			}
			
			private function iniciarGrafica(comparativa:ArrayCollection):void{
				if(comparativa == null) return;
				
				this._pagosGrafica = new ArrayCollection();
				var arrPie:ArrayCollection = UtilsGrid.queryCampoX( comparativa, "etiqueta", "OC_PAGOS_0" );
				
				var cuenta:int = 1;
				while( cuenta < 13){
					if(cuenta >= _minimoMeses && cuenta <= _maximoMeses)
					{
						var objeto:Object = new Object();
						objeto.porPagar = 0;
						objeto.montoPorPagar = 0;
						objeto.cantidadPorPagada = 0;
						objeto.partidaPorPagar = 0;
						objeto.ocPorPagar = 0;
						objeto.proveedoresPorPagar = 0;
						
						objeto.pagada = 0;
						objeto.montoPagado = 0;
						objeto.cantidadPagada = 0;
						objeto.partidaPagada = 0;
						objeto.ocPagada = 0;
						objeto.proveedorPagada = 0;	
						objeto.etiquetaMes = _listaMensual[cuenta -1];
						
						for( var i:int = 0 ; i < arrPie.length ; i++){
							if(cuenta == (arrPie[i] as ResumenConsulta).mes){
								if(arrPie[i].conceptoResultado == "PAGADA"){
									objeto.pagada += arrPie[i].factura;
									objeto.montoPagado += arrPie[i].total;
									objeto.cantidadPagada += arrPie[i].piezasTotal;
									objeto.partidaPagada += arrPie[i].partidas;
									objeto.ocPagada += arrPie[i].ocompras;
									objeto.proveedorPagada += arrPie[i].clientes_proveedores;
								}else{
									objeto.porPagar += arrPie[i].factura;
									objeto.montoPorPagar += arrPie[i].total;
									objeto.cantidadPorPagada += arrPie[i].piezasTotal;
									objeto.partidaPorPagar += arrPie[i].partidas;
									objeto.ocPorPagar += arrPie[i].ocompras;
									objeto.proveedoresPorPagar += arrPie[i].clientes_proveedores;
								}
								arrPie.removeItemAt(i);
								i = i - 1;
							}
						}
						
						objeto.porPagar == 1 ? objeto.porPagarLabel = objeto.porPagar + ' factura' : objeto.porPagarLabel = objeto.porPagar + ' facturas';
						objeto.pagada == 1 ? objeto.pagadaLabel = objeto.pagada + ' factura' : objeto.pagadaLabel = objeto.pagada + ' facturas';
						
						this._pagosGrafica.addItem(objeto);
					}
					cuenta++;
				}
			}
			
			private function iniciarGraficaAniosMulti(comparativa:ArrayCollection):void{
				if(comparativa == null) return;
				
				this._pagosGrafica = new ArrayCollection();
				//var arrPie:ArrayCollection = UtilsGrid.queryCampoX( comparativa, "etiqueta", "OC_PAGOS_0" );
				
				//var cuenta:int = 1;
				var pintarAnio:int = _anioInicio;
				var copiaUniverso:ArrayCollection = ObjectUtil.copy(comparativa) as ArrayCollection;
				
				while( pintarAnio <= _anioFin){
					var objeto:Object = new Object();
					objeto.porPagar = 0;
					objeto.montoPorPagar = 0;
					objeto.cantidadPorPagada = 0;
					objeto.partidaPorPagar = 0;
					objeto.ocPorPagar = 0;
					objeto.proveedoresPorPagar = 0;
					
					objeto.pagada = 0;
					objeto.montoPagado = 0;
					objeto.cantidadPagada = 0;
					objeto.partidaPagada = 0;
					objeto.ocPagada = 0;
					objeto.proveedorPagada = 0;	
					objeto.etiquetaMes = pintarAnio;
					
					var arrPie:ArrayCollection = UtilsGrid.queryCampoX( copiaUniverso, "mes",pintarAnio.toString() );
					
					for( var i:int = 0 ; i < arrPie.length ; i++){
						//if(cuenta == (arrPie[i] as ResumenConsulta).mes){
						if(arrPie[i].conceptoResultado == "PAGADA"){
							objeto.pagada += arrPie[i].factura;
							objeto.montoPagado += arrPie[i].total;
							objeto.cantidadPagada += arrPie[i].piezasTotal;
							objeto.partidaPagada += arrPie[i].partidas;
							objeto.ocPagada += arrPie[i].ocompras;
							objeto.proveedorPagada += arrPie[i].clientes_proveedores;
						}else{
							objeto.porPagar += arrPie[i].factura;
							objeto.montoPorPagar += arrPie[i].total;
							objeto.cantidadPorPagada += arrPie[i].piezasTotal;
							objeto.partidaPorPagar += arrPie[i].partidas;
							objeto.ocPorPagar += arrPie[i].ocompras;
							objeto.proveedoresPorPagar += arrPie[i].clientes_proveedores;
						}
						arrPie.removeItemAt(i);
						i = i - 1;
						//}
					}
					
					objeto.porPagar == 1 ? objeto.porPagarLabel = objeto.porPagar + ' factura' : objeto.porPagarLabel = objeto.porPagar + ' facturas';
					objeto.pagada == 1 ? objeto.pagadaLabel = objeto.pagada + ' factura' : objeto.pagadaLabel = objeto.pagada + ' facturas';
					
					this._pagosGrafica.addItem(objeto);
					pintarAnio++;
					//cuenta++;
				}
			}
			
			private function maxPagos():void{	
				var evt:EventoTableroProductos = new EventoTableroProductos(EventoTableroProductos.VOLVER_A_TABLERO_PRODUCTOS); 
				dispatchEvent(evt);			
			}			
			
			public function set vista(tipoVista:String):void{
				if (tipoVista == "tabla"){
					this.stackGeneral.selectedChild = vistaTabla;
				}else{
					this.stackGeneral.selectedChild = vistaGrafico;
				}
			}						
			
			public function set obtenerPagosGrafica(pagos:ArrayCollection):void{
				if(pagos == null){
					return;
				}
				_pagosTabla = pagos;
			}
			
			public function set cargaDatosPagos(datosPagos:ObjetoTabla):void{
				if(datosPagos == null){
					return;
				}
				this._datoPago = datosPagos;
			}
			
			private function formateoEje($valor:Number, $valorPrevio:Object, $eje:Object):String{
				var strRegreso:String = "";
				if($valor != 0 ) strRegreso = String($valor) ;
				return strRegreso;
			}
			
			private function lblFunction( $value:Object, $etiqueta:Object ):String
			{
				return $etiqueta.toString().toUpperCase();
			}
			
			public function seleccionaTabla():void{
			this.stackGeneral.selectedChild = this.vistaTabla;
			}
			
			public function seleccionarGrafica():void{
				this.stackGeneral.selectedChild = this.vistaGrafico;
			}
			
			private function formatoCantidadXPagar(dato:ChartItem,serie:Series):String{
				return dato.item.cantidadesFT;
			}
			private function formatoCantidadPagada(dato:ChartItem,serie:Series):String{
				return dato.item.cantidadesT;;
			}
			
			[Bindable] private var _size:int = 14;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);	
				if(unscaledWidth < 1200)
				{
					_size = 10;
				}
				else
				{
					_size = 14;
				}
			}
			
			public function set obtenerPagosTabla(pagos:ArrayCollection):void{
				if(pagos == null){
					return;
				}
				this._pagosTabla = pagos;
				setValoresFooter(pagos);
			}
			
			private function setValoresFooter($arreglo:ArrayCollection):void
			{
				_sql = new Query($arreglo,["ordenDeCompra","nombreProveedor"]);
				
				var _ordenes:Number = _sql.getValoresCampoOmitiendoRepetidosDeTodoElUniverso("ordenCompra").length;
				var _noProveedores:Number = _sql.getPunteros([null,"nombreProveedor"],"nombreProveedor").length;
				var _piezas:Number = _sql.getSumarCampo("cantidad",[],"",true);
				var _montoFactura:Number = _sql.getSumarCampo("montoFactura",[],"",true);
				var _montoOC:Number = _sql.getSumarCampo("montoOC",[],"",true);
				
				lbl1_nototal.text ="";
				lbl2_noOrdenCompra.text= _ordenes == 1 ? "1 Compra":_ordenes.toString()+" Compras";
				lbl3_noProveedores.text = _noProveedores == 1 ? "1 Proveedor":_noProveedores.toString()+" Proveedores";
				lbl4_noPiezas.text = _piezas == 1 ? "1 Pieza":_piezas.toString()+" Piezas";
				lbl5_montoOC.text = "$"+UtilsFormatosNumericos.precisionADosDecimalesConComas(_montoOC);
				lbl6_montoFactura.text =  "$"+UtilsFormatosNumericos.precisionADosDecimalesConComas(_montoFactura);
				
				
			}
			private function generaArchivo():void{ 
				var file2:File = new File();
				
				var dato0:Number = new Number;
				var dato1:String = new String;
				var dato2:String = new String;
				var dato3:String = new String;
				var dato4:String = new String;
				var dato5:String = new String;
				var dato6:String = new String;
				var dato7:String = new String;
				var dato8:String = new String;
				var dato9:String = new String;
				var dato10:String = new String;
				var dato11:String = new String;
				
				var hoja:ArrayCollection = new ArrayCollection();
				var fila1:Array = null;
				var longitud:int =  new int ;
				longitud = this._pagosTabla.length;
				fila1 = new Array();
				fila1[0] = hoja.addItem("#");
				fila1[1] = hoja.addItem("Empresa");
				fila1[2] = hoja.addItem("Proveedor");
				fila1[3] = hoja.addItem("OC");
				fila1[4] = hoja.addItem("Piezas");
				fila1[5] = hoja.addItem("Monto OC");
				fila1[6] = hoja.addItem("Folio");
				fila1[7] = hoja.addItem("Factura");
				fila1[8] = hoja.addItem("Monto factura");
				fila1[9] = hoja.addItem("FEP");
				fila1[10] = hoja.addItem("FP");
				fila1[11] = hoja.addItem("Estado de pago");	         
				
				for(var i:int = 0 ; i<longitud ; i++ ){
					fila1 = new Array();	
					
					dato0 = (this.gridPagos.dataProvider[i] ).numFila;
					dato1 = '"'+ (this.gridPagos.dataProvider[i] ).empresa +'"';
					dato2 = '"'+ (this.gridPagos.dataProvider[i] ).nombreProveedor +'"';
					dato3 = '"'+ (this.gridPagos.dataProvider[i] ).ordenCompra +'"';
					dato4 = '"'+ (this.gridPagos.dataProvider[i] ).cantidad +'"';
					dato5 = '"'+ (this.gridPagos.dataProvider[i] ).montoOCString +'"';
					dato6 = '"'+ (this.gridPagos.dataProvider[i] ).folioFP +'"';
					dato7 = '"'+ (this.gridPagos.dataProvider[i] ).noFactura +'"';
					dato8 = '"'+ (this.gridPagos.dataProvider[i] ).montoFacturaString +'"';
					dato9 = '"'+ (this.gridPagos.dataProvider[i] ).fechaEstimadaPagoString +'"';
					dato10 = '"'+ (this.gridPagos.dataProvider[i] ).fechaString +'"';
					dato11 = '"'+ (this.gridPagos.dataProvider[i] ).estado +'"';
					
					fila1[0] = dato0;
					fila1[1] = dato1;
					fila1[2] = dato2;
					fila1[3] = dato3;
					fila1[4] = dato4;
					fila1[5] = dato5;
					fila1[6] = dato6;
					fila1[7] = dato7;
					fila1[8] = dato8;
					fila1[9] = dato9;
					fila1[10] = dato10;
					fila1[11] = dato11;
					
					hoja.addItem('\r' + fila1 );
					fila1 = null;
					
				}
				
				file2.save( hoja, "MaxPagosOC.csv");
				
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup>
		<componentes:TituloChartMaxTablero width="100%" text="PAGOS" />
	</s:HGroup>
	<pq:MobViewStack id="stackGeneral" width="100%" height="100%" creationPolicy="all">
		<s:NavigatorContent id="vistaTabla" width="100%" height="100%">
			
			<s:VGroup width="100%" height="100%" paddingBottom="0" gap="0">
				<s:VGroup id="gvGrid" width="100%" height="100%" paddingBottom="0" horizontalAlign="center">
					<otros:divisionGruesa width="100%" />
					<AdvancedDataGrid:PQNetAdvanceDataGridFooter id="gridPagos" itemClickADG="gridItemClickEvent(event)" width="100%" height="100%" dataProvider="{this._pagosTabla}" disableDragableColumns="{[0]}" disableResizableColumns="{[0]}"
																 anchoColumnas="{['5%','10%','10%','10%','5%','10%','10%','10%','10%','10%','=']}" mostrarFooter="false" tipoDeConsulta="vacio">
						<AdvancedDataGrid:columns>
							<mx:AdvancedDataGridColumn headerText="#" dataField="numFila"  />
							<mx:AdvancedDataGridColumn headerText="Empresa" dataField="empresa"  />
							<mx:AdvancedDataGridColumn headerText="Proveedor" dataField="nombreProveedor"  />
							<mx:AdvancedDataGridColumn headerText="OC" dataField="ordenCompra">
								<mx:itemRenderer>
									<fx:Component>
										<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false">
											<s:states>
												<s:State name="normal"/>
												<s:State name="hovered"/>
												<s:State name="selected"/>
											</s:states>
											<mx:LinkButton label="{data.ordenCompra}" textDecoration.selected="underline" color="0x257d92" toolTip="Ver OC" 
														   horizontalCenter="0" textAlign="center" width="100"/>
										</s:MXAdvancedDataGridItemRenderer>
									</fx:Component>
								</mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="Pzas" dataField="cantidad"  />
							<mx:AdvancedDataGridColumn headerText="Monto OC" dataField="montoOCString"  />
							<mx:AdvancedDataGridColumn headerText="Folio" dataField="folioFP">
								<mx:itemRenderer>
									<fx:Component>
										<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false">
											<s:states>
												<s:State name="normal"/>
												<s:State name="hovered"/>
												<s:State name="selected"/>
											</s:states>
											<mx:LinkButton  label=" {data.folioFP}" color="0x257d92" toolTip="Ver factura" textDecoration.selected="underline" horizontalCenter="0" fontSize="12"/>
										</s:MXAdvancedDataGridItemRenderer>
									</fx:Component>
								</mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
<!--							<mx:AdvancedDataGridColumn headerText="Factura" dataField="noFactura">
								<mx:itemRenderer>
									<fx:Component>
										<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false">
											<s:states>
												<s:State name="normal"/>
												<s:State name="hovered"/>
												<s:State name="selected"/>
											</s:states>
											<mx:LinkButton label="{data.noFactura}" color="0x257d92" toolTip="Ver factura" textDecoration.selected="underline" horizontalCenter="0"/>
										</s:MXAdvancedDataGridItemRenderer>
									</fx:Component>
								</mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
-->							<mx:AdvancedDataGridColumn headerText="Monto factura"  dataField="montoFacturaString" /> <!--montoFacturaFormato-->
							<mx:AdvancedDataGridColumn headerText="FEP" dataField="fechaEstimadaPagoString" />
							<mx:AdvancedDataGridColumn headerText="FP" dataField="fechaString" />
							<mx:AdvancedDataGridColumn headerText="Estado de pago" dataField="estado" />
				<!--			<mx:AdvancedDataGridColumn headerText="Estado de pago" dataField="estado"  >
								<mx:itemRenderer>
									<fx:Component>
										<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false">
											<s:states>
												<s:State name="normal"/>
												<s:State name="hovered"/>
												<s:State name="selected"/>
											</s:states>
											<s:Label text="{data.estado}"  horizontalCenter="0"/>
										</s:MXAdvancedDataGridItemRenderer>
									</fx:Component>
								</mx:itemRenderer>
							</mx:AdvancedDataGridColumn>-->
						</AdvancedDataGrid:columns>
					</AdvancedDataGrid:PQNetAdvanceDataGridFooter>
					
				</s:VGroup>
				<otros:division width="100%" grueso="2" color="0xeaeaea"/>
				<s:HGroup id="grpFooter" width="100%" height="75" verticalAlign="middle" gap="0">
					<label:Titulo id="lbl1_nototal" paddingTop="0" width="5%" textAlign="center" fontSize="{_size}"/>
					<label:Titulo id="lbl2_noOrdenCompra" paddingTop="0" width="10%" textAlign="center" fontSize="{_size}"/>
					<label:Titulo id="lbl3_noProveedores" paddingTop="0" width="10%" textAlign="center" fontSize="{_size}"/>
					<s:Spacer width="10%"/>
					<label:Titulo id="lbl4_noPiezas" paddingTop="0" width="5%" textAlign="center" fontSize="{_size}"/>
					<label:Titulo id="lbl5_montoOC" paddingTop="0" width="10%" textAlign="center" fontSize="{_size}"/>
					<s:Spacer width="10%"/>
					<label:Titulo id="lbl6_montoFactura" paddingTop="0" width="10%" textAlign="center" fontSize="{_size}"/>
			

				</s:HGroup>
				<otros:divisionHueca width="100%" />
				<s:HGroup width="100%" height="40" verticalAlign="middle" paddingBottom="5" paddingTop="10">
					<grafica:botonPopUp icono="chart" click="stackGeneral.selectedChild = vistaGrafico"/>
					<pqNet:botonPqNetLargo label="Inicio" click="maxPagos()" />
					<s:Spacer width="100%" />
					<pqNet:botonPqNetLargo id="btnExportar" icono="exportar" label="Exportar" click="generaArchivo()" />
				</s:HGroup>	
				
			</s:VGroup>
		</s:NavigatorContent>	
		
		<s:NavigatorContent id="vistaGrafico" width="100%" height="100%">
			<s:HGroup width="100%" height="100%" gap="0" paddingRight="-20">
				<s:VGroup width="100%" height="100%" gap="0" paddingRight="20" >
					<otros:divisionGruesa width="100%" />
					<mx:ColumnChart width="100%" height="100%" id="myChart" type="stacked" showDataTipTargets="false" dataTipRenderer="{DataTipRenderPagos}"			
									showDataTips="true" mouseSensitivity="5" dataTipMode="multiple" dataProvider="{this._pagosGrafica}" seriesFilters="[]"> 
						<mx:series>
							<mx:ColumnSeries id="colBarRed"
											 yField="porPagar"
											 showDataEffect="{fxInterpolateIn}"
											 itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.BarRedRenderer"
											 />
							<mx:ColumnSeries id="colBarVerde"
											 yField="pagada" 
											 showDataEffect="{fxInterpolateIn}"
											 itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.BarGreenRenderer"
											 />
						</mx:series>
						<mx:horizontalAxis>
							<mx:CategoryAxis id="vMes" categoryField="etiquetaMes" title="{this._etiquetaPeriodo}"/>
						</mx:horizontalAxis>
						<mx:verticalAxis>
							<mx:LinearAxis id="vCantidad" baseAtZero="true" labelFunction="formateoEje"/>
						</mx:verticalAxis>			
						
						<mx:verticalAxisRenderers>
							<mx:AxisRenderer axis="{vCantidad}" showLine="false" tickPlacement="none" styleName="axisVerticalLabels"/>
						</mx:verticalAxisRenderers>
						<mx:horizontalAxisRenderers>
							<mx:AxisRenderer axis="{vMes}" axisStroke="{trazoGruezo}" tickStroke="{trazoDelgado}" fontFamily="Helvetica" fontSize="11" fontWeight="bold" fontStyle="normal" labelFunction="lblFunction" />
						</mx:horizontalAxisRenderers>
					</mx:ColumnChart>
					<s:Label width="100%" paddingBottom="10" styleName="axisVerticalLabels">
						<s:text>Los montos se refieren  a costo de Compra</s:text>
					</s:Label>
					<otros:divisionHueca width="100%" />
					<s:HGroup width="100%" height="40" verticalAlign="middle" paddingBottom="5" paddingTop="10">
						<grafica:botonPopUp icono="tabla" click="stackGeneral.selectedChild = vistaTabla"/>
						<pqNet:botonPqNetLargo label="Inicio" click="maxPagos()" />
					</s:HGroup>	
				</s:VGroup>	
				<!--<componentes:PanelInfoMax textoHTML="{catalogoInfoGraficas.TABLERO_PRODUCTOS_PAGOS}"/>-->
			</s:HGroup>	
		</s:NavigatorContent>
	</pq:MobViewStack>
</s:VGroup>
