<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componentes ="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*"
		 xmlns:pq="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.pq.*" 
		 xmlns:grafica="skins.botones.grafica.*" 
		 xmlns:pqNet="skins.botones.pqNet.*"
		 xmlns:label="skins.skin.label.*"
		 width="100%" height="100%" 
		 creationComplete="completeHandlerABC(event)" xmlns:otros="skins.otros.*"
		 >
	<fx:Declarations>
		<s:Fade id="fadeOcultar" duration="200" alphaFrom="1.0" alphaTo="0.0"/>
		<s:Fade id="fadeMostrar" duration="500" alphaFrom="0.0" alphaTo="1.0"/>
		<s:Resize id="fxResize" target="{grpBotones}" duration="400" />
		<s:Rotate3D id="fxShow3D" duration="500" autoCenterTransform="true" angleYFrom="180" angleYTo="0" effectEnd="{idTimeOut; fxShow3D.angleYFrom = ( fxShow3D.angleYFrom == 180 ? -180:180)}" />
		<s:Rotate3D id="fxHide3D" duration="500" autoCenterTransform="true" angleYFrom="0" angleYTo="-180" effectEnd="{ fxHide3D.angleYTo = ( fxHide3D.angleYTo == -180 ? 180:-180); terminoAnimacion();  }"/>
		<s:Fade id="fxFade" duration="450" />
	</fx:Declarations>
		<fx:Metadata>
	[Event(name="clickGrid", type="flash.events.Event")]
	[Event(name="clickTacheGrid", type="flash.events.Event")] 
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.comun.EventoTablero;
			import mx.core.IVisualElement;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import skins.catalogos.catalogoIconosEtiquetas;
			import skins.plantillaproquifa.gestion.botoncuadro.btnGestion;
			
			public var comparacion:IVisualElement = null;
			public var vistaTablaGrafica:IVisualElement = null;
			public var maxGrafica:IVisualElement = null;
			
			private var _sinTabla:Boolean = false;
			private var _sinGrafica:Boolean = false;
			private var _sinInfo:Boolean = false;
			private var _paddingMenulineas:Number = 0;
			private var _paddingEquis:Number = 0;
			[Bindable]	public var titulo:String = "";
			[Bindable]	public var informacion:String = "";
			[Bindable]	public var tituloGrid:String = "";
			private var tipoVista:String = "tabla";
			
			private var _contenido:IVisualElement;
			private var _contenidoGrid:IVisualElement;
			private var _mostrarMiniGrid:Boolean = false;
			
			public function get mostrarMiniGrid():Boolean
			{
				return _mostrarMiniGrid;
			}
			
			public function set mostrarMiniGrid(value:Boolean):void
			{
				_mostrarMiniGrid = value;
			}
			
			public function get sinInfo():Boolean
			{
				return _sinInfo;
			}
			
			public function set sinInfo(value:Boolean):void
			{
				_sinInfo = value;
			}
			
			public function get contenido():IVisualElement
			{
				return _contenido;
			}
			
			public function set contenido(value:IVisualElement):void
			{
				_contenido = value;
				if( _contenido != null ) 
					navChart.addElement( _contenido );
			}
			
			
			public function get contenidoGrid():IVisualElement
			{
				return _contenidoGrid;
			}
			
			public function set contenidoGrid(value:IVisualElement):void
			{
				_contenidoGrid = value;
				if( _contenidoGrid != null ) 
					navGrid.addElement( _contenidoGrid );
			}
			
			
			public function get sinTabla():Boolean
			{
				return _sinTabla;
			}
			public function set sinTabla(valor:Boolean):void{
				_sinTabla = valor;
			}
			
			public function get paddingMenulineas():Number
			{
				return _paddingMenulineas;
			}
			public function set paddingMenulineas(valor:Number):void{
				_paddingMenulineas = valor;
			}
			
			public function get paddingEquis():Number
			{
				return _paddingEquis;
			}
			public function set paddingEquis(valor:Number):void{
				_paddingEquis = valor;
			}
			
			
			
			private function mostrarMenu():void{
				clearTimeout( idTimeOut );
				if( !fxResize.isPlaying ){
					var iAltoMenu:Number = 50;
					_hideBtnBool = true;					
					if (!sinTabla){
						btnTabla.visible = true;
						iAltoMenu += 35;
					}	
					if (!sinGrafica){
						btnMAX.visible = true;
						iAltoMenu += 35;
					}
					if (!sinInfo){
						btnInfo.visible = true;
						iAltoMenu += 35;
					}
					if (sinGrafica && sinInfo && !sinTabla){
						btnInfo.includeInLayout = btnMAX.includeInLayout = false;
						vgrTabla.percentHeight = 100;
						iAltoMenu = iAltoMenu -15;
					}
					if(paddingMenulineas > 0){
						iAltoMenu += paddingMenulineas;
					}
					
					idTimeOut = setTimeout( timeMenu, 1500);
					fxResize.heightTo = iAltoMenu;					
					fxResize.play();
				}
			}
			private function timeMenu():void{
				if( _hideBtnBool && !fxResize.isPlaying && !fxShow3D.isPlaying){ 
					_hideBtnBool = false;
					fxResize.heightTo = 0;
					fxResize.play();
					btnInfo.visible = false;
					btnMAX.visible = false;
					btnTabla.visible = false;
				}
			}
			private var idTimeOut:uint;
			[Bindable]	private var _hideBtnBool:Boolean = false;
			
			protected function completeHandlerABC(event:FlexEvent):void
			{
				fxShow3D.addEventListener( EffectEvent.EFFECT_START, effectShowHandler);
				fxHide3D.addEventListener( EffectEvent.EFFECT_START, effectHideHandler);
				
				if (paddingMenulineas > 0)
					menu.paddingTop=paddingMenulineas;
				
				if (sinTabla)
					btnTabla.visible = btnTabla.includeInLayout = false;
				if (sinGrafica)
					btnMAX.visible = btnMAX.includeInLayout = false;
				
				if(paddingEquis > 0){
					navGridVGroup.paddingRight = paddingEquis;
				}
				
			}
			private function effectShowHandler( event:EffectEvent ):void{
				fxFade.target = (event.currentTarget as Rotate3D).target;
				fxFade.alphaFrom = 0;
				fxFade.alphaTo = 1;
				fxFade.play();
			}
			private function effectHideHandler( event:EffectEvent ):void{
				fxFade.target = (event.currentTarget as Rotate3D).target;
				fxFade.alphaFrom = 1;
				fxFade.alphaTo = 0;
				fxFade.play();
			}
			
			private function maximizaGrafica():void{	
				var evt:EventoTablero = new EventoTablero(EventoTablero.MAXIMIZAR_GRAFICA);
				evt.comparacionCharts = comparacion;
				//evt.maxChart = vistaTablaGrafica;
				if( vistaTablaGrafica != null )	maxGrafica = vistaTablaGrafica;
				dispatchEvent(evt);
			}
			private function maxTabla():void{
				var evt:EventoTablero = new EventoTablero(EventoTablero.MAXIMIZAR_TABLA);
				evt.comparacionCharts = comparacion;
				if( vistaTablaGrafica != null )	maxGrafica = vistaTablaGrafica;
				
				dispatchEvent(evt);
			}
			
			private function ocultaMiniMenu():void{
				_hideBtnBool = true;
				idTimeOut = setTimeout( timeMenu, 1500); 
			}
			private function btnsOver():void{
				_hideBtnBool = false;
			}
			
			[Bindable]
			public function get sinGrafica():Boolean
			{
				return _sinGrafica;
			}
			
			public function set sinGrafica(value:Boolean):void
			{
				_sinGrafica = value;
			}
			
			private function terminoAnimacion():void
			{
				if(_mostrarMiniGrid)
					dispatchEvent(new Event("terminoAnimacion",true));
			}
			
			protected function btnTabla_clickHandler(event:MouseEvent):void
			{
				if(_mostrarMiniGrid)
				{
					stackTodo.selectedIndex = 2;
					_hideBtnBool = false;
					dispatchEvent(new Event("clickGrid"));
				}
				else{
					this.tipoVista='tabla';
					maxTabla();
				}
			}
			
			protected function botonpqnetlargo1_clickHandler(event:MouseEvent):void
			{
				stackTodo.selectedIndex = 0; 
				_hideBtnBool = true; 
				idTimeOut = setTimeout( timeMenu, 1500);
				
				
			}
			
			protected function botonpqnetlargo2_clickHandler(event:MouseEvent):void
			{
				stackTodo.selectedIndex = 0; 
				_hideBtnBool = true; 
				idTimeOut = setTimeout( timeMenu, 1500);
				dispatchEvent(new Event("clickTacheGrid"));
			}
			
		]]>
	</fx:Script>
	<pq:MobViewStack id="stackTodo" width="100%" height="100%" creationPolicy="all" >
		
		<s:NavigatorContent id="navChart" showEffect="{fxShow3D}" hideEffect="{fxHide3D}"  >
			<s:HGroup id="grpMain" width="100%" depth="1" paddingLeft="15">
				<componentes:tituloChartTablero id="title" width="100%" paddingTop="15" text="{ this.titulo }" />
				<s:BorderContainer id="grpBotones" height="0" width="38" backgroundColor="0x595959" borderVisible="false" 
								   mouseOver="mostrarMenu()" mouseOut="{_hideBtnBool = true; idTimeOut = setTimeout( timeMenu, 1500); }" >
					<s:VGroup width="100%" height="100%" horizontalAlign="center" horizontalCenter="0" gap="3"  id="menu" >
						<s:Image id="btnMenu" source="{catalogoIconosEtiquetas.getInstance().etiquetas_menulineas}"  />
						<s:VGroup width="100%" verticalAlign="bottom" id="vgrTabla" >						
							<grafica:botonPopUp width="100%" icono="tabla" id="btnTabla" showEffect="fadeMostrar" hideEffect="fadeOcultar" visible="false" fondoPq="false"
												mouseOver="btnsOver()" mouseOut="ocultaMiniMenu()" verticalCenter="10"
												click="btnTabla_clickHandler(event)"/>
						</s:VGroup>							
						<grafica:botonPopUp width="100%" height="100%" icono="chart" id="btnMAX" showEffect="fadeMostrar" hideEffect="fadeOcultar" visible="false" fondoPq="false" 
											mouseOver="btnsOver()" mouseOut="ocultaMiniMenu()"
											click="this.tipoVista='grafico'; maximizaGrafica()" />
						<grafica:botonPopUp width="100%" height="100%" icono="infopopup" id="btnInfo" showEffect="fadeMostrar" hideEffect="fadeOcultar" visible="false" fondoPq="false"
											click="{stackTodo.selectedIndex = 1; _hideBtnBool = false }" 
											mouseOver="btnsOver()" mouseOut="ocultaMiniMenu()" />
					</s:VGroup>
				</s:BorderContainer>
			</s:HGroup>
		</s:NavigatorContent>
		
		<s:NavigatorContent id="navInfo" showEffect="{fxShow3D}" hideEffect="{fxHide3D}" >
			<s:VGroup width="100%" height="100%" paddingLeft="30" paddingRight="20" paddingTop="11" paddingBottom="20" gap="0">
				<s:HGroup width="100%" horizontalAlign="right" paddingRight="15" paddingTop="0" paddingBottom="15">
					<pqNet:botonPqNetLargo rendererPq="espantosaequis" click="botonpqnetlargo1_clickHandler(event)"  />
				</s:HGroup>
				<s:Scroller width="100%" height="100%">
					<s:RichEditableText id="lblInfo" width="100%" height="100%" selectable="false" editable="false" justificationStyle="auto" textAlign="justify"
										textFlow="{ TextConverter.importToFlow( informacion, TextConverter.TEXT_FIELD_HTML_FORMAT) }" />
				</s:Scroller>
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent id="navGrid" showEffect="{fxShow3D}" hideEffect="{fxHide3D}">
			<s:VGroup width="100%" paddingLeft="20" paddingRight="0" paddingTop="10" paddingBottom="0" gap="0" depth="1" id="navGridVGroup">			
				<s:HGroup width="100%" horizontalAlign="right" paddingRight="15" paddingTop="0" paddingBottom="5">
					<label:Texto fontFamily="Helvetica" fontSize="14" fontWeight="bold" fontStyle="normal" width="100%" paddingTop="15" text="{ this.tituloGrid }" />					
					<pqNet:botonPqNetLargo rendererPq="espantosaequis" click="botonpqnetlargo2_clickHandler(event)"  />
				</s:HGroup>	
			</s:VGroup>
		</s:NavigatorContent>
		
	</pq:MobViewStack>
</s:Group>
