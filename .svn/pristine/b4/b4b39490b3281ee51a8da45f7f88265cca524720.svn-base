<?xml version="1.0" encoding="utf-8"?>
<s:CheckBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx"
			skinClass="skins.skin.chekbox.skinDefaultPQNetRadio"
			creationComplete="checkbox2_creationCompleteHandler(event)"
			currentStateChanging="checkbox2_currentStateChangingHandler(event)" 
			>
	
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.events.StateChangeEvent;
			import mx.utils.StringUtil;
			
			import skins.catalogos.catalogoIconosGrid;
			
			private var _nombreEstilofuente:String;
			private var _tipoCheck:String = "circuloRadio";
			private var _autoSize:Boolean;
			private var _adjustW:int;
			private var _adjustH:int;
			private var _radioTam:int;
			private var _fontSize:int;
			private var _hideLabel:Boolean = false;
			
			
			public function configurarRadio($tipo:String,$nombreDelEstilo:String):void
			{
				if($tipo != null && StringUtil.trim($tipo).length >0)
				{
					_tipoCheck = $tipo;
					
					if( $tipo == 'circuloRadio' )
					{
						skinDefaultPQNetRadio(skin).checkRadioNormal = catalogoIconosGrid.getInstance().radioAzul_Normal;
						skinDefaultPQNetRadio(skin).checkRadioSeleccionado = catalogoIconosGrid.getInstance().radioAzul_Seleccionado;
						skinDefaultPQNetRadio(skin).checkRadioDisable = catalogoIconosGrid.getInstance().radioAzul_Normal;
						skinDefaultPQNetRadio(skin).checkRadioDisableSeleccionado = catalogoIconosGrid.getInstance().radioAzul_Seleccionado;
					}
					else if($tipo == 'cuadradoRadio')
					{
						skinDefaultPQNetRadio(skin).checkRadioNormal = catalogoIconosGrid.getInstance().checkCuadrado;
						skinDefaultPQNetRadio(skin).checkRadioSeleccionado = catalogoIconosGrid.getInstance().checkCuadradoSelected;
						skinDefaultPQNetRadio(skin).checkRadioDisable = catalogoIconosGrid.getInstance().checkCuadrado;
						skinDefaultPQNetRadio(skin).checkRadioDisableSeleccionado = catalogoIconosGrid.getInstance().checkCuadradoSelected;
					}
					else if($tipo == 'circuloSombra')
					{
						skinDefaultPQNetRadio(skin).checkRadioNormal = catalogoIconosGrid.getInstance().checkSombra_empty;
						skinDefaultPQNetRadio(skin).checkRadioSeleccionado = catalogoIconosGrid.getInstance().checkSombra_selected;
						skinDefaultPQNetRadio(skin).checkRadioDisable = catalogoIconosGrid.getInstance().checkSombra_empty;
						skinDefaultPQNetRadio(skin).checkRadioDisableSeleccionado = catalogoIconosGrid.getInstance().checkSombra_selected;
					}
					else
					{
						trace("ADVERTENCIA ::::::::: Este check no se ha habilitado para el tipo: " + $tipo);
					}
					
					if(hideLabel)
					{
						skinDefaultPQNetRadio(skin).labelDisplay.visible = false;
					}
				}
			}
			
			[Inspectable(category="Common",defaultValue="",enumeration="default22,default14,default12")]
			public function get nombreStiloFuente():String
			{
				return _nombreEstilofuente;
			}
			
			public function set nombreStiloFuente(value:String):void
			{
				_nombreEstilofuente = value;
			}
			
			[Inspectable(category="Common",defaultValue="circuloRadio",enumeration="circuloRadio,cuadradoRadio,circuloSombra")]
			public function get tipoCheck():String
			{
				return _tipoCheck;
			}
			
			public function set tipoCheck(value:String):void
			{
				_tipoCheck = value;
			}
			
			protected function checkbox2_creationCompleteHandler(event:FlexEvent):void
			{
				configurarRadio(_tipoCheck,_nombreEstilofuente);
				addEventListener(ResizeEvent.RESIZE, resizeHandler,false,0,true);
			}
			
			private function resizeHandler(evt:ResizeEvent):void
			{
				refresh();
			}
			
			public function refresh():void
			{
				if(autoSize)
				{
					if(adjustW)
					{
						var sizeRadioW:int =(radioTam/adjustW) * (this.parent.width);
						sizeRadioW = sizeRadioW < 10 ? 10:sizeRadioW;
						skinDefaultPQNetRadio.sizeWidth = sizeRadioW;
					}
					else
					{
						skinDefaultPQNetRadio.sizeWidth = 25;
					}
					if(adjustH)
					{
						var sizeRadioH:int = (radioTam/adjustH) * (this.parent.height);
						sizeRadioH = sizeRadioH < 10 ? 10:sizeRadioH;
						skinDefaultPQNetRadio.sizeHeight = sizeRadioH;
					}
					else
					{
						if(adjustW)
						{
							skinDefaultPQNetRadio.sizeHeight = sizeRadioW;
						}
						else
						{
							skinDefaultPQNetRadio.sizeHeight = 25;
						}
					}
					if(fontSize && adjustW)
					{
						var sizeFont:int = (fontSize/adjustW) * (this.parent.width);
						sizeFont = sizeFont > fontSize ? fontSize:sizeFont;
						skinDefaultPQNetRadio.sizeFont = sizeFont;
					}
					else
					{
						skinDefaultPQNetRadio,sizeFont = 16;
					}
				}
			}
			
			protected function checkbox2_currentStateChangingHandler(event:StateChangeEvent):void
			{
				trace("TODO Auto-generated method stub");
			}
			override protected function updateDisplayList($width:Number, $height:Number):void
			{
				super.updateDisplayList($width,$height);
				if (skin)
				{
					(skin as skinDefaultPQNetRadio).width = minWidth;
					(skin as skinDefaultPQNetRadio).icono.width = minWidth;
					(skin as skinDefaultPQNetRadio).height = minHeight;
					(skin as skinDefaultPQNetRadio).icono.height = minHeight;
				}
			}
			
			public function get autoSize():Boolean
			{
				return _autoSize;
			}
			
			public function set autoSize(value:Boolean):void
			{
				_autoSize = value;
			}
			
			public function get adjustW():int
			{
				return _adjustW;
			}
			
			public function set adjustW(value:int):void
			{
				_adjustW = value;
			}
			
			public function get adjustH():int
			{
				return _adjustH;
			}
			
			public function set adjustH(value:int):void
			{
				_adjustH = value;
			}
			
			public function get radioTam():int
			{
				return _radioTam;
			}
			
			public function set radioTam(value:int):void
			{
				_radioTam = value;
			}
			
			public function get fontSize():int
			{
				return _fontSize;
			}
			
			public function set fontSize(value:int):void
			{
				_fontSize = value;
			}
			
			public function get hideLabel():Boolean
			{
				return _hideLabel;
			}
			
			public function set hideLabel(value:Boolean):void
			{
				_hideLabel = value;
			}
			
			override public function set minWidth(value:Number):void
			{
				super.minWidth = value;
			}
			
			override public function set minHeight(value:Number):void
			{
				super.minHeight = value;
			}
			
		]]>
	</fx:Script>
	
	
</s:CheckBox>
