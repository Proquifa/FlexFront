<?xml version="1.0" encoding="utf-8"?>
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  skinClass="skins.skin.botones.boton.skinBotonDefault"
		  creationComplete="inicio(event)"
		  >
	
	
	<!--- Este boton es la mejora de Boton.mxml
	ya que en el otro se pregunta el tipo, tamaÃ±o, color de letra, etc..
	y aqui solo tomara el styleName y que la hoja de estilo se encargue de todo esto
	-->
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import mx.controls.Image;
			import spark.layouts.HorizontalAlign;
			import spark.layouts.VerticalAlign;
			
			private var _color:uint = 0x0f566a; //Azul cielo Default
			private var _icono:Image;
			private var _horizontal:String = HorizontalAlign.CENTER;
			private var _conTexto:Boolean = false;
			private var _esquinaRedonda:Boolean = false;
			
			private var svg:String = ""
			private var _isSvg:Boolean = false;
			
			private var _conBorde:Boolean = false;
			private var _bordeColor:uint = 0x000000;
			private var _styleNameLabel:String = "texto_16pt_Bebas_Blanco";
			
			private var _vertical:String = VerticalAlign.MIDDLE;
			private var _conPaddingBottom:String = "";

			public function get conPaddingBottom():String
			{
				return _conPaddingBottom;
			}

			public function set conPaddingBottom(value:String):void
			{
				_conPaddingBottom = value;
				if(skin){
					(skin as skinBotonDefault).conPaddingBottom = value;
				}
			}

			public function get vertical():String
			{
				return _vertical;
			}

			public function set vertical(value:String):void
			{
				_vertical = value;
				if(skin){
					(skin as skinBotonDefault).vertical = value;
				}
			}

			public function get horizontal():String
			{
				return _horizontal;
			}
			
			public function set horizontal(value:String):void
			{
				_horizontal = value;
				if(skin){
					(skin as skinBotonDefault).horizontal = value;
				}
			}
			
			public function get icono():Image
			{
				return _icono;
			}
			
			public function set icono(value:Image):void
			{
				_icono = value;
				if(skin && icono ){
					(skin as skinBotonDefault).icono = icono
				}
			}
			
			public function get color():uint
			{
				return _color;
			}
			
			public function set color(value:uint):void
			{
				_color = value;
				if (skin){
					(skin as skinBotonDefault).color = value;
				}
			}
			
			[Inspectable(category="Effects",defaultValue="false",enumeration="false,true")]
			public function get conTexto():Boolean
			{
				return _conTexto;
			}
			
			public function set conTexto(value:Boolean):void
			{
				_conTexto = value;
				if (skin){
					(skin as skinBotonDefault).texto = value;
				}
			}
			
			protected override function commitProperties():void{
				super.commitProperties();
				
			}
			
			protected function inicio(event:FlexEvent):void
			{
				(skin as skinBotonDefault).icono.visible = false;
				(skin as skinBotonDefault).icono.includeInLayout = false;
				if (icono){
					(skin as skinBotonDefault).icono.visible = true;
					(skin as skinBotonDefault).icono.includeInLayout = true;
					(skin as skinBotonDefault).icono.source = icono;
				}
				if (conBorde)
					(skin as skinBotonDefault).borde.alpha = 1;
				else
					(skin as skinBotonDefault).borde.alpha = 0;
				(skin as skinBotonDefault).color = color;
				(skin as skinBotonDefault).texto = conTexto;
				(skin as skinBotonDefault).horizontal = horizontal;
				(skin as skinBotonDefault).esquinaRedonda = esquinaRedonda;
				(skin as skinBotonDefault).borderColor = bordeColor;
				(skin as skinBotonDefault).labelDisplay.styleName = styleNameLabel;
				(skin as skinBotonDefault).vertical = vertical;
				(skin as skinBotonDefault).conPaddingBottom = conPaddingBottom;
			}
			
			public function get esquinaRedonda():Boolean
			{
				return _esquinaRedonda;
			}
			
			public function set esquinaRedonda(value:Boolean):void
			{
				_esquinaRedonda = value;
				if(skin){
					(skin as skinBotonDefault).esquinaRedonda = value;
				}
			}
			
			public function get isSvg():Boolean
			{
				return _isSvg;
			}
			
			public function set isSvg(value:Boolean):void
			{
				svg = "";
				_isSvg = value;
				if (value)
					svg = "Svg";
			}
			
			public function get conBorde():Boolean
			{
				return _conBorde;
			}
			
			public function set conBorde(value:Boolean):void
			{
				_conBorde = value;
				if(skin){
					if (value)
						(skin as skinBotonDefault).borde.alpha = 1;
					else
						(skin as skinBotonDefault).borde.alpha = 0;
				}
			}
			
			public function get bordeColor():uint
			{
				return _bordeColor;
			}
			
			public function set bordeColor(value:uint):void
			{
				_bordeColor = value;
				if(skin){
					(skin as skinBotonDefault).borderColor = value;
				}
			}

			public function get styleNameLabel():String
			{
				return _styleNameLabel;
			}

			public function set styleNameLabel(value:String):void
			{
				_styleNameLabel = value;
				if(skin)
					(skin as skinBotonDefault).labelDisplay.styleName = value;
			}

			
		]]>
	</fx:Script>
	
	
</s:Button>
