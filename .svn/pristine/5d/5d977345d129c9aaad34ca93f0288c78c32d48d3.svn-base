<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componentes ="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*" 
		 xmlns:graficas="skins.skin.graficas.*"
		 width="100%" height="100%"
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Compra;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.utils.ObjectUtil;
			
			private var keys:Object;
			[Bindable] private var _infoAbiertoCerrado:ArrayCollection;
			
			public function set obtenerListaCompras($infoGrafica:ArrayCollection):void{
				if($infoGrafica == null) return;
				
				_infoAbiertoCerrado = new ArrayCollection();
				myChart.dataProvider = new ArrayCollection();
				
				var arrayTemp:Array = (ObjectUtil.copy($infoGrafica) as ArrayCollection).source;
				
				/**
				 * Se filtra de universo de compras, las que tengan estado Cancelada y cacelable
				 * **/
				var arrayComprasSinCanceladasYBles:Array = new Array();
				arrayComprasSinCanceladasYBles = arrayTemp.filter(quitarCanceladasYBles);
				
				//Liberar Memoria
				arrayTemp = new Array();
				
				arrayComprasSinCanceladasYBles.sortOn("abierto_cerrado");
				
				/**
				 * arreglo temporal para controlar el ciclo del for que se encargar치 de sumar las cantidades de cada Estado
				 * quitando las duplicados
				 * */
				
				keys= new Object();
				var arrayTotalEstados:Array = new Array();
				arrayTotalEstados = arrayComprasSinCanceladasYBles.filter(quitaDuplicados);
				
				/**
				 * Se forman los objetos que ser치n enviados a la grafica, los totales de cada Comprador
				 * */
				
				FormarLosEstados(arrayTotalEstados,arrayComprasSinCanceladasYBles,_infoAbiertoCerrado);
				
					myChart.dataProvider = myChart.aplicarFormatoConsultaCompras(_infoAbiertoCerrado);
				
				//Para liberar memoria
				arrayComprasSinCanceladasYBles = new Array();
				arrayTotalEstados = new Array();
			}
			private function FormarLosEstados(TotalEstados:Array,estadosInfo:Array,infoEstados:ArrayCollection):void
			{
				var totalPartidas:int;
				var totalPiezas:int;
				var totalCompras:int;
				var totalMonto:Number;
				var totalProveedores:int;
				var keysProveedoresAbiertas:Object= new Object();
				var keysComprasAbiertas:Object= new Object();
				var keys2:Object = new Object();
				keys = new Object();
				
				var currentPartidaCompra:Compra; 
				var j:int;
				var itemResumenConsulta:ResumenConsulta;
				for(var i:int =0; i<TotalEstados.length; i++){
					j=0;
					totalPartidas =0;
					totalPiezas =0;
					totalCompras =0;
					totalMonto =0;
					totalProveedores =0;
					currentPartidaCompra = estadosInfo[j] as Compra;
					while( (TotalEstados[i] as Compra).abierto_cerrado == currentPartidaCompra.abierto_cerrado){
						totalPartidas += currentPartidaCompra.totalPartidas;
						totalPiezas += currentPartidaCompra.totalPiezas_partidas;
						totalMonto += currentPartidaCompra.montoTotalDolares_partidas;
						
						/**
						 * Para el conteo de cotizaciones Dando Peso a las compras que est치n como abiertas
						 * */
						if( currentPartidaCompra.abierto_cerrado == "ABIERTO"){
							if(!keysComprasAbiertas.hasOwnProperty(currentPartidaCompra.clave)){
								keysComprasAbiertas[currentPartidaCompra.clave] = currentPartidaCompra.clave;
								totalCompras++
							}
							if(!keysProveedoresAbiertas.hasOwnProperty(currentPartidaCompra.nombreProveedor)){
								keysProveedoresAbiertas[currentPartidaCompra.nombreProveedor] = currentPartidaCompra.nombreProveedor;
								totalProveedores++;
							}
						}else{
							if(!keys.hasOwnProperty(currentPartidaCompra.clave) && !keysComprasAbiertas.hasOwnProperty(currentPartidaCompra.clave)){
								keys[currentPartidaCompra.clave]=currentPartidaCompra.clave;
								totalCompras++
							}
							if(!keys2.hasOwnProperty(currentPartidaCompra.nombreProveedor) && !keysProveedoresAbiertas.hasOwnProperty(currentPartidaCompra.nombreProveedor)){
								keys2[currentPartidaCompra.nombreProveedor] = currentPartidaCompra.nombreProveedor;
								totalProveedores++;
							}
						}
						
						estadosInfo.shift();
						if(estadosInfo.length >0)
							currentPartidaCompra = estadosInfo[j] as Compra;
						else
							currentPartidaCompra =new Compra();
					}
					
					itemResumenConsulta = new ResumenConsulta();
					itemResumenConsulta.etiqueta = (TotalEstados[i] as Compra).abierto_cerrado.toLocaleUpperCase();
					itemResumenConsulta.total = totalMonto;
					itemResumenConsulta.clientes_proveedores = totalProveedores;
					itemResumenConsulta.totalCompras = totalCompras;
					itemResumenConsulta.partidas = totalPartidas;
					itemResumenConsulta.piezasTotal = totalPiezas;
					
					infoEstados.addItem(ObjectUtil.copy(itemResumenConsulta));
				}
				/**
				 * Se necesita ordenar inversamente primero la suma de los cerrados y luego abiertos para invertir colores en la gr치fica.
				 * */ 
				if(infoEstados.length>0){
					if(infoEstados.length == 1){
						if((infoEstados[0] as ResumenConsulta).etiqueta == "ABIERTA"){
							itemResumenConsulta = new ResumenConsulta();
							itemResumenConsulta.etiqueta ="CERRADO";
							itemResumenConsulta.total = 0;
							itemResumenConsulta.piezasTotal =0;
							itemResumenConsulta.totalCompras =0;
							itemResumenConsulta.clientes_proveedores =0;
							itemResumenConsulta.partidas = 0;
							infoEstados.addItemAt(itemResumenConsulta,0);
						}
					}else{
						var sortField:SortField = new SortField();
						sortField.name = "etiqueta";
						sortField.numeric = false;
						
						var sort:Sort = new Sort();
						sort.fields = [sortField];
						sort.reverse();
						infoEstados.sort = sort;
						infoEstados.refresh();
					}
				}
			}
			private function quitarCanceladasYBles(item:Compra, id:uint, _array:Array):Boolean
			{
				if(item.estado != 'Cancelada' && item.estado != 'Cancelable'){
					return true;
				}else{
					return false;
				}
			}
			private function quitaDuplicados(item:Compra, id:uint, array:Array):Boolean
			{
				if(keys.hasOwnProperty(item.abierto_cerrado)){
					return false;
				}else{
					keys[item.abierto_cerrado] = item.abierto_cerrado;
					return true;
				}
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center">
		<s:Spacer width="100%" height="5%"/>
		<componentes:tituloChartTablero width="100%" text="ABIERTO VS CERRADO" textAlign="center" />
	</s:VGroup>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:Spacer width="100%" height="10%" />
		<graficas:PieChartPqGris id="myChart" width="100%" height="100%" horizontalCenter="0" verticalCenter="0"
								 dataProvider="{null}"
								 lineasHabilitadas="true" etiquetasHabilitadas="true" habilitarResumen="true"
								 showDataTips="false"  innerRadius=".5">   
			<graficas:series>
				<graficas:pieSeriesVS field="totalCompras"/> <!--piezasTotal-->
			</graficas:series>
		</graficas:PieChartPqGris>
		<s:Spacer width="100%" height="30%"/>
	</s:VGroup>
</s:Group>