<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:complementos="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.contacto.*"
				xmlns:maps="mx.com.proquifa.proquifanet.rsl.vista.mapas.mapasComponentes.*"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				width="771" close="cerrar()" creationPolicy="all" initialize="init()"
				layout="vertical" paddingLeft="20" paddingRight="20" paddingTop="15"
				showCloseButton="true"
				width.BAContactos="900" height.BAContactos="498"
				width.ClienteNuevo="900" height.ClienteNuevo="498"
				width.State1="900" height.State1="498" xmlns:label="skins.skin.label.*" xmlns:otros="skins.otros.*">
	<mx:states>
		<s:State name="State1"/>
		<s:State name="BAContactos"/>
		<s:State name="ClienteNuevo"/>
	</mx:states>
	<fx:Declarations>
		<maps:MapaContactos/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoGenerico;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoParaCatalogoService;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.ValidadorDataGrid;
			import mx.controls.CheckBox;
			import mx.events.ListEvent;
			public var empresaSelect:String;
			public var origenSelect:String;
			public var contactoSelect:String;
			private var estadoAnterior:String;
			private var contacto:ValidadorDataGrid;
			[Bindable]
			public var idEmpresaSelect:Number;
			[Bindable]
			public var idContactoSelect:Number;
			[Bindable]
			private var _contactos:ArrayCollection;
			[Bindable]
			public var _clientesOproveedores:ArrayCollection;
			[Bindable]
			public var _vieneD:String;
			public function init():void{
				if(this.gridContactos != null ){
					this.gridContactos.dataProvider = null;
				}
				this.btnAgregar.enabled = false;
				//evento usado para mandar a llmar los lcientes para el combo en el cliente no encontrado
				var evento:EventoParaCatalogoService = null;
				evento = new EventoParaCatalogoService( EventoParaCatalogoService.OBTENER_CLIENTES );
				evento.valorAdicional="";
				dispatchEvent( evento );
			}
			/**
			 * Metodo que recibe los contactos del Mapa
			 */ 
			public function set recibeContactos(datos:ArrayCollection):void{
				if(datos == null){
					return;
				}
				var i:Number;
				this._contactos = new ArrayCollection();
				for (i = 0; i < datos.source.length; i++){		       	
					var validaGrid:ValidadorDataGrid = new ValidadorDataGrid();		       
					validaGrid.columnaCero = i+1;
					validaGrid.columnaUnoTexto = (datos.getItemAt( i ) as Contacto).nombre;
					validaGrid.columnaDosTexto = (datos.getItemAt(i) as Contacto).EMail;
					validaGrid.columnaTresTexto = (datos.getItemAt(i) as Contacto).empresa;
					validaGrid.columnaCuatroTexto = (datos.getItemAt( i ) as Contacto).tipo;
					validaGrid.columnaBoolean1 =  false;
					validaGrid.columnaCinco = (datos.getItemAt( i ) as Contacto).idContacto;
					validaGrid.columnaSeisTexto = (datos.getItemAt( i ) as Contacto).telefono;
					if( (datos.getItemAt( i ) as Contacto).telefono != null && (datos.getItemAt( i ) as Contacto).telefonoN ){
						validaGrid.columnaSeisTexto = (datos.getItemAt( i ) as Contacto).telefono + ", " +  (datos.getItemAt( i ) as Contacto).telefonoN ;
					}
					this._contactos.addItem( validaGrid );
				}
			}
			private function itemClickEvent(event:ListEvent):void{	 
				// se declaran las variables 
				empresaSelect = new String();
				origenSelect = new String();
				contactoSelect = new String();
				idEmpresaSelect = new Number();
				idContactoSelect = new Number();
				if (event.columnIndex == 6) {	  
					var i:Number;	          		
					var numeroFila:Number = new Number;
					//se verifica  si en el evento se selecciono el checkBox 
					if( (event.itemRenderer as CheckBox).selected == true ) {	  
						//se obtiene el numero de fila nota:la columna cero trae siempre el mismo numero        			
						numeroFila = this.gridContactos.selectedItem.columnaCero;
						this.gridContactos.selectedItem.columnaBoolean1 = true
						//Se hace un ciclo para todos los elementos del dataGrid
						for ( i=0; i < this._contactos.source.length; i++){	  
							//donde se encuentre dentro del dataProvider  la misma columna seleccionada se le asigna el valor true al checkSeleccionado
							if( (this._contactos.getItemAt( i ) as ValidadorDataGrid).columnaCero ==  numeroFila){
								this._contactos.getItemAt( i ).columnaBoolean1 = true;
							}else{
								this._contactos.getItemAt( i ).columnaBoolean1 = false;
							}
						}
						this.btnAgregar.enabled = true; 
					} else if ((event.itemRenderer as CheckBox).selected == false ){
						for ( i=0; i < this._contactos.source.length; i++){	  
							this._contactos.getItemAt( i ).columnaBoolean1 = false;
						}
						this.btnAgregar.enabled = false;
					}               
					//se asigna a las variables los valores seleccionados
					empresaSelect = this.gridContactos.selectedItem.columnaTresTexto;
					origenSelect = this.gridContactos.selectedItem.columnaCuatroTexto;
					contactoSelect = this.gridContactos.selectedItem.columnaUnoTexto;
					idEmpresaSelect = this.gridContactos.selectedItem.columnaTresTexto;
					idContactoSelect= this.gridContactos.selectedItem.columnaCinco;  
					contacto = this.gridContactos.selectedItem as ValidadorDataGrid;
					this._contactos.refresh();      						    
				}	 	
			}
			private function agregarRegistro():void{
				if(this.chkContactoNuevo.selected == true){
					empresaSelect = new String();
					origenSelect = new String();
					contactoSelect = new String();
					idEmpresaSelect = new Number();
					idContactoSelect = new Number();
					if(this.chkNoRegistrado.selected == false){
						empresaSelect = this.cmbClientes.selectedItem.valor;
						idEmpresaSelect = this.cmbClientes.selectedItem.llave;
						origenSelect = "Cliente";
						contactoSelect = this.txtContactoNuevo.text;		 			    
						//idContactoSelect= this.gridContactos.selectedItem.columnaCinco;
						this.dispatchEvent(new Event("guardarContacto"));			 			    
					}else{
						empresaSelect = this.txtCliente.text;
						origenSelect = "Cliente";
						contactoSelect = this.txtContactoNuevo2.text;	
						if(this._vieneD == "analisisIncidente"){ //este metodo se utliza para regrear el contacto para el analisis del incidente y el contacto no se encontro
							var evento1:EventoGenerico = new EventoGenerico( EventoGenerico.REGRESA_CONTACTO_POP_UP_CONTACTOS);
							evento1.contacto = new ValidadorDataGrid();
							evento1.contacto.columnaCuatroTexto = "Clientes"
							evento1.contacto.columnaDosTexto = this.txtCliente.text; //correo
							evento1.contacto.columnaUnoTexto = this.txtContactoNuevo2.text;
							dispatchEvent( evento1 );
							this.dispatchEvent(new Event("guardarContacto"));	
						}else{
							this.dispatchEvent(new Event("agregaDatos"));
						}
					}	
				}else{
					var evento:EventoGenerico = new EventoGenerico( EventoGenerico.REGRESA_CONTACTO_POP_UP_CONTACTOS);
					evento.contacto = this.contacto;
					dispatchEvent( evento );
					this.dispatchEvent(new Event("guardarContacto"));	
				}
				this.currentState='';
				this.hbxNuevoContacto.visible = false;
				this.hbxNuevoContacto.height = 0;
				this.chkContactoNuevo.selected = false;
				this.gridContactos.dataProvider = null;
				this._contactos = null;     
				if(this.cmbClientes != null){
					this.cmbClientes.selectedIndex = -1;
				}
				quitarVentana();
			}
			private function cerrar():void{
				this.currentState='';
				this.hbxNuevoContacto.visible = false;
				this.hbxNuevoContacto.height = 0;
				this.chkContactoNuevo.selected = false;
				if(this.currentState == "BAContactos"){
					this.bacontactos2.txtNombre.text = "";
					this.bacontactos2.txtEmail.text = "";
				}else{
					this.brcontactos1.txtCorreoNombre.text = "";
				}
				if(this.cmbClientes != null){
					this.cmbClientes.selectedIndex = -1;
				}
				quitarVentana();
			}
			/** 
			 * Metodo para cambiar esl estado con el BotonCheck chkContactoNuevo
			 */
			private function cambiaAEstado():void{	
				if(this.chkContactoNuevo.selected == true){
					if( this.lnkBRContacto.label == "BÃºsqueda avanzada"){
						this.estadoAnterior = "estadoBusquedaRapida";
					}else{
						this.estadoAnterior = "estadoBusquedaAvanzada";
					}	
					this.currentState='ClienteNuevo';
					this.btnAgregar.enabled = true;
					if(this._vieneD == "analisisIncidente"){
						this.lblEmpresa_Correo.label = "Correo";
						this.stackClienteNuevo.selectedIndex = 1;
						this.chkNoRegistrado.selected = true;
					}
					/*faltacodigo busuqeda contacto nuevo*/
					var evento:EventoParaCatalogoService = new EventoParaCatalogoService( EventoParaCatalogoService.OBTENER_CLIENTES_NO_ENCONTRADOS );
					evento.valorAdicional = "";
					dispatchEvent( evento );
				}else{
					if(this.cmbClientes != null){
						this.cmbClientes.selectedIndex = -1;
					}
					if(this.estadoAnterior == "estadoBusquedaRapida"){
						this.currentState = '';
					}else{						
						this.currentState = 'BAContactos';
					}
				}		
			}
			
			/**
			 * Metodo que obtiene los clientes o proveedores del Mapa  
			 */
			public function set clientesNoEncontradosParaCombo(datos:ArrayCollection):void{
				if(datos == null){
					return;
				}
				this._clientesOproveedores = datos; 
			}
			/**
			 * Metodo usado para cambiar el combo de Clientes a un TextInput cuando se Rgistra un Nuevo Cliente 
			 */ 
			private function cambiaAEmpresaTexto():void{
				this.stackClienteNuevo.selectedIndex++;
				this.chkParaRegistrado.selected = true;
			}
			/**
			 * Metodo usado para cambiar el TextInput de Clientes al Combo con los clientes cargados se Rgistra un Nuevo Cliente 
			 */ 
			private function cambiaTextoEmpresaACombo():void{
				this.stackClienteNuevo.selectedIndex--;			
				this.chkNoRegistrado.selected = false;
			}
			private function quitarVentana():void{
				var evt:EventoGenerico = null;
				evt = new EventoGenerico( EventoGenerico.CERRAR_POP_UP_CONTACTOS);
				dispatchEvent( evt );
			}
			/**
			 * Metodo Publico que permite hacer Visible la opcion para agregar un contacto nuevo.
			 */
			public function contactoNuevoVisible():void{			
				this.hbxNuevoContacto.visible = true;
				this.hbxNuevoContacto.percentHeight = 100;
			} 
			
		]]>
	</fx:Script>
	<!--<s:Label fontSize="40" fontWeight="bold" text="BÃºsqueda de contactos"/>-->
	<label:labelTitulo_Otros text="BÃºsqueda de contactos"/>
	<!--<mx:HRule width="100%"/>-->
	<otros:division width="100%"/>
	<mx:HBox includeIn="BAContactos" width="100%" >
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="BÃºsqueda Rapida" id="lnkBAContacto" click="this.currentState=''"/>
	</mx:HBox>
	<mx:ViewStack id="stackClienteNuevo" includeIn="ClienteNuevo" width="100%" height="100%">
			<mx:Form id="Form1" width="100%" height="100%">
				<mx:HBox width="100%">						
					<mx:FormItem label="Origen: " paddingLeft="10">
						<mx:Label text="Cliente"/>
					</mx:FormItem>							
					<mx:Spacer width="100%"/>
					<mx:Label text="No registrado"/>
					<mx:CheckBox id="chkNoRegistrado" click="cambiaAEmpresaTexto()"/>
				</mx:HBox>
				<mx:FormItem label="Empresa: " width="100%">
					<s:ComboBox id="cmbClientes" horizontalCenter="-30" verticalCenter="-50" labelField="valor" width="100%" dataProvider="{this._clientesOproveedores}"/>
				</mx:FormItem>						
				<mx:FormItem label="Nombre:" width="100%">
					<mx:TextInput id="txtContactoNuevo" horizontalCenter="0" verticalCenter="-50" width="100%"/>
				</mx:FormItem>
			</mx:Form>	
			<mx:Form id="Form2" width="100%" height="100%">
				<mx:HBox width="100%">						
					<mx:FormItem label="Origen: " paddingLeft="10">
						<mx:Label text="Cliente"/>
					</mx:FormItem>							
					<mx:Spacer width="100%"/>
					<mx:Label text="No registrado"/>
					<mx:CheckBox id="chkParaRegistrado" selected="true" click="cambiaTextoEmpresaACombo()"/>
				</mx:HBox>						
				<mx:FormItem label="Empresa:" width="100%" id="lblEmpresa_Correo">							
					<mx:TextInput id="txtCliente" horizontalCenter="-30" verticalCenter="-50" width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="Nombre:" width="100%">
					<mx:TextInput id="txtContactoNuevo2" horizontalCenter="0" verticalCenter="-50" width="100%"/>
				</mx:FormItem>
			</mx:Form>	
	</mx:ViewStack>
	<mx:Spacer height="1"/>
	<mx:HBox id="controlbar1" includeIn="State1" width="100%" height="29">
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="BÃºsqueda avanzada" id="lnkBRContacto" click="this.currentState='BAContactos'"/>
	</mx:HBox>
	<complementos:BRContactos includeIn="State1" width="100%" id="brcontactos1"/>
	<complementos:BAContactos includeIn="BAContactos" id="bacontactos2"/>
	<mx:DataGrid id="gridContactos" includeIn="BAContactos,State1" width="100%" height="100%"
				 dataProvider="{this._contactos}" itemClick="itemClickEvent(event)"
				 textAlign="center" variableRowHeight="true">
		<mx:columns>
			<mx:DataGridColumn headerText="#" dataField="columnaCero" width="40"/>
			<mx:DataGridColumn headerText="Nombre" dataField="columnaUnoTexto" width="200"/>
			<mx:DataGridColumn headerText="E-Mail" dataField="columnaDosTexto" width="200"/>
			<mx:DataGridColumn headerText="Empresa" dataField="columnaTresTexto" dataTipField="idEmpresa" width="160"/>
			<mx:DataGridColumn headerText="Origen" dataField="columnaCuatroTexto" width="110"/>
			<mx:DataGridColumn headerText="Telefono" dataField="columnaSeisTexto" width="190" wordWrap="true"/>
			<mx:DataGridColumn headerText=" " dataField="columnaBoolean1" width="50" textAlign="center" headerStyleName="centered" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:CheckBox width="100%" horizontalCenter="0" paddingLeft="20"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="NumeroContacto" dataField="columnaCinco" width="150" visible="false" />
		</mx:columns>
	</mx:DataGrid>
	<mx:Spacer height="1"/>
	<!--<mx:HRule width="100%"/>-->
	<otros:division width="100%"/>
	<mx:Spacer height="3"/>
	<mx:VBox width="100%" horizontalAlign="right"   paddingBottom="10">
		<mx:HBox id="hbxNuevoContacto" visible="false" height="0" horizontalAlign="right" width="100%">
			<!--<mx:Label text="Contacto no localizado"/>-->
			<mx:CheckBox id="chkContactoNuevo"  click="cambiaAEstado()" textAlign="left" label="Contacto no localizado"/>
		</mx:HBox>
		<mx:HBox width="100%" height="100%" id="hbox1">
			<!--<mx:Button label="Cancelar" id="btnCancelar" click="cerrar()"/>-->
			<s:Button styleName="botonNegroOld" label="Cancelar" id="btnCancelar" click="cerrar()"/>
			<mx:Spacer width="100%"/>
			<!--<mx:Button width="80" label="Agregar" id="btnAgregar" enabled="false" click="agregarRegistro()"/>-->
			<s:Button styleName="botonNegroOld" width="80" label="Agregar" id="btnAgregar" enabled="false" click="agregarRegistro()"/>
		</mx:HBox>
	</mx:VBox>			
</mx:TitleWindow>
