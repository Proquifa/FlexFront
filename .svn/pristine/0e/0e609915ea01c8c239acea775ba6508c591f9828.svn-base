<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 buttonMode="true"
		 mouseOver="group1_mouseOverHandler(event)"
		 mouseOut="group1_mouseOutHandler(event)"
		 mouseDown="group1_mouseDownHandler(event)"
		 alpha="1" alpha.over="0.7" alpha.overSelected="0.8" 
		 >
	
	<fx:Script>
		<![CDATA[
			import spark.layouts.HorizontalAlign;
			
			private var _conImagen:Boolean = false;
			private var _conTexto:Boolean = true;
			private var _horizontal:String = HorizontalAlign.LEFT;
			private var _color:uint;
			private var _colorSelected:uint;
			private var _borderColor:uint;
			private var _conBorde:Boolean = false;
			private var _icono:Class;
			private var _text:String;
			public var selected:Boolean = false;
			private var _conColorSelected:Boolean = false;
			private var _styleText:String;
			
			[Bindable]
			public function get conImagen():Boolean
			{
				if (_conImagen)
				{
					if (horizontal == HorizontalAlign.LEFT )
					{
						imgHLeft.visible = imgHLeft.includeInLayout = true;
						imgRight.visible = imgRight.includeInLayout = false;
						return true;
					}
					else
					{
						imgHLeft.visible = imgHLeft.includeInLayout = false;
						imgRight.visible = imgRight.includeInLayout = true;
						return false;
					}
				}
				return _conImagen;
			}
			
			public function set conImagen(value:Boolean):void
			{
				_conImagen = value;
			}
			
			[Bindable]
			public function get conTexto():Boolean
			{
				return _conTexto;
			}
			
			public function set conTexto(value:Boolean):void
			{
				_conTexto = value;
			}
			
			[Bindable]
			public function get color():uint
			{
				return _color;
			}
			
			public function set color(value:uint):void
			{
				_color = value;
			}
			
			[Bindable]
			public function get borderColor():uint
			{
				return _borderColor;
			}
			
			public function set borderColor(value:uint):void
			{
				_borderColor = value;
			}
			
			[Bindable]
			public function get conBorde():Boolean
			{
				return _conBorde;
			}
			
			public function set conBorde(value:Boolean):void
			{
				_conBorde = value;
			}
			
			[Bindable]
			public function get icono():Class
			{
				return _icono;
			}
			
			public function set icono(value:Class):void
			{
				_icono = value;
			}
			
			[Bindable]
			[Inspectable(category="Styles",enumeration="left,right")]
			public function get horizontal():String
			{
				return _horizontal;
			}
			
			public function set horizontal(value:String):void
			{
				_horizontal = value;
			}
			
			[Bindable]
			public function get text():String
			{
				return _text;
			}
			
			public function set text(value:String):void
			{
				_text = value;
			}
			
			
			protected function group1_mouseOverHandler(event:MouseEvent):void
			{
				if (selected)
				{
					currentState = "overSelected";
				}
				else
				{
					currentState = "over";
				}
			}
			
			protected function group1_mouseOutHandler(event:MouseEvent):void
			{
				if (selected)
				{
					currentState = "selected";
				}
				else
				{
					currentState = "normal";
				}
			}
			
			protected function group1_mouseDownHandler(event:MouseEvent):void
			{
				selected = true;
				currentState = "overSelected";
			}
			
			[Bindable]
			public function get colorSelected():uint
			{
				return _colorSelected;
			}
			
			public function set colorSelected(value:uint):void
			{
				_colorSelected = value;
			}
			
			public function get conColorSelected():Boolean
			{
				return _conColorSelected;
			}
			
			public function set conColorSelected(value:Boolean):void
			{
				_conColorSelected = value;
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				if (!conColorSelected)
					colorSelected = color;
			}

			[Bindable]
			public function get styleText():String
			{
				return _styleText;
			}

			public function set styleText(value:String):void
			{
				_styleText = value;
			}
			
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" stateGroups="up" />
		<s:State name="over" stateGroups="up" />
		<s:State name="selected" stateGroups="select" />
		<s:State name="overSelected" stateGroups="select" />
	</s:states>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="{color}" color.select="{colorSelected}" color.up="{color}" 
						  />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="{borderColor}" weight="1" alpha="{conBorde ? 1 : 0}" />
		</s:stroke>
	</s:Rect>
	
	<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
		
		<mx:Image source="{icono}" id="imgHLeft" visible="{conImagen}" includeInLayout="false" />
		<s:Label text="{text}" visible="{conTexto}" includeInLayout="{conTexto}" width="100%" maxDisplayedLines="2" styleName="{styleText}" textAlign="center" />
		<mx:Image source="{icono}" id="imgRight" visible="false" includeInLayout="false" />
		
	</s:HGroup>
	
	
</s:Group>
