<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:textinput="skins.textinput.*"
		 minWidth="146" minHeight="25" 
		 creationComplete="group1_creationCompleteHandler(event)"
		 currentStateChange="group1_currentStateChangeHandler(event)"
		 keyDown="grpCombo_keyUpHandler(event)" xmlns:pqNet="skins.botones.pqNet.*" xmlns:otros="skins.otros.*"
		 >
	
	<fx:Metadata>
		[Event(name="seleccionarTabla",type="mx.com.glosanet.vista.evento.EventoCatClientes_General")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			
			import mx.collections.IList;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientes_General;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cotizacion;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import spark.components.PopUpPosition;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import skins.catalogos.catalogoColores;
			
			import vista.evento.reportarVisita.EventoReportarVisita;
			import vista.vistas.reporte.visita.VistaOperacionReportarVisita;
			import vista.vistas.reporte.visita.cotizar.VistaConfiguracionCotizacion;
			
			//Etiqueta Principal
			private var _labelField:String;
			private var _labelIzqField:String = "";
			private var _dataProvider:IList;
			private var _selectedIndex:int = -1;
			private var _selectedItem:*;
			private const INIT:int = -1;
			private var DATAFIELD:String = "";
			private var LEFTFIELD:String = "";
			private var _numletra:int = 12;
			private var _colorCombo:uint = 0xbfc0c7;
			
			private var _visibleBoton:Boolean = false;
			
			private var _colorLetra:uint = 0xffffff;
			private var _textoBoton:String;
			private var _visibleOtroGrupo:Boolean = false;
			private var _visiblecabezera:Boolean = false;
			private var _sinClic:Boolean = true;
			
			
			[Bindable]
			public function get sinClic():Boolean
			{
				return _sinClic;
			}

			public function set sinClic(value:Boolean):void
			{
				_sinClic = value;
			}

			[Bindable]
			public function get visiblecabezera():Boolean
			{
				return _visiblecabezera;
			}
			
			public function set visiblecabezera(value:Boolean):void
			{
				_visiblecabezera = value;
			}
			
			[Bindable]
			public function get visibleOtroGrupo():Boolean
			{
				return _visibleOtroGrupo;
			}
			
			public function set visibleOtroGrupo(value:Boolean):void
			{
				_visibleOtroGrupo = value;
			}
			
			[Bindable]
			public function get textoBoton():String
			{
				return _textoBoton;
			}
			
			public function set textoBoton(value:String):void
			{
				_textoBoton = value;
			}
			
			[Bindable]
			public function get visibleBoton():Boolean
			{
				return _visibleBoton;
			}
			
			public function set visibleBoton(value:Boolean):void
			{
				_visibleBoton = value;
			}
			
			[Bindable]
			public function get colorLetra():uint
			{
				return _colorLetra;
			}
			
			public function set colorLetra(value:uint):void
			{
				_colorLetra = value;
			}
			
			[Bindable]
			public function get colorCombo():uint
			{
				return _colorCombo;
			}
			
			public function set colorCombo(value:uint):void
			{
				_colorCombo = value;
			}
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
			
				openButton.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				this.addEventListener(EventoCatClientes_General.SELECCIONAR_COMBO_HORARIOS_CLIENTES, selectedAtItem);
				
			}
			
			private function remover(evt:MouseEvent):void
			{
				var point:Point = new Point(this.x,this.y);
				if ((evt.stageX < (this.owner as Group).contentToGlobal(point).x || 
					evt.stageX > ((this.owner as Group).contentToGlobal(point).x + this.width + 15)) ||
					(evt.stageY < (this.owner as Group).contentToGlobal(point).y || 
						evt.stageY > ((this.owner as Group).contentToGlobal(point).y + dropDown.height + 15)))
				{
					evt.currentTarget.removeEventListener(MouseEvent.MOUSE_UP,remover);
					currentState = "normal";
					_selectedIndex=-1;
					
				}
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
			}
			
			protected function mouseUp(event:MouseEvent):void
			{
				if(sinClic)
				currentState = "open";
			}
			
			protected function dataList_changingHandler(event:IndexChangeEvent):void
			{
				if (VistaConfiguracionCotizacion.tipoSeleccionado == dataList.selectedItem.tipo || dataList.selectedItem.tipo == 'sintipo' ) {
					selectedIndex = dataList.selectedIndex;
					
					
					var cambio:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.CAMBIAR_PRODUCTO_DE_COTIZACION);
					cambio.index = dataList.selectedIndex;
					dispatchEvent(cambio);
					
					currentState = "normal";
					_selectedIndex=-1;
				}
				
			}
			
			protected function selectedAtItem(event:EventoCatClientes_General):void
			{
				event.stopImmediatePropagation();
				
			}
			
			public function get labelIzqField():String
			{
				return _labelIzqField;
			}
			
			public function set labelIzqField(value:String):void
			{
				_labelIzqField = value;
				LEFTFIELD = value;
			}
			
			public function get labelField():String
			{
				return _labelField;
			}
			
			public function set labelField(value:String):void
			{
				_labelField = value;
				DATAFIELD = value;
			}
			
			[Bindable]
			public function get dataProvider():IList
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:IList):void
			{
				_dataProvider = value;
				drawText();
			}
			
			public function get selectedIndex():int
			{
				return _selectedIndex;
			}
			
			public function set selectedIndex(value:int):void
			{
				_selectedIndex = value;
				drawText();
			}
			
			public function get selectedItem():*
			{
				return _selectedItem;
			}
			
			public function set selectedItem(value:*):void
			{
				_selectedItem = value;
				drawText();
			}
			
			private function drawText():void
			{
				if (dataProvider)
				{
					var cadena:String = "";
					if (selectedIndex != INIT )
					{
						
						
						/*cadena = dataProvider[selectedIndex]["valor"];*/
						
					
						labelDisplay.setFocus();
						
					}
					
					
				}
				
				
					
					cadena = "MOVER A";
					labelDisplay.text = cadena;
					
				
			}
			
			protected function grpCombo_keyUpHandler(event:KeyboardEvent):void
			{
				trace(event.altKey);
				trace(event.ctrlKey);
				trace(event.keyCode);
				trace(event.shiftKey);
			}
			
			protected function grpCombo_mouseDownHandler(event:MouseEvent):void
			{
				if(sinClic)
				{
					if (currentState == "normal")
						currentState == "open";
					else
					{
						currentState = "normal";
						_selectedIndex=-1;
					}
				}
				
					
			}
			
			protected function group1_currentStateChangeHandler(event:StateChangeEvent):void
			{
				if (event.newState == "open")
				{
					stage.removeEventListener(MouseEvent.MOUSE_UP,remover);
					stage.addEventListener(MouseEvent.MOUSE_UP,remover);
					dataList.selectedIndex = selectedIndex;
				}
				else if (event.newState == "normal" && stage != null)
				{
					stage.removeEventListener(MouseEvent.MOUSE_UP,remover);					
				}
			}
			
			
			public function actualizaLista():void{
				if(dataList != null)
					dataList.ensureIndexIsVisible(selectedIndex);
				
			}
			
			[Bindable]
			public function get numletra():int
			{
				return _numletra;
			}
			
			public function set numletra(value:int):void
			{
				_numletra = value;
			}
			
			protected function mostrarGrupoCotizacion(event:MouseEvent):void
			{
				currentState = "open";
				visibleBoton = false;
				visibleOtroGrupo = true;
				visiblecabezera = true;
				
			}
			
			
			protected function crearNuevaCotizacion(event:MouseEvent):void
			{
				if(respaldoNombre && respaldoNombre != "")
				{
					var nuevaCotizacion:Cotizacion = new Cotizacion;
					nuevaCotizacion.nombreCotizacion = respaldoNombre;
					nuevaCotizacion.tipoCotizacion = "sintipo";
					nuevaCotizacion.deSistema = false;
					nuevaCotizacion.idCotizacion = 0;
					nuevaCotizacion.cliente = VistaOperacionReportarVisita.visitaClienteActual.cliente;
					nuevaCotizacion.contacto = VistaOperacionReportarVisita.visitaClienteActual.contacto.nombreCompleto;
					nuevaCotizacion.contactos = VistaOperacionReportarVisita.visitaClienteActual.contacto;
					nuevaCotizacion.vendedor = DatosGlobales.getInstance()._usuario.usuario;
					nuevaCotizacion.moneda = VistaOperacionReportarVisita.visitaClienteActual.cliente.monedaFactura;
					if(VistaOperacionReportarVisita.visitaClienteActual.cliente.aceptaParciales)
						nuevaCotizacion.parciales = "SI";
					else
						nuevaCotizacion.parciales = "NO";
					nuevaCotizacion.cpago = VistaOperacionReportarVisita.visitaClienteActual.cliente.condicionesPago;
					nuevaCotizacion.zona = VistaOperacionReportarVisita.visitaClienteActual.cliente.zona;
					nuevaCotizacion.estado = 'Cotizada';
					nuevaCotizacion.imoneda = 'Dolares';
					nuevaCotizacion.gravaIva = false;
					nuevaCotizacion.monedaAbreviatura = "USD";
					nuevaCotizacion.monedaSimbolo = "$";
					nuevaCotizacion.idContacto = VistaOperacionReportarVisita.visitaClienteActual.contacto.idContacto;
					nuevaCotizacion.infoFacturacion = false;
					nuevaCotizacion.cotizo = DatosGlobales.getInstance()._usuario.usuario;
					nuevaCotizacion.abierto = true;
					nuevaCotizacion.idVisita = VistaOperacionReportarVisita.visitaClienteActual.idVisitaCliente;
					nuevaCotizacion.factura = VistaOperacionReportarVisita.visitaClienteActual.cliente.empresaFactura;
					nuevaCotizacion.numPartidas = 0;
					nuevaCotizacion.numCotizacion = VistaConfiguracionCotizacion.numCotizacionesUsuario;
					nuevaCotizacion.totalCosto = 0;
					nuevaCotizacion.numPartidas = 0;
					
					
					var crearCo:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.CREAR_NUEVA_COTIZACION);
					crearCo.cotizacion = nuevaCotizacion;
					dispatchEvent(crearCo);
					
					respaldoNombre = "";
					visibleOtroGrupo = false;
					visibleBoton = true;
					currentState = "open";
				}
			
			}
			
			private var respaldoNombre:String = "";
			protected function nombre_changeHandler(event:TextOperationEvent):void
			{
				respaldoNombre = nombre.text;
				
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
	</s:states>
	
	<s:Group width="100%" height="100%" id="grpCombo" mouseDown="grpCombo_mouseDownHandler(event)" >
		
		<s:Rect width="100%" height="100%" radiusX="0" radiusY="0">
			<s:fill>
				<s:SolidColor color="{colorCombo}" />
			</s:fill>
			<s:stroke>
				<!--- @private -->
				<s:SolidColorStroke weight="0" color="#eaeaea"/>
			</s:stroke>
		</s:Rect>
		
		<s:HGroup width="100%" height="100%" gap="5" paddingRight="10" paddingLeft="10" verticalAlign="middle" id="HGCombo">
			<s:Label id="labelDisplay" width="100%" fontFamily="Helvetica Bold" fontStyle="normal" maxDisplayedLines="1" fontSize="{numletra}" fontWeight="bold" color="{colorLetra}" textAlign="center"/>
			<s:Button id="openButton" width="10" focusEnabled="true" height="100%" 
					  skinClass="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.skin.skinBotonFlecharellenaBlanca" tabEnabled="false" />
		</s:HGroup> 
		
	</s:Group>
	
	<s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
				   left="0" right="0" top="{grpCombo.height-4}" itemDestructionPolicy="auto"
				   popUpPosition="{PopUpPosition.BELOW}" popUpWidthMatchesAnchorWidth="true"
				   >
		
		<!--- 
		This includes borders, background colors, scrollers, and filters. 
		@copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<s:Group id="dropDown">
			
			<s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0" distance="7"
									 angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>
			
			<!-- border -->
			<!--- @private -->
			<s:Rect id="border" left="0" right="0" top="0" bottom="0" alpha="0">
				<s:fill>
					<s:SolidColor color="#FFFFFF" />
				</s:fill>
				<s:stroke>
					<!--- @private -->
					<s:SolidColorStroke id="borderStroke" weight="0" color="#eaeaea"/>
				</s:stroke>
			</s:Rect>
			
			<!-- fill -->
			<!--- Defines the appearance of drop-down list's background fill. -->
			<s:Rect id="background" left="0" right="0" top="0" bottom="0">
				<s:fill>
					<!---  
					@private
					The color of the drop down's background fill.
					The default color is 0xFFFFFF.
					-->
					<s:SolidColor id="bgFill" color="#FFFFFF" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#eaeaea" weight="1"/>
				</s:stroke>
				<s:filters>
					<!-- drop shadow -->
					<!--- @private -->
					<s:DropShadowFilter blurY="20" blurX="20" alpha="0.45" distance="7" angle="90" color="#000000" quality="{BitmapFilterQuality.HIGH}" />
				</s:filters>
			</s:Rect>
			
			<!--- @private -->
			<s:Scroller id="scroller" width="100%" height="100%" hasFocusableChildren="false" minViewportInset="1" horizontalScrollPolicy="off" >
				<!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
				<s:VGroup width="100%" height="100%" paddingTop="5" paddingBottom="0" gap="0" horizontalAlign="center">
					<s:VGroup width="100%" height="2%" paddingTop="2" visible="{visiblecabezera}" includeInLayout="{visiblecabezera}" horizontalAlign="center" >
						<s:Label width="100%" text="MOVER PARTIDAS A:" paddingLeft="10" styleName="texto_21pt_Bebas_Blanco" maxDisplayedLines="1" fontSize="12" fontWeight="bold" color="#808080" textAlign="left"/>
						<otros:division	width="90%"  />	
					</s:VGroup>  
					
					
					<s:List id="dataList" width="100%" styleName="listStyle" dataProvider="{dataProvider}"  borderVisible="false" 
							contentBackgroundAlpha="0"
							horizontalScrollPolicy="off"
							itemRenderer="vista.vistas.reporte.visita.cotizar.itemRender.listaMoverAIR" updateComplete="actualizaLista()"
							selectedIndex="0" changing="dataList_changingHandler(event)" >
						<s:layout>
							<s:VerticalLayout gap="0" horizontalAlign="contentJustify" requestedMinRowCount="1" requestedMaxRowCount="7"/>
						</s:layout>
					</s:List>	
					
					<s:VGroup width="100%" id="grupo2" horizontalAlign="center" verticalAlign="middle"  visible="{visibleOtroGrupo}" includeInLayout="{visibleOtroGrupo}">
						<otros:division	width="90%" />
						<s:Label width="90%" text="Nombre de la Cotización:" styleName="texto_21pt_Bebas_Blanco" maxDisplayedLines="1" fontSize="{numletra}" fontWeight="bold" color="#257d92"/>
						<s:TextInput width="90%" id="nombre"  height="30" styleName="texto_21pt_Bebas_Blanco" fontSize="{numletra}" skinClass="skins.skin.textinput.skinTxtInputBlanco" change="nombre_changeHandler(event)" />
						<pqNet:botonPqNetLargo label="Crear" height="27" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL}" width="75" click="crearNuevaCotizacion(event)" />
					</s:VGroup>  
					<pqNet:botonPqNetLargo label="{textoBoton}"  width="100%" height="27" icono="mas_agregar_horario" id="btoAceptar" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL}" visible="{visibleBoton}" includeInLayout="{visibleBoton}" click="mostrarGrupoCotizacion(event)"/>
					
				</s:VGroup>  
				
			</s:Scroller>
		</s:Group>
	</s:PopUpAnchor>
	
</s:Group>
