<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:botoneraFlotante="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.botoneraFlotante.*"
		 xmlns:requerimientos="vista.vistas.reporte.visita.requerimientos.*" 
		 xmlns:boton="skins.skin.botones.boton.*"
		 xmlns:otros="skins.otros.*"
		 creationComplete="group1_creationCompleteHandler(event)"
		 width="100%" height="100%" 
		 >
	
	
	
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayList;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoEsperar;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.ReportarVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.VisitaCliente;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.itemRenderer.vistaPrincipal.CatClientes_IR_Item_imagen;
			import mx.events.FlexEvent;
			
			import skins.catalogos.catalogoIconosBotoneras;
			import skins.catalogos.catalogoIconosBotones;
			
			import vista.evento.reportarVisita.EventoReportarVisita;
			import vista.vistas.reporte.visita.hallazgos.HallazgoReportarVisita;
			import vista.vistas.reporte.visita.pendientes.PendientesReportarVisita;
			import vista.vistas.reporte.visita.requerimientos.RequerimientrosReportarVisita;
			import vista.vistas.reporte.visita.requisitar.RequisitarReportarVisita;
			
			
			
			
			private var _currentCliente:VisitaCliente;
			private var _indexVisita:int;
			private var timeLineData:ArrayList = new ArrayList(['REQUERIMIENTOS', 'PENDIENTES',
				'HALLAZGOS', 'REQUISITAR', 'COTIZAR', 'REPORTE FINAL']);
			
			private var requerimientos:RequerimientrosReportarVisita;
			private var pendientes:PendientesReportarVisita;
			private var hallazgos:HallazgoReportarVisita;
			private var requisitar:RequisitarReportarVisita;
			
			public function recibeCliente(idCliente:int):void{
				var item:CatClientes_IR_Item_imagen = new CatClientes_IR_Item_imagen();
				
				try
				{
					imagenAct.source = 	imgCliente.getInstance()["cliente_"+ idCliente ];
				}
				catch (error:Error)
				{
					imagenAct.source = imgCliente.getInstance().default_Select;
					
				}
			}
			
			public static var reportarVisita:ReportarVisita;
			public function set recibeReportarVisitasCliente(reportarVisita:ReportarVisita):void{
				if (!reportarVisita)
					return;
				if (vieneDe != "guardar" ) {
					VistaOperacionReportarVisita.reportarVisita = reportarVisita;
					timeLine.dispatchEvent(new Event("avanzarVista"));
				}
				else {
					VistaOperacionReportarVisita.reportarVisita.pendientes = reportarVisita.pendientes;
					if (pendientes)
						pendientes.iniciaVista(reportarVisita.pendientes, currentCliente);
				}
				vieneDe = ""
			}
			
			[Bindable]
			public function get currentCliente():VisitaCliente
			{
				return _currentCliente;
			}
			
			public function set currentCliente(value:VisitaCliente):void
			{
				zonaTrabajoTimeLine.removeAllElements();
				timeLine.selectedIndex = -1;
				_currentCliente = value;
				recibeCliente(value.cliente.idCliente);
				timeLine.selectedIndex = 0;
				
				if (!requerimientos)
					requerimientos = new RequerimientrosReportarVisita();
				zonaTrabajoTimeLine.addElement(requerimientos);
				
			}
			
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				timeLine.data = timeLineData;
				timeLine.conPalomita = false;
			}
			
			
			protected function timeLine_cambiarVista(event:Event):void
			{
				zonaTrabajoTimeLine.removeAllElements();
				switch(timeLineData.source[timeLine.selectedIndex])
				{
					case 'REQUERIMIENTOS':
					{
						if (!requerimientos)
							requerimientos = new RequerimientrosReportarVisita();
						zonaTrabajoTimeLine.addElement(requerimientos);
						requerimientos.iniciaVista(reportarVisita.requerimientos);
						break;
					}
					case 'PENDIENTES':
					{
						if(!pendientes)
							pendientes = new PendientesReportarVisita();
						zonaTrabajoTimeLine.addElement(pendientes);
						pendientes.iniciaVista(reportarVisita.pendientes, currentCliente);
						break;
					}
					case 'HALLAZGOS':
					{
						if (!hallazgos)
							hallazgos = new HallazgoReportarVisita();
						zonaTrabajoTimeLine.addElement(hallazgos);
						hallazgos.iniciaVista(reportarVisita.hallazgos, currentCliente);
						break;
					}
					case 'REQUISITAR':
					{
						if (!requisitar)
							requisitar = new RequisitarReportarVisita();
						zonaTrabajoTimeLine.addElement(requisitar);
						requisitar.iniciaVista(reportarVisita.requisicion, currentCliente);
						break;
					}
					case 'COTIZAR':
					{
						
						break;
					}
					case 'REPORTE FINAL':
					{
						
						break;
					}
						
					default:
					{
						break;
					}
				}
			}
			
			protected function guardadoGeneral(event:MouseEvent):void
			{
				var eventEsperar:EventoEsperar = new EventoEsperar(EventoEsperar.CONFIGURAR_ESPERA);
				eventEsperar.mensaje = "iniciarEspera";
				eventEsperar.idButtons = [];
				eventEsperar.tipoEventos  = [];
				eventEsperar.idButtons.push("btnGuardar");
				eventEsperar.tipoEventos.push("GUARDADO_GENERAL");
				dispatchEvent(eventEsperar);
				
				setTimeout(dispararEvento, 500);
			}
			
			private function dispararEvento():void{
				var evento:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.GUARDADO_GENERAL);
				evento.current = reportarVisita;
				evento.idVisita = currentCliente.idVisitaCliente;
				dispatchEvent(evento);
			}
			
			private var vieneDe:String = "";
			public function set recibeRespuestaReportarVisitasCliente(respuesta:Boolean):void {
				trace(respuesta);
				if (!respuesta) return;
				vieneDe = "guardar"
				var event:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.OBTENER_INFORMACION_TIME_LINE);
				event.current = currentCliente.idVisitaCliente;
				dispatchEvent(event);
			}
			
			protected function btnmenu_clickHandler(event:MouseEvent):void
			{
				var evento:EventoReportarVisita = new EventoReportarVisita(EventoReportarVisita.CAMBIAR_VISTA);
				evento.index = 0;
				dispatchEvent(evento);
			}

			[Bindable]
			public function get indexVisita():int
			{
				return _indexVisita;
			}

			public function set indexVisita(value:int):void
			{
				_indexVisita = value;
			}

		]]>
	</fx:Script>
	
	<s:HGroup width="100%" height="100%" id="vgHeader" verticalAlign="middle" paddingLeft="-5" gap="3">
		<s:Image id="btnmenu" click="btnmenu_clickHandler(event)"
				 source="{catalogoIconosBotoneras.getInstance().flechaIzquierdaupdown}" verticalCenter="0"
				 mouseOver="{ btnmenu.source = catalogoIconosBotoneras.getInstance().flechaIzquierdaover}"
				 mouseOut="{ btnmenu.source = catalogoIconosBotoneras.getInstance().flechaIzquierdaupdown}"/>
		<s:Label id="lblTitulo" styleName="cat_pro_titulo_bgothl_30" text="Visita #{indexVisita}" />
		<s:Label styleName="cat_pro_titulo_bgothl_30" text="·" />
		<s:Label styleName="cat_pro_titulo_bgothl_30" text="{currentCliente.cliente.nombre}" color="#0C8893" />
	</s:HGroup> 
	
	
	<s:HGroup width="100%" height="100%" >
		<s:Group width="15%" height="100%" >
			<s:Rect width="100%" height="100%" left="-25">
				<s:fill>
					<s:SolidColor color="#F1F1A9" />
				</s:fill>
			</s:Rect>
			
			<s:VGroup width="100%" height="100%" >
				<s:Label text="Notas" />
			</s:VGroup>  
			
		</s:Group>  
		<s:Group width="85%" height="100%" >
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#FFFFFF" />
				</s:fill>
			</s:Rect>
			
			<s:VGroup width="100%" height="100%" padding="20" >
				<s:HGroup width="100%" verticalAlign="middle">
					<s:HGroup width="25%" height="100%" gap="15" verticalAlign="middle">
						<s:Image id="imagenAct" visible="true" includeInLayout="true" smoothingQuality="default" smooth="true"/>
						<s:VGroup width="100%" >
							<s:Label text="{currentCliente.cliente.nombre}" />
							<s:Label text="Cliente" />
						</s:VGroup>  
						
					</s:HGroup>  
					
					
					<s:VGroup width="75%" verticalAlign="middle" gap="10">
						<s:HGroup width="100%" >
							<mx:Image source="{catalogoIconosBotones.getInstance().contacto_svg}" />
							<s:Label styleName="tab_texto_12_Helvetica" text="{currentCliente.contacto.nombre}"
									 fontSize="20" color="#008894" fontWeight="bold"/>
						</s:HGroup>  
						<s:HGroup width="100%" >
							<mx:Image source="{catalogoIconosBotones.getInstance().mail_svg}" />
							<s:Label styleName="tab_texto_12_Helvetica" text="{currentCliente.contacto.EMail}"
									 fontSize="16" fontWeight="bold"/>
						</s:HGroup>  
						<s:HGroup width="100%" >
							<mx:Image source="{catalogoIconosBotones.getInstance().telefono_svg}" />
							<s:Label styleName="tab_texto_12_Helvetica" text="{currentCliente.contacto.telefono} · EXT. {currentCliente.contacto.telefono}"
									 fontSize="16" fontWeight="bold"/>
						</s:HGroup>  
					</s:VGroup>  
				</s:HGroup> 
				
				<s:VGroup width="100%" paddingTop="20" >
					<otros:division	width="100%" />	
				</s:VGroup>  
				
				<s:VGroup width="100%" paddingTop="28" paddingBottom="28"> 
					<botoneraFlotante:botonSecciones id="timeLine" width="100%" avanzarVista="timeLine_cambiarVista(event)" regresarVista="timeLine_cambiarVista(event)" />
				</s:VGroup> 
				
				<s:Group id="zonaTrabajoTimeLine" width="100%" height="100%" />
				
				<s:HGroup width="100%" height="90" verticalAlign="middle" horizontalAlign="right" >
					<boton:BotonDefault width="200" height="40" conTexto="true" color="#0C8893" label="GUARDAR" id="btnGuardar"
										horizontalCenter="0" verticalCenter="0" styleNameLabel="titulo_blanco_Novecento" mouseDown="guardadoGeneral(event)" />
				</s:HGroup>  
				
				
			</s:VGroup>  
			
			
		</s:Group>  
		
	</s:HGroup>  
	
</s:Group>
