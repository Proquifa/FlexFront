<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" 
		 xmlns:vista="vista.*" xmlns:mapa="vista.mapa.*"
		 creationComplete="init(event)"
		 >
	
	<fx:Declarations>
		<mapa:MapaAsginarSprint />
		<mapa:MapaVentasGV />
		<mapa:MapaRealizarDailyScrum />
		
		<mapa:MapaEVPlanificarSprint />
		<mapa:MapaEVAgendarVisita />
		<mapa:MapaEVAtenderPoolVisitas />
		<mapa:MapaEVReportarVisita />
		<mapa:MapaRelizarJuntaDeCierreDeSprint />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Empleado;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import vista.AsignarSprintGV.VistaAsignarSprint;
			import vista.ev_AgendarVisita.VistaAgendarVisita;
			import vista.ev_AtenderPoolDeVisitas.VistaAtenderPoolVisitas;
			import vista.ev_PlanificarSprint.VistaPlanificarSprint;
			import vista.ev_RealizarDailyScrum.VistaRealizarDailyScrum;
			import vista.ev_ReportarVisita.VistaReportarVisita;
			import vista.evento.EventoAsignarSprint;
			import vista.evento.EventoCierreSprintGV;
			import vista.evento.EventoEVAgendarVisita;
			import vista.evento.EventoEVAtenderPoolVisitas;
			import vista.evento.EventoEVPlanificarSprint;
			import vista.evento.EventoEVReportarVisita;
			import vista.evento.EventoRealizarDailyScrum;
			import vista.evento.EventoVentasGV;
			import vista.juntaDeCierre.VistaJuntaDeCierre;
			
			[Bindable] 
			private var listaPendiente:ArrayCollection = new ArrayCollection([
				{pendiente:'Asignar Sprint',conteo:0, subMenu:false,submenu3:false, tipo:'asignarSprint',sprint:false},
				{pendiente:'Realizar Daily Scrum',conteo:0, subMenu:false,submenu3:false, tipo:'realizarDailyScrum',sprint:true},
				{pendiente:'Realizar Junta de Cierre',conteo:0, subMenu:false,submenu3:false, tipo:'cierreJunta',sprint:false}
			]);
			
			[Bindable] private var _arrayVendedor:ArrayCollection = new ArrayCollection([ 
			    {pendiente:"Pool de Visitas",conteo:0, subMenu:false,submenu3:false, tipo:'poolVisitas',sprint:false},
				{pendiente:"Planificar Sprint",conteo:0, subMenu:false,submenu3:false, tipo:'PlanificarSprint',sprint:false},
				{pendiente:"Agendar Visita",conteo:0, subMenu:false,submenu3:false, tipo:'AgendarVisita',sprint:false},
				{pendiente:"Reportar Visita",conteo:0, subMenu:false,submenu3:false, tipo:'ReportarVisita',sprint:false}]);
			
			
			private var asignarSprint:VistaAsignarSprint;
			private var realizarDailyScrum:VistaRealizarDailyScrum;
			private var realizarJuntaCierre:VistaJuntaDeCierre;
			private var poolDeVisitas:VistaAtenderPoolVisitas;
			private var agendarVisita:VistaAgendarVisita
			private var planificarSprint:VistaPlanificarSprint;
			private var reportarVisita:VistaReportarVisita;
			private var e:Empleado = DatosGlobales.getInstance()._usuario;
			
			protected function plantilla_pendienteSeleccionadoHandler(event:vista.evento.EventoVentasGV):void
			{
				switch(event.pendiente)
				{
					case "asignarSprint":
					{
						if (!asignarSprint)
							asignarSprint = new VistaAsignarSprint();
						plantilla.agregarContenido(asignarSprint);
						var evento:EventoAsignarSprint = new EventoAsignarSprint(EventoAsignarSprint.OBTENER_VISITAS_ASIGNAR_SPRINT);
						dispatchEvent(evento);
						break;
					}
					case "realizarDailyScrum":
					{
						if (!realizarDailyScrum)
							realizarDailyScrum = new VistaRealizarDailyScrum();
						plantilla.agregarContenido(realizarDailyScrum);
						var eventRDS:EventoRealizarDailyScrum = new EventoRealizarDailyScrum(EventoRealizarDailyScrum.OBTENER_TODAS_VISITAS);
						dispatchEvent(eventRDS);
						break;
					}
						
					case "cierreJunta":
					{
						if (!realizarJuntaCierre)
							realizarJuntaCierre = new VistaJuntaDeCierre();
						plantilla.agregarContenido(realizarJuntaCierre);
						var eventoJCS:EventoCierreSprintGV = new EventoCierreSprintGV(EventoCierreSprintGV.OBTENER_INFORMACION_CIERRE_DE_SRINT);
						dispatchEvent(eventoJCS);
						break;
					}
						
					case "poolVisitas":
					{
						if (!poolDeVisitas)
							poolDeVisitas = new VistaAtenderPoolVisitas();
						
						plantilla.agregarContenido(poolDeVisitas);
						var eventAP:EventoEVAtenderPoolVisitas = new EventoEVAtenderPoolVisitas(EventoEVAtenderPoolVisitas.OBTENER_VISITAS_SOLICITADAS);
						eventAP.usuario = e.idEmpleado; 
						dispatchEvent(eventAP);
						break;
					}
						
						
					case "PlanificarSprint":
					{
						if (!planificarSprint)
							planificarSprint = new VistaPlanificarSprint();
						plantilla.agregarContenido(planificarSprint);
						var eventPOO:EventoEVPlanificarSprint = new EventoEVPlanificarSprint(EventoEVPlanificarSprint.OBTENER_TOTALES_VISITA_CLIENTE);
						eventPOO.usuario = e.idEmpleado; 
						dispatchEvent(eventPOO);
						break;
					}
						
				
					case "AgendarVisita":
					{
						if (!agendarVisita)
							agendarVisita = new VistaAgendarVisita();
						plantilla.agregarContenido(agendarVisita);
						var eventAV:EventoEVAgendarVisita = new EventoEVAgendarVisita(EventoEVAgendarVisita.OBTENER_TOTALES_AGENDAR_VISITA);
						eventAV.usuario = e.idEmpleado; 
						dispatchEvent(eventAV);
						break;
					}
					case "ReportarVisita":
					{
						if (!reportarVisita)
							reportarVisita = new VistaReportarVisita();
						plantilla.agregarContenido(reportarVisita);
						var eventRV:EventoEVReportarVisita = new EventoEVReportarVisita(EventoEVReportarVisita.OBTENER_TOTALES_VISTAS_GESTIONADAS);
						eventRV.usuario = e.idEmpleado; 
						dispatchEvent(eventRV);
						break;
					}
					
					
				}
				dispatchEvent(new Event("recargarPendientes",true));
			}
			
			protected function init(evento:FlexEvent):void
			{
				
				addEventListener("recargarPendientes",recargarContadorPendientes,false,0,true);
				plantilla.listaPendientes = listaPendiente;
				plantilla.listaPendientesImportaciones = _arrayVendedor;
				obtenerPendientes();
				addEventListener(EventoVentasGV.CARGAR_PENDIENTE_MENU, plantilla_pendienteSeleccionadoHandler);
			}
			
			private function obtenerPendientes():void
			{
			    var eventoPendientes:EventoVentasGV = new EventoVentasGV(EventoVentasGV.OBTENER_CONTADOR_PENDIENTES);
				eventoPendientes.usuario = DatosGlobales.getInstance()._usuario.clave;
				dispatchEvent(eventoPendientes);
				
				var eventP:EventoEVAtenderPoolVisitas = new EventoEVAtenderPoolVisitas(EventoEVAtenderPoolVisitas.PENDIENTES_VISITA_A_CLIENTES);
				eventP.usuario = e.idEmpleado; 
				dispatchEvent(eventP);
			}
			
			private function recargarContadorPendientes(evt:Event):void
			{
				obtenerPendientes();
			}
			
			public function set recibeContadorVisitaCliente(pendientes:ArrayCollection):void
			{
				var listaAux:ArrayCollection = ObjectUtil.copy(listaPendiente) as ArrayCollection;
				var listaAux2:ArrayCollection = ObjectUtil.copy(_arrayVendedor) as ArrayCollection;
				for each (var object:Object in pendientes) 
				{
					if(object.pendiente == "asignarSprint")
						listaAux[0].conteo = object.valor;
					else if(object.pendiente == "numerpoSprint")
						listaAux[1].conteo = object.valor;
					else if(object.pendiente == "juntaCierre")
						listaAux[2].conteo = object.valor;
					else if(object.pendiente == "atenderPoolVisita")
						listaAux2[0].conteo = object.valor;
					else if(object.pendiente == "planificarSprint")
						listaAux2[1].conteo = object.valor;
					else if(object.pendiente == "agendarVisita")
						listaAux2[2].conteo = object.valor;
					else if(object.pendiente == "reportarVisita")
						listaAux2[3].conteo = object.valor;
					
					
					
				}
				if(listaAux.length > 0){
					var indice:int = plantilla.lstPendientes.selectedIndex;
					var indice2:int = plantilla.lstPendientesImportaciones.selectedIndex;
					plantilla.listaPendientes = listaAux;
					plantilla.listaPendientesImportaciones = listaAux2;
					
					plantilla.lstPendientes.selectedIndex = indice;
					
					if(indice2 > 0)
					plantilla.lstPendientesImportaciones.selectedIndex = indice2;
					else
						plantilla.lstPendientesImportaciones.selectedIndex = 0;	
					
				}
			}
			
			
	
			
		]]>
	</fx:Script>
	
	<vista:PlantillaVentasGV id="plantilla" width="100%" height="100%" listaPendientes="{listaPendiente}" listaPendientesImportaciones="{_arrayVendedor}" pendienteSeleccionado="plantilla_pendienteSeleccionadoHandler(event)"  />
</s:Group>
