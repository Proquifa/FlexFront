<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 maxWidth="180" maxHeight="40" minHeight="40"
		 mouseUp="group1_mouseUpHandler(event)"
		 mouseOut="group1_mouseOutHandler(event)"
		 mouseOver="group1_mouseOverHandler(event)"
		 mouseDown="group1_mouseDownHandler(event)"
		 currentStateChanging="group1_currentStateChangingHandler(event)"
		 >
	
	<fx:Script>
		<![CDATA[
			import mx.events.StateChangeEvent;
			
			private var _first:Boolean;
			private var _last:Boolean;
			private var _radius:int;
			
			protected function group1_mouseDownHandler(event:MouseEvent):void
			{
				if (currentState == "selected" || currentState == "upSelected" || currentState == "overSelected" || currentState == "downSelected" )
					currentState = "downSelected";
				else
					currentState = "down"
			}
			
			protected function group1_mouseOverHandler(event:MouseEvent):void
			{
				if (currentState == "selected" || currentState == "upSelected" || currentState == "overSelected" || currentState == "downSelected" )
					currentState = "overSelected";
				else
					currentState = "over"
			}
			
			protected function group1_mouseOutHandler(event:MouseEvent):void
			{
				if (currentState == "selected" || currentState == "upSelected" || currentState == "overSelected" || currentState == "downSelected" )
					currentState = "selected";
				else
					currentState = "normal"
			}
			
			protected function group1_mouseUpHandler(event:MouseEvent):void
			{
				if (currentState == "selected" || currentState == "upSelected" || currentState == "overSelected" || currentState == "downSelected" )
					currentState = "upSelected";
				else
					currentState = "normal"
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				var curve:int = radius;
				grpLine.graphics.clear();
				grpLine.graphics.lineStyle(1,0x008894);
				if ((currentState == "selected" || currentState == "upSelected" || currentState == "overSelected" || currentState == "downSelected"))
				{
					grpLine.graphics.moveTo(0, unscaledHeight);
					grpLine.graphics.lineTo(0, 0);
					grpLine.graphics.lineTo(unscaledWidth, 0);
					grpLine.graphics.lineTo(unscaledWidth, unscaledHeight);
					/*grpLine.graphics.moveTo(-curve, unscaledHeight);
					grpLine.graphics.curveTo(0, unscaledHeight, 0, unscaledHeight - curve);*/
				}
				/*else
				{
				grpLine.graphics.moveTo(0, unscaledHeight);
				}*/
				/*grpLine.graphics.lineTo(0, curve);
				grpLine.graphics.curveTo(0, 0, curve, 0);
				grpLine.graphics.lineTo(unscaledWidth - curve, 0);
				grpLine.graphics.curveTo(unscaledWidth, 0, unscaledWidth, curve);*/
				/*if ((currentState == "selected" || currentState == "upSelected" || currentState == "overSelected" || currentState == "downSelected") && !last )
				{
				grpLine.graphics.lineTo(unscaledWidth, unscaledHeight - curve);
				grpLine.graphics.curveTo(unscaledWidth, unscaledHeight, unscaledWidth + curve, unscaledHeight);
				}
				else
				{
				grpLine.graphics.lineTo(unscaledWidth, unscaledHeight);
				}*/
				grpLine.graphics.endFill();
			}
			
			public function get first():Boolean
			{
				return _first;
			}
			
			public function set first(value:Boolean):void
			{
				_first = value;
			}
			
			public function get last():Boolean
			{
				return _last;
			}
			
			public function set last(value:Boolean):void
			{
				_last = value;
			}
			
			[Bindable]
			public function get radius():int
			{
				return _radius;
			}
			
			public function set radius(value:int):void
			{
				_radius = value;
			}
			
			
			protected function group1_currentStateChangingHandler(event:StateChangeEvent):void
			{
				invalidateDisplayList();
			}
			
		]]>
	</fx:Script>
	
	
	<s:states>
		<s:State name="normal" stateGroups="up" />
		<s:State name="over" stateGroups="up" />
		<s:State name="down" stateGroups="up" />
		<s:State name="selected" stateGroups="select" />
		<s:State name="upSelected" stateGroups="select" />
		<s:State name="overSelected" stateGroups="select" />
		<s:State name="downSelected" stateGroups="select" />
		<s:State name="disabled" />
	</s:states>
	
	<s:Group width="100%" height="100%"
			 alpha.upSelected="0.1" alpha.overSelected="0.1" alpha.downSelected="0.2"
			 alpha="1" alpha.normal="1" alpha.over="0.8" alpha.down="0.9"
			 >
		
		<s:Rect width="100%" bottom="0" height="{radius}" >
			<s:fill>
				<s:SolidColor color="#FFFFFF" 
							  alpha.selected="0"
							  />
			</s:fill>
		</s:Rect>
		
		<s:Rect radiusX="{radius}" width="100%" height="100%" >
			<s:fill>
				<s:SolidColor color="#FFFFFF" 
							  alpha.selected="0"
							  />
			</s:fill>
		</s:Rect>
	</s:Group>  
	
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1"
			 color.select="#008894"
			 color="#000000"
			 fontWeight="bold"
			 styleName="texto_18pt_Bebas_VerdeAzul"
			 >
	</s:Label>
	<s:Rect horizontalCenter="60" id="alertaAgente" width="15%" height="50%" verticalCenter="0.1" radiusX="{(this.height/6)}" radiusY="{(this.height/6)}">
		<s:fill>
			<s:SolidColor color="0xffffff" color.selected="0x98b5c0" color.overSelected="0x98b5c0" color.over="0xffffff"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xffffff" color.selected="0x98b5c0" color.overSelected="0x98b5c0" color.over="0xffffff" id="borde" alpha="0" weight="2" />
		</s:stroke>
	</s:Rect>
	<s:Label id="textoAlerta" fontSize="16" color="0x98b5c0" fontFamily="BebasNeue" color.selected="0xffffff" color.overSelected="0xffffff" color.over="0x98b5c0" horizontalCenter="60" verticalCenter="2" />
	<s:Group width="100%" height="100%" id="grpLine" />
	
</s:Group>
