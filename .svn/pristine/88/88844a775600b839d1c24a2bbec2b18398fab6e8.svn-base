<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2010 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the anchor button on a Spark ComboBox component.  

@see spark.components.ComboBox        
@see spark.skins.spark.ComboBoxSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="19" minHeight="23" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotones;
		]]>
	</fx:Script>
	
		<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For dropDownList buttons, the graphics are colorized but the arrow is not. */
		static private const exclusions:Array = ["arrow"];
		
		private var cornerRadius:Number = 0;
		
		/** 
		 * @private
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the symbol fill items that should be colored by the "symbolColor" style. */
		// static private const symbols:Array = ["arrowFill1", "arrowFill2"];
		
		/**
		 * @private 
		 */
		// override public function get symbolItems():Array {return symbols};
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			var cr:Number = getStyle("cornerRadius");
			
			/*  if (cornerRadius != cr)
			{
			cornerRadius = cr;
			fill.bottomRightRadiusX = fill.topRightRadiusX = cornerRadius;
			lowlight.bottomRightRadiusX = lowlight.topRightRadiusX = cornerRadius;
			highlight.bottomRightRadiusX = highlight.topRightRadiusX = cornerRadius;
			border.bottomRightRadiusX = border.topRightRadiusX = cornerRadius;
			}
			
			if (highlightStroke) 
			highlightStroke.bottomRightRadiusX = highlightStroke.topRightRadiusX = cornerRadius;
			if (hldownstroke1)
			hldownstroke1.bottomRightRadiusX = hldownstroke1.topRightRadiusX = cornerRadius;
			if (hldownstroke2)
			hldownstroke2.bottomRightRadiusX = hldownstroke2.topRightRadiusX = cornerRadius;*/
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="disabled" />
		<s:State name="down" />
	</s:states>
	
	
	
	<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" >
		<mx:Image source="{catalogoIconosBotones.getInstance().flechaComboAmarillo}" verticalAlign="middle" horizontalAlign="center"/>
	</s:VGroup>
</s:SparkSkin>
