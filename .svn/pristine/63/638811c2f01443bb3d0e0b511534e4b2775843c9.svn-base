<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:componentes="mx.com.proquifa.vista.vistas.registrarConfirmacion.componentes.*"
		 xmlns:checkBox="mx.com.proquifa.vista.vistas.skin.checkBox.*" 
		 creationComplete="ini(event)"
		 width="100%" height="100%" 
		 resize="calc(event)"
		 >
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.RegistroConfirmacion;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.vista.eventos.registrarConfirmacion.EventoRegistrarConfirmacion;
			import mx.effects.AnimateProperty;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.utils.ObjectUtil;
			
			import spark.core.NavigationUnit;
			
			[Bindable] private var contadorDisponibles:Number = 0;
			[Bindable] private var contadorCancelar:Number = 0;
			[Bindable] private var contadorCambio:Number = 0;
			[Bindable] private var contadorBack:Number = 0;
			[Bindable] public var numPartidasActuales:Number = 0;
			
			[Bindable] private var sizeFontAgente:Number;
			[Bindable] private var sizeFontTiny:Number;
			[Bindable] private var sizeFontG:Number;
			private var _dataProvider:ArrayCollection;
			private var bloqueoListaEditado:Boolean;
			
			private var _referencia:Boolean;
			private var _condicion:Boolean;
			private var _medio:Boolean;
			private var _confirma:Boolean;
			public var contadorExt:Number = 0;
			
			[Bindable]
			public function get confirma():Boolean
			{
				return _confirma;
			}

			public function set confirma(value:Boolean):void
			{
				_confirma = value;
			}

			[Bindable]
			public function get medio():Boolean
			{
				return _medio;
			}

			public function set medio(value:Boolean):void
			{
				_medio = value;
			}

			[Bindable]
			public function get condicion():Boolean
			{
				return _condicion;
			}

			public function set condicion(value:Boolean):void
			{
				_condicion = value;
			}

			[Bindable]
			public function get referencia():Boolean
			{
				return _referencia;
			}

			public function set referencia(value:Boolean):void
			{
				_referencia = value;
			}

			[Bindable]
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
				lstOrdenesCompra.dataProvider = new ArrayCollection();
				lstOrdenesCompra.dataProvider =  ObjectUtil.copy(value) as ArrayCollection;
               listaTemp = new ArrayCollection;
			   listaTemp =  ObjectUtil.copy(value) as ArrayCollection;
				obtenerTotalesIniciales(dataProvider);
				numPartidasActuales = value.length;
				dispatchEvent(new Event("terminarEspera"));
				checkTipo.selected = false;
			}
			
			protected function calc(event:ResizeEvent):void
			{
				sizeFontG = (18 / 693) * (unscaledWidth);
				sizeFontG = sizeFontG > 18 ? 18:sizeFontG;
				sizeFontG = sizeFontG < 14 ? 14:sizeFontG;
				
				
				sizeFontAgente = (14 / 693) * (unscaledWidth);
				sizeFontAgente = sizeFontAgente > 14 ? 14:sizeFontAgente;
				sizeFontAgente = sizeFontAgente < 12 ? 12:sizeFontAgente;
				
				sizeFontTiny = (12 / 693) * (unscaledWidth);
				sizeFontTiny = sizeFontTiny > 12 ? 12:sizeFontTiny;
				sizeFontTiny = sizeFontTiny < 10 ? 10:sizeFontTiny;
			}
			
			[Bindable]private var listaTemp:ArrayCollection = new ArrayCollection();
			private function guardarValorChk(event:EventoRegistrarConfirmacion):void
			{
				var indice:int;
				var objTemp:RegistroConfirmacion;
		    	var piezas:int;
				var indiceDividido:Number;
				
				indice = event.indiceDividir;
				temIndice = "" + (indice+1);
				piezas = event.piezas;
				indiceDividido = event.indiceActualDividido;
				if(piezas != 0){
					listaTemp = new ArrayCollection();
					
			
					listaTemp = lstOrdenesCompra.dataProvider as ArrayCollection;
					objTemp = ObjectUtil.copy(listaTemp[indice]) as RegistroConfirmacion;
					
					if(!objTemp.indice)
					objTemp.indice = ""+(indice+1);
					objTemp.numFila += 1;
					
					objTemp.segundaVista =  false;
					objTemp.segundaVistaTipo =  "";
					(listaTemp[indice]).segundaVista = false;
					(listaTemp[indice]).segundaVistaTipo = "";
					
					objTemp.indicePadre = indice;
					objTemp.tipoPendiente = "creado";
					
					(listaTemp[indice]).cantidadCompra = piezas;
					objTemp.cantidadCompra -= piezas;
					
					(listaTemp[indice]).modificado = true;
					objTemp.modificado = false;
					
					objTemp.idPartidaCompra = 0;
					objTemp.fechaAlmacen = null;
					objTemp.fechaProveedor = null;
					objTemp.fechaNueva = null;
					objTemp.fechaMonitoreo = null;
					objTemp.comentarios = null;
					objTemp.documento = null;
					objTemp.nombreDocumento = null;
					objTemp.indiceTabla = indiceDividido + 0.1;
					
					if(event.tipoSelect == "disponible"){
						objTemp.bloqueoRestablecer = "disponible";
						objTemp.estadoDisponible = "restablecer";
						(listaTemp[indice]).tipoPartida = "disponible";
						(listaTemp[indice]).estadoDisponible = "editar";
					}
					if(event.tipoSelect == "back"){
						objTemp.bloqueoRestablecer = "back";
						objTemp.estadoBackOrder = "restablecer";
						(listaTemp[indice]).tipoPartida = "BackOrder";
						(listaTemp[indice]).estadoBackOrder = "editar";						
					}
					if(event.tipoSelect == "cambio"){
						objTemp.bloqueoRestablecer = "cambio";
						objTemp.estadoCambio = "restablecer";
						(listaTemp[indice]).tipoPartida = "FEE";
						(listaTemp[indice]).estadoCambio = "editar";						
					}
					if(event.tipoSelect == "cancelar"){
						objTemp.bloqueoRestablecer = "cancelar";
						objTemp.estadoCancelar = "restablecer";
						(listaTemp[indice]).tipoPartida = "Cancelada";
						(listaTemp[indice]).estadoCancelar = "editar";						
					}
					if(objTemp.cantidadCompra  > 0){
						listaTemp.addItemAt(objTemp, (indice + 1));
						if(listaTemp[lstOrdenesCompra.dataProvider.length-1].dummy)
							listaTemp[lstOrdenesCompra.dataProvider.length-1].dummy = false;						
						else
							listaTemp[lstOrdenesCompra.dataProvider.length-1].dummy = true;						
					}
					
					
					asignarDataProvider();
				}
			}
			
			public static function ordenarPorIndiceTabla(ar:ArrayCollection, fieldName:String, isNumeric:Boolean):ArrayCollection
			{var dataSortField:SortField = new SortField();
				dataSortField.name = fieldName;
				dataSortField.numeric = isNumeric;
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				ar.sort = numericDataSort;
				ar.refresh();
				return ar;
			}
			
			private function asignarDataProvider():void
			{
				calcularTotalesEstados();
				
				verificarImpactoFEE(listaTemp);
				verificarDisponibles(listaTemp);
				
			}
			private function restablecerValores(event:EventoRegistrarConfirmacion):void
			{
				var indice:int;
				var objTemp:RegistroConfirmacion;
				var piezas:int;
				indice = event.indiceActual;
				piezas = event.piezas;
				
				objTemp = lstOrdenesCompra.dataProvider[indice];
			
				objTemp.cantidadCompra += piezas;
				//LIMPIAR VARIABLES
				objTemp.segundaVistaTipo = "";
				objTemp.segundaVista = false;
				objTemp.idPartidaCompra = 0;
				objTemp.fechaAlmacen = null;
				objTemp.fechaProveedor = null;
				objTemp.fechaNueva = null;
				objTemp.fechaMonitoreo = null;
				objTemp.comentarios = null;
				objTemp.documento = null;
				objTemp.nombreDocumento = null;
				//LIMPIAR VARIABLES
					
				/*if(objTemp.indice == null)*/
					objTemp.modificado = false;
				
				if(event.tipoSelect == "disponible")
					objTemp.estadoDisponible = "normal";
				if(event.tipoSelect == "back")
					objTemp.estadoBackOrder = "normal";
				if(event.tipoSelect == "cambio")
					objTemp.estadoCambio = "normal";
				if(event.tipoSelect == "cancelar")
					objTemp.estadoCancelar = "normal";
				
				objTemp.fechaAlmacenString = "ND";
				
				/*listaTemp = new ArrayCollection();
				listaTemp = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;*/
				/*listaTemp.setItemAt(objTemp,indice);*/
				/*listaTemp.removeItemAt(event.indiceDividir);*/
				lstOrdenesCompra.dataProvider.removeItemAt(event.indiceDividir);
				/*setTimeout(asignarDataProvider,1000);*/
				asignarDataProvider();
			}
			protected function ini(event:FlexEvent):void
			{
				addEventListener(EventoRegistrarConfirmacion.CLIC_ACEPTAR_DIVIDIR_LISTA,guardarValorChk);
				
				//addEventListener(EventoRegistrarConfirmacion. CLIC_MANDAINDEX,estadoV);
				
				addEventListener(EventoRegistrarConfirmacion.CLIC_ACEPTAR_RESTABLECER_LISTA,restablecerValores);
				addEventListener(EventoRegistrarConfirmacion.CLIC_DESMARCAR,desmarcarTodas);
				lstOrdenesCompra.addEventListener("itemCrece",indiceVisible);
				 
				addEventListener(EventoRegistrarConfirmacion.SEGUNDA_VISTA_ACTIVA,setSegundaVistaActiva);
			}
			
			[Bindable]public var piezas:int; 
			[Bindable]public var montoString:String = "0.00"; 
			[Bindable]public var clientes:int; 
			
			public function mostrarTotales(value:ArrayCollection):void
			{
				var montos:Number; 
				piezas = 0;
				montos = 0;
				for (var i:int = 0; i < value.length; i++) 
				{
					piezas += value[i].totalPiezas;
					montos += value[i].montoTotal;
				}
				montoString = UtilsFormatosNumericos.precisionADosDecimalesConComas(montos);
			}
			protected function todos(event:MouseEvent,tipo:String):void
			{
				if(tipo == "disponible"){
					if(checkTipo.selected && (lstOrdenesCompra.dataProvider.length > 0)){
						checkTipo.selected = false;
						dispatchEvent(new Event("todosDisponiblesPopUp"));
					}else{
						lstOrdenesCompra.dataProvider = new ArrayCollection();
						lstOrdenesCompra.dataProvider = ObjectUtil.copy(dataProvider) as ArrayCollection;
						
						listaTemp = new ArrayCollection();
						listaTemp = ObjectUtil.copy(dataProvider) as ArrayCollection;
						/*setTimeout(asignarDataProvider,1000);*/
						asignarDataProvider();
					}
				}else if(tipo == "cambio"){
					//PARA POPUP
					if(checkTipoCambio.selected && (lstOrdenesCompra.dataProvider.length > 0)){
						checkTipoCambio.selected = false;
						dispatchEvent(new Event("todosCambioPopUp"));
					}else{
						lstOrdenesCompra.dataProvider = new ArrayCollection();
						lstOrdenesCompra.dataProvider = ObjectUtil.copy(dataProvider) as ArrayCollection;
						
						listaTemp = new ArrayCollection();
						listaTemp = ObjectUtil.copy(dataProvider) as ArrayCollection;
						/*setTimeout(asignarDataProvider,1000);*/						
						asignarDataProvider();
					}
					
				}
			}
			public function seleccionarTodo(value:Boolean,fechaRmt:Date,tipo:String,dateNuevaFEE:Date = null,justificacion:String = null,
							motivo:String = null,archivo:ByteArray = null,nombreArchivo:String = null,rutaArchivo:String = null):void
			{
				var listaTodos:ArrayCollection = ObjectUtil.copy(dataProvider) as ArrayCollection;
				listaTemp = new ArrayCollection();
				var i:int;
			
				if(tipo == "disponible"){
					for (i = 0; i < listaTodos.length; i++) 
					{
						listaTodos[i].estadoDisponible = "editar";	
						listaTodos[i].modificado = true;	
						listaTodos[i].tipoPartida = "disponible";
						listaTodos[i].fechaAlmacen = fechaRmt;
					}
					
					checkTipo.selected = value;
				}else if(tipo == "cambio"){
					for (i = 0; i < listaTodos.length; i++) 
					{
						listaTodos[i].estadoCambio = "editar";	
						listaTodos[i].modificado = true;	
						listaTodos[i].tipoPartida = "FEE";
						listaTodos[i].fechaAlmacen = fechaRmt;
						listaTodos[i].fechaNueva = dateNuevaFEE;
						listaTodos[i].motivo = motivo;
						listaTodos[i].comentarios = justificacion;
						listaTodos[i].documento = archivo;
						listaTodos[i].nombreDocumento = nombreArchivo;
						
					}
					
					checkTipoCambio.selected = value;
				}
				
				listaTemp = ObjectUtil.copy(listaTodos) as ArrayCollection;
				lstOrdenesCompra.dataProvider = listaTodos;
				/*setTimeout(asignarDataProvider,1000);*/
				asignarDataProvider();
				
			}

			
			protected function desmarcarTodas(event:EventoRegistrarConfirmacion):void
			{
				var indice:int;
				var cantidadCompra:int = 0;
				var objetosEliminar:ArrayCollection = new ArrayCollection;
				indice = event.indiceActual;
				
				listaTemp = new ArrayCollection();
			
				listaTemp = lstOrdenesCompra.dataProvider as ArrayCollection;
				for (var i:int = 0; i < listaTemp.length; i++) 
				{
					if(listaTemp[i].indice == indice){
						cantidadCompra += listaTemp[i].cantidadCompra;
						objetosEliminar.addItem(listaTemp[i]);						
					}
				}
				if(indice != 0){
					listaTemp[indice-1].estadoDisponible = "normal";
					listaTemp[indice-1].estadoBackOrder = "normal";
					listaTemp[indice-1].estadoCambio = "normal";
					listaTemp[indice-1].estadoCancelar = "normal";
					listaTemp[indice-1].cantidadCompra += cantidadCompra;
					listaTemp[indice-1].modificado = false;
					listaTemp[indice-1].fechaAlmacen = null;
					listaTemp[indice-1].fechaAlmacenString = "ND";
					listaTemp[indice-1].segundaVistaTipo = "";
					listaTemp[indice-1].segundaVista = false;
				}else{
					listaTemp[indice].estadoDisponible = "normal";
					listaTemp[indice].estadoBackOrder = "normal";
					listaTemp[indice].estadoCambio = "normal";
					listaTemp[indice].estadoCancelar = "normal";
					listaTemp[indice].cantidadCompra += cantidadCompra;
					listaTemp[indice].modificado = false;
					listaTemp[indice].fechaAlmacen = null;
					listaTemp[indice].fechaAlmacenString = "ND";
					listaTemp[indice].segundaVistaTipo = "";
					listaTemp[indice].segundaVista = false;
				}
				for (var j:int = 0; j < objetosEliminar.length; j++) 
				{
					listaTemp.removeItem(objetosEliminar[j]);
				}
				
				/*lstOrdenesCompra.dataProvider = ObjectUtil.copy(listaTemp) as ArrayCollection;
				setTimeout(asignarDataProvider,1000);*/
				asignarDataProvider();
			}
			
			public var todas:Boolean;
			public function obtenerPartidasListas(medio:String,condiciones:String,nombreConfirma:String,numeroRef:String):ArrayCollection
			{
				
				var listaPartidas:ArrayCollection = new ArrayCollection();
				var partidasUtilizadas:ArrayCollection = new ArrayCollection();
				listaPartidas = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;
				var completa:Boolean;
				
				var sql:Query = new Query(listaPartidas,["modificado"]);
				var punteros:Array = sql.getPunteros([true]);
				
				for (var i:int = 0; i < punteros.length; i++) 
				{
					partidasUtilizadas.addItem( sql.universo.getItemAt(punteros[i]) );
						
				}
				for (var j:int = 0; j < partidasUtilizadas.length; j++) 
				{
					partidasUtilizadas[j].responsable = DatosGlobales.getInstance()._usuario.usuario;
					partidasUtilizadas[j].medioPago = medio;
					partidasUtilizadas[j].condicionesPago = condiciones;
					partidasUtilizadas[j].confirma = nombreConfirma;
					partidasUtilizadas[j].referencia = numeroRef;
				}
				
				var punterosMod:Array = sql.getPunteros(["false"],"modificado");
				for (var k:int = 0; k < punterosMod.length; k++) 
				{
					if(listaPartidas[punterosMod[k]].cantidadCompra == 0){
						completa = true;
					}
					else{
						completa = false;
						break;
					}
				}
				if(punterosMod.length == 0)
					completa = true;
				
				todas=completa;
				
				return partidasUtilizadas;
			}
			
			public function calcularTotalesEstados():void
			{
				var listaTemp:ArrayCollection = new ArrayCollection();
				var disponibles:int = 0;
				var cambio:int = 0;
				var back:int = 0;
				var cancelar:int = 0;
				listaTemp = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;
				for (var i:int = 0; i < listaTemp.length; i++) 
				{
					if(listaTemp[i].estadoDisponible == 'editar')
						disponibles += 1;
					if(listaTemp[i].estadoCancelar == 'editar')
						cancelar += 1;
					if(listaTemp[i].estadoCambio == 'editar')
						cambio += 1;
					if(listaTemp[i].estadoBackOrder == 'editar')
						back += 1;
				}
				contadorDisponibles = disponibles;
				contadorCambio = cambio;
				contadorBack = back;
				contadorCancelar = cancelar;
				
			}
			private function obtenerTotalesIniciales(value:ArrayCollection):void
			{
				var montos:Number;
				var sql:Query = new Query(value,["cliente","dummy"]);
				var punteros:Array = sql.getPunteros([null,"false"]);
				clientes = sql.getPunteros(["cliente"],"cliente").length
				piezas = sql.getSumarCampo("totalPiezas",punteros);
				montos = sql.getSumarCampo("montoTotal",punteros);
				montoString = UtilsFormatosNumericos.precisionADosDecimalesConComas(montos);
				
				contadorDisponibles = 0;
				contadorCancelar = 0;
				contadorCambio = 0;
				contadorBack= 0;
			}
			
			private function verificarDisponibles(value:ArrayCollection):void
			{
				var sql:Query = new Query(value,["tipoPendiente"]);
				var punteros:Array = sql.getPunteros(["normal"]);
				var objTemp:RegistroConfirmacion;
				/////////////////  TODOS DISPONIBLES
				var todosDisponibles:Boolean;
				for (var i:int = 0; i < punteros.length; i++) 
				{
					objTemp =  (sql.universo.getItemAt(punteros[i]) as RegistroConfirmacion);
					if(objTemp.estadoDisponible == "editar")
						todosDisponibles = true;
					else{
						todosDisponibles = false;
						break;
					}
				} 
				
				checkTipo.selected = todosDisponibles;
				
				/////////////////  TODOS MODIFICADOS O PARCIAL
				var todosModificados:Boolean = false;
				var originalesModificados:Boolean;
				var contactoCompleto:Boolean;
				var j:int;
				for (j= 0; j < punteros.length; j++) 
				{
					objTemp =  (sql.universo.getItemAt(punteros[j]) as RegistroConfirmacion);
					if(objTemp.estadoDisponible == "editar"){
						originalesModificados = true;
						break;
					}
					else if(objTemp.estadoCancelar == "editar"){
						originalesModificados = true;
						break;
					}
					else if(objTemp.estadoCambio == "editar"){
						originalesModificados = true;
						break;
					}
					else if(objTemp.estadoBackOrder == "editar"){
						originalesModificados = true;
						break;
					}else{
						originalesModificados = false;
					}
				}
				
				for (j = 0; j < punteros.length; j++) 
				{
					objTemp =  (sql.universo.getItemAt(punteros[j]) as RegistroConfirmacion);
					if(objTemp.estadoDisponible == "editar"){
						todosModificados = true;
					}
					else if(objTemp.estadoCancelar == "editar"){
						todosModificados = true;
					}
					else if(objTemp.estadoCambio == "editar"){
						todosModificados = true;
					}
					else if(objTemp.estadoBackOrder == "editar"){
						todosModificados = true;
					}
					else{
						todosModificados = false;
						break;
					}
				}
				if(condicion && confirma && referencia && medio)
					contactoCompleto = true;
				else
					contactoCompleto = false;
				
				if(todosModificados && contactoCompleto)
					dispatchEvent(new Event("partidasTodasModificadas"));
				else if(originalesModificados && contactoCompleto)
					dispatchEvent(new Event("partidasModificadasAlgunas"));
				else
					dispatchEvent(new Event("partidasSinModificadas"));
			}
			
			private function verificarImpactoFEE(value:ArrayCollection):void
			{
				var sql:Query = new Query(value,["tipoPendiente"]);
				var punteros:Array = sql.getPunteros(["normal"]);
				var objTemp:RegistroConfirmacion;
				/////////////////  TODOS IMPACTO
				var todosImpacto:Boolean;
				for (var i:int = 0; i < punteros.length; i++) 
				{
					objTemp =  (sql.universo.getItemAt(punteros[i]) as RegistroConfirmacion);
					if(objTemp.estadoCambio == "editar")
						todosImpacto = true;
					else{
						todosImpacto = false;
						break;
					}
				} 
				
				checkTipoCambio.selected = todosImpacto;
			}
			
			private function scrollToIndex(index:int, animationDuration:int = 100):void 
			{
				/*dobleClick(index, animationDuration);*/
				setTimeout(dobleClick, 300, index,animationDuration);
			}
			
			private function dobleClick(index:int, animationDuration:int):void
			{
				var pt:Point = lstOrdenesCompra.layout.getScrollPositionDeltaToElement(index);
				var verticalScroll:int = lstOrdenesCompra.layout.verticalScrollPosition;
				var verticalScrollOld:int = lstOrdenesCompra.layout.verticalScrollPosition;
				var delta:int = -1;
				if (pt != null )
				{
					while (pt)
					{
						lstOrdenesCompra.validateNow();
						if (pt.y > 0) {
							
							delta = lstOrdenesCompra.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN);
						} else {
							verticalScrollOld = delta;
							delta = lstOrdenesCompra.layout.getVerticalScrollPositionDelta(NavigationUnit.UP);
						}
						
						lstOrdenesCompra.layout.verticalScrollPosition += delta;
						verticalScroll += delta;
						pt = lstOrdenesCompra.layout.getScrollPositionDeltaToElement(index);
						if ((delta == 0 || verticalScrollOld == delta) && pt != null ){
							break;
						}
					}
					var animation:AnimateProperty = new AnimateProperty(lstOrdenesCompra.dataGroup);
					animation.property = "verticalScrollPosition";
					animation.duration = animationDuration;
					animation.toValue = verticalScroll; 
				}
			}
			
			protected function indiceVisible(event:Event):void
			{
				scrollToIndex(lstOrdenesCompra.selectedIndex);
			}
			public function verificar():void
			{
				verificarImpactoFEE(listaTemp)
				verificarDisponibles(listaTemp)
			}
			
			private function setSegundaVistaActiva(event:EventoRegistrarConfirmacion):void
			{
				var listaTemp:ArrayCollection = ObjectUtil.copy( lstOrdenesCompra.dataProvider ) as ArrayCollection; 
				for (var i:int = 0; i < lstOrdenesCompra.dataProvider.length; i++) 
				{
					if(i == event.indiceActual){
						lstOrdenesCompra.dataProvider[event.indiceActual].segundaVistaTipo = event.tipoSelect;
						lstOrdenesCompra.dataProvider[event.indiceActual].segundaVista = true;	
					}else{
						lstOrdenesCompra.dataProvider[i].segundaVistaTipo = "";
						lstOrdenesCompra.dataProvider[i].segundaVista = false;
					}
				}
			
				lstOrdenesCompra.dataGroup.invalidateDisplayList();
			}
			
			
			protected function verCompleto(event:MouseEvent):void
			{
				scrollToIndex(lstOrdenesCompra.selectedIndex);
			}
			
			
			private var temIndice:String;
			private function ordenar():void
			{
				var contador:int = 0;
				var listaIndices:ArrayCollection = new ArrayCollection
				
				
				for each (var objTemporal:RegistroConfirmacion in listaTemp) 
				{
					
					if(objTemporal.tipoPendiente != "original" && objTemporal.indice == temIndice)
					{
						objTemporal.indiceTabla += 0.1;
					objTemporal.indiceTabla = Number(""+objTemporal.indice +"."+objTemporal.numFila);
					contador = contador +  1;
				
					}		
					else 
					objTemporal.indiceTabla  = objTemporal.indiceTabla ;
				}
				
				listaTemp= ordenarPorIndiceTabla(listaTemp,"indiceTabla",true);
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="#008894" weight="1"/>
		</s:stroke>
	</s:Rect>
	
	<s:VGroup width="100%" height="100%" top="1" bottom="1" left="1" right="1" gap="0">
		<s:HGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center"  gap="0">
			<s:HGroup width="6%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontG}" color="#424242" text="#" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="21%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontG}" color="#424242" text="DESCRIPCIÓN" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="19%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontG}" color="#424242" text="CLIENTE" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="14%" height="100%" verticalAlign="middle" horizontalAlign="center" gap="0">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontG}" color="#424242" text="FEA" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontG}" color="#424242" text="1ER ALMACÉN" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>		
			</s:HGroup>  
			<s:VGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:HGroup width="100%" height="100%" />
				<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontTiny}" color="#840615" text="CANCELAR" textAlign="center" maxDisplayedLines="2" height="100%" verticalAlign="middle"/>			
				</s:VGroup>  
			</s:VGroup>  
			<s:VGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:HGroup width="100%" height="100%" />
				<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontTiny}" color="#400d68" text="BACK ORDER" textAlign="center" maxDisplayedLines="2" height="100%" verticalAlign="middle"/>			
				</s:VGroup>  
			</s:VGroup>  
			<s:VGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<componentes:checkBoxColoreCR id="checkTipoCambio" width="15" height="15" verticalCenter="0" horizontalCenter="0" click="todos(event,'cambio')" tipoCheck="cambio"/>
				</s:HGroup>
				
				<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontTiny}" color="#c15105" text="CON" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontTiny}" color="#c15105" text="IMPACTO FEE" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
				</s:VGroup>  
			</s:VGroup>  
			
			<s:VGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<!--<checkBox:checkPalomaVerde id="chkTodo" width="25" height="25" verticalCenter="0" horizontalCenter="0" click="todos(event)"/>-->
					<componentes:checkBoxColoreCR id="checkTipo" width="15" height="15" verticalCenter="0" horizontalCenter="0" click="todos(event,'disponible')" tipoCheck="disponible"/>
				</s:HGroup>
				<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontTiny}" color="#336535" text="SIN" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontTiny}" color="#336535" text="IMPACTO FEE" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
				</s:VGroup>  
			</s:VGroup>  
		</s:HGroup>  
		<s:Rect width="100%" height="1">
			<s:fill>
				<s:SolidColor color="#424242" />
			</s:fill>
		</s:Rect>
		
		<s:List width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off"
				selectedIndex="0" id="lstOrdenesCompra" contentBackgroundAlpha="0" click="verCompleto(event)"
				itemRenderer="mx.com.proquifa.vista.vistas.registrarConfirmacion.itemRender.IR_PartidasOperacionesCR" 
				/>
		
		<s:Rect width="100%" height="1">
			<s:fill>
				<s:SolidColor color="#424242" />
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center" gap="0" maxHeight="50">
			<s:HGroup width="6%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontAgente}" color="#424242" text="#{lstOrdenesCompra.dataProvider.length}" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="21%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontAgente}" color="#424242" text="{piezas} {piezas==1?'pza':'pzas'}" textAlign="center" maxDisplayedLines="2" />
				<s:Spacer width="100%" />
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontAgente}" color="#424242" text="Monto Total: ${montoString}" textAlign="center" maxDisplayedLines="2" />			
			</s:HGroup>  
			<s:HGroup width="19%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontAgente}" color="#424242" text="{clientes} {clientes==1?'Cliente':'Clientes'}" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="14%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontAgente}" color="#424242" text="" textAlign="center" maxDisplayedLines="2"/>			
			</s:HGroup>  
			<s:HGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontTiny}" color="#840615" textAlign="center" maxDisplayedLines="2" text="{contadorCancelar}"/>			
			</s:HGroup>  
			<s:HGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18" fontSize="{sizeFontTiny}" color="#400d68" textAlign="center" maxDisplayedLines="2" text="{contadorBack}"/>			
			</s:HGroup>  
			<s:HGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontTiny}" color="#c15105" textAlign="center" maxDisplayedLines="2" text="{contadorCambio}"/>			
			</s:HGroup>  
			<s:HGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18"  fontSize="{sizeFontTiny}" color="#336535" textAlign="center" maxDisplayedLines="2" text="{contadorDisponibles}"/>			
			</s:HGroup>
		</s:HGroup>  
		
	</s:VGroup>  
</s:Group>
