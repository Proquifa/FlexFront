<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:pq="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.pq.*" 
		  xmlns:componentes="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*"
		  xmlns:otros="skins.otros.*"
		  xmlns:pqNet1="skins.skin.datagrid.pqNet.*"
		  xmlns:pqNet="skins.botones.pqNet.*" 
		  width="100%" height="100%" 
		  paddingLeft="20" paddingTop="25" paddingBottom="15"
		  >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:SeriesInterpolate id="fxInterpolateIn" duration="600"/>
		<s:SolidColorStroke id = "sA" color="0x3b98af" weight="2"/>
		<mx:SolidColorStroke id = "s1" color="0x3b98af" weight="6"/>
		<s:SolidColorStroke id="trazoGruezo" color="0x{catalogoColores.LABEL_NEGRO}" weight="3"/>
		<s:SolidColorStroke id="trazoDelgado" color="0x{catalogoColores.LABEL_NEGRO}" weight="1"/>
		
		<s:LinearGradient id="sc1" rotation="90">
			<s:GradientEntry alpha="1.0" color="#b4c871" ratio="0"/>
			<s:GradientEntry alpha="1.0" color="#8da741" ratio="1"/> 
		</s:LinearGradient>
		<s:LinearGradient id="sc2" rotation="90">
			<s:GradientEntry alpha="1.0" color="#990429" ratio="0"/>
			<s:GradientEntry alpha="1.0" color="#910824" ratio="1"/>
		</s:LinearGradient>
		
		
		<mx:SolidColorStroke id = "s2" color="0xdd9c12" weight="2"/>
		<mx:SolidColor id="sc3" color="0x{catalogoColores.LABEL_NARANJA}" alpha="1"/>
		<s:SolidColorStroke id="stroke2" color="0x{catalogoColores.LABEL_NARANJA}" weight="5"/>
		<mx:SolidColorStroke id = "sObj" color="0xC54B8C" weight="3"/>
		<mx:SolidColor id="sc4" color="0xC54B8C" alpha="1"/>
		<s:SolidColorStroke id="s4" color="0xC54B8C" weight="2"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.productos.EventoTableroProductos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;			
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.ventasDelPeriodo.PeriodoToolTip;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoColores;
			
			private var _ocComprasGrafica:ArrayCollection;
			private var _currentVistaSelected:String;
			private var _listaMensual:ArrayCollection = new ArrayCollection([
				"Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"
			]);
			
			private var _desempenoActual:Number = 0;
			private var totalLegend:Number = 0;
			private var _desepenoAnterior:Number = 0;
			private var _minimoMeses:int=1;
			private var _maximoMeses:int=12;
			private var _event:EventoTableroProductos;
			private var fecha:Date = new Date();
			private var yallegaronLasCompras:Boolean = false;
			private var _anioMultiple:Boolean;
			private var _anioFiltro:Number;
			private var _anioInicio:int = 0;
			private var _anioFin:int = 0;
			private var cont:Number=0;
			
			public function set recibeComprasRealizadas(comparativa:ArrayCollection):void
			{
				if(comparativa == null) return;
				
				this._ocComprasGrafica = new ArrayCollection();
				this._ocComprasGrafica = comparativa;
				yallegaronLasCompras = true;
			}
			
			public function set recibeFiltros(parametros:EventoTableroProductos):void{
				
				if(parametros == null) return;
				_event = parametros;
				_minimoMeses = _event.parametros.mesInicio;
				_maximoMeses = _event.parametros.mesFin;
				_anioFiltro = _event.parametros.anioInicio;
				_anioMultiple = _event.parametros.aniosMultiple;
				
				if(_anioMultiple){
					_anioInicio = _event.parametros.anioInicio;
					_anioFin = _event.parametros.anioFin;
				}
				
				cont++;				
				llamarAIniciarGrafica();		
			}
			
			private function llamarAIniciarGrafica():void
			{
				if(yallegaronLasCompras)
				{					
					yallegaronLasCompras = false;
					if(_anioMultiple){
						myChart.dataProvider = iniciarGraficaAniosMulti( _ocComprasGrafica );
					}else{
						myChart.dataProvider = iniciarGrafica( _ocComprasGrafica );
					}
				}
				else
				{
					setTimeout(llamarAIniciarGrafica,300);
				}
			}
			
			public function seleccionarGrafica():void
			{
				_currentVistaSelected = "vistaGrafico";
				stackGeneral.paddingRight = 0;
				this.stackGeneral.selectedChild = vistaGrafico;			
			}
			
			private function formateoEje($valor:Number, $valorPrevio:Object, $eje:Object):String
			{
				var strRegreso:String = "";
				if($valor != 0 ) strRegreso =  '$ ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( $valor );
				return strRegreso;
			}
			
			private function lblFunction( $value:Object, $etiqueta:Object ):String
			{
				if(_anioMultiple){
					return int($etiqueta).toString();
				}else{
					return _listaMensual[ int($etiqueta) -1 ].toUpperCase();				
				}
			}
			
			private function iniciarGrafica( $lista:ArrayCollection ):ArrayCollection
			{
				_desempenoActual = 0;
				totalLegend = 0;
				var m:int = 0;
				var arrReturn:ArrayCollection = new ArrayCollection();
				arrReturn.addItem(new Object());
				var objeto:Object ;
				var cuenta:int = 1;
				var contador:int = 0;
				var contadorPromedio:int = 0;
				var _anio:Number = ($lista[0] as ResumenConsulta).periodo;
				var mes:Number = fecha.month + 1;
				_desepenoAnterior = 0;
				
				while( cuenta < 13)
				{
					if(cuenta >= _minimoMeses && cuenta <= _maximoMeses)
					{
						objeto = new Object();
						objeto.numeroMes = cuenta;
						objeto.mes = _listaMensual[cuenta -1];
						objeto.montoUSD_0 = 0;
						objeto.montoUSD_1 = 0;
						objeto.montoUSD_2 = 0;
						objeto.totalPeriodo = 0;
						objeto.montoObjetivo = 0; 
						objeto.montoFundamental = 0;
						
						for( m = 0; m < $lista.length;m++ ){
							var resumen:ResumenConsulta = $lista[m] as ResumenConsulta;
							if(cuenta == resumen.mes){
								if( resumen.etiqueta == "OC_COMPRAS_0" && resumen.conceptoResultado == 'Confirmada')
								{
									totalLegend += resumen.total;
									objeto.montoUSD_0 += resumen.total;
									_desempenoActual += resumen.total;	
									contadorPromedio++;
								}
								else if( resumen.etiqueta == "OC_COMPRAS_1" && resumen.conceptoResultado == 'Confirmada')
								{
									objeto.montoUSD_1 += resumen.total;
									_desepenoAnterior += resumen.total;
								}
								else if( resumen.etiqueta == "OC_COMPRAS_2" && resumen.conceptoResultado == 'Confirmada' )
								{
									objeto.montoUSD_2 += resumen.total;
								}
							}
						}						
						arrReturn.addItem(objeto);
					}
					cuenta++;
				}	
				
				arrReturn.addItem( new Object() );
				lblPer1.text = _event.labelPeriodo1;
				
				return arrReturn;	
			}
			
			private function iniciarGraficaAniosMulti( $lista:ArrayCollection ):ArrayCollection
			{
				_desempenoActual = 0;
				totalLegend = 0;
				var m:int = 0;
				var arrReturn:ArrayCollection = new ArrayCollection();
				arrReturn.addItem(new Object());
				var objeto:Object ;
				var cuenta:int = 1;
				var contador:int = 0;
				var contadorPromedio:int = 0;				
				var pintarAnio:int = _anioInicio;
				_desepenoAnterior = 0;
				var copiaUniverso:ArrayCollection = ObjectUtil.copy($lista) as ArrayCollection;  
				
				/*var punteroxAnio:Query =  new Query($lista,["mes"]); 
				var arr:Array =  punteroxAnio.getPunteros([pintarAnio]);*/
				
				while( pintarAnio <= _anioFin)
				{					
					objeto = new Object();
					objeto.numeroMes = pintarAnio;
					objeto.mes = pintarAnio;
					objeto.montoUSD_0 = 0;
					objeto.montoUSD_1 = 0;
					objeto.montoUSD_2 = 0;
					objeto.totalPeriodo = 0;
					objeto.montoObjetivo = 0; 
					objeto.montoFundamental = 0;
					
					var arrCopia:ArrayCollection = UtilsGrid.queryCampoX( copiaUniverso, "mes",pintarAnio.toString() );
					
					for( m = 0; m < arrCopia.length;m++ ){
						var resumen:ResumenConsulta = arrCopia[m] as ResumenConsulta;
						
						totalLegend += resumen.total;
						objeto.montoUSD_0 += resumen.total;
						_desempenoActual += resumen.total;	
						contadorPromedio++;						
					}						
					arrReturn.addItem(objeto);
					pintarAnio++;
					cuenta++;
				}	
				
				arrReturn.addItem( new Object() );
				lblPer1.text = _event.labelPeriodo1;
				
				return arrReturn;	
			}
			
			private function maxConfirmacionCanceladas():void
			{	
				var evt:EventoTableroProductos = new EventoTableroProductos(EventoTableroProductos.VOLVER_A_TABLERO_PRODUCTOS);
				dispatchEvent(evt);			
			}
		]]>
	</fx:Script>
	
	<s:HGroup width="100%">
		<componentes:TituloChartMaxTablero width="100%" text="COMPRAS"/>
		<componentes:TituloChartMaxTablero id="lblPer1" paddingRight="20" textAlign="center"/>
	</s:HGroup>
	
	<pq:MobViewStack id="stackGeneral" width="100%" height="100%">
		
		<s:NavigatorContent id="vistaGrafico" width="100%" height="100%">
			<s:HGroup width="100%" height="100%" gap="0">
				
				<s:VGroup width="100%" height="100%" gap="0" paddingRight="20" >
					<otros:divisionGruesa width="100%" />		
					
					<mx:LineChart height="100%" width="100%" id="myChart"
								  mouseSensitivity="5" 
								  dataTipRenderer="{PeriodoToolTip}" 
								  showDataTips="true" 
								  showDataTipTargets="false"  
								  dataTipMode="single" 
								  paddingRight="30" paddingLeft="20" paddingTop="40"
								  paddingBottom="40"
								  seriesFilters="[]">
						<mx:series>					
							
							<mx:LineSeries yField="montoUSD_0" xField="numeroMes" form="segment"  lineStroke="{s1}" showDataEffect="{fxInterpolateIn}" />
							<mx:PlotSeries yField="montoUSD_0" xField="numeroMes" displayName="Ventas" showDataEffect="{fxInterpolateIn}">
								<mx:itemRenderer>
									<fx:Component>
										<s:MXItemRenderer>
											<fx:Script>
												<![CDATA[
													import skins.catalogos.catalogoColores;
												]]>
											</fx:Script>
											<s:Ellipse width="8" height="8" horizontalCenter="0" verticalCenter="0">
												<s:fill>
													<s:SolidColor color="0x{catalogoColores.LABEL_VERDE_AZUL}"/>
												</s:fill>		
											</s:Ellipse>
										</s:MXItemRenderer>
									</fx:Component>
								</mx:itemRenderer>
							</mx:PlotSeries>
						</mx:series>
						<mx:horizontalAxis>
							<mx:CategoryAxis id="vMes" categoryField="numeroMes"  />
						</mx:horizontalAxis>
						<mx:verticalAxis>
							<mx:LinearAxis id="vCantidad" labelFunction="formateoEje" autoAdjust="false" padding="1"  minimum="0"/>
						</mx:verticalAxis>
						<mx:verticalAxisRenderers>
							<mx:AxisRenderer axis="{vCantidad}" showLine="false" tickPlacement="none" styleName="axisVerticalLabels"/>
						</mx:verticalAxisRenderers>
						<mx:horizontalAxisRenderers>
							<mx:AxisRenderer axis="{vMes}" axisStroke="{trazoGruezo}" tickPlacement="none" showLine="true" showLabels="true" 
											 fontFamily="Helvetica" fontSize="11" fontWeight="bold" fontStyle="normal" labelFunction="lblFunction" />
						</mx:horizontalAxisRenderers>
					</mx:LineChart>
					
					<s:Label width="100%" paddingBottom="10" styleName="axisVerticalLabels">
						<s:text>Los montos se refieren  a costo de Compra</s:text>
					</s:Label>
					<otros:divisionHueca width="100%" />
					<s:HGroup width="100%" height="40" verticalAlign="middle" paddingBottom="5" paddingTop="10">
						<!--							<grafica:botonPopUp icono="tabla" click="cambiarVistaTablaGrafica('vistaTabla')"/>-->
						<pqNet:botonPqNetLargo label="Inicio" click="maxConfirmacionCanceladas()" />
					</s:HGroup>	
					
				</s:VGroup>
			</s:HGroup>	
		</s:NavigatorContent>
		
	</pq:MobViewStack>
	
</s:VGroup>
