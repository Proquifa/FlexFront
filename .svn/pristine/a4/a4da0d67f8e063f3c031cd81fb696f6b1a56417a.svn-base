<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componentes ="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*" width="100%" height="100%" 
		 xmlns:graficas="skins.skin.graficas.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Llamada;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.utils.ObjectUtil;
			
			private var keys:Object;
			private var _infoAbiertoVsCerrado:ArrayCollection;
			
			public function set recibeLlamadas($infoGrafica:ArrayCollection):void{
				if($infoGrafica == null) return ;
				
				_infoAbiertoVsCerrado = new ArrayCollection();
				myChart.dataProvider = new ArrayCollection();
				
				/**
				 * Se obtiene un array del ArrayCollection con el fin de aplicar funciones espécificas de los Arrays como el ordenar
				 * */
				
				var arrayTemp:Array = new Array();
				arrayTemp = (ObjectUtil.copy($infoGrafica) as ArrayCollection).source;
				arrayTemp.sortOn("estado");
				
				/**
				 * Se obtiene un array con los estados Abierto/cerrado sin duplicarse, que será el que controlará el for para las sumas.
				 * */
				keys = new Object();
				
				var arrayTotalEstados:Array = new Array();
				arrayTotalEstados = arrayTemp.filter(quitaDuplicados);
				
				FormarLosEstados(arrayTotalEstados,arrayTemp,_infoAbiertoVsCerrado);
				
				if(_infoAbiertoVsCerrado.length == 2){
					/**
					 * Se invierte el orden para que los de estado cerrado sean los primeros que lleguen a la gráfica y asigne correctamente 
					 * los colores, El verde para los Cerrados, y rojo para los Abiertos
					 * */
					_infoAbiertoVsCerrado.addItem(ObjectUtil.copy(_infoAbiertoVsCerrado[0]));
					_infoAbiertoVsCerrado.removeItemAt(0);
					
				}else if(_infoAbiertoVsCerrado.length ==1){
					var itemResumenConsulta:ResumenConsulta;
					if((_infoAbiertoVsCerrado[0] as ResumenConsulta).etiqueta == 'ABIERTA'){
						itemResumenConsulta = new ResumenConsulta();
						itemResumenConsulta.etiqueta = 'CERRADA';
						itemResumenConsulta.totalClientes = 0;
						itemResumenConsulta.totalDocumentos = 0;
						
						_infoAbiertoVsCerrado.addItemAt(itemResumenConsulta,0);
					}
				}
				
				myChart.dataProvider = myChart.aplicarFormatoConsultasDeDosEtiquetas(_infoAbiertoVsCerrado,null,'totalLlamadas');
				
				//Para liberar Memoria
				arrayTemp = new Array();
				arrayTotalEstados = new Array();
				keys = new Object();
			}
			private function FormarLosEstados(TotalEstados:Array,estadosInfo:Array,infoEstados:ArrayCollection):void
			{
				
				var totalLlamadas:int;
				var currentLlamada:Llamada; 
				var j:int;
				var itemResumenConsulta:ResumenConsulta;
				var totalClientes:int;
				keys = new Object();
				var keysCerrados:Object;
				
				for(var i:int =0; i<TotalEstados.length; i++){
					j=0;
					totalLlamadas =0;
					totalClientes =0;
					keysCerrados = new Object();
					
					currentLlamada = estadosInfo[j] as Llamada;
					while( (TotalEstados[i] as Llamada).estado == currentLlamada.estado ){
						
						totalLlamadas++;
						if(currentLlamada.estado == 'ABIERTA'){
							if(!keys.hasOwnProperty(currentLlamada.empresa)){
								keys[currentLlamada.empresa] = currentLlamada.empresa;
								totalClientes++;
							}
						}else{
							if(!keys.hasOwnProperty(currentLlamada.empresa) && !keysCerrados.hasOwnProperty(currentLlamada.empresa)){
								keysCerrados[currentLlamada.empresa] = currentLlamada.empresa;
								totalClientes++;
							}
						}
						
						estadosInfo.shift();
						if(estadosInfo.length >0)
							currentLlamada = estadosInfo[j] as Llamada;
						else
							currentLlamada =new Llamada();
					}
					
					itemResumenConsulta = new ResumenConsulta();
					itemResumenConsulta.etiqueta = (TotalEstados[i] as Llamada).estado.toLocaleUpperCase();
					itemResumenConsulta.totalClientes = totalClientes;
					itemResumenConsulta.totalLlamadas = totalLlamadas;
					
					infoEstados.addItem(ObjectUtil.copy(itemResumenConsulta));
				}
			}
			public function quitaDuplicados(item:Llamada, idx:uint, abiertoVsCerrado:Array):Boolean{
				if (keys.hasOwnProperty(item.estado)) {
					return false;
				} else {
					keys[item.estado] = item.estado;
					return true;
				}
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center">
		<s:Spacer width="100%" height="5%"/>
		<componentes:tituloChartTablero width="100%"	text="ABIERTA VS CERRADA" textAlign="center" />
	</s:VGroup>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:Spacer width="100%" height="10%"/>
		<graficas:PieChartPqGris id="myChart" width="100%" height="100%"  horizontalCenter="0" verticalCenter="0"
								 dataProvider="{null}"
								 lineasHabilitadas="true" etiquetasHabilitadas="true" habilitarResumen="true"
								 showDataTips="false"  innerRadius=".5">   
			<graficas:series>
				<graficas:pieSeriesVS field="totalLlamadas"/> 
			</graficas:series>
		</graficas:PieChartPqGris>
		<s:Spacer width="100%" height="30%"/>
	</s:VGroup>
</s:Group>