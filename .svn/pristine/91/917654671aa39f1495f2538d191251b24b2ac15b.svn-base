<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:documentacion="mx.com.proquifa.vista.vistas.gestorCompras.componentes.ordenDespacho.documentacion.*" 
		  xmlns:busqueda="mx.com.proquifa.vista.vistas.skin.busqueda.*" 
		  xmlns:boton="mx.com.proquifa.vista.vistas.skin.boton.*"
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:label="skins.skin.label.*" 
		  xmlns:pqNet="skins.botones.pqNet.*"
		  xmlns:otros="skins.otros.*"
		  width="100%" height="100%" gap="20" verticalAlign="middle"
		  creationComplete="init(event)" 
		  >
	
	<fx:Script>
		<![CDATA[
			import flash.net.FileReference;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.DocumentoOrdenDespacho;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.StringFunciones;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.effects.AnimateProperty;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.core.NavigationUnit;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotones;
			import skins.textinput.busqueda.skinTextInputBusqueda2D;
			
			/* 
			Tipos de documento:
			+ Certificado
			+ Nafta
			+ Detallado
			+ Simplificado
			+ Factura
			+ Pakinglist
			+ CartaUso
			+ facturaFaltante
			*/
			
			public var seleccionaAdicional:Boolean = false;
			private var _faltantes:ArrayCollection;
			[Bindable]private var _cargados:ArrayCollection;
			private var _dataProvider:ArrayCollection;
			private var indexSelect:int = 0;
			private	var temporizador:Timer;
			private var _respaldoBusqueda:ArrayCollection;
			private var respaldoDocumentos:ArrayCollection;
			[Bindable]private var dataListaCartas:ArrayCollection;
			private var escalaImagen:String = "carta";
			
			public var variacionW:int = 142.5;
			public var variacionH:int = 158.75;
			
			[Bindable]
			public var widModificado:int = 845;
			
			[Bindable]
			public var heiModificado:int = 632;
			
			[Bindable]
			private var selectCurrent:DocumentoOrdenDespacho;
			
			private var escalaImg:Number = 1;
			
			protected function init(event:FlexEvent):void
			{
				scroll();
				lblTodos.selected = true;
				lstDocumentos.dataProvider = new ArrayCollection();
				selectCurrent = new DocumentoOrdenDespacho();
			}
			
			
			public function resetAll():void
			{
				file = null;
				cargados = new ArrayCollection();
				faltantes = new ArrayCollection();
				lstDocumentos.dataProvider = new ArrayCollection();
				selectCurrent = new DocumentoOrdenDespacho();
				
				lblTodos.selected = true;
				grpImagen.visible = grpImagen.includeInLayout = true;
				grupoImagenVisualizador.visible = grupoImagenVisualizador.includeInLayout = false;
				btnRecargar.visible = btnRecargar.includeInLayout = false;
			}
			
			protected function filtro():void
			{
				if (StringUtil.trim(textBusqueda.text).length > 0 )
				{
					_respaldoBusqueda = new ArrayCollection();
					_respaldoBusqueda = ObjectUtil.copy( lstDocumentos.dataProvider as ArrayCollection) as ArrayCollection;
					if(temporizador == null)
					{
						temporizador = new Timer(500,0);
						temporizador.addEventListener(TimerEvent.TIMER,filtrar,false,0,true);
					}
					if(temporizador)
					{
						if(temporizador.running)
						{
							temporizador.reset();
							temporizador.start();
						}
						else
						{
							temporizador.start();
						}
					}
				}
				else
				{
					if(indexSelect == 0)
					{
						lstDocumentos.dataProvider = numerar(respaldoDocumentos);
						lblCont.text = respaldoDocumentos.length.toString()
					}
					else if (indexSelect == 1)
					{
						lstDocumentos.dataProvider = numerar(cargados);
						lblCont.text = cargados.length.toString()
					}
					else if (indexSelect == 2)
					{
						lstDocumentos.dataProvider = numerar(faltantes);
						lblCont.text = faltantes.length.toString()
					}
				}
			}
			
			public var sqlBusqueda:Query;
			private function filtrar(event:TimerEvent):void
			{
				temporizador.stop();
				if(StringUtil.trim(textBusqueda.text).length > 0 )
				{
					var punteroCliente:Array = new Array();
					var nom:String;
					var parecidos:Array = new Array();
					var arreTemp:Array = new Array();
					var arregloTe:ArrayCollection = new ArrayCollection();
					
					sqlBusqueda = new Query(lstDocumentos.dataProvider as ArrayCollection,["faltante","folio","codigoLA","nombreProducto","nombreDocumento"],true);
					punteroCliente = new Array();
					nom = StringUtil.trim( textBusqueda.text).toLowerCase();
					parecidos = sqlBusqueda.getCampoLikeLowerCase("folio",nom);
					var parecidosCodigoLA:Array = sqlBusqueda.getCampoLikeLowerCase("codigoLA",nom);
					var parecidosProducto:Array = sqlBusqueda.getCampoLikeLowerCase("nombreProducto",nom);
					var parecidosDocumento:Array = sqlBusqueda.getCampoLikeLowerCase("nombreDocumento",nom);
					
					if (parecidos.length > 0)
					{
						for ( var x:int = 0; x<parecidos.length; x++)
						{
							punteroCliente.push(sqlBusqueda.getPunteros([null,parecidos[x],null]));
						}
					}
					
					if (parecidosCodigoLA.length > 0)
					{
						for ( var h:int = 0; h<parecidosCodigoLA.length; h++)
						{
							punteroCliente.push(sqlBusqueda.getPunteros([null,null,parecidosCodigoLA[h]]));
						}
					}
					
					if (parecidosProducto.length > 0)
					{
						for ( var j:int = 0; j < parecidosProducto.length; j++)
						{
							punteroCliente.push(sqlBusqueda.getPunteros([null,null,null,parecidosProducto[j]]));
						}
					}
					
					if (parecidosDocumento.length > 0)
					{
						for ( var q:int = 0; q < parecidosDocumento.length; q++)
						{
							punteroCliente.push(sqlBusqueda.getPunteros([null,null,null,null,parecidosDocumento[q]]));
						}
					}
					//  ---------------------------------- ORDENA Y ELIMINA REPETIDOS  ----------------------------------
					arreTemp = UtilsGrid.generateArrayBiToArrayUni(punteroCliente);
					arregloTe = sqlBusqueda.armarLista(StringFunciones.removerDuplicados(arreTemp));
					var lista:ArrayCollection = arregloTe;
					
					for(var t:int=0; t < arregloTe.length; t++)
					{
						(arregloTe[t] as DocumentoOrdenDespacho).numFila = t+1;
					}
					
					lstDocumentos.dataProvider = numerar(arregloTe);
					lblCont.text = arregloTe.length.toString();
				}
				
			}
			
			public function resetBotonera():void
			{
				indexSelect = 0;
				lblTodos.selected = true;
				lblCargados.selected = false;
				lblFaltantes.selected = false;
			}
			
			protected function clicMenu(event:MouseEvent):void
			{
				textBusqueda.text = "";
				switch(event.currentTarget.label)
				{
					case "TODOS":
					{
						indexSelect = 0;
						lblTodos.selected = true;
						lblCargados.selected = false;
						lblFaltantes.selected = false;
						lstDocumentos.dataProvider = numerar(respaldoDocumentos);
						break;
					}
					case "CARGADOS":
					{
						indexSelect = 1;
						lblTodos.selected = false;
						lblCargados.selected = true;
						lblFaltantes.selected = false;
						lstDocumentos.dataProvider = numerar(cargados);
						break;
					}
					case "FALTANTES":
					{
						indexSelect = 2;
						lblTodos.selected = false;
						lblCargados.selected = false;
						lblFaltantes.selected = true;
						lstDocumentos.dataProvider = numerar(faltantes);
						break;
					}
						
					default:
					{
						lblTodos.selected = false;
						lblCargados.selected = false;
						lblFaltantes.selected = false;
						break;
					}
				}
				
			}
			
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:ArrayCollection):void
			{
				if(!value)
					return;
				
				_dataProvider = value;
				respaldoDocumentos = ObjectUtil.copy( value ) as ArrayCollection;
				lblTotal.text = value.length.toString();
				lblCont.text = value.length.toString();
				lstDocumentos.dataProvider = numerar(value);
				
				if(seleccionaAdicional)
				{
					seleccionaAdicional = false;
					lstDocumentos.selectedIndex = lstDocumentos.dataProvider.length - 1;
					scrollToIndex(lstDocumentos.dataProvider.length - 1);
					selectCurrent = lstDocumentos.selectedItem as DocumentoOrdenDespacho;
					formulario.dataProvider = selectCurrent;
				}
				else
				{
					if(cargadaImagen)
					{
						cargadaImagen = false;
						lstDocumentos.selectedIndex = indexCargada;
						scrollToIndex(indexCargada);
					}
					else
					{
						lstDocumentos.selectedIndex = 0;
						lstDocumentos.ensureIndexIsVisible(0);
						lstDocumentos.validateNow();
					}
					itemClic();
					
					formulario.dataProvider = lstDocumentos.selectedItem as DocumentoOrdenDespacho;
					formulario.changeState("normal",'');
				}
				
				selectCurrent = lstDocumentos.selectedItem as DocumentoOrdenDespacho;
			}
			
			private function scrollToIndex(index:int, animationDuration:int = 100):void 
			{
				var pt:Point = lstDocumentos.layout.getScrollPositionDeltaToElement(index);
				var verticalScroll:int = lstDocumentos.layout.verticalScrollPosition;
				var verticalScrollOld:int = lstDocumentos.layout.verticalScrollPosition;
				var delta:int = -1;
				if (pt != null )
				{
					while (pt)
					{
						lstDocumentos.validateNow();
						if (pt.y > 0) {
							delta = lstDocumentos.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN);
						} else {
							verticalScrollOld = delta;
							delta = lstDocumentos.layout.getVerticalScrollPositionDelta(NavigationUnit.UP);
						}
						lstDocumentos.layout.verticalScrollPosition += delta;
						verticalScroll += delta;
						pt = lstDocumentos.layout.getScrollPositionDeltaToElement(index);
						if ((delta == 0 || verticalScrollOld == delta) && pt != null ){
							break;
						}
					}
					var animation:AnimateProperty = new AnimateProperty(lstDocumentos.dataGroup);
					animation.property = "verticalScrollPosition";
					animation.duration = animationDuration;
					animation.toValue = verticalScroll;
				}
			}
			
			
			[Bindable] public var font30:Number = 30;
			[Bindable] public var font20:Number = 20;
			[Bindable] public var font16:Number = 16;
			[Bindable] public var padding20:Number = 20;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				font20 = (20/125) * (((this.parentDocument.width *.20)/3));
				font20 = font20 < 8 ? 8:font20;
				
				font30 = (30/125) * (((this.parentDocument.width *.20)/3));
				font30 = font30 < 14 ? 14:font30;
				
				padding20 = (20/125) * (((this.parentDocument.width *.20)/3));
				padding20 = padding20 < 8 ? 8:padding20;
				
				font16 = (16/125) * (((this.parentDocument.width *.20)/3));
				font16 = font16 < 8 ? 8:font16;
			}
			
			private function numerar($arreglo:ArrayCollection):ArrayCollection
			{
				for (var i:int = 0; i < $arreglo.length; i++) 
				{
					($arreglo[i] as DocumentoOrdenDespacho).numFila = i + 1;
				}
				
				return  $arreglo;
			}
			
			public function getDocumentSelect():DocumentoOrdenDespacho
			{
				return lstDocumentos.selectedItem as DocumentoOrdenDespacho;
			}
			
			public function get faltantes():ArrayCollection
			{
				return _faltantes;
			}
			
			public function set faltantes(value:ArrayCollection):void
			{
				_faltantes = value;
			}
			
			[Bindable]
			public function get cargados():ArrayCollection
			{
				return _cargados;
			}
			
			public function set cargados(value:ArrayCollection):void
			{
				_cargados = value;
			}
			//REHACER EL NUMERO TOTAL DE DOCUMENTOS
			public function get docs():ArrayCollection
			{
				var docTodos:ArrayCollection = reasignarCartasDeUso(lstDocumentos.dataProvider as ArrayCollection);
				return docTodos;
				/*return lstDocumentos.dataProvider as ArrayCollection;*/
			}
			
			protected function itemClic():void
			{
				var tmpC:DocumentoOrdenDespacho = new DocumentoOrdenDespacho();
				tmpC = formulario.dataProvider = lstDocumentos.selectedItem as DocumentoOrdenDespacho;
				
				if(tmpC )
				{
					/*iniciaEspera("iniciarEspera");
					var evnt:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTIENE_IMAGEN);
					evnt.documentoDespacho = lstDocumentos.selectedItem as DocumentoOrdenDespacho;
					evnt.paraImprimir = false;
					dispatchEvent(evnt);*/
					if(!tmpC.faltante || (tmpC.cargado && tmpC.faltante))
					{
						iniciaEspera("iniciarEspera");
						var evnt:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTIENE_IMAGEN);
						evnt.documentoDespacho = lstDocumentos.selectedItem as DocumentoOrdenDespacho;
						evnt.paraImprimir = false;
						dispatchEvent(evnt);
					}
					
					formulario.changeState("normal",'');
					
					selectCurrent = lstDocumentos.selectedItem as DocumentoOrdenDespacho;
					
					if(!selectCurrent.faltante || selectCurrent.cargado)
					{
						grpImagen.visible = grpImagen.includeInLayout = false;
						grupoImagenVisualizador.visible = grupoImagenVisualizador.includeInLayout = true;
					}
					else
					{
						grpImagen.visible = grpImagen.includeInLayout = true;
						grupoImagenVisualizador.visible = grupoImagenVisualizador.includeInLayout = false;
					}
					
					if(selectCurrent.cargado)
						btnRecargar.visible = btnRecargar.includeInLayout = true;
					else
						btnRecargar.visible = btnRecargar.includeInLayout = false;
					
					if(lstDocumentos.selectedItem.tipo == "Factura")
						grpImagen.visible = grpImagen.includeInLayout = false;
					
					grpFormulario.visible = grpFormulario.includeInLayout = true;
					grpTodoImagen.visible = grpTodoImagen.includeInLayout = true;
					
					if(lstDocumentos.selectedItem.tipo == "CartaUso"){
						btnRecargar.visible = btnRecargar.includeInLayout = false;
						grpCargarImagen.removeEventListener(MouseEvent.CLICK,cargarArchivos);
						grpCargarImagen.buttonMode = false;
						
						grpTodoImagen.percentHeight = 100;
						formulario.visible = formulario.includeInLayout = false;
						btnCambio.visible = btnCambio.includeInLayout = true;
						grpCartaUso.visible = grpCartaUso.includeInLayout = true;
						grpFormulario.percentHeight = 100;
						grpFormulario.maxWidth = NaN;
						scrollId.maxWidth = scrollId.maxHeight = NaN;
						activo = true;
						cambiarVista(new MouseEvent(MouseEvent.CLICK));
						
						grpHeader.visible = grpHeader.includeInLayout = true;
						
						if(lstDocumentos.selectedItem.noFactura)
							noFactura.text = lstDocumentos.selectedItem.noFactura;
						else
							noFactura.text = "NA";
								
						if(lstDocumentos.selectedItem && lstDocumentos.selectedItem.documentos){
							lstCartas.dataProvider = lstDocumentos.selectedItem.documentos;
							dataListaCartas = lstDocumentos.selectedItem.documentos;					
						}
						escalaImagen = "carta";
					}
					else{
						btnRecargar.visible = btnRecargar.includeInLayout = true;
						grpCargarImagen.addEventListener(MouseEvent.CLICK,cargarArchivos);
						grpCargarImagen.buttonMode = true;
						
						formulario.visible = formulario.includeInLayout = true;
						btnCambio.visible = btnCambio.includeInLayout = false;
						grpCartaUso.visible = grpCartaUso.includeInLayout = false;	
						grpTodoImagen.percentHeight = 80;
						grpFormulario.percentHeight = 40;
						grpFormulario.maxWidth = 865;
						scrollId.maxWidth = 845; 
						scrollId.maxHeight = 700;
						/*height="40%" maxWidth="865" id="grpFormulario"*/
						/*width="100%" height="100%" maxWidth="845" maxHeight="700" id="scrollId" */
						grpHeader.visible = grpHeader.includeInLayout = false;
						
						escalaImagen = "normal";
					}
					
					
				}
			}
			
			private var file:File;
			protected function recargarImagen(event:MouseEvent):void
			{
				var docFilter:FileFilter;
				file = new File();
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				file.addEventListener(Event.COMPLETE,completeHandler);
				docFilter = new FileFilter("Documents", "*.pdf");
				file.browse([docFilter]);
			}
			
			private function selectHandler(event:Event):void
			{
				var file:FileReference = FileReference(event.target);
				file.load();
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void
			{
				trace("ioErrorHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void
			{
				var file:FileReference = FileReference(event.target);
			}
			
			private function completeHandler(event:Event):void
			{
				var tmpAdicional:DocumentoOrdenDespacho = new DocumentoOrdenDespacho();
				try
				{
					selectCurrent.archivo = event.target.data;
					selectCurrent.usuario = DatosGlobales.getInstance()._usuario.usuario.toUpperCase();
					selectCurrent.recargado = true;
					selectCurrent.cargado = true;
					
					cargadaImagen = true;
					indexCargada = lstDocumentos.selectedIndex;
					
					dispatchEvent(new Event("EnviarDocumentosConArchivosCargados",true));
				}
				catch (error:*){
					alertaSingleton.show("No se encontro archivo");
				}
			}
			
			private var pdfNew:ByteArray;
			
			private var cargadaImagen:Boolean = false;
			private var indexCargada:Number;
			private function completeHandlerArchivo(event:Event):void
			{
				var tmpAdicional:DocumentoOrdenDespacho = new DocumentoOrdenDespacho();
				pdfNew = new ByteArray();
				try
				{
					pdfNew = event.target.data;
					selectCurrent.archivo = event.target.data;
					selectCurrent.usuario = DatosGlobales.getInstance()._usuario.usuario.toUpperCase();
					selectCurrent.recargado = true;
					selectCurrent.cargado = true;
					
					cargadaImagen = true;
					indexCargada = lstDocumentos.selectedIndex;
					
					dispatchEvent(new Event("EnviarDocumentosConArchivosCargados",true));  //ESTA LINEA ESTABA COMENTADA
				}
				catch (error:*){
					alertaSingleton.show("No se encontro archivo");
				}
			}
			
			[Bindable] private var numeroActual:Number;
			[Bindable] private var arregloImagenes:ArrayCollection;
			private var numeroMax:Number;
			public function set recibeDatosVisualizadorPDF($rutaImagen:ArrayCollection):void
			{
				var imagenDisponible:Boolean = true;
				if ($rutaImagen == null || $rutaImagen.length == 0) 
				{
					if(inEspera)
						iniciaEspera("terminaEspera");
					imagenDisponible = false;
					/*return;*/
				}
				
				numeroActual = 0; 
				arregloImagenes = new ArrayCollection();
				
				if($rutaImagen.length > 0)
				{
					if($rutaImagen.length > 1)
					{
						imgHojaMas.visible = imgHojaMas.includeInLayout = true;
						imgHojaMenos.visible = imgHojaMenos.includeInLayout = true;
					}
					else
					{
						imgHojaMas.visible = imgHojaMas.includeInLayout = false;
						imgHojaMenos.visible = imgHojaMenos.includeInLayout = false;
					}
					
					numeroMax = $rutaImagen.length;
					arregloImagenes = ObjectUtil.copy($rutaImagen) as ArrayCollection;
				}
				else
				{
					imgHojaMas.visible = imgHojaMas.includeInLayout = false;
					imgHojaMenos.visible = imgHojaMenos.includeInLayout = false;
				}
				
				if(imagenDisponible){
					var url:URLRequest = new URLRequest("http://" + Destinos.ipUsandose + $rutaImagen[0]);
					var img:Loader = new Loader();
					
					img.load(url);				
					img.contentLoaderInfo.addEventListener(Event.COMPLETE,loaded);			
				}
			}
			
			protected function cargarArchivos(event:MouseEvent):void
			{
				if(selectCurrent.faltante && selectCurrent.archivo == null)
				{
					var docFilter:FileFilter;
					file = new File();
					file.addEventListener(Event.SELECT, selectHandler);
					file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
					file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
					file.addEventListener(Event.COMPLETE,completeHandlerArchivo);
					docFilter = new FileFilter("Documents", "*.pdf");
					file.browse([docFilter])
				} 
			}
			
			private var pagePrint:BitmapData;
			public function loaded(e:Event):void
			{
				
				var bitmap:Bitmap = e.target.content;
				
				pagePrint = bitmap.bitmapData;
				
				imagenVisualizaId.source = bitmap;
				e.target.removeEventListener(Event.COMPLETE,loaded);
				
				/*if(escalaImagen == "carta"){*/
					imagenVisualizaId.scaleX = 0.49999999999999967;
					imagenVisualizaId.scaleY = 0.49999999999999967;
					escalaImg = 0.49999999999999967; 
				/*}else{
				imagenVisualizaId.scaleX = 0.1499999999999997;
				imagenVisualizaId.scaleY = 0.1499999999999997;
				escalaImg = 0.1499999999999997; 
				}*/
				
				/*0.49999999999999967*/	
				
				
				var matrix:Matrix = new Matrix();
				
				/*matrix.scale((590/pagePrint.width), (780/pagePrint.height));*/
				matrix.scale((190/pagePrint.width), (380/pagePrint.height));
				
				frame.graphics.lineStyle(1);
				frame.graphics.beginBitmapFill(pagePrint, matrix, true);
				/*frame.graphics.drawRect(0, 0,590,780);*/
				frame.graphics.drawRect(0, 0,190,380);
				frame.graphics.endFill();
				
				
				iniciaEspera("terminaEspera");
			}
			
			private var inEspera:Boolean = false;
			private function iniciaEspera(mensaje:String):void
			{
				if(mensaje == "iniciarEspera")
				{
					alertaSingleton.show(catalogoAlertas.INICIAR_ESPERA,"","","","","","",null,true);
					inEspera = true;
				}
				else if (mensaje == "terminaEspera" )
				{
					inEspera = false;
					alertaSingleton.remove(true);
				}
			}
			
			private var frame:Sprite = new Sprite();
			private function printPage ():void {
				var myPrintJob:PrintJob = new PrintJob();
				var options:PrintJobOptions = new PrintJobOptions();
				
				options.printAsBitmap = true;
				
				myPrintJob.start();
				
				try {
					myPrintJob.addPage(frame, null, options);
				}
				catch(e:Error) {
					trace ("Had problem adding the page to print job: " + e);
				}
				
				try {
					myPrintJob.send();
				}
				catch (e:Error) {
					trace ("Had problem printing: " + e);    
				}
			}
			
			public function incrementaZoom():void
			{
				if(widModificado <= 1160 && heiModificado <= 1280 ){
					widModificado = widModificado + variacionW;
					heiModificado = heiModificado + variacionH;
				}
				if(escalaImg < 1)
					escalaImg = escalaImg  + .05;
				imagenVisualizaId.scaleX = escalaImg; 
				imagenVisualizaId.scaleY = escalaImg;
			}
			
			public function decrementaZoom():void
			{
				if(widModificado > 300 && heiModificado > 300){
					heiModificado = heiModificado - variacionH;
					widModificado = widModificado - variacionW;
				}
				
				if(escalaImg > .10)
					escalaImg = escalaImg - .05;
				imagenVisualizaId.scaleX = escalaImg;
				imagenVisualizaId.scaleY = escalaImg;
			}
			
			protected function scroll():void
			{
				systemManager.addEventListener("mouseWheel", bumpDelta, false);
			}
			
			public function bumpDelta(event:MouseEvent):void
			{
				event.stopPropagation();
				event.stopImmediatePropagation();
				event.delta = event.delta > 0 ? .5 : -1;
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				scroll();
			}
			
			protected function scrollId_mouseWheelHandler(event:MouseEvent):void
			{
				event.delta = event.delta > 0 ? .5 : -1;
			}
			
			protected function restarHoja():void
			{
				if(numeroActual > 0)
				{
					numeroActual--;
					var url:URLRequest = new URLRequest("http://" + Destinos.ipUsandose + arregloImagenes[numeroActual]);
					var img:Loader = new Loader();
					
					img.load(url);				
					img.contentLoaderInfo.addEventListener(Event.COMPLETE,loaded);	
				}
			}
			
			protected function aumentarHoja():void
			{
				if(numeroActual < numeroMax - 1)
				{
					numeroActual++;
					var url:URLRequest = new URLRequest("http://" + Destinos.ipUsandose + arregloImagenes[numeroActual]);
					var img:Loader = new Loader();
					
					img.load(url);				
					img.contentLoaderInfo.addEventListener(Event.COMPLETE,loaded);	
				}
			}
			
			//////////////////// CARTA DE USO
			protected function indiceVisible(event:MouseEvent):void
			{
				scrollToIndex(lstDocumentos.selectedIndex);
			}
			
			protected function txtBuscador_changingHandler(event:TextOperationEvent):void
			{
				lstCartas.dataProvider = UtilsGrid.queryCampoXLikeDosCampos(dataListaCartas,"nombreProducto","codigoProducto",txtBuscador.text);
			}
			private function listaVAcia():ArrayCollection
			{
				var listaTemp:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < 5; i++) 
				{
					var obj:DocumentoOrdenDespacho = new DocumentoOrdenDespacho();
					obj.nombreProducto = "Nombre Producto";
					obj.faltante = false;
					if(i == 2)
						obj.faltante = true;
					listaTemp.addItem(obj);
				}
				return listaTemp;
			}
			
			/*protected function indiceVisible(event:IndexChangeEvent):void
			{
			scrollToIndex(lstDocumentos.selectedIndex);
			}*/
			
			private var activo:Boolean;
			protected function cambiarVista(event:MouseEvent):void
			{
				if(!activo){
					grpTodoImagen.visible = grpTodoImagen.includeInLayout = false;
					grpFormulario.visible = grpFormulario.includeInLayout = true;
					activo = true;
					btnCambio.source = catalogoIconosBotones.getInstance().icono_textos;
				}else{
					grpTodoImagen.visible = grpTodoImagen.includeInLayout = true;
					grpFormulario.visible = grpFormulario.includeInLayout = false;
					activo = false;
					btnCambio.source = catalogoIconosBotones.getInstance().icono_documento;
				}
			}
			
			private function reasignarCartasDeUso(value:ArrayCollection):ArrayCollection
			{
				var array:ArrayCollection = ObjectUtil.copy(value) as ArrayCollection;
				var listaCartasUso:ArrayCollection = new ArrayCollection();
				var listaTodos:ArrayCollection = new ArrayCollection();
				
				for (var i:int = 0; i < array.length; i++) 
				{
					if(array[i].tipo.toLowerCase() != "cartauso"){
						listaTodos.addItem(array[i]);
					}else if(array[i].tipo.toLowerCase() == "cartauso"){
						var docTemp:DocumentoOrdenDespacho = ObjectUtil.copy(array[i]) as DocumentoOrdenDespacho;
						if(docTemp.documentos && docTemp.documentos.length > 0){
							listaCartasUso.addAll(docTemp.documentos);
						}
					}
				}
				listaTodos.addAllAt(listaCartasUso,0);
				return listaTodos;
			}
		]]>
	</fx:Script>
	
	
	<!--  /////////////// DIVISION  /////////////// -->
	<otros:divisionDegradadoVertical height="90%" />
	
	
	<!--  /////////////// LISTA  /////////////// -->
	<s:VGroup width="30%" height="100%" >
		<s:VGroup width="100%" height="100%" paddingTop="20" paddingBottom="5" horizontalAlign="center">
			
			<s:TextInput fontStyle="normal" id="textBusqueda" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda2D" 
						 prompt="Documentos" text="" change="filtro()" />
			
			<s:List id="lstDocumentos" width="100%" height="100%"  borderVisible="false" horizontalScrollPolicy="off" 
					itemRenderer="mx.com.proquifa.vista.vistas.gestorCompras.itemrender.ListaFacturasDoc_IR" 
					change="itemClic()"
					/>
			
			<otros:division width="100%" />
			
			<s:HGroup width="100%" horizontalAlign="center">
				<label:Texto_16_Helvetica  text="{lstDocumentos.dataProvider.length.toString() + ' Documentos'}" color="#424242" fontSize="{font16}"/>
			</s:HGroup>
			
		</s:VGroup>  
		
		<s:VGroup width="100%" paddingBottom="5">
			<otros:division width="100%" />
			<s:HGroup width="100%" id="grpBotones">
				<s:Group width="100%">
					<boton:botonTextoGris id="lblTodos" width="100%" label="TODOS" colorSelect="0x{catalogoColores.BTN_VERDE_AZUL}" colorBase="0xc2c3c9" click="clicMenu(event)" font="{font20}"/>
				</s:Group>  
				<s:Group width="100%"> 
					<boton:botonTextoGris id="lblCargados" width="100%" label="CARGADOS" colorSelect="0x{catalogoColores.BTN_VERDE_AZUL}" colorBase="0xc2c3c9" click="clicMenu(event)" font="{font20}"/>
				</s:Group>  
				<s:Group width="100%">
					<boton:botonTextoGris id="lblFaltantes" width="100%" label="FALTANTES" colorSelect="0x{catalogoColores.BTN_VERDE_AZUL}" colorBase="0xc2c3c9" click="clicMenu(event)" font="{font20}"/>
				</s:Group>  
			</s:HGroup>
			<otros:division width="100%" />
		</s:VGroup>  
		
		<s:HGroup width="100%" horizontalAlign="center">
			<label:Texto_16_Helvetica id="lblCont" text="{lstDocumentos.dataProvider.length.toString()}" color="#424242" fontSize="{font16}"/>
			<label:Texto_16_Helvetica text="/" color="#424242" fontSize="{font16}"/>
			<label:Texto_16_Helvetica id="lblTotal" color="#424242" fontSize="{font16}"/>
		</s:HGroup>
	</s:VGroup>  
	
	
	<!--  /////////////// DIVISION  /////////////// -->
	<otros:divisionDegradadoVertical height="90%" />
	
	
	<!--  /////////////// COMPONENTE VISUALIZADOR	  /////////////// -->
	<s:VGroup width="70%" height="100%" paddingTop="20" >
		
		
		<s:VGroup width="100%" height="100%" >
			<s:HGroup width="100%" paddingTop="10" paddingBottom="3" id="grpHeader" verticalAlign="middle">
				<s:HGroup width="100%" height="100%" verticalAlign="middle">
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{font16}" color="#008894" text="Carta de Uso" fontWeight="bold"/>
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{font16}" color="#404040" text="" id="noFactura" fontWeight="bold"/>
				</s:HGroup>
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="right">
					<s:TextInput id="txtBuscador" width="50%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda2D" change="txtBuscador_changingHandler(event)" prompt="Catálogo, Descripción"/>	
				</s:HGroup>
				<mx:Image click="cambiarVista(event)" id="btnCambio" source="{catalogoIconosBotones.getInstance().icono_documento}" smoothBitmapContent="true" buttonMode="true"/>
			</s:HGroup>
			<s:Group width="100%" height="80%" id="grpTodoImagen">			
				
				<!-- CUADRADO GRIS -->
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="#f5f6f7" />
					</s:fill>
				</s:Rect>			
				<s:Group width="95%" height="78%" verticalCenter="-20" horizontalCenter="0" id="grpImagen" >
					<!-- RECTANGULO PUNTEADO -->
					<!--<otros:LineaPunteada width="100%" height="2" top="0" color="#257d92" SPACER="17" largo="7"/>
					<otros:LineaPunteada width="100%" height="2" bottom="0" color="#257d92" SPACER="17" largo="7"/>
					<otros:LineaPunteada height="100%" width="2" left="0" color="#257d92" SPACER="17" largo="7"/>
					<otros:LineaPunteada height="100%" width="2" right="0" color="#257d92" SPACER="17" largo="7"/>-->
					
					<!-- CRUZ Y CARGAR ADICIONAL -->
					<s:VGroup id="subirArchivo" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" >
						<s:Group id="grpCargarImagen" buttonMode="true">
							<mx:Image source="{catalogoIconosBotones.getInstance().icono_cargar_doc_gris}" horizontalCenter="0" verticalCenter="0"/>
						</s:Group>
						<label:Titulo_15_Helvetica text="Cargar Faltante" paddingTop="20" fontSize="{font30}" color="#858686"/>
					</s:VGroup>				
				</s:Group> 
				
				<s:VGroup width="100%" height="100%" id="grupoImagenVisualizador" visible="false" includeInLayout="false"  horizontalAlign="right" >
					
					<s:Group id="grpContenedor" width="100%" height="100%"   verticalCenter="0" horizontalCenter="0" >
						
						<s:Scroller width="100%" height="100%" maxWidth="845" maxHeight="700" id="scrollId" mouseWheel="scrollId_mouseWheelHandler(event)">
							<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >						
								<mx:Image id="imagenVisualizaId" horizontalAlign="center" verticalAlign="middle" />
							</s:VGroup>  					
						</s:Scroller>
					</s:Group>  
					
					<s:Group width="100%" height="5%">
						<s:VGroup width="100%" height="100%" paddingBottom="10">
							<s:HGroup gap="0" width="100%" horizontalAlign="center" verticalAlign="middle">
								<s:Group click="restarHoja()">
									<mx:Image id="imgHojaMenos" source="{catalogoIconosBotones.getInstance().pagina_anterior}"  smoothBitmapContent="true" visible="false"/>
								</s:Group>
								<s:Spacer width="10" />
								<label:Texto_12 text="{' '+(numeroActual + 1).toString() + ' / ' + arregloImagenes.length.toString()+' '}" paddingTop="0"/>
								<s:Spacer width="10" />
								<s:Group click="aumentarHoja()">
									<mx:Image id="imgHojaMas" source="{catalogoIconosBotones.getInstance().pagina_siguiente}"  smoothBitmapContent="true" visible="false"/>
								</s:Group>
							</s:HGroup>
							
							<s:HGroup gap="5" width="100%" horizontalAlign="center">
								<s:Group click="decrementaZoom()">
									<mx:Image id="imgZoomMenos" source="{catalogoIconosBotones.getInstance().zoom_menos}"  smoothBitmapContent="true" />
								</s:Group>
								<s:Group click="incrementaZoom()">
									<mx:Image id="imgZoomMas" source="{catalogoIconosBotones.getInstance().zoom_mas}"  smoothBitmapContent="true"/>
								</s:Group>
							</s:HGroup>
						</s:VGroup>  
						
						<pqNet:botonPqNetLargo  id="btnRecargar"  width="35" right="20" icono="recargarImg" 
												colorBase="0x{catalogoColores.BTN_VERDE_AZUL}" includeInLayout="false" visible="false" click="recargarImagen(event)"/>
					</s:Group>  
					
				</s:VGroup>  
			</s:Group>
			
			<s:VGroup width="100%" height="40%" maxWidth="865" id="grpFormulario">
				<pqNet:botonPqNetLargo  id="lblPrint" label="IMPRIMIR"  height="30" click="printPage()" visible="false" includeInLayout="false"/>
				
				<!-- FORMULARIO -->
				<documentacion:DocumentacionOrdenDespacho_Formulario id="formulario" width="100%" height="100%" />
				
				<s:VGroup width="100%" height="100%" top="1" bottom="1" left="1" right="1" gap="0" id="grpCartaUso">
					<!--<s:HGroup width="100%" paddingTop="10" paddingBottom="10">
						<s:HGroup width="100%" height="100%" verticalAlign="middle">
							<s:Label styleName="tab_texto_14_Helvetica" fontSize="{font16}" color="#008894" text="Carta de Uso" fontWeight="bold"/>
							<s:Label styleName="tab_texto_14_Helvetica" fontSize="{font16}" color="#404040" text="FOLIO" fontWeight="bold"/>
						</s:HGroup>
						<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="right">
							<s:TextInput id="txtBuscador" width="50%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda2D" change="txtBuscador_changingHandler(event)" prompt="Catálogo, Descripción"/>	
						</s:HGroup>
						<s:Button click="cambiarVista(event)" id="btnCambio">
						</s:Button>
					</s:HGroup>-->
					<s:Rect width="100%" height="1">
						<s:fill >
							<s:SolidColor color="#adadad" />
						</s:fill>
					</s:Rect>
					<s:Spacer height="10" />
					<s:List width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off" 
							selectedIndex="0" id="lstCartas" contentBackgroundAlpha="0" click="indiceVisible(event)" 
							itemRenderer="mx.com.proquifa.vista.vistas.gestorCompras.componentes.ordenDespacho.documentacion.IR_listaFacturasCartaUso" 
							/>
					
					
				</s:VGroup>
			</s:VGroup>  
			
		</s:VGroup>
		
	</s:VGroup>  
	
</s:HGroup>
