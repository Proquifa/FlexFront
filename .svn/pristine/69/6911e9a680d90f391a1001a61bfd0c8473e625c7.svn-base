<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:otros="skins.otros.*" xmlns:label="skins.skin.label.*" width="100%" height="100%"
		  xmlns:panelCtaLineaTiempo="skins.skin.comun.consultas.panelCtaLineaTiempo.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.consultas.compras.cobros.EventoConsultaCobros;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.Cobros;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.TiempoProceso;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			private var _proceso:ColumnaTiempoProcesoCobros = new ColumnaTiempoProcesoCobros();
			[Bindable] public var _pagoSeleccionado:Cobros;
			[Bindable] public var _factura:String;
			[Bindable] public var _fPor:String;
			[Bindable] private var _totalProceso:int;
			
			public function set obtenerLineaDTiempoCobros(lineaT:ArrayCollection):void{				
				if(lineaT == null) return;
				_totalProceso = 0 ;
				var arrTemp:ArrayCollection = new ArrayCollection();
				arrTemp = ObjectUtil.copy(lineaT) as ArrayCollection;
				
				var event:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.VISTA_FENTREGA_FREVISION);
				event.mostrar = false;
				for(var d:int = 0 ; d<arrTemp.length ; d++){
					if(arrTemp[d].etapa == 'REVISION'){
						arrTemp[d].etapa = "REVISIÓN";
						event.mostrar = true;
					}else if(arrTemp[d].etapa == 'FACTURACION'){
						arrTemp[d].etapa = "FACTURACIÓN";
					}else if(arrTemp[d].etapa == 'REFACTURACION'){
						arrTemp[d].etapa = "REFACTURACIÓN";
					}else if(arrTemp[d].etapa == 'INTERFACTURACION'){
						arrTemp[d].etapa = "INTERFACTURACIÓN";
					}else if((arrTemp[d].etapa == "ENVIO") || (arrTemp[d].etapa == "ENTREGA")){
						var evnt:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INFO_ENTREGA);
						evnt.tProceso = arrTemp[d];
						dispatchEvent(evnt);
						
					}else if((arrTemp[d] as TiempoProceso).etapa == 'COOBRADA' ){
						_totalProceso = (arrTemp[d] as TiempoProceso).totalProceso;
						
						
						if((arrTemp[d] as TiempoProceso).estado == "Cancelada" || (arrTemp[d] as TiempoProceso).estado == "A refacturación"){
							(arrTemp[d] as TiempoProceso).estado ="Cancelado";							
							(arrTemp[d] as TiempoProceso).etapa = "Cancelado";
						}else 
							(arrTemp[d] as TiempoProceso).etapa = 'COBRADO';
						
						if(_pagoSeleccionado.estadoParaMostrar == 'Abierto'){
							if ((d - 1) >= 0){
								(arrTemp[d - 1] as TiempoProceso).finLista = true;
							}
							arrTemp.removeItemAt(d);
							arrTemp.refresh();
						}else{
							arrTemp[d].tipoDeFin= 'META';
							arrTemp[d].finLista= true;
							if(arrTemp[d].totalProceso ==1){
								arrTemp[d].tiempoTotalString = arrTemp[d].totalProceso + ' día';
							}else{
								arrTemp[d].tiempoTotalString =  arrTemp[d].totalProceso + ' días';
							}
							if(arrTemp[d].fechaFin != null){
								arrTemp[d].colorFechaFin = true;
								
								
								if(d-1>=0)
									arrTemp[d-1].colorFechaFin = true;
							}else{
								arrTemp[d].colorFechaFin = false;
								if ( (d-1) >= 0 ){
									arrTemp[d-1].colorFechaFin = false;
								}
							}
						}
					}						
					else if(arrTemp[d].etapa == 'COBRADA INTER'){
						_totalProceso = (arrTemp[d] as TiempoProceso).totalProceso;
						
						
						if((arrTemp[d] as TiempoProceso).estado == "Cancelada" || (arrTemp[d] as TiempoProceso).estado == "A refacturación"){
							(arrTemp[d] as TiempoProceso).estado ="Cancelado";							
							(arrTemp[d] as TiempoProceso).etapa = "Cancelado";
						}else 
							(arrTemp[d] as TiempoProceso).etapa = 'COBRADO ';
						
						if(_pagoSeleccionado.estadoParaMostrar == 'Abierto'){
							if ((d - 1) >= 0){
								(arrTemp[d - 1] as TiempoProceso).finLista = true;
							}
							arrTemp.removeItemAt(d);
							arrTemp.refresh();
						}else{
							arrTemp[d].tipoDeFin= 'META';
							arrTemp[d].finLista= true;
							if(arrTemp[d].totalProceso ==1){
								arrTemp[d].tiempoTotalString = arrTemp[d].totalProceso + ' día';
							}else{
								arrTemp[d].tiempoTotalString =  arrTemp[d].totalProceso + ' días';
							}
							if(arrTemp[d].fechaFin != null){
								arrTemp[d].colorFechaFin = true;
								
								
								if(d-1>=0)
									arrTemp[d-1].colorFechaFin = true;
							}else{
								arrTemp[d].colorFechaFin = false;
								if ( (d-1) >= 0 ){
									arrTemp[d-1].colorFechaFin = false;
								}
							}
						}
					}

				}
				dispatchEvent(event);
				
				if(arrTemp.length != 0){
					if(!(arrTemp[arrTemp.length - 1]).hasOwnProperty("tipoDeFin")){
						if((arrTemp[arrTemp.length - 1] ).finLista == true){
							
							var objeto:Object = new Object();
							objeto.finLista = 'FIN';
							
							arrTemp.addItem(objeto);
						}
						lstLineaDTiempoCobros.dataProvider = arrTemp;
					}else{
						if(arrTemp.length>1){
							arrTemp[0].primeroLista = 'Naranja';
							lstLineaDTiempoCobros.dataProvider = arrTemp;
						}
					}
					this.lstLineaDTiempoCobros.selectedIndex = 0;
					lstLineaDTiempoCobros.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
				}else{
					var evento:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.LISTA_VACIA);
					dispatchEvent(evento);
					lstLineaDTiempoCobros.dataProvider = arrTemp;
				}
			}
			
			private function inspector(e:IndexChangeEvent):void{
				
				if(lstLineaDTiempoCobros.selectedItem){
					if((lstLineaDTiempoCobros.selectedItem as Object).hasOwnProperty("finLista") && (lstLineaDTiempoCobros.selectedItem as Object).finLista == "FIN"){
						e.preventDefault();
					}else{
						if(this.lstLineaDTiempoCobros.selectedItem.etapa == 'FACTURACIÓN'){
							var evt:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INSPECTOR_FACTURACION);
							evt.tProceso = this.lstLineaDTiempoCobros.selectedItem;
							dispatchEvent(evt);
						}else if((this.lstLineaDTiempoCobros.selectedItem.etapa == "ENVIO") || (this.lstLineaDTiempoCobros.selectedItem.etapa == "ENTREGA")){
							var evento:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INSPECTOR_ENTREGA);
							evento.factura = _factura;
							evento.cpedido = _fPor;
							dispatchEvent(evento);
							
						}else if(this.lstLineaDTiempoCobros.selectedItem.etapa == 'REVISIÓN'){
							var evte:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INSPECTOR_REVISION);
							evte.factura = _factura;
							evte.cpedido = _fPor;
							dispatchEvent(evte);
							
							var evto:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INFO_REVISION);
							evto.tProceso = this.lstLineaDTiempoCobros.selectedItem;
							dispatchEvent(evto);
						}else if(this.lstLineaDTiempoCobros.selectedItem.etapa == 'COBRO'){
							var evtCobro:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INSPECTOR_COBROS);
							evtCobro.factura = _factura;
							evtCobro.cpedido = _fPor;
							evtCobro.conCredito = this.lstLineaDTiempoCobros.selectedItem.etapaPadre; // 1 sin credito 0 con credito
							dispatchEvent(evtCobro);
						 	
							/* var eventCobro:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INFO_COBRO);
							eventCobro.tProceso = this.lstLineaDTiempoCobros.selectedItem;
							dispatchEvent(eventCobro);  */
						}else if(this.lstLineaDTiempoCobros.selectedItem.etapa == 'COBRADO' || this.lstLineaDTiempoCobros.selectedItem.etapa == 'COBRADO '){
							var cobrada:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTNER_INFO_COBRADA);
							cobrada.tProceso = this.lstLineaDTiempoCobros.selectedItem;
							dispatchEvent(cobrada);
						}else if(this.lstLineaDTiempoCobros.selectedItem.etapa == 'REFACTURACIÓN'){
							var refacturacion:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INFO_REFACTURADA);
							refacturacion.tProceso = this.lstLineaDTiempoCobros.selectedItem;
							dispatchEvent(refacturacion);
						}else if(this.lstLineaDTiempoCobros.selectedItem.estado == 'Cancelado'){
							var cancelada:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INFO_CANCELADA);
							cancelada.tProceso = this.lstLineaDTiempoCobros.selectedItem;
							dispatchEvent(cancelada);
						}else if(this.lstLineaDTiempoCobros.selectedItem.etapa == 'INTERFACTURACIÓN'){
							var evt:EventoConsultaCobros = new EventoConsultaCobros(EventoConsultaCobros.OBTENER_INSPECTOR_FACTURACION);
							evt.tProceso = this.lstLineaDTiempoCobros.selectedItem;
							dispatchEvent(evt);
						}
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%" >
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#eaeaea"/>
			</s:fill>
		</s:Rect>
		<s:VGroup width="100%" height="100%" gap="0" paddingRight="15" paddingLeft="15">
			<panelCtaLineaTiempo:HeaderSoloTexto tituloHeader="F-{_factura}"/>
			<otros:division width="100%"/>
			<s:List  itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.consultas.compras.cobros.renderer.RendererLineaDTiempoCobros" id="lstLineaDTiempoCobros"  
					 width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off" changing="inspector(event)" contentBackgroundAlpha="0"/>
		</s:VGroup>
	</s:Group>  
</s:VGroup>
