package mx.com.proquifa.vista.modelo
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	
	import mx.collections.ArrayCollection;
	import mx.utils.ObjectUtil;
	
	public class ModeloComprasCompradorMaster extends EventDispatcher
	{
		
		
		///////////////////////////// OBTIENE NUMERO PENDIENTES  ///////////////////////////// 
		private var numeroPendientes:ArrayCollection;
		private var numeroPendientesTemporal:ArrayCollection;
		public function setObtenerPendientesGestorCompras(data:ArrayCollection):void
		{
			numeroPendientesTemporal = data
			asignarIndicador();
			/*var temp:ArrayCollection = new ArrayCollection();
			var arrayAux:Array;
			var objectAux:Object = new Object();
			objectAux.pendiente = "";
			objectAux.conteo = "";
			if(data.length != 0){
				for(var x:int=0; x < data.length; x++){
					arrayAux = (data[x] as String).split("/");
					objectAux.pendiente = arrayAux[0];
					objectAux.conteo = arrayAux[1];
					temp.addItem(ObjectUtil.copy(objectAux));
				}
			}
			numeroPendientes = temp;
			dispatchEvent(new Event("obtenerNumeroDePendientesModeloGestorCompras"));*/
		}
		
		[Bindable(event="obtenerNumeroDePendientesModeloGestorCompras")]
		public function get enviarObtenerPendientesGestorCompras():ArrayCollection
		{
			return numeroPendientes;
		}
		
		private var detener:uint;
		private function asignarIndicador():void
		{
			if(indicadorRCListo && indicadorMOListo){
				numeroPendientesTemporal.addItem(indicarRC);
				numeroPendientesTemporal.addItem(indicarMO);
				var temp:ArrayCollection = new ArrayCollection();
				var arrayAux:Array;
				var objectAux:Object = new Object();
				objectAux.pendiente = "";
				objectAux.conteo = "";
				if(numeroPendientesTemporal.length != 0){
					for(var x:int=0; x < numeroPendientesTemporal.length; x++){
						arrayAux = (numeroPendientesTemporal[x] as String).split("/");
						objectAux.pendiente = arrayAux[0];
						objectAux.conteo = arrayAux[1];
						temp.addItem(ObjectUtil.copy(objectAux));
					}
				}
				numeroPendientes = temp;
				indicadorRCListo = false;
				indicadorMOListo = false;
				dispatchEvent(new Event("obtenerNumeroDePendientesModeloGestorCompras"));
			}else{
				detener = setTimeout(asignarIndicador,300);
			}
			/*clearTimeout(detener);*/
		}
		
		private var indicarRC:String;
		private var indicadorRCListo:Boolean
		public function setObtenerIndicadorPendienteRC(data:int):void
		{
			indicarRC = "registrarConfirmacion/"+data;
			indicadorRCListo = true;
			/*dispatchEvent(new Event("enviarIndicadorPendientesRegistrarConfirmacion"));*/
		}
		[Bindable(event="enviarIndicadorPendientesRegistrarConfirmacion")]
		public function get enviarIndicadorPendientes():String
		{
			return indicarRC;
		}
		
		private var indicarMO:String;
		private var indicadorMOListo:Boolean
		public function setObtenerIndicadorPendienteMO(data:int):void
		{
			indicarMO = "monitorearOcNoArribada/"+data;
			indicadorMOListo = true;
			/*dispatchEvent(new Event("enviarIndicadorPendientesRegistrarConfirmacion"));*/
		}
		/*[Bindable(event="enviarIndicadorPendientes")]
		public function get enviarIndicadorPendientes():String
		{
			return indicarRC;
		}*/
		
		
		
		
		/**
		 ************************************************************** error **************************************************************
		 */
		
		public function ModeloComprasCompradorMaster(target:IEventDispatcher=null)
		{
			super(target);
		}
	}
}

