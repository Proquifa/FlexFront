<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:plantilla="mx.com.proquifa.proquifanet.compradormaster.vistas.vista.plantilla.*" 
		 xmlns:mapas="mx.com.proquifa.proquifanet.compradormaster.vistas.mapas.*"
		 xmlns:gestorCompras="mx.com.proquifa.vista.mapas.gestorCompras.*" 
		 xmlns:cargarF="mx.com.proquifa.vista.mapas.cargarFaltante.*" 
		 xmlns:arribo="mx.com.proquifa.vista.mapas.gestorCompras.arribo.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:s="library://ns.adobe.com/flex/spark"  
		 width="100%" height="100%"
		 creationComplete="init(event)" 
		 >
	
	<fx:Declarations>
		<gestorCompras:MapaGestorCompras />
		<arribo:MapaArriboGestorCompras />
		<mapas:MapaComprasCompradorMaster />
		<cargarF:MapaCargarFaltante />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.compradormaster.vistas.eventos.EventoComprasCompradorMaster;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.OrdenDespacho;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.com.proquifa.vista.eventos.cargarFaltante.EventoCargarFaltante;
			import mx.com.proquifa.vista.vistas.cargarFaltante.VistaCargarFaltanteOD;
			import mx.com.proquifa.vista.vistas.gestorCompras.CargarFactura;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaGenerarAcuse;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaListaArribo;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaListaArriboPub;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaOrdenDespacho;
			import mx.com.proquifa.vista.vistas.gestorCompras.componentes.ordenDespachoPublicacion.VistaOrdenDespacho_Public;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable] private var listaPendienteImportaciones:ArrayCollection = new ArrayCollection([
				{pendiente:'Materiales',conteo:null, subMenu:true, tipo:'MaterDespacho'},
				{pendiente:'Publicaciones',conteo:null, subMenu:true, tipo:'PublDespacho'},
				{pendiente:'Cargar Faltante',conteo:null, subMenu:false, tipo:'cargarFaltante'}
			]);
			
			[Bindable] private var listaPendiente:ArrayCollection = new ArrayCollection([
				{pendiente:'Cargar Factura',conteo:null,tipo:'cargaFactura'}
			]);
			
			
			private var cargarFaltanteOD:VistaCargarFaltanteOD;
			private var cargarFactura:CargarFactura;
			private var listaArribo:VistaListaArribo;
			private var listaArriboPublicaciones:VistaListaArriboPub;
			private var ordenDespacho:VistaOrdenDespacho;
			private var ordenDespachoPublic:VistaOrdenDespacho_Public;
			private var generarAcuse:VistaGenerarAcuse;
			
			/*
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			+  reload - Recarga la informacion solo para la pantalla incial.... 
			+  update-Recarga la informacion pantalla incial y se propaga la informacion seleccionando el
			+  proveedor que guardo la orden de compra si es que le queda alguna partida
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			*/
			public static var accionCargarFactura:String = "reload"; 
			
			protected function plantillagestorcompras1_pendienteSeleccionadoHandler(sel:EventoGestorCompras):void
			{
				switch(sel.pendiente)
				{
					case "cargaFactura":
					{
						if (!cargarFactura)
							cargarFactura = new CargarFactura();
						plantilla.agregarContenido(cargarFactura);
						accionCargarFactura = "reload";
						var evento:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_COMPRAS_POR_PAGAR);
						evento.usuario = DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(evento);
						break;
					}
						
						
					case "MaterDespacho":
					{
						if (!ordenDespacho)
							ordenDespacho = new VistaOrdenDespacho();
						plantilla.agregarContenido(ordenDespacho);
						
						var evtDes:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DE_DESPACHO);
						evtDes.idOC = 0;
						dispatchEvent(evtDes);
						
						var evt:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDENES_DESPACHO_GUARDADAS);
						evt.ordenDespacho = new OrdenDespacho;
						evt.ordenDespacho.usuario = DatosGlobales.getInstance()._usuario.idEmpleado;
						evt.ordenDespacho.tipoVista = "materiales";
						dispatchEvent(evt);
						break;
					}
						
					case "PublDespacho":
					{
						if (!ordenDespachoPublic)
							ordenDespachoPublic = new VistaOrdenDespacho_Public();
						plantilla.agregarContenido(ordenDespachoPublic);
						
						var evtDesPub:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DE_DESPACHO_PUBLICACIONES);
						evtDesPub.idOC = 0;
						dispatchEvent(evtDesPub);
						
						var event:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDENES_DESPACHO_GUARDADAS_PUBLICACIONES);
						event.ordenDespacho = new OrdenDespacho;
						event.ordenDespacho.usuario = DatosGlobales.getInstance()._usuario.idEmpleado;
						event.ordenDespacho.tipoVista = "publicaciones";
						dispatchEvent(event);
						break;
					}
						
					case "cargarFaltante":
					{
						if (!cargarFaltanteOD)
							cargarFaltanteOD = new VistaCargarFaltanteOD();
						plantilla.agregarContenido(cargarFaltanteOD);
						
						var err:EventoCargarFaltante = new EventoCargarFaltante(EventoCargarFaltante.OBTENER_ORDEN_DESPACHO_FALTANTES);
						err.usuario = DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(err);
						break;
					}
						
					default:
					{
						break;
					}
				}
			}
			
			protected function init(evento:FlexEvent):void
			{
				var event:EventoComprasCompradorMaster = new EventoComprasCompradorMaster(EventoComprasCompradorMaster.CARGAR_NUMERO_PENDIENTES_MENU);
				event.usuario = DatosGlobales.getInstance()._usuario.usuario;
				event.rol = "";
				dispatchEvent(event);
				addEventListener(EventoGestorCompras.CARGAR_PENDIENTE_MENU, plantillagestorcompras1_pendienteSeleccionadoHandler);
				addEventListener("recargarPendientes",recargarPendientes,false,0,true);
			}
			
			public function set recibirIndicadorPendientes(value:ArrayCollection):void
			{
				
				var x:int = 0;
				var y:int = 0;
				var listaAux:ArrayCollection = ObjectUtil.copy(listaPendiente) as ArrayCollection;
				for(x = 0; x < listaAux.length;x++){
					for(y = 0; y < value.length;y++){
						if((listaAux[x].tipo == "cargaFactura") && (value[y].pendiente == "cargarFactura")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
					}	
				}
				listaPendiente = listaAux;
				plantilla.listaPendientes = listaPendiente;
				plantilla.lstPendientes.lstPendientes.selectedIndex = 0;
				
				/*var indice:int;
				if(plantilla.lstPendientes.lstPendientesImportaciones != null){
					indice = plantilla.lstPendientes.lstPendientesImportaciones.selectedIndex;
				}*/
				listaAux = new ArrayCollection();
				listaAux = ObjectUtil.copy(listaPendienteImportaciones) as ArrayCollection;
				for( x = 0; x < listaAux.length;x++)
				{
					for(y = 0; y < value.length;y++)
					{
						if((listaAux[x].tipo == "MaterDespacho") && (value[y].pendiente == "ordenDespachoMaterial"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].tipo == "PublDespacho") && (value[y].pendiente == "ordenDespachoPublic"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].tipo == "cargarFaltante") && (value[y].pendiente == "cargarFaltante"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
					}	
				}
				listaPendienteImportaciones = listaAux;
				plantilla.listaPendientesImportaciones = listaPendienteImportaciones;
				plantilla.lstPendientes.lstPendientesImportaciones.selectedIndex = 0;
				/*plantilla.lstPendientes.lstPendientesImportaciones.selectedIndex = indice;*/
			}
			
			private function recargarPendientes(evt:Event):void
			{
				var event:EventoComprasCompradorMaster = new EventoComprasCompradorMaster(EventoComprasCompradorMaster.CARGAR_NUMERO_PENDIENTES_MENU);
				event.usuario = DatosGlobales.getInstance()._usuario.usuario;
				event.rol = "";
				dispatchEvent(event);
			}
		]]>
	</fx:Script>
	
	<plantilla:PlantillaCompradorMaster id="plantilla" width="100%" height="100%" listaPendientes="{listaPendiente}" listaPendientesImportaciones="{listaPendienteImportaciones}"  pendienteSeleccionadoPlantilla="plantillagestorcompras1_pendienteSeleccionadoHandler(event)"/>
	
</s:Group>