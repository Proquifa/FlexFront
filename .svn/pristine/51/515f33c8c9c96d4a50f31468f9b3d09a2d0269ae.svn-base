<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		backgroundColor="#252b2c" 
		xmlns:botonAtras="skin.botonAtras.*" 
		xmlns:botonLogin="skin.botonLogin.*"
		title=""
		initialize="view1_initializeHandler(event)"
		>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			import eventos.EventoMensajeroEnCierre;
			
			import modelo.singletons.enRealizacion.DatosGlobalesEnRealizacion;
			
			import vistas.renders.renderEnCierre.Objects.PendientesEnCierreObject;
			
			private var pendientesporVerificar:ArrayCollection = new ArrayCollection();
			private var globales:DatosGlobalesEnRealizacion = DatosGlobalesEnRealizacion.getInstance();
			public function set recibirPendientesPorVerificar($pendienteAgrupado:ArrayCollection):void
			{
				if(!$pendienteAgrupado)
					return;
				
				
				if($pendienteAgrupado && $pendienteAgrupado.length > 0)
				{
					pendientesporVerificar = $pendienteAgrupado;
					lstPendientesPorVerificar.height = pendientesporVerificar.length * 158;
					lstPendientesPorVerificar.dataProvider = pendientesporVerificar;
				}
				else
				{
					this.title = "";
					lstPendientesPorVerificar.height = 0;
					lstPendientesPorVerificar.dataProvider = new ArrayCollection;
				}
			}
			
			protected function vistaAnterior(event:MouseEvent):void
			{
				this.navigator.popView();
			}
			
			
			/* public function verificarPendiente(pendiente:PendientesMensajero,decision:String):void
			{
				if(decision == "norealizado")
				{
					var evento:EventoMensajeroEnCierre = new EventoMensajeroEnCierre(EventoMensajeroEnCierre.IR_A_VISTA_PENDIENTE_NO_VERIFICADO);
					evento._pendienteNoVerificado = pendiente;
					dispatchEvent(evento);
					navigator.pushView(pendienteEnCierreNoVerificadoView);
				}
			} */
			
				/*private var cerrarPendientePopUp:popUpCerrarPendienteMobilPqNet = new popUpCerrarPendienteMobilPqNet;
			protected function realizarPendientes(event:MouseEvent):void
			{
			 cerrarPendientePopUp.mensaje = "¿Confirmar la REALIZACIÓN de todos los eventos?";
				cerrarPendientePopUp.promptMensaje = "Persona que recibió";
				cerrarPendientePopUp.open(this,true);
				cerrarPendientePopUp.btnSi.addEventListener(MouseEvent.CLICK,confirmacionPositiva); 
				
			}*/
			
			/* protected function confirmacionPositiva(event:MouseEvent):void
			{
				var evento:EventoMensajeroEnCierre = new EventoMensajeroEnCierre(EventoMensajeroEnCierre.CERRAR_TODOS_LOS_PENDIENTES);
				var datos:ArrayCollection = new ArrayCollection();
				
				datos = ObjectUtil.copy(pendientesporVerificar) as ArrayCollection;
				for(var m:int = 0; m<datos.length; m++)
				{
					var currentPendiendte:PendientesMensajero = datos[m];
					
					currentPendiendte.realizado = true;
					currentPendiendte.personaRecibio = cerrarPendientePopUp.txtInputResponsable.text;
				}
				evento._pendientesPorCerrar = datos;
				evento._usuario = datosGlobales.getInstance().empleado_Login.usuario;
				dispatchEvent(evento);
			} */
			
			/*public function set actualizarPendientes(resultado:Object):void{
			if(resultado != null){
			if(resultado.vista == "pendientesEnCierre"){
			var eventoCierre:EventoMensajeroCierre = new EventoMensajeroCierre(EventoMensajeroCierre.CONSULTAR_PENDIENTES_CERRADOS);
			eventoCierre._usuario =  datosGlobales.getInstance().empleado_Login.usuario;
			dispatchEvent(eventoCierre);
			
			var eventoEstadistica:EventoMensajeroEstadisticas = new EventoMensajeroEstadisticas(EventoMensajeroEstadisticas.TRAER_DATOS_ESTADISTICAS);
			eventoEstadistica._usuario =  datosGlobales.getInstance().empleado_Login.usuario;
			dispatchEvent(eventoEstadistica);
			}
			}
			else{
			trace("nulo penRealizacion");
			}
			}*/
			
			protected function lstPendientesPorVerificar_changeHandler(event:IndexChangeEvent):void
			{
				var enviarPendientesPorTipo:EventoMensajeroEnCierre = new EventoMensajeroEnCierre(EventoMensajeroEnCierre.IR_A_VISTA_PENDIENTE_EN_CIERRE_POR_TIPO);
				
				var currentItemSelected:PendientesEnCierreObject = (event.currentTarget as List).selectedItem as PendientesEnCierreObject;
				enviarPendientesPorTipo.pendienteSeleccionadoKey = currentItemSelected.key;
				dispatchEvent(enviarPendientesPorTipo);
				
				navigator.pushView(pendientesEnCierrePorTipoView); 
			}
			
			protected function view1_initializeHandler(event:FlexEvent):void
			{
				this.title = globales.currentEmpresa;
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<botonAtras:botonAtras click="vistaAnterior(event)"/>
	</s:navigationContent>
	
	<s:Scroller width="640" height="{this.height}">
		<s:VGroup id="contenedor" width="100%" gap="15" verticalCenter="0" horizontalCenter="0" horizontalAlign="center" height="100%">
			<s:List verticalScrollPolicy="off" contentBackgroundColor="#252b2c" id="lstPendientesPorVerificar" width="100%" 
					itemRenderer="vistas.renders.renderEnCierre.itemTodosPendienteEnCierre" change="lstPendientesPorVerificar_changeHandler(event)"/>
			<!--<botonLogin:botonLogin label="TODOS REALIZADOS" click="realizarPendientes(event)"/>-->
		</s:VGroup>
	</s:Scroller>
</s:View>
