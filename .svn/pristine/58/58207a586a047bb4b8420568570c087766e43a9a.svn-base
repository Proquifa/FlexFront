<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark CheckBox component.  

      @see spark.components.CheckBox
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabledStates="0.5">

    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.CheckBox")]
    ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay", "check"];

       /** 
        * @private 
        */     
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /* Define the symbol fill items that should be colored by the "symbolColor" style. */
        //static private const symbols:Array = ["checkMarkFill"];
        static private const symbols:Array = [];

       /**
        * @private 
        */
        override public function get symbolItems():Array {return symbols};
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
    </fx:Script>
    
    <fx:Script>
        <![CDATA[
            /** 
             * @private 
             */     
            private static const focusExclusions:Array = ["labelDisplay"];

            /**
             * @private
             */
            override public function get focusSkinExclusions():Array { return focusExclusions;};
        ]]>
    </fx:Script>
	<s:layout>
			<s:HorizontalLayout horizontalAlign="center" gap="0" />
	</s:layout>
    
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates" />
    </s:states>
	
	<s:Label id="labelLeft" minWidth="30" width="100%" paddingRight="5"
			 fontWeight="bold" color.selectedStates="0xa5a5a5" color="0x000000"
			 fontWeight.up="bold" fontWeight.over="bold" fontWeight.down="bold"
			 textAlign="right"
			 verticalAlign="middle"
			 maxDisplayedLines="2" verticalCenter="0" height="100%"
			 fontSize="10"
			 />
	
    <s:Group id="grpCheck" verticalCenter="0" minWidth="50" maxWidth="70" height="20" layoutDirection="ltr">
			        
			        <!-- fill -->
			        <s:Rect left="1" top="1" right="1" bottom="1" radiusX="8" radiusY="8">
							<s:filters>
								<s:DropShadowFilter alpha="0.9" angle="135" blurX="3" blurY="3"
													color="#424242" distance="3" hideObject="false" inner="true"
													knockout="false" quality="3" strength="1"/>
							</s:filters>
				            <s:fill>
				                <s:LinearGradient rotation="90">
				                    <s:GradientEntry color="0xFFFFFF" 
				                                   color.overStates="0xBBBDBD" 
				                                   color.downStates="0xAAAAAA" 
				                                   alpha="0.97" />
				                    <s:GradientEntry color="0xFFFFFF" 
				                                   color.overStates="0x9FA0A1" 
				                                   color.downStates="0x929496" 
				                                   alpha="0.97" />
				                </s:LinearGradient>
				            </s:fill>
			        </s:Rect>
		
					<!-- linea central -->
					<s:Rect left="10" top="8.5" right="10" bottom="8.5" radiusX="2" radiusY="2">
							<s:fill>
								<s:SolidColor color="0x363636" alpha="1" />
							</s:fill>
					</s:Rect>
			        
			        <!-- fill highlight -->
			        <s:Rect left="1" right="1" top="1" radiusX="8" radiusY="8" height="5" >
			            <s:fill>
			                <s:SolidColor color="0xFFFFFF" alpha="0" alpha.over="0.33" alpha.downStates="0" />
			            </s:fill>
			        </s:Rect>
			        
			        <!-- checkmark -->
			<s:HGroup width="100%" height="100%" horizontalAlign="left" horizontalAlign.selectedStates="right" verticalAlign="middle" paddingLeft="10" paddingRight="10" gap="0" >
					<s:Rect width="9" height="9" radiusX="8" radiusY="8" verticalCenter="0" id="check" depth="100">
							<s:filters>
								<s:DropShadowFilter alpha=".5" angle="45" blurX="3" blurY="1"
													color="#424242" distance="2" hideObject="false" inner="false"
													knockout="false" quality="3" strength="1"/>
							</s:filters>
							<s:fill>
								<s:SolidColor id="checkMarkFill" color="0x479bac" alpha="1"
											  color.over="0x257d92" color.overAndSelected="0x257d92"/>
							</s:fill>
					</s:Rect>
			</s:HGroup>
    </s:Group>

    <!-- Label -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    
	<s:Label id="labelRight" minWidth="30" width="100%" paddingLeft="5"
			 fontWeight="bold" color="0xa5a5a5" color.selectedStates="0x000000"
			 textAlign="left"
			 verticalAlign="middle" maxDisplayedLines="2" verticalCenter="0"
			 fontSize="10" height="100%"
			 />
</s:SparkSkin>
