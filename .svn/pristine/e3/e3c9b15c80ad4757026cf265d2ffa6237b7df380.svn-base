<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" paddingTop="20" paddingLeft="25" paddingRight="25" paddingBottom="13"
		  xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:vistaFacturar="vista.vistas.vistaFacturar.*" creationComplete="inicia()"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:label="skins.skin.label.*" xmlns:otros="skins.otros.*" xmlns:finalizar="skins.botones.finalizar.*" 
		  xmlns:salir="skins.botones.salir.*" xmlns:botoneraGrisconLabel="skins.botoneras.botoneraGrisconLabel.*" xmlns:botonNegroCuadrado="skins.botones.botonNegroCuadrado.*" xmlns:pqNet="skins.skin.datagrid.pqNet.*" xmlns:chekbox="skins.skin.chekbox.*">
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.proveedores.grupoEmpresarial.EventoCatalogoGrupoEmpresarial;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.Factura;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ComprobanteFiscal;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ConceptoFactura;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.mysuite.RequestTransactionResponse;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cliente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Empresa;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.RutasPdF;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatoMoneda;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsRutaArchivos;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.alertPqNet.alertPqNet;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.incidente.tablero.Tipo;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.events.DragEvent;
			import mx.managers.PopUpManager;
			import mx.skins.halo.ActivatorSkin;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoBanderas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosEtiquetas;
			import skins.catalogos.catalogoIconosGrid;
			
			import spark.components.DataGroup;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.layouts.supportClasses.DropLocation;
			
			import vista.eventos.EventoFacturacionGeneral;
			import vista.vistas.facturistaPopUp.FacturistaPopUpAgregaEditarConcepto;
			
			private var _popUpConcepto:FacturistaPopUpAgregaEditarConcepto;
			
			[Bindable] //esta variable es llenada desde Facturacion PantallaInicial
			public var _empresaQueFactura:Empresa;
			
			[Bindable]
			private var _clienteSeleccionado:Cliente = new Cliente();
			
			[Bindable]
			private var _universoClientes:ArrayCollection;
			
			[Bindable]
			private var _copiaSeguridadLista:ArrayCollection;
			
			[Bindable]
			private var _copiaSeguridadGrid:ArrayCollection;
			
			[Bindable]
			public var _datosBarraBoton:ArrayCollection = new ArrayCollection([{label:"Cliente", icono:"cliente"},{label:"FacturaciÃ³n",icono:"precio"}]);
			
			private var _subTotal:Number;
			private var _iva:Number;
			private var _granTotal:Number;
			private const tache:Class =  catalogoIconosGrid.getInstance().render_tache;
			private const paloma:Class =  catalogoIconosGrid.getInstance().render_palomita;
				
			private function inicia():void{
				var $evt:EventoFacturacionGeneral = new EventoFacturacionGeneral( EventoFacturacionGeneral.CONSULTA_CLIENTES_FACTURA );
				dispatchEvent( $evt );
				/* var evt:EventoFacturacionGeneral = new EventoFacturacionGeneral( EventoFacturacionGeneral.CONSULTA_CONCEPTOS_FACTURA );
				dispatchEvent( evt ); */
				this.chkIVA.source = paloma;
			}
			/**
			 * recibe del MapaFacturacion
			 */ 
			public function set ObtenClientes( $datos:ArrayCollection ):void{
				if( $datos == null ) { return; }
				_universoClientes = new ArrayCollection();
				_universoClientes = ObjectUtil.copy( $datos ) as ArrayCollection;
				dibujaClientes( $datos );
			}
			
			private function filtraLista():void{
				var temp:ArrayCollection = new ArrayCollection();
				temp = ObjectUtil.copy( _universoClientes ) as ArrayCollection
				dibujaClientes( UtilsGrid.queryCampoXLikeDosCampos( temp,'nombre','rfc',this.txtBusqueda.text ) );
			}
			
			private function dibujaClientes($datos:ArrayCollection):void{
				var $listaTemp:ArrayCollection = new ArrayCollection();
				$listaTemp = ObjectUtil.copy( $datos ) as ArrayCollection;
				var $datoTemp:Cliente = new Cliente();
				$datoTemp.totalClientes = $datos.length;
				$listaTemp.addItem( $datoTemp );
				this.lstClientes.dataProvider = new ArrayCollection();
				this.lstClientes.dataProvider = $listaTemp;
				if($datos.length > 0){
					this.lstClientes.selectedIndex = 0;
					_clienteSeleccionado = this.lstClientes.selectedItem as Cliente;
				}
				calculaTotal();
			}
			
			/**
			 * recibe del MapaFacturacion
			 */ 
			private var _listaConceptosUniverso:ArrayCollection;
			public function set ObtenConceptos($evt:ArrayCollection):void{
				if( $evt == null ){ return; }
				this.lstConceptosFactura.dataProvider = new ArrayCollection();
				for(var i:int = 0; i < $evt.length; i++ ){
					( $evt[i] as ConceptoFactura).codigo = _empresaQueFactura.nomenclaturaEmpresa + ( $evt[i] as ConceptoFactura).idConcepto;
				}
				this.lstConceptosFactura.dataProvider = ObjectUtil.copy( $evt ) as ArrayCollection;
				_listaConceptosUniverso = ObjectUtil.copy( $evt ) as ArrayCollection;
				//this.gridConcepto.dataProvider = $evt;
			}
			
			//crearPopUp o abre
			public function image1_clickHandler( $:ConceptoFactura ):void{
				if( this._popUpConcepto == null ){	
					_popUpConcepto =  FacturistaPopUpAgregaEditarConcepto( PopUpManager.createPopUp (this, FacturistaPopUpAgregaEditarConcepto, true  ) )
					this._popUpConcepto.addEventListener(EventoFacturacionGeneral.CERRAR_POPUP_CONCEPTO, cerrarPopUp );
					this._popUpConcepto.addEventListener(EventoFacturacionGeneral.GUARDAR_POPUP_CONCEPTO, guardaPopUp );
				}else{
					PopUpManager.addPopUp( _popUpConcepto, this, true );
				}
				_popUpConcepto.editaConcepto( $ );
				PopUpManager.centerPopUp( _popUpConcepto );
				
			}
			//cierra popup
			private function cerrarPopUp( $evt:EventoFacturacionGeneral ):void{
				PopUpManager.removePopUp( _popUpConcepto );
			}
			//guarda cambios a la partida enviados desde el popUp
			private function guardaPopUp( $evt:EventoFacturacionGeneral ):void{
				gridConcepto.dataProvider.removeItemAt( ( gridConcepto.dataProvider as ArrayCollection ).length -1); //se elimina el renglon q cuenta las partidas 
				for( var i:int = 0; i < (gridConcepto.dataProvider as ArrayCollection).length ; i++ ){
					if( (gridConcepto.dataProvider[i] as ConceptoFactura).idConcepto == $evt.conceptoFac.idConcepto ){
						gridConcepto.dataProvider[i] = $evt.conceptoFac;
					}
				}
				//se agrega al final el objeto que cuenta las partidas
				var totalDoctos:Object = new Object();
				totalDoctos.finArray =  ( gridConcepto.dataProvider as ArrayCollection ).length;
				gridConcepto.dataProvider.addItem( totalDoctos );
				( gridConcepto.dataProvider as ArrayCollection).refresh();
				PopUpManager.removePopUp( _popUpConcepto );
				activaBotonFacturar();
				calculaTotal();
			}
			//drag and Drop
			private function generaCopiaSeguridadDataGrid():void{
				_copiaSeguridadLista = ObjectUtil.copy( lstConceptosFactura.dataProvider ) as ArrayCollection;
				_copiaSeguridadGrid = ObjectUtil.copy( gridConcepto.dataProvider ) as ArrayCollection;
				//prueba
			} 
			/* protected function gridConcepto_dragDropHandler(event:DropLocation):void{ */
			protected function gridConcepto_dragDropHandler(event:DragEvent):void{
				var existe:Boolean;
				var arrayTemp:ArrayCollection = new ArrayCollection();
				arrayTemp = ObjectUtil.copy( gridConcepto.dataProvider ) as ArrayCollection;
				gridConcepto.dataProvider = new ArrayCollection();
				if( arrayTemp != null && arrayTemp.length > 0 ){
					arrayTemp.removeItemAt( arrayTemp.length -1); //se elimina el renglon q cuenta las partidas 
					for(var i:int = 0; i < arrayTemp.length ; i++ ){
						if( (arrayTemp[i] as ConceptoFactura).idConcepto == (lstConceptosFactura.selectedItem as ConceptoFactura).idConcepto && arrayTemp.length != i ){
							existe = true;
							Alert.show('El concepto ya existe en la lista' );
							//se agrega al final el objeto que cuenta las partidas
							var totalDoctos:Object = new Object();
							totalDoctos.finArray =  arrayTemp.length;
							arrayTemp.addItem( totalDoctos )
							i = arrayTemp.length ;
						}
					}
					event.delta = 0;
				}
				
				arrayTemp == null ? arrayTemp = new ArrayCollection() : null;
				if( !existe ){
					/* (lstConceptosFactura.selectedItem as ConceptoFactura). */
					(lstConceptosFactura.selectedItem as ConceptoFactura).cantidad = 1
					if( this.rbDolares.selected ){  (lstConceptosFactura.selectedItem as ConceptoFactura).moneda = 'Dolar' }
					if( this.rbEuro.selected ){ (lstConceptosFactura.selectedItem as ConceptoFactura).moneda = 'Euro' }
					if( this.rbPeso.selected  ){ (lstConceptosFactura.selectedItem as ConceptoFactura).moneda = 'MN' }
					(lstConceptosFactura.selectedItem as ConceptoFactura).unidadDeMedida = "No aplica";
					(lstConceptosFactura.selectedItem as ConceptoFactura).notas = '';
					(lstConceptosFactura.selectedItem as ConceptoFactura).valorUnitario = 0;
					(lstConceptosFactura.selectedItem as ConceptoFactura).numFila =  arrayTemp.length +1;
					arrayTemp.addItem( lstConceptosFactura.selectedItem as ConceptoFactura );
					//se agrega al final el objeto que cuenta las partidas
					var vartotalDoctos:Object = new Object();
					vartotalDoctos.finArray =  arrayTemp.length;
					arrayTemp.addItem( vartotalDoctos )
					this.gridConcepto.dataProvider = ObjectUtil.copy( arrayTemp );
					calculaTotal();
				}
				lstConceptosFactura.dataProvider = ObjectUtil.copy( _copiaSeguridadLista ) as ArrayCollection;
				/* event.preventDefault(); */
				/* (event.currentTarget as advancedGridPqNet).allowDragSelection = false; */
			}
			
			
			/**
			 * funcion que cambia a la opcion seleccionada  del componente hijo stackPrecio.mxml
			 */ 
			private function seleccionaBoton(event:IndexChangeEvent):void{
				if( event.currentTarget.selectedIndex == 0 ){
					grupoClientes.visible = true;
					grupoFactura.visible = false;
				}else if( event.currentTarget.selectedIndex == 1 ){
					grupoClientes.visible = false;
					grupoFactura.visible = true;
				}
			}
			/**
			 * funcion quecambia la moneda a los conceptos por facturar
			 */ 
			private function cambiaMoenda():void{
				var moneda:String = "";
				this.txtTC.enabled = false;
				
				if( this.rbPeso.selected  ){ 
					this.imgLapizGris.visible = true;
					this.imgLapiz.visible = false;
					this.txtTC.text = "";
					this.txtTC.enabled = false;
				}else{
					this.imgLapiz.visible = true;
					this.imgLapizGris.visible = false;
				}
				if( gridConcepto.dataProvider != null && (gridConcepto.dataProvider as ArrayCollection).length > 0){
					gridConcepto.dataProvider.removeItemAt( ( gridConcepto.dataProvider as ArrayCollection ).length -1); //se elimina el renglon q cuenta las partidas 
					for( var i:int = 0; i < (gridConcepto.dataProvider as ArrayCollection).length; i++ ){
						if( this.rbDolares.selected ){  
							( gridConcepto.dataProvider[i] as ConceptoFactura).moneda = 'Dolar' ;
						}
						if( this.rbEuro.selected ){ 
							( gridConcepto.dataProvider[i] as ConceptoFactura).moneda = 'Euro';
						}
						if( this.rbPeso.selected  ){ 
							( gridConcepto.dataProvider[i] as ConceptoFactura).moneda = 'MN' ;
							
						}
					}
					//se agrega al final el objeto que cuenta las partidas
					var totalDoctos:Object = new Object();
					( gridConcepto.dataProvider as ArrayCollection ).length == 0 ? totalDoctos.finArray = 0 : totalDoctos.finArray =  ( gridConcepto.dataProvider as ArrayCollection ).length;
					gridConcepto.dataProvider.addItem( totalDoctos );
				}
				if( this.rbDolares.selected ){  
					moneda = 'dolar';
				}else if( this.rbEuro.selected ){ 
					moneda = 'euro';
				}else{
					moneda = '';
					this.txtTC.text = "";
				}
				if( moneda != '' ){
					var evt:EventoFacturacionGeneral = new EventoFacturacionGeneral( EventoFacturacionGeneral.CONSULTA_TIPO_DE_CAMBIO);
					evt.moneda = moneda;
					dispatchEvent( evt );
				}
				calculaTotal();
			}
			/**
			 * se recibe el tipo de cambio de la BD
			 */ 
			public function set recibeTipoCambio( $dato:Number ):void{
				if( isNaN( $dato ) ){
					return;
				}
				this.txtTC.text = UtilsFormatosNumericos.precisionADosDecimales( $dato );
			}
			/**
			 * funcion que calcula totales
			 */ 
			private var arregloTEmp:ArrayCollection
			private  function calculaTotal():void{
				var tempsubTotal:Number = 0;
				var tempIva:Number = 0;
				var simbolo:String = '';
				this._subTotal = 0;
				this._iva = 0;
				this._granTotal = 0;
				if( this.rbDolares.selected ){ simbolo ='Dolar' }
				if( this.rbEuro.selected ){ simbolo = 'Euro' }
				if( this.rbPeso.selected  ){ simbolo = 'MN' }
				simbolo =  UtilsFormatoMoneda.determinaMoneda( simbolo );
				arregloTEmp = new ArrayCollection();
				arregloTEmp = ObjectUtil.copy( gridConcepto.dataProvider ) as ArrayCollection;
				gridConcepto.dataProvider = new ArrayCollection();
				if( arregloTEmp !=null && arregloTEmp.length > 0 ){
					arregloTEmp.removeItemAt( arregloTEmp.length -1);//se elimina el renglon q cuenta las partidas 
					for( var i:int = 0; i < arregloTEmp.length; i++ ){
						if( (arregloTEmp[i] as ConceptoFactura).valorUnitario > 0 ){
							tempsubTotal = tempsubTotal + ( ( arregloTEmp[i] as ConceptoFactura).valorUnitario * ( arregloTEmp[i] as ConceptoFactura).cantidad ); 
						}
					}
					//se agrega al final el objeto que cuenta las partidas
					var totalDoctos:Object = new Object();
					totalDoctos.finArray =  arregloTEmp.length;
					/* gridConcepto.dataProvider.addItem( totalDoctos ) */ 
					arregloTEmp.addItem( totalDoctos ) 
				}
				
				lblSubtotal.text = simbolo +' '+UtilsFormatosNumericos.precisionADosDecimalesConComas( tempsubTotal );
				if( _clienteSeleccionado.pais == "Mexico" || _clienteSeleccionado.pais == "MÃ©xico" || _clienteSeleccionado.pais == "MEXICO" ){
					if( tempsubTotal > 0 ){
						var _iva:Number = UtilsFormatoMoneda.iva() 
						tempIva = _iva * tempsubTotal;
					}
				}
				
				this._subTotal = tempsubTotal;
				if( this.cargarIVA ){
					this._iva = 0;
					tempIva = 0;
				}else{
					this._iva = tempIva;
				}
				lblIVA.text = simbolo + ' ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( tempIva );
				lblTotal.text = simbolo + ' ' + UtilsFormatosNumericos.precisionADosDecimalesConComas( (tempsubTotal + tempIva) );
				this._granTotal = (tempsubTotal + tempIva);
				
				gridConcepto.dataProvider = ObjectUtil.copy( arregloTEmp ) as ArrayCollection;
				//setTimeout( prueba, 0);
			}
			private function prueba():void{
			}
			
			public function eliminaConcepto( $:ConceptoFactura ):void{
				gridConcepto.dataProvider.removeItemAt( ( gridConcepto.dataProvider as ArrayCollection ).length -1); //se elimina el renglon q cuenta las partidas 
				for( var i:int = 0; i < (gridConcepto.dataProvider as ArrayCollection).length; i++ ){
					(gridConcepto.dataProvider[i] as ConceptoFactura).numFila = i + 1;
					if( (gridConcepto.dataProvider[i] as ConceptoFactura).idConcepto == $.idConcepto ){
						(gridConcepto.dataProvider as ArrayCollection).removeItemAt( i );
						i = i-1;
					}
				}
				//se agrega al final el objeto que cuenta las partidas
				var totalDoctos:Object = new Object();
				( gridConcepto.dataProvider as ArrayCollection ).length == 0 ? totalDoctos.finArray = 0 : totalDoctos.finArray =  ( gridConcepto.dataProvider as ArrayCollection ).length;
				gridConcepto.dataProvider.addItem( totalDoctos );
				activaBotonFacturar();
				calculaTotal();
			}
			
			protected function botonfinalizar1_clickHandler():void{
				//limpia
				btnBarra.selectedIndex = 0;
				grupoClientes.visible = true;
				grupoFactura.visible = false;
				this.imgLapizGris.visible = true;
				this.imgLapiz.visible = false;
				this.txtBusqueda.text = '';
				filtraLista();
				this.txtTC.text = '';
				this.txtTC.enabled = false;
				this.rbDolares.selected = false; this.rbEuro.selected = false; this.rbPeso.selected= true;
				chkEmpresa.selected = false; this.btnFacturar.enabled = false;
				this.gridConcepto.dataProvider = new ArrayCollection();
				var evt:EventoFacturacionGeneral = new EventoFacturacionGeneral( EventoFacturacionGeneral.CAMBIA_INDEX_FACTURISTA );
				evt.indexSeleccionado = 0;
				dispatchEvent( evt );
			}
			private function activaBotonFacturar():void{
				var actibaPorCheck:Boolean = false;
				var activaPorGrid:Boolean = true;
				if( chkEmpresa.selected ){	
					actibaPorCheck = true;
				}
				if( gridConcepto.dataProvider != null && (gridConcepto.dataProvider as ArrayCollection).length > 0 ){
					gridConcepto.dataProvider.removeItemAt( ( gridConcepto.dataProvider as ArrayCollection ).length -1); //se elimina el renglon q cuenta las partidas 
					for( var i:int = 0; i < (gridConcepto.dataProvider as ArrayCollection).length; i++ ){
						if( (gridConcepto.dataProvider[i] as ConceptoFactura).cantidad == 0 || (gridConcepto.dataProvider[i] as ConceptoFactura).valorUnitario == 0 ){
							activaPorGrid = false;
							i = (gridConcepto.dataProvider as ArrayCollection).length;
						}
					}
					//se agrega al final el objeto que cuenta las partidas
					var totalDoctos:Object = new Object();
					totalDoctos.finArray =  ( gridConcepto.dataProvider as ArrayCollection ).length;
					gridConcepto.dataProvider.addItem( totalDoctos )
				}else{
					activaPorGrid = false;
				}
				if( actibaPorCheck && activaPorGrid){
					this.btnFacturar.enabled = true;
				}else{
					this.btnFacturar.enabled = false;
				}
			}
			
			//funcion tentativa para generar factura
			private function generaFactura():void{
				//manda evento
				var evt:EventoFacturacionGeneral = new EventoFacturacionGeneral( EventoFacturacionGeneral.GENERA_FACTURA );
				evt.cfdi = new ComprobanteFiscal();
				evt.cfdi.conceptosList = new ArrayCollection();
				gridConcepto.dataProvider.removeItemAt( ( gridConcepto.dataProvider as ArrayCollection ).length -1); //se elimina el renglon q cuenta las partidas 
				evt.cfdi.conceptosList = ObjectUtil.copy( gridConcepto.dataProvider ) as ArrayCollection;
				//se agrega al final el objeto que cuenta las partidas
				var totalDoctos:Object = new Object();
				totalDoctos.finArray =  ( gridConcepto.dataProvider as ArrayCollection ).length;
				gridConcepto.dataProvider.addItem( totalDoctos )
				evt.cfdi.emisor = new Empresa();
				evt.cfdi.emisor = ObjectUtil.copy( _empresaQueFactura ) as Empresa;
				/* evt.cfdi.emisor.alias = "Administrador";
				evt.cfdi.emisor.rfcEmpresa  = "AAA010101AAA"; */
				var aliasTemp:String = new String;
				aliasTemp = UtilsRutaArchivos.obtenFpor( evt.cfdi.emisor.nomenclaturaEmpresa )
				evt.cfdi.emisor.alias =  aliasTemp.substring(0, (aliasTemp.length -1 ) );//se quita la diagonal de la carpeta
				evt.cfdi.receptor = new Cliente();
				evt.cfdi.receptor = ObjectUtil.copy( _clienteSeleccionado ) as Cliente;
				evt.cfdi.totales = new Factura();
				if( this.rbDolares.selected ){
					evt.cfdi.totales.moneda = "USD";
				}else if( this.rbEuro.selected ){
					evt.cfdi.totales.moneda = "EUR";
				}else{
					evt.cfdi.totales.moneda = "MXN";
				}
				if( txtTC.text != "" ){
					evt.cfdi.totales.tipoCambio = parseFloat( txtTC.text );
				}else{
					evt.cfdi.totales.tipoCambio  = 1;
				}
				evt.cfdi.totales.importe = parseFloat( UtilsFormatosNumericos.precisionADosDecimales(  this._subTotal ) );
				evt.cfdi.totales.iva = parseFloat( UtilsFormatosNumericos.precisionADosDecimales( this._iva ) );
				evt.cfdi.totales.montoRealPagado = parseFloat( UtilsFormatosNumericos.precisionADosDecimales( this._granTotal ) );
				evt.cfdi.totales.montoConLetra = ""; 
				evt.cfdi.totales.pedido = "";
				evt.cfdi.tipoDeComprobante = "FACTURA";
				evt.cfdi.pruebaCFDI = true;
				dispatchEvent( evt );
			}
			
			public function set confirmaGeneraFactura( $dato:RequestTransactionResponse ):void{
				if( $dato  == null){
					return;
				}
				var $url:URLRequest = new URLRequest();
				var fPor:String = new String;
				fPor = UtilsRutaArchivos.obtenFpor( _empresaQueFactura.nomenclaturaEmpresa );
				$url.url = RutasPdF.GENERAL_RUTA + RutasPdF.FACTURAS_RUTA + fPor + $dato.requestTransactionResult.response.identifier.serial + '.pdf'; 
				/* $url.url = 'file:///Users/fmartinez/Desktop/' + $dato.requestTransactionResult.response.identifier.serial + '.pdf'; */
				navigateToURL( $url );
				botonfinalizar1_clickHandler();
			}
			
			// funcion para manipular el tipo de cambio
			private function modificaTipoDeCambio():void{
				if( !this.rbPeso.selected ){
					this.txtTC.enabled = true
				}
			} 
			private var cargarIVA:Boolean = true;
			
			private function grabaIVA():void{
				if(cargarIVA){
					cargarIVA = false;
					//muestra tache
					this.chkIVA.source = tache
				}else{
					cargarIVA = true;
					//muestra Paloma
					this.chkIVA.source = paloma
				}
				calculaTotal();
			}
			
			private var _listaFiltradaConcepto:ArrayCollection;
			private function filtraConcepto( event:TextOperationEvent ):void{
				_listaFiltradaConcepto = new ArrayCollection();
				_listaFiltradaConcepto = ObjectUtil.copy( UtilsGrid.queryCampoXLike( (_listaConceptosUniverso) as ArrayCollection, 'descripcion', txtBusquedaConcepto.text ) ) as ArrayCollection;
				if( _listaFiltradaConcepto != null ){
					lstConceptosFactura.dataProvider = ObjectUtil.copy( _listaFiltradaConcepto ) as ArrayCollection;
				}
			}
		]]>
		
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="radioBanderas"/>
	</fx:Declarations>
	<s:HGroup width="100%"  verticalAlign="middle" >
		<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_inspector}"/>
		<label:labelTitulo text="INSPECTOR" width="100%"/>
		<label:labelTitulo text="[ELABORAR FACTURA]" textAlign="right" color="0x{catalogoColores.LABEL_GRIS}"/>
	</s:HGroup>
	<s:Spacer height="15" />
	<otros:divisionHueca width="100%"/>
	<s:Spacer height="15" />
	<s:HGroup width="100%" >
		<label:labelSubtitulo id="lblNombreEmpresa" width="100%" text="{ _empresaQueFactura.razonSocial + '  Â·  ' + _empresaQueFactura.rfcEmpresa }"/>
		<s:Label fontSize="15" fontWeight="bold" id="lblfechaHoy" textAlign="right" text="{ 'FECHA DE FACTURACIÃN  Â·  ' + UtilsFecha.formatoFechaDDMMMYYYY( new Date )}" color="0x{catalogoColores.LABEL_ROJO}"/>
	</s:HGroup>
	<s:Spacer height="15" />
	<otros:divisionGruesa width="100%"/>
	<s:Spacer height="15" />
	<s:Group width="100%" height="100%" >
		<s:HGroup width="100%" height="100%" id="grupoClientes" visible="true" >
			<s:VGroup width="20%" height="100%"  paddingRight="15">
				<s:TextInput id="txtBusqueda" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" fontStyle="normal" change="filtraLista()"/>
				<s:Spacer height="15"/>
				<s:List width="100%" height="100%" itemRenderer="vista.vistas.vistaFacturar.FacturistaVistaPrincipalITMRListaClientes" id="lstClientes"  borderVisible="false"
						click="_clienteSeleccionado = this.lstClientes.selectedItem as Cliente; chkEmpresa.selected = false; this.btnFacturar.enabled = false" horizontalScrollPolicy ="off"/>
			</s:VGroup>
			<otros:VDivisionHueca height="100%"/>
			<s:VGroup width="100%" height="100%" gap="15" paddingLeft="15">
				<s:HGroup width="100%" >
					<s:Label fontWeight="bold" fontSize="18" text="{ _clienteSeleccionado.nombre }" id="lblCliente" width="100%"/>
					<s:HGroup paddingTop="-10" paddingLeft="-20">
						<chekbox:checkBoxRadio id="chkEmpresa"  change="activaBotonFacturar()" selected="false"/>
					</s:HGroup>
				</s:HGroup>
				<otros:division width="100%"/>
				<s:Scroller width="100%" height="100%" >
					<s:HGroup width="100%" height="100%" >
						<s:Scroller width="60%" height="100%"  horizontalScrollPolicy="off">
							<s:VGroup height="100%" width="60%" >
								<s:Label text="GENERALES" fontSize="16" fontWeight="bold" color="0x{catalogoColores.LABEL_VERDE_AZUL}" />
								<s:Spacer height="10" />
								<s:Label text="RazÃ³n Social:" fontSize="12" fontWeight="bold"  />
								<s:Label fontSize="12"  text="{_clienteSeleccionado.razonSocial}" color="0x{catalogoColores.LABEL_CASI_NEGRO}" />
								<s:Spacer height="10" />
								<s:Label text="RFC:" fontSize="12" fontWeight="bold"  />
								<s:Label fontSize="12"  text="{_clienteSeleccionado.rfc }"  color="0x{catalogoColores.LABEL_CASI_NEGRO}"/>
								<s:Spacer height="10" />
								<s:Label text="DirecciÃ³n fiscal:" fontSize="12" fontWeight="bold"  />
								<s:Label text="{ _clienteSeleccionado.calleFiscal + ' ' + _clienteSeleccionado.delegacionFiscal + ' CP: ' +  _clienteSeleccionado.codigoPostalFiscal + ' ' + _clienteSeleccionado.paisFiscal + ' ' + _clienteSeleccionado.estadoFiscal}"
										 toolTip="{ _clienteSeleccionado.calleFiscal + ' ' + _clienteSeleccionado.delegacionFiscal + ' CP: ' +  _clienteSeleccionado.codigoPostalFiscal + ' ' + _clienteSeleccionado.paisFiscal + ' ' + _clienteSeleccionado.estadoFiscal}" 
										 color="0x{catalogoColores.LABEL_CASI_NEGRO}" fontSize="12" width="100%" maxDisplayedLines="2" />
								<s:Spacer height="10" />
								<s:Label text="Factura:" fontSize="12" fontWeight="bold"  />
								<s:Label fontSize="12"  text="{_clienteSeleccionado.empresaFactura}" color="0x{catalogoColores.LABEL_CASI_NEGRO}"/>
								<s:Spacer height="10" />
								<s:Label text="Destino de factura electrÃ³nica:" fontSize="12" fontWeight="bold"  />
								<s:Label fontSize="12"  text="{_clienteSeleccionado.correoElectronico}"  color="0x{catalogoColores.LABEL_CASI_NEGRO}"/>
							</s:VGroup>
						</s:Scroller>
						<otros:VDivisionHueca height="100%"/>
						<s:Scroller width="40%" height="100%" >
							<s:VGroup height="100%" width="100%" paddingLeft="15">
								<s:Label text="PAGO" fontSize="16" fontWeight="bold" color="0x{catalogoColores.LABEL_VERDE_AZUL}"  />
								<s:Spacer height="10" />
								<s:Label text="Condiciones:" fontSize="12" fontWeight="bold"  />
								<s:Label fontSize="12" text="{_clienteSeleccionado.condicionesPago}" color="0x{catalogoColores.LABEL_CASI_NEGRO}" />
								<s:Spacer height="10" />
								<s:Label text="Medio:" fontSize="12" fontWeight="bold"  />
								<s:Label fontSize="12" text="{_clienteSeleccionado.medioPago}"  color="0x{catalogoColores.LABEL_CASI_NEGRO}" />
								<s:Spacer height="10" />
								<s:Label text="Cuenta origen conocida:" fontSize="12" fontWeight="bold"  />
								<s:Label fontSize="13" text="{_clienteSeleccionado.numeroDeCuenta}" color="0xw{catalogoColores.LABEL_CASI_NEGRO}"/>
							</s:VGroup>
						</s:Scroller>
					</s:HGroup>
				</s:Scroller>	
				<otros:division width="100%"/>
				<s:Label text="Comentarios adicionales para la facturaciÃ³n:" fontSize="18" fontWeight="bold" color="0x{catalogoColores.LABEL_VERDE_AZUL}" />
				<s:RichText width="100%" height="20%" fontStyle="normal"  text="{ _clienteSeleccionado.comentaFacturacion }" id="txtNota"/>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup width="100%" height="100%" id="grupoFactura" visible="false"  >
			<s:VGroup width="25%" height="100%" gap="0" paddingLeft="15" paddingRight="15">
				<s:Spacer height="15" />
				<s:Label text="CONCEPTOS" fontSize="14" width="100%" fontWeight="bold" textAlign="center" />
				<s:Spacer height="5" />
				<s:TextInput id="txtBusquedaConcepto" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" fontStyle="normal" change="filtraConcepto(event)" prompt="CONCEPTO" />
				<s:Spacer height="10" />
				<otros:division width="100%" />
				<s:List width="100%" height="100%" borderVisible="false" itemRenderer="vista.vistas.vistaFacturar.VistaPrincipalITMRConceptos"  id="lstConceptosFactura" 
						dragStart="generaCopiaSeguridadDataGrid()" 
						dragEnabled="true"
						dragMoveEnabled="false" horizontalScrollPolicy="off"
						/>
			</s:VGroup>
			<otros:VDivisionHueca height="100%"/>
			<s:VGroup width="100%" height="100%" paddingLeft="15" paddingRight="15">
				<!--<vistaFacturar:VistaPrincipalInspectorGrid width="100%" height="100%" id="gridConcepto" dragDrop="gridConcepto_dragDropHandler(event)"/>-->
				<pqNet:advancedGridPqNet  id="gridConcepto" width="100%" height="100%"  textAlign="center"  dragDrop="gridConcepto_dragDropHandler(event)"
										  porcentajesColumnasPq="{[4,33,18,14,19,4,3 ]}"  rowHeight="70" 
										 
										  dropEnabled="true" >
					<!--agregar 33%-->
					<pqNet:columns>
						<mx:AdvancedDataGridColumn headerText="#" width="35" dataField="numFila" />
						<mx:AdvancedDataGridColumn headerText="CONCEPTO" dataField="descripcion"  >
							<mx:itemRenderer >
								<fx:Component>
									<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
										<fx:Script>
											<![CDATA[
												import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ConceptoFactura;
												
												import skins.catalogos.catalogoColores;
												
											]]>
										</fx:Script>
										<s:VGroup width="100%" height="100%" horizontalAlign="center"  >
											<s:Label maxDisplayedLines="2" width="100%" text="{(data as ConceptoFactura).descripcion }" fontSize="12"/>
											<s:Label maxDisplayedLines="2" width="100%" text=" { (data as ConceptoFactura).notas }"  fontSize="11"
													 toolTip="{ (data as ConceptoFactura).notas}" color="0x{catalogoColores.LABEL_VERDE_AZUL}"/>
										</s:VGroup>
									</s:MXAdvancedDataGridItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="Unidad" >
							<mx:itemRenderer>
								<fx:Component>
									<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
										<fx:Script>
											<![CDATA[
												import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ConceptoFactura;
											]]>
										</fx:Script>
										<s:Group width="100%" height="100%"  >
											<s:Label width="100%" height="100%" text="{(data as ConceptoFactura).cantidad}" horizontalCenter="0" verticalCenter="0" fontSize="14" />
										</s:Group>
									</s:MXAdvancedDataGridItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="Precio unitario">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
										<fx:Script>
											<![CDATA[
												import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ConceptoFactura;
												import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatoMoneda;
												import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
											]]>
										</fx:Script>
										<s:VGroup  width="100%" horizontalAlign="center">
											
											<s:Label width="100%"  fontSize="14" 
													 text="{ UtilsFormatoMoneda.determinaMoneda((data as ConceptoFactura).moneda)+' '+UtilsFormatosNumericos.precisionADosDecimales( (data as ConceptoFactura).valorUnitario )}"/>
											<s:Label width="100%" text="{ (data as ConceptoFactura).moneda }" fontSize="14" />
											
										</s:VGroup>
									</s:MXAdvancedDataGridItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>						
						<mx:AdvancedDataGridColumn headerText="IMPORTE" >
							<mx:itemRenderer>
								<fx:Component>
									<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
										<fx:Script>
											<![CDATA[
												import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ConceptoFactura;
												import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatoMoneda;
												import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
												
												import skins.catalogos.catalogoColores;
											]]>
										</fx:Script>
										<s:VGroup  horizontalAlign="center" width="100%">
											<s:Label width="100%"   fontSize="14" color="0x{catalogoColores.LABEL_VERDE_AZUL}" verticalAlign="bottom"
													 text="{ UtilsFormatoMoneda.determinaMoneda((data as ConceptoFactura).moneda)+' '+UtilsFormatosNumericos.precisionADosDecimales( ((data as ConceptoFactura).valorUnitario *(data as ConceptoFactura).cantidad) )}"/>
											<s:Label width="100%"  text="{ (data as ConceptoFactura).moneda }"  fontSize="14" color="0x{catalogoColores.LABEL_VERDE_AZUL}" verticalAlign="top"/>
										</s:VGroup>
									</s:MXAdvancedDataGridItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText=" ">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
										<fx:Script>
											<![CDATA[
												import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ConceptoFactura;
												
												import skins.catalogos.catalogoIconosGrid;
												public function regresaCotizacion():void{
													outerDocument.image1_clickHandler( data as ConceptoFactura )
												}
											]]>
										</fx:Script>
										<s:Image source="{catalogoIconosGrid.getInstance().render_lapiz }" click="regresaCotizacion()" id="imgInfo" horizontalCenter="0"/>
									</s:MXAdvancedDataGridItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText=" ">
							<mx:itemRenderer>
								<fx:Component>
									<s:MXAdvancedDataGridItemRenderer autoDrawBackground="false" width="100%">
										<fx:Script>
											<![CDATA[
												import mx.com.proquifa.proquifanet.rsl.vista.modelo.cobrosypagos.facturista.ConceptoFactura;
												
												import skins.catalogos.catalogoIconosGrid;
												public function eliminaCotizacion():void{
													outerDocument.eliminaConcepto( data as ConceptoFactura )
												}
											]]>
										</fx:Script>
										<s:Image source="{catalogoIconosGrid.getInstance().render_botontache }" click="eliminaCotizacion()" id="imgInfo" horizontalCenter="0"/>
									</s:MXAdvancedDataGridItemRenderer>
								</fx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
					</pqNet:columns>
					<pqNet:rendererProviders >
						<mx:AdvancedDataGridRendererProvider 
							dataField="finArray"
							columnIndex="0"
							columnSpan="0"
							renderer="vista.vistas.vistaFacturar.FacturistaITRMTotalConceptosAgregadosFactura"/>
					</pqNet:rendererProviders>
				</pqNet:advancedGridPqNet>
			</s:VGroup>
			<otros:VDivisionHueca height="100%"/>
			<s:Scroller width="25%" height="100%"  horizontalScrollPolicy="off">
				<s:VGroup width="100%" height="100%" gap="17" paddingLeft="15"  >
					<s:Label height="0"/>
					<s:Label text="{_clienteSeleccionado.nombre}" fontSize="14" fontWeight="bold" width="100%" textAlign="center"/>
					<otros:division width="100%"/>
					<s:Label text="TOTALES" color="0x{catalogoColores.LABEL_VERDE_AZUL }"  width="100%" textAlign="center" fontSize="19"  fontWeight="bold"/>
					<otros:division width="100%" />
					<s:Label text="SUBTOTAL" color="0x{catalogoColores.LABEL_CASI_NEGRO }" fontWeight="bold" fontSize="12"/>
					<s:Label color="0x{ catalogoColores.LABEL_VERDE_AZUL}" id="lblSubtotal" width="100%"  fontSize="19"/>	
					<otros:divisionHueca width="100%" />
					<s:HGroup width="100%">
						<s:VGroup width="100%" height="100%" >
							<s:Label text="IVA" color="0x{catalogoColores.LABEL_CASI_NEGRO }" fontWeight="bold" fontSize="12"/>
							<s:Label color="0x{ catalogoColores.LABEL_VERDE_AZUL }" id="lblIVA" width="100%" fontSize="19" />
						</s:VGroup>
						<s:VGroup horizontalAlign="right" paddingRight="5" verticalAlign="middle" height="100%">
							<s:Image click="grabaIVA()" id="chkIVA" />
						</s:VGroup>					
					</s:HGroup>	
					<otros:divisionHueca width="100%" />
					<s:Label text="TOTAL" color="0x{catalogoColores.LABEL_CASI_NEGRO }" fontWeight="bold" fontSize="12"/>
					<s:Label color="0x{ catalogoColores.LABEL_ROJO }" id="lblTotal" width="100%"  fontSize="19" fontWeight="bold"/>
					<otros:divisionHueca width="100%" />
					<s:Label text="MONEDA" color="0x{catalogoColores.LABEL_CASI_NEGRO }" fontWeight="bold" fontSize="12"/>
					<s:HGroup width="100%" horizontalAlign="center"> 
						<s:Spacer width="20"/>
						<s:VGroup verticalAlign="middle" horizontalAlign="center" >
							<s:Image source="{catalogoBanderas.getInstance().banderaPesoMini}"  click="rbPeso.selected = true;rbDolares.selected = false;rbEuro.selected = false;  cambiaMoenda()"/>
							<s:RadioButton id="rbPeso" selected="true" click="cambiaMoenda()" groupName="radioBanderas" />
						</s:VGroup>
						<s:Spacer width="100%"/>
						<s:VGroup verticalAlign="middle" horizontalAlign="center" >
							<s:Image source="{catalogoBanderas.getInstance().banderaDolaresMini}" click="rbPeso.selected = false;rbDolares.selected = true;rbEuro.selected = false;  cambiaMoenda()"/>
							<s:Spacer height="2"/>
							<s:RadioButton id="rbDolares" click="cambiaMoenda()" groupName="radioBanderas" />
						</s:VGroup>
						<s:Spacer width="100%"/>
						<s:VGroup verticalAlign="middle" horizontalAlign="center" >
							<s:Image source="{catalogoBanderas.getInstance().banderaEuroMini}" click="rbPeso.selected = false;rbDolares.selected = false;rbEuro.selected = true; cambiaMoenda()"/>
							<s:Spacer height="0"/>
							<s:RadioButton id="rbEuro" click="cambiaMoenda()" groupName="radioBanderas"/>
						</s:VGroup>
					</s:HGroup>
					<otros:division width="100%"/>
					<s:HGroup width="100%">
						<s:Label text="TC: " color="0x{catalogoColores.LABEL_CASI_NEGRO }" textAlign="center" fontWeight="bold" height="100%" verticalAlign="middle" />
						<s:TextInput width="100%" id="txtTC" enabled="false" restrict="0-9." fontStyle="normal"/>
						<s:Group>
							<s:Image source="{ catalogoIconosGrid.getInstance().render_lapizGris }" id="imgLapizGris"/>
							<s:Image source="{ catalogoIconosGrid.getInstance().render_lapiz }" click="modificaTipoDeCambio()" visible="false" id="imgLapiz"/>
						</s:Group>
					</s:HGroup>
				</s:VGroup>
			</s:Scroller>
		</s:HGroup>
	</s:Group>
	<s:Spacer height="7" />
	<otros:divisionGruesa width="100%" />
	<s:Spacer height="7" />
	<s:HGroup width="100%" >
		<salir:botonSalir click="botonfinalizar1_clickHandler()" />
		<s:Spacer width="50%"/>
		<s:ButtonBar  id="btnBarra" selectedIndex="0" dataProvider="{_datosBarraBoton}" skinClass="skins.botoneras.botoneraGrisconLabel.skinbotoneraGrisconLabel" change="seleccionaBoton(event)" />
		<s:Spacer width="50%"/>
		<botonNegroCuadrado:botonNegroCuadrado label="FACTURAR" id="btnFacturar" enabled="false" click="generaFactura()"/>
		<!--icono="adicionales"-->
	</s:HGroup>
</s:VGroup>