<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:otros="skins.otros.*"		  		 
		  xmlns:label="skins.skin.label.*" xmlns:textinput="skins.skin.textinput.*"
		  width="100%" height="100%"
		  >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;			
			import spark.events.IndexChangeEvent;			
			import vista.eventos.EventoMonitoreoCobro;
			import vista.vistas.monitoreoCobro.itemRenderer.IRendererAsociarFacMovListCliente;
			
			[Bindable] private var _clientes:ArrayCollection;			
			
			protected function lstClientes_changingHandler(event:IndexChangeEvent):void
			{
				var evt:EventoMonitoreoCobro = new EventoMonitoreoCobro(EventoMonitoreoCobro.LLENAR_LISTA_FACTURAS);
				
				if ( lstClientes.selectedItem == null || lstClientes.selectedItem == undefined )
				{					
					evt.listaCobros = null;
					dispatchEvent(evt);
				}else{
					var copiaUni:ArrayCollection = ObjectUtil.copy(VistaDefaultAsociarFacturaMov._lstUniverso) as ArrayCollection;				
					var sqlFact:Query = new Query(copiaUni, ["nombreCliente","idCliente","factura", "diasRestantesCobro"]);
					
					var arrayFacturas: Array = sqlFact.getPunteros([lstClientes.selectedItem.nombreCliente],"","diasRestantesCobro");
					var lstTotalFac:ArrayCollection = sqlFact.armarLista(arrayFacturas);				
									
					evt.listaCobros = lstTotalFac;
					dispatchEvent(evt);
				}
			}
			
			// +++++++++++++++++++++++++++++++++++++++ BUSQUEDA +++++++++++++++++++++++++++++++++++++++
			/**
			 * funcion que busca las conincidencias en el universo de partidas segun el texto ingresado al Textinput
			 */ 
			private	var temporizador:Timer;
			private function filtroPorTexto():void
			{				
				var _listaHab:ArrayCollection = new ArrayCollection();
				var _listaDeshab:ArrayCollection = new ArrayCollection();				
				
				if (StringUtil.trim(txtbusqueda.text).length > 0 )
				{					
					if(temporizador == null)
					{
						temporizador = new Timer(500,0);
						temporizador.addEventListener(TimerEvent.TIMER,filtroPorClienteFact,false,0,true);
					}
					if(temporizador)
					{
						if(temporizador.running)
						{
							temporizador.reset();
							temporizador.start();
						}
						else
						{
							temporizador.start();
						}
					}
				}
				else
				{
					var evt:EventoMonitoreoCobro = new EventoMonitoreoCobro(EventoMonitoreoCobro.LLENADO_DE_LISTA);
					evt.listaCobros = VistaDefaultAsociarFacturaMov._lstUniverso;
					dispatchEvent(evt);
				}
			}
						
			
			/**
			 * funcion que busca las conincidencias en el universo de contactos segun el texto ingresado al Textinput
			 */ 
			public function filtroPorClienteFact(event:TimerEvent):void			
			{
				temporizador.stop();
				var sTextoBuscar:String;
				sTextoBuscar = StringUtil.trim( txtbusqueda.text);
				var arregloTe:ArrayCollection = new ArrayCollection();
				var copiaUni:ArrayCollection = new ArrayCollection();
				copiaUni = ObjectUtil.copy(VistaDefaultAsociarFacturaMov._lstUniverso) as ArrayCollection;  
				arregloTe = UtilsGrid.queryCampoXLikeDosCampos(copiaUni,"nombreCliente", "factura", sTextoBuscar);
				
				//arregloTe  = new ArrayCollection(copiaUni.source.filter(buscarCoincidencias));
				
				var evt:EventoMonitoreoCobro = new EventoMonitoreoCobro(EventoMonitoreoCobro.LLENADO_DE_LISTA);
				evt.listaCobros = arregloTe;
				dispatchEvent(evt);				
				
			}			
			
			private function generateArrayBiToArrayUni($collection:Array):Array
			{
				var arreTemp:Array = new Array()
				for ( var i:int=0;i<$collection.length;i++)
				{
					if ($collection[i].length > 1)
					{
						for(var j:int=0; j<$collection[i].length; j++)
						{
							arreTemp.push($collection[i][j]);
						}
					}
					else
						arreTemp.push($collection[i][0]);
				}
				return arreTemp;
			}			
			
			/*protected function buscarCoincidencias($item:Cobros,id:uint, array:Array):Boolean
			{
				if( $item.nombreCliente.toUpperCase().indexOf(txtbusqueda.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else if( $item.factura.toString().toUpperCase().indexOf(txtbusqueda.text.toUpperCase()) != -1 )
				{
					return true;
				}
				else{
					return false;
				}
			}*/
		]]>
	</fx:Script>
	<fx:Declarations>
		
	</fx:Declarations>
	
	<s:Rect id="fondo" width="100%" height="100%" >
		<s:filters>
			<s:DropShadowFilter alpha="1" angle="-180" blurX="9" blurY="1"
								color="#424242" distance="1" hideObject="false" inner="false"
								knockout="false" quality="3" strength="1"/>
		</s:filters>
		<s:fill>
			<s:SolidColor color="#ffffff" /><!--#eaeaea-->
		</s:fill>
	</s:Rect>
	<s:VGroup id="espacioInformacion" width="100%" height="100%" gap="0" paddingTop="10"  paddingLeft="15" paddingRight="15">
		<s:VGroup width="100%" horizontalAlign="center" gap="10" paddingBottom="20">
			<label:Titulo_16_pTop10 text="CLIENTES" backgroundAlpha="0" backgroundColor="#e9e9e9" />
			<textinput:txtInputBlancoDefaultPQNet id="txtbusqueda"  skinClass="skins.textinput.busqueda.skinTextInputBusqueda" width="100%" prompt="Cliente / Factura" fontStyle="normal" change="filtroPorTexto()" enter="filtroPorTexto()" />
		</s:VGroup>		
		<s:List id="lstClientes" borderVisible="false" horizontalScrollPolicy="off" width="100%" height="100%" contentBackgroundAlpha="0"  changing="lstClientes_changingHandler(event)" dataProvider="{_clientes}"
				itemRenderer="vista.vistas.monitoreoCobro.itemRenderer.IRendererAsociarFacMovListCliente" />
	</s:VGroup>	
</s:Group>
