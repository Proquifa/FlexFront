<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:label="skins.skin.label.*" 
		  width="100%" 
		  >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import spark.components.Label;
			
			import skins.skin.label.Texto;
			import skins.skin.label.Texto_13;
			import skins.skin.label.Titulo;
			import skins.skin.label.Titulo_12;
			import skins.skin.label.Titulo_12_pTop0;
			
			private var _texto:Array;
			private var _separador:String = "Â·";
			private var _quitarVacios:Array;
			private var _tipoDeFont:String = "normal";
			
			private var espacio:String = " ";
			private var _sinEspacio:Boolean = false;
			
			private var _tipoLabel:* = new Texto;

			public function get tipoDeFont():String
			{
				return _tipoDeFont;
			}

			public function set tipoDeFont(value:String):void
			{
				_tipoDeFont = value;
			}

			public function get texto():Array
			{
				return _texto;
			}
			
			private var _pendiente:String = "Pendiente";

			public function set texto(value:Array):void
			{
				var label:* = tipoLabel;
				espacioTexto.removeAllElements();
				if (value.length == 1 ){
					label.text += value[0];
				}
				else{
					for (var i:int = 0; i < value.length; i++) 
					{
						if (value[i] == null || value[i] == ""){
							label.text += pendiente;
						}
						else{ 
							label.text += value[i];
						}
						
						if (i != (value.length-1) ){
							label.text += espacio + separador + espacio;
						}
					}
				}
				
				espacioTexto.addElement(label);
				_texto = value;
			}
			
			

			[Inspectable(category="Text",defaultValue="Pendiente",enumeration="Pendiente,NA,ND")]
			public function get pendiente():String
			{
				return _pendiente;
			}

			public function set pendiente(value:String):void
			{
				_pendiente = value;
			}

			
			public function get separador():String
			{
				return _separador;
			}

			public function set separador(value:String):void
			{
				_separador = value;
			}

			public function get quitarVacios():Array
			{
				return _quitarVacios;
			}

			public function set quitarVacios(value:Array):void
			{
				var label:* = tipoLabel;
				espacioTexto.removeAllElements();
				for (var i:int = 0; i < value.length; i++) 
				{
					//Primer Item
					if (i == 0 ){
						if (value[i] != null && value[i] != ""){
							label.text += value[i];
						}
					}
					else{
						if (label.text != ""){
							if (value[i] != null && value[i] != ""){
								label.text += espacio + separador + espacio + value[i];
							}
						}
						else{
							if (value[i] != null && value[i] != ""){
								label.text += value[i];
							}
						}
					}
				}
				
				label.setStyle("fontWeight",tipoDeFont);
				espacioTexto.addElement(label);
				_quitarVacios = value;
			}

			[Inspectable(category="Styles",defaultValue="Texto",enumeration="Texto,Titulo_12,Texto_13,Titulo_12_pTop0")]
			public function get tipoLabel():*
			{
				if (_tipoLabel == "Texto"){
					return new Texto;
				}
				else if(_tipoLabel == "Titulo_12"){
					return new Titulo_12;
				}
				else if(_tipoLabel == "Texto_13"){
					return new Texto_13;
				}
				else if(_tipoLabel == "Titulo_12_pTop0"){
					return new Titulo_12_pTop0;
				}
				return new Texto;
			}

			public function set tipoLabel(value:*):void
			{
				_tipoLabel = value;
			}

			public function get sinEspacio():Boolean
			{
				if (_sinEspacio){
					espacio = "";
				}
				else{
					espacio = " ";
				}
				return _sinEspacio;
			}

			public function set sinEspacio(value:Boolean):void
			{
				_sinEspacio = value;
			}


		]]>
	</fx:Script>
	
	<s:HGroup width="100%" id="espacioTexto" verticalAlign="middle" />
	
</s:HGroup>
