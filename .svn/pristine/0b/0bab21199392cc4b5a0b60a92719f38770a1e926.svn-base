<?xml version="1.0" encoding="utf-8"?>
<contenedores:GroupConPaddingStandardPqNet xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:label="skins.skin.label.*" xmlns:otros="skins.otros.*" 
		 xmlns:botonesToggle="skins.botonesToggle.*" xmlns:salir="skins.botones.salir.*" xmlns:guardar="skins.botones.guardar.*"
		 xmlns:finalizar="skins.botones.finalizar.*" xmlns:botoneraGrisconLabel="skins.botoneras.botoneraGrisconLabel.*" xmlns:pqNet="skins.botones.pqNet.*"
		 xmlns:componentesInspector="vista.vistas.ev_AsesorDeVentaReqMovil.inspector_GestionarVista.inspecor_GestionarVista_comopnentes.*" 
		 xmlns:botonNegroCuadrado="skins.botones.botonNegroCuadrado.*" xmlns:contenedores="skins.skin.contenedores.*">
	

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoEsperar;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.EventoGenerico;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoGestionIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.alertPqNet.ResultAlert;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cliente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.SolicitudVisita;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.Temas;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.ventas.visita.Visita;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.alertPqNet.alertPqNet;
			import mx.utils.ObjectUtil;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotoneras;
			import skins.catalogos.catalogoIconosEtiquetas;
			import skins.catalogos.catalogoIconosGrid;
			
			import spark.components.ButtonBar;
			import spark.events.IndexChangeEvent;
			
			import vista.evento.EventoEVGestionarVisitas;
			import vista.evento.EventoEVReqMovil;
			
			[Bindable]
			public var _datosBarraBoton:ArrayCollection = new ArrayCollection([ 	{label:"Generales", icono:"generales", id:'componenteGeneral'},
																					{label:"Temas",icono:"tema", id:'componenteTemas' },
																					{label:"Situacion",icono:"situacion", id:'componenteSituacion' } ]);
			
			[Bindable]
			private var _contacto:Contacto;
			[Bindable]
			private var _cliente:Cliente;
			[Bindable]
			private var _solicitud:SolicitudVisita;
			[Bindable]
			private var _vista:Visita;
			
			/**
			 * funcion que cambia a la opcion seleccionada  del componente hijo stackPrecio.mxml
			 */ 
			private function seleccionaBoton(event:IndexChangeEvent):void{
				if( btnBarra.selectedItem != undefined ){
					componenteGeneral.visible = false;
					componenteTemas.visible = false;
					componenteSituacion.visible = false;
					this[btnBarra.selectedItem.id].visible = true;
					if( btnBarra.selectedItem.id == "componenteSituacion" ){
						componenteSituacion.cargarGraficos();
					}
				}
			}
			public function set recibeDatosGenerales( $evt:EventoEVGestionarVisitas ):void{
				if($evt == null) 
					return;
				_contacto = new Contacto();
				_cliente = new Cliente();
				_solicitud = new SolicitudVisita();
				_cliente = $evt.solicitudVista.cliente;
				_contacto = $evt.solicitudVista.contacto;
				_solicitud = $evt.solicitudVista;
				this.lblDetallesEmpresa.text = _cliente.nombre +' · '+ _cliente.nivelIngreso +' · '+ _cliente.industria +' · '+ _cliente.rol + ' · '+ _cliente.sector;
				this.lblFolioVisita.text = _solicitud.folioVisita;
				this.detalleContacto.text = _contacto.titulo+' '+ _contacto.nombre + ' · ' + _contacto.nivelPuesto + ' · ' + _contacto.departamento + ' : Nivel de decisión · ' + _contacto.nivelDecision;
				this.lblDetallesSolicitud.text = _solicitud.numSolicitudes+' solicitudes · '+_solicitud.enTiempo +  ' ET · '+_solicitud.fueraDeTiempo+' FT';
				this.lblDireeccion.text = _contacto.EMail;
				var totTemas:int = 0;
				!isNaN( _solicitud.numUrgenciaAlta ) ? totTemas = _solicitud.numUrgenciaAlta : totTemas = totTemas;
				!isNaN( _solicitud.numUrgenciaMedia ) ? totTemas = totTemas + _solicitud.numUrgenciaMedia : totTemas = totTemas;
				!isNaN( _solicitud.numUrgenciaBaja ) ? totTemas = totTemas + _solicitud.numUrgenciaBaja : totTemas = totTemas;
				this.lblDetalleTemas.text = totTemas +' temas : ' + _solicitud.numUrgenciaAlta+ ' altos · ' + _solicitud.numUrgenciaMedia + ' medio · ' + _solicitud.numUrgenciaBaja + ' bajo';
				cargaInformacion();
			}
			public function cargaInformacion():void{
				var evt:EventoEVGestionarVisitas = new EventoEVGestionarVisitas( EventoEVGestionarVisitas.CARGAR_VISITA_POR_ID_VISITA_INSPECTOR );
				evt.folio = _solicitud.folioVisita;
				dispatchEvent( evt );
			}
			
			public function set obtenerVisita( $dato:Visita ):void{
				if( $dato == null )
					return;
				_vista = new Visita();
				_vista = ObjectUtil.copy( $dato ) as Visita;
				this.componenteGeneral.recibeInformacion( $dato );
				if( $dato.fechaUltimaActualizacion != null ){
					lblFechaUltimaActualizacion.text = UtilsFecha.formatoFechaDDMMMYYYY($dato.fechaUltimaActualizacion);
					imgDisquete.visible = true;
					imgDisquete.includeInLayout = true;							
				}else{
					lblFechaUltimaActualizacion.text = 'No guardado';
					imgDisquete.visible = false;
					imgDisquete.includeInLayout = false;
				}
				this.btnFinalizar.enabled =false;
				var validaGenrales:Boolean = componenteGeneral.validarGenerales(); 
				if(componenteGeneral.validarGenerales() ){
					var validaTemas:Boolean = componenteTemas.validaTemas();
					if(validaTemas){
						this.btnFinalizar.enabled =  componenteTemas.validaSolicitudes() ;
					}
				}
			}
			protected function mostrarContacto(event:MouseEvent):void{
				var evt:EventoGenerico = new EventoGenerico( EventoGenerico.MUESTRA_POPUP_INFORMACION_CONTACTOS );		
				evt.idContacto = _contacto.idContacto;
				dispatchEvent( evt );
			}
			protected function guardarParcialmente( $dato:String = '' ):void{
				//generaObjetosA_Guardar()
				var evt:EventoEVGestionarVisitas = new EventoEVGestionarVisitas( EventoEVGestionarVisitas.GUARDA_INSPECTOR );
				evt.visita = new Visita();
				evt.listaSolicitudes = new ArrayCollection();
				evt.listaTemas = new ArrayCollection();
				evt.visita = this.componenteGeneral.regresaVisita();
				evt.listaSolicitudes = componenteTemas.regresaListaSolicitudes();
				evt.visita.solicitudes = evt.listaSolicitudes;
				evt.listaTemas = componenteTemas.regresaListaTemas();
				for( var i:int = 0; i < evt.listaTemas.length; i++ ){
					if( (evt.listaTemas[i] as Temas).idTema == 0  &&  (evt.listaTemas[i] as Temas).eliminar ){
						evt.listaTemas.removeItemAt( i );
						i--;
					}
				}
				evt.vieneDe = $dato;
				dispatchEvent( evt );
			}
			public function set confirmaGuardadoInspector( evt:EventoEVGestionarVisitas ):void{
				if( evt == null)
					return;
				if( !evt.confirmaGuardar ){
					return;
				}
				if( evt.vieneDe == 'salir' ){
					limpiaComponentes();
					salir();
				}else if( evt.vieneDe == 'finalizar' ){
					finaliza();
				}else if( evt.vieneDe == 'guardar' ){
					alertaSingleton.show( 'Se guardaron los cambios',catalogoAlertas.TIT_CONF_operacionExitosa );
					limpiaComponentes();
					cargaInformacion();
				}
			}
			private function finaliza():void{
				if( !componenteGeneral.validarGenerales() ){
					alertaSingleton.show('Es obligatorio llenar información en Generales',catalogoAlertas.TIT_ADV_informacionIncompleta);
					return;
				}
				if( !componenteTemas.validaTemas() ){
					alertaSingleton.show('Es obligatorio establecer al menos un tema para la Vista',catalogoAlertas.TIT_ADV_informacionIncompleta);
					return;
				}
				if( !componenteTemas.validaSolicitudes() ){
					alertaSingleton.show('Es obligatorio Establecer asuntos y argumentos para todas las solictudes ',catalogoAlertas.TIT_ADV_informacionIncompleta);
					return;
				}
				var evt:EventoEVGestionarVisitas = new EventoEVGestionarVisitas( EventoEVGestionarVisitas.FINALIZAR_INSPECTOR );
				evt.finalizar = true;
				evt.idVisita = _vista.idVisita;
				dispatchEvent( evt ); 
			}
			public function set confirmaFinalizar( $dato:Boolean ):void{
				if( !$dato )
					return;
				var evt:EventoEVGestionarVisitas = new EventoEVGestionarVisitas( EventoEVGestionarVisitas.CONFIRMA_FINALIZADO_INSPECCION_VISTA);
				evt.idCliente = _solicitud.cliente.idCliente;
				dispatchEvent( evt );
				alertaSingleton.show('Se finalizo correctamente la visita', catalogoAlertas.TIT_CONF_operacionExitosa );
				limpiaComponentes();
				salir();
			}
			private function salir():void{
				this.btnFinalizar.enabled = false;
				this.btnBarra.selectedIndex = 0;
				componenteGeneral.visible = true;
				componenteTemas.visible = false;
				componenteTemas.salirComponentes();
				componenteSituacion.visible = false;
				componenteSituacion.habilitaCargarGraficas();
				var evt:EventoEVReqMovil = new EventoEVReqMovil( EventoEVReqMovil.CAMBIA_SOLICITUDES );
				dispatchEvent( evt );
			}
			private function limpiaComponentes():void{
				componenteGeneral.limpiaGenerales();
				componenteTemas.limpiaTemas();
				_vista = new Visita();
			}
			protected function finalizarInspector(event:MouseEvent):void{
				if( componenteGeneral.validarGenerales() ){
					if( componenteTemas.validaTemas() ){
						if( componenteTemas.validaSolicitudes() ){
							guardarParcialmente('finalizar');
						}else{
							alertaSingleton.show('Es necesario que todas las Solicitudes cuenten con un tema y argumento', catalogoAlertas.TIT_ADV_informacionIncompleta );
						}
					}else{
						alertaSingleton.show('Es necesario que se agrege un tema', catalogoAlertas.TIT_ADV_informacionIncompleta );
					}
				}else{
					alertaSingleton.show('Es necesario llenar los campos obligatorios en Generales',catalogoAlertas.TIT_ADV_informacionIncompleta );
				}
			}
			
			private var _soloUnaVez:Boolean;
			private function warningSalir():void{
				_soloUnaVez = true;
				alertaSingleton.show( 'Antes de salir, ¿Desea guardar?',catalogoAlertas.TIT_ADV_atencion,'EVInspectorWarnigSalir','','','SI','NO')
			}
			private function warningFinalizar():void{
				_soloUnaVez = true;
				alertaSingleton.show( 'Se finalizara. ¿Son todos los datos correctos?' ,catalogoAlertas.TIT_ADV_atencion,'EVInspectorWarnigFinalizar','','','SI','NO');
			}
			public function set recibeDelAlert( $dato:ResultAlert ):void{
				if( $dato == null || $dato.vieneD == null ){
					return;
				}
				if( _soloUnaVez ){
						_soloUnaVez = false;
					if( $dato.vieneD == "EVInspectorWarnigSalir" && $dato.botonSeleccionado == "SI"){
						guardarParcialmente('salir');
					}else if( $dato.vieneD == "EVInspectorWarnigSalir" && $dato.botonSeleccionado == "NO"){
						limpiaComponentes();
						salir();
					}else if( $dato.vieneD == "EVInspectorWarnigFinalizar" && $dato.botonSeleccionado == "SI"){
						guardarParcialmente('finalizar');
					}else if( $dato.vieneD == "EVInspectorWarnigFinalizar" && $dato.botonSeleccionado == "NO"){
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" >
		
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_inspector}"/>
			<label:labelTitulo text="INSPECTOR"/>
			<s:Spacer width="100%"/>
			<label:labelTitulo text="[ GESTIÓN DE VISITA ]" color="0x{catalogoColores.LABEL_GRIS}"/>
		</s:HGroup>
		<otros:division width="100%"/>
		<s:HGroup width="100%"  paddingTop="7" paddingBottom="7" verticalAlign="middle">
			<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_planeacion }" />
			<label:labelSubtitulo  text="PLANEACIÓN" />
			<s:Spacer width="100%"/>
			<s:Label fontSize="13" color="0x{ catalogoColores.LABEL_VERDE_AZUL }" fontWeight="bold" id="lblFechaUltimaActualizacion"/>
			<s:Image source="{catalogoIconosEtiquetas.getInstance().etiquetas_disqueteVerdeAzul }" includeInLayout="false" visible="false" id="imgDisquete"/>
		</s:HGroup>
		<otros:division width="100%"/>
		<s:Spacer height="7"/>
		<s:HGroup width="100%">
			<s:VGroup verticalAlign="middle" horizontalAlign="center">
				<botonNegroCuadrado:botonNegroCuadradoPerfecto icono="contacto" gradientePqnet="false" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL}" click="mostrarContacto(event)"/>
			</s:VGroup>
			<s:Spacer width="10"/>
			<s:VGroup width="100%" height="100%">
				<s:HGroup width="100%" height="100%" verticalAlign="middle">
					<label:labelSubtitulo fontWeight="bold" fontSize="18" id="lblDetallesEmpresa"/>
					<s:Spacer width="100%"/>
					<label:labelSubtitulo fontWeight="bold" fontSize="18" color="0x{ catalogoColores.LABEL_ROJO_CLARO }" id="lblFolioVisita"/>
				</s:HGroup>
				<s:Spacer />
				<s:HGroup width="100%" height="100%" verticalAlign="middle">
					<s:Label fontSize="13" color="0x{ catalogoColores.LABEL_VERDE_AZUL }" id="detalleContacto" fontWeight="bold" />
					<s:Spacer width="100%"/>
					<s:Label fontWeight="bold" fontSize="16" id="lblDetallesSolicitud"/>
				</s:HGroup>
				<s:Spacer />
				<s:HGroup width="100%" height="100%" verticalAlign="middle">
					<s:Label fontSize="14" color="0x{ catalogoColores.LABEL_VERDE_AZUL }" id="lblDireeccion" />
					<s:Spacer width="100%"/>
					<s:Label fontWeight="bold" fontSize="13" id="lblDetalleTemas" color="0x{catalogoColores.LABEL_GRIS}"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
		<s:Spacer height="7"/>
		<otros:divisionGruesa width="100%" />
		<s:Group width="100%" height="100%" id="espacioTrabajo" >
			<componentesInspector:AsesorVenta_Inspector_Generales id="componenteGeneral" width="100%" height="100%"/>
			<componentesInspector:AsesorVentas_inspector_Temas id="componenteTemas" visible="false" width="100%" height="100%" />
			<componentesInspector:AsesorVentas_Inspector_Situacion id="componenteSituacion" visible="false" width="100%" height="100%"/>
		</s:Group>
		<s:Spacer height="7"/>
		<otros:divisionGruesa width="100%"/>
		<s:Spacer height="7"/>
		<s:HGroup width="100%">
			<salir:botonSalir id="btnSalir" click="warningSalir()"/>
			<s:Spacer width="100%"/>
			<s:ButtonBar change="seleccionaBoton(event);" id="btnBarra" selectedIndex="0" dataProvider="{_datosBarraBoton}" skinClass="skins.botoneras.botoneraGrisconLabel.skinbotoneraGrisconLabel"/>
			<s:Spacer width="100%"/>
			<guardar:botonGuardar id="btnGuardar" click="guardarParcialmente('guardar')" />
			<finalizar:botonFinalizar id="btnFinalizar" click="warningFinalizar()" enabled="false"/>
		</s:HGroup>
	</s:VGroup>
	
</contenedores:GroupConPaddingStandardPqNet>
