<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:oferta="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.comerciales.oferta.vistaOferta.*" 
		 xmlns:otros="skins.otros.*" 
		 xmlns:shaders="skins.skin.shaders.*"
		 xmlns:contenedores="skins.skin.contenedores.*"
		 xmlns:listas="mx.com.proquifa.proquifanet.rsl.vista.vistas.comun.*"
		 xmlns:pqNet="skins.botones.pqNet.*"
		 xmlns:label="skins.skin.label.*" 
		 xmlns:chekbox="skins.skin.chekbox.*"
		 depth="200" 
		 creationComplete="complete()" >
	
	<fx:Script>
		<![CDATA[
			import flash.filesystem.File;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.comerciales.oferta.EventoCatClientes_Oferta;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.comerciales.oferta.ParametrosOfertaCliente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ClasificacionConfiguracionPrecio;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ConfiguracionPrecio;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ConfiguracionPrecioProducto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Producto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Proveedor;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.comerciales.oferta.itemRender.CatClienteOferta_IR_ListaCostoEnfoque;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.comerciales.oferta.itemRender.CatClienteOferta_IR_ListaProductosEnfoque;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.zitemRenderer.comerciales.CatProOferta_IR_ListaClasificacionEnfoque;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.components.Scroller;
			import spark.events.IndexChangeEvent;
			
			private var _arregloConfiguraciones:ArrayCollection;
			private var _nivel:String;
			private var _listaUniversoCosto:ArrayCollection;
			private var _listaUniversoClasificacion:ArrayCollection;
			private var _listaUniversoProducto:ArrayCollection;
			private var _idProveedorGuardado:int;
			
			private var _enfocarCosto:Boolean = false;
			private var _enfocarProducto:Boolean = false;
			private var _enfocarClasificacion:Boolean = false;
			private var listaCostoEnGenerales:Array;
			private var listaTemporalCostos:ArrayCollection;
			private var listaTemporalClasif:ArrayCollection;
			
			private var _currentSeleccionado:ConfiguracionPrecioProducto;
			private var catNivel:String;
			private var _ConfPProducto_Gral:Number;
			private var d:int;
			public var _idCliente:Number;
			public var _tipoNivel:String;
			public var _fechasFua:Array;
			private var vertical:Number=0;
			
			private var currentProveedor:Proveedor;
			private var currentConfiguracionPrecio:ConfiguracionPrecio;
			
			private function complete():void
			{
				var scroller:Scroller;
				addEventListener(EventoCatClientes_Oferta.GUARDA_FACTOR_CLIENTE_VISTA, guarda,false,0,true);
				addEventListener(MouseEvent.MOUSE_WHEEL, list_mouseWheelHandler,false,0,true);
				
				if(this.parent.parent is Scroller)
				{
					scroller = (this.parent.parent) as Scroller;
					scroller.addEventListener(FlexMouseEvent.MOUSE_WHEEL_CHANGING,escucharCambioDeWhell,false,0,true);
				}
				lstCostoEnfoque.addEventListener(MouseEvent.MOUSE_WHEEL, lstCostoEnfoque_mouseWheelHandler, true);
				lstProductoEnfoque.addEventListener(MouseEvent.MOUSE_WHEEL, lstCostoEnfoque_mouseWheelHandler, true);
				lstClasificacionEnfoque.addEventListener(MouseEvent.MOUSE_WHEEL, lstCostoEnfoque_mouseWheelHandler, true);
			}
			
			private function escucharCambioDeWhell(ev:FlexMouseEvent):void
			{
				ev.delta = ev.delta > 0 ? 12 : -12;
				trace("Scroll: "+ev.delta);
				if(ev.shiftKey)
				{
					ev.preventDefault();
				}
			}
			
			protected function list_mouseWheelHandler(event:MouseEvent):void
			{
				event.delta = event.delta > 0 ? 12 : -12;
				trace("Scroll: "+event.delta);
				if (event.shiftKey) 
				{
					this.horizontalScrollPosition += (event.delta)*-1;
				}
			}
			
			private function limpiasTextoBusqueda():void{
				txtProducto.text = '';
				txtCosto.text = '';
			}
			
			//Aquí es dónde se agrupan los productos por nivel lista o solamente enlistar los productos para el nivel producto
			public function iniciaGenerales( $listaConfiguracion:ArrayCollection, $nivel:String, $proveedor:Proveedor ):void
			{
				grpEdicionTodosFactores.btnEditar.enabled = true;
				limpiasTextoBusqueda(); 
				_nivel = $nivel;
				
				
				currentProveedor = $proveedor;
				grpFormulaPrecioLista.isproveedorNacional = currentProveedor.isProveedorNacional;
				grpFormulaPrecioLista.currentNivel = $nivel;
				
				_arregloConfiguraciones = new ArrayCollection();
				lstCostoEnfoque.dataProvider = new ArrayCollection();
				lstProductoEnfoque.dataProvider = new ArrayCollection();
				
				var totales:ConfiguracionPrecioProducto = new ConfiguracionPrecioProducto();
				grpListaItems.visible = grpListaItems.includeInLayout = false;
				grpListaCosto.visible = grpListaCosto.includeInLayout = false;
				grpListaProducto.visible = grpListaProducto.includeInLayout = false;
				grpListaClasificacion.visible = grpListaClasificacion.includeInLayout = false;
				grpFormulaPrecioLista.visible = grpFormulaPrecioLista.includeInLayout = false;     //FIXXX   CAMBIAME
				
				
				if( $listaConfiguracion == null || $listaConfiguracion.length == 0 )
				{
					grpFormulaPrecioLista.dataProvider = new Array;
					grpFormulaPrecioLista.visible = grpFormulaPrecioLista.includeInLayout = true;
					grpFormulaPrecioLista.mouseEnabled = false;
					grpFormulaPrecioLista.mouseFocusEnabled = false;
					grpFormulaPrecioLista.mouseChildren = false;
					
					grpEdicionTodosFactores.lblTituloSeccion.text = "GENERALES";
					fondoGris.visible = false;
					grpEdicionTodosFactores.mouseEnabled = false;
					grpEdicionTodosFactores.mouseChildren = false;
					grpEdicionTodosFactores.mouseFocusEnabled = false;
					grpEdicionTodosFactores.botoneraBarra.selectedIndex = 0;
					grpEdicionTodosFactores.limpiaCampos();
					return;
				}
					
					//   ********************************************************************************************************************   JONA
				else if($listaConfiguracion.length == 0)
				{
					var fechas:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_FECHA_OFERTA_SELECCIONADO);
					dispatchEvent(fechas); 
					
					if($nivel == "Generales" || $nivel == "Clasificacion")
					{
						if($nivel == "Generales")
						{
							grpEdicionTodosFactores.lblTituloSeccion.text = "GENERALES";
							grpFormulaPrecioLista.colorBase = "gris";
							grpListaItems.visible = grpListaItems.includeInLayout = false;
						}
						else if($nivel == "Clasificacion")
						{
							grpEdicionTodosFactores.lblTituloSeccion.text = "CLASIFICACIÓN";
							grpFormulaPrecioLista.colorBase = "blanco";
							grpListaItems.visible = grpListaItems.includeInLayout = true;
							grpListaItems.mouseEnabled = false;
							grpListaItems.mouseChildren = false;
							grpListaItems.mouseFocusEnabled = false;
						}
						
						grpFormulaPrecioLista.visible = grpFormulaPrecioLista.includeInLayout = true;
						fondoGris.visible = false;
						
						grpEdicionTodosFactores.mouseEnabled = true;
						grpEdicionTodosFactores.mouseChildren = true;
						grpEdicionTodosFactores.mouseFocusEnabled = true;
						
						grpFormulaPrecioLista.mouseEnabled = false;
						grpFormulaPrecioLista.mouseFocusEnabled = false;
						grpFormulaPrecioLista.mouseChildren = false;
						
						grpFormulaPrecioLista.dataProvider = new Array;
						
					}
					else if( $nivel == 'Precio lista' || $nivel == 'Producto')
					{
						grpListaItems.visible = grpListaItems.includeInLayout = true;
						grpListaItems.mouseEnabled = true;
						grpListaItems.mouseChildren = true;
						grpListaItems.mouseFocusEnabled = true;
						fondoGris.visible = true;
						
						if( $nivel == 'Precio lista')
						{
							grpListaCosto.visible = grpListaCosto.includeInLayout = true;
							
						}
						else if($nivel == 'Producto')
						{
							grpListaProducto.visible = grpListaProducto.includeInLayout = true;
						}
					}
					
				}
				else
				{
					if($nivel == "Generales" || $nivel == "Clasificacion")
					{
						grpFormulaPrecioLista.visible = grpFormulaPrecioLista.includeInLayout = true;
						if($nivel == "Generales")
						{
							grpFormulaPrecioLista.colorBase = "gris";
							fondoGris.visible = false;
							
							if(currentConfiguracionPrecio.noProductos > 0)
							{
								grpFormulaPrecioLista.mouseEnabled = true;
								grpFormulaPrecioLista.mouseFocusEnabled = true;
								grpFormulaPrecioLista.mouseChildren = true;
							}
							else
							{
								grpFormulaPrecioLista.mouseEnabled = false;
								grpFormulaPrecioLista.mouseFocusEnabled = false;
								grpFormulaPrecioLista.mouseChildren = false;
							}
						}
						else
						{
							grpFormulaPrecioLista.colorBase = "blanco";
							fondoGris.visible = true;
							grpListaItems.visible = grpListaItems.includeInLayout = true;
							grpListaClasificacion.visible = grpListaClasificacion.includeInLayout = true;
							
							if(currentConfiguracionPrecio.noClasificaciones > 0)
							{
								grpFormulaPrecioLista.mouseEnabled = true;
								grpFormulaPrecioLista.mouseFocusEnabled = true;
								grpFormulaPrecioLista.mouseChildren = true;
								grpEdicionTodosFactores.btnEditar.enabled = true;
							}
							else
							{
								grpEdicionTodosFactores.btnEditar.enabled = false;
								grpFormulaPrecioLista.mouseEnabled = false;
								grpFormulaPrecioLista.mouseFocusEnabled = false;
								grpFormulaPrecioLista.mouseChildren = false;
							} 
						}
						
					}
					else if( $nivel == 'Precio lista' || $nivel == 'Producto')
					{
						grpFormulaPrecioLista.colorBase = "gris";
						grpListaItems.visible = grpListaItems.includeInLayout = true;
						fondoGris.visible = true;
						
						if( $nivel == 'Precio lista')
						{
							grpListaCosto.visible = grpListaCosto.includeInLayout = true;
							
						}
						else if($nivel == 'Producto')
						{
							grpListaProducto.visible = grpListaProducto.includeInLayout = true;
						}
					}
					
					grpEdicionTodosFactores.mouseEnabled = true;
					grpEdicionTodosFactores.mouseChildren = true;
					grpEdicionTodosFactores.mouseFocusEnabled = true;
				}
				//   ********************************************************************************************************************   JONA
				
				
				_arregloConfiguraciones = ObjectUtil.copy( $listaConfiguracion ) as ArrayCollection;
				
				if($nivel == "Generales" && _arregloConfiguraciones.length > 0)
				{
					grpFormulaPrecioLista.visible = grpFormulaPrecioLista.includeInLayout = true;  
					
					fondoGris.visible = false;
					
					var evt:EventoCatClientes_Oferta = new EventoCatClientes_Oferta( EventoCatClientes_Oferta.OBTENER_CONFIGURACION_FAMILIA );
					evt.idConfigFamilia = (_arregloConfiguraciones[0] as ConfiguracionPrecioProducto).idConfiguracionFamilia;
					evt.idCliente =  _idCliente;
					evt.nivelIngreso =  _tipoNivel;
					_ConfPProducto_Gral = (_arregloConfiguraciones[0] as ConfiguracionPrecioProducto).idConfiguracionPrecioProducto;
					dispatchEvent( evt ); 
					
					
					calcularItemsDeLaListaDeCostos(_arregloConfiguraciones);
				}
				else if( $nivel == 'Precio lista' )
				{
					
					grpListaItems.visible = grpListaItems.includeInLayout = true;
					grpListaCosto.visible = grpListaCosto.includeInLayout = true;
					txtCosto.text='';
					calcularItemsDeLaListaDeCostos(_arregloConfiguraciones);
					
					_listaUniversoCosto = ObjectUtil.copy( listaTemporalCostos ) as ArrayCollection;
					listaTemporalCostos.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
					enumerarLista(listaTemporalCostos);
					
					lstCostoEnfoque.dataProvider = new ArrayCollection();
					lstCostoEnfoque.dataProvider = listaTemporalCostos;
					lstCostoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
					fondoGris.visible = true;
					
					
				}//Fin IF(PRECIO LISTA)
				else if($nivel == "Clasificacion")
				{
					if(_arregloConfiguraciones.length > 0)
					{
						calcularItemsListaClasificacion(_arregloConfiguraciones); 
						
						_listaUniversoClasificacion = ObjectUtil.copy(listaTemporalClasif) as ArrayCollection;
						if(listaTemporalClasif.length > 1)
						{
							listaTemporalClasif.source.sortOn(["ordenarIsEnfocado","conceptoMinuscula"]);
						}
						enumerarLista(listaTemporalClasif);
						
						lstClasificacionEnfoque.dataProvider = new ArrayCollection;
						lstClasificacionEnfoque.dataProvider = listaTemporalClasif;
						lstClasificacionEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
					}
				}
				else if( $nivel == 'Producto' )
				{
					txtProducto.text='';
					grpListaItems.visible = grpListaItems.includeInLayout = true;
					getFuaProximo($listaConfiguracion);
					
					for(  d = 0; d < _arregloConfiguraciones.length; d++ )
					{
						( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).totalProductos = 1;
						( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).costoFactorProducto.totalPiezas =  ( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).costoFactorProducto.cantidadAA;  // calcularTotalPiezas(( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).costoFactorProducto);
						if (( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).restablecer)
						{
							( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).isEnfocado = true;
						}
						else
						{
							( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).isEnfocado = false;
						}
						
						if (( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).producto.licencia == null || ( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).producto.licencia == '--NINGUNO--' ){
							( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).producto.licencia = "";
						}
					}
					
					_listaUniversoProducto = ObjectUtil.copy( _arregloConfiguraciones ) as ArrayCollection;
					
					grpListaProducto.visible = grpListaProducto.includeInLayout = true;
					
					if(_arregloConfiguraciones.length > 1 )
					{
						_arregloConfiguraciones.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
					}
					
					enumerarLista(_arregloConfiguraciones);
					lstProductoEnfoque.dataProvider = new ArrayCollection();
					lstProductoEnfoque.dataProvider = _arregloConfiguraciones;
					lstProductoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
					fondoGris.visible = true;
				}
				_nivel = $nivel;
			}
			
			private function getFuaProximo( $configuraciones:ArrayCollection):void
			{
				_fechasFua = new Array();
				for( var d:int = 0; d < _arregloConfiguraciones.length; d++ )
				{
					( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).categoriaNivel = catNivel;
					( $configuraciones[d] as ConfiguracionPrecioProducto).categoriaNivel = catNivel;
					if ((_arregloConfiguraciones[d] as ConfiguracionPrecioProducto).fua != null)
						_fechasFua.push((_arregloConfiguraciones[d] as ConfiguracionPrecioProducto).fua);
				}
				_fechasFua.sort(ordenarFechas);   // ORDENA LAS FECHAS FUA, PARA MOSTRARLA
				var fechas:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_FECHA_OFERTA_SELECCIONADO);
				fechas.dateFUA = _fechasFua.length > 0 ? _fechasFua[0] : null;
				dispatchEvent(fechas);  // ENVIO A UN LISTENER PARA PONER EN EL LABEL DE ULTIMA FECHA
			}
			
			private function ordenarFechas(a:Date, b:Date):int
			{
				if(a.time > b.time)
					return -1;
				else if(a.time == b.time)
					return 0;
				else
					return 1;
			}
			
			protected function calcularItemsDeLaListaDeCostos($listaPrecios:ArrayCollection):void
			{
				//calcular items de la lista de costo de una vez
				listaTemporalCostos = new ArrayCollection();
				var keyConfiguraciones:Object = new Object;
				var keyPiezas:Object = new Object;
				var keyEnfoque:Object = new Object;
				var currentItem:ConfiguracionPrecioProducto;
				var currentTemp:ConfiguracionPrecioProducto;
				
				var enfoque:Boolean = false;
				
				for (var i:int = 0; i < $listaPrecios.length; i++)
				{
					currentItem = $listaPrecios[i]  as ConfiguracionPrecioProducto;
					
					if (currentItem.producto.licencia == null || currentItem.producto.licencia == '--NINGUNO--' )
						currentItem.producto.licencia = "";
					
					enfoque = true;
					currentTemp = currentItem;
					currentTemp.producto.cant = 1;
					keyConfiguraciones[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = 1;
					keyPiezas[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = currentItem.costoFactorProducto.cantidadAA; // calcularTotalPiezas(currentItem.costoFactorProducto);
					keyEnfoque[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = false;
					var currentSimboloMoneda:String = currentProveedor.monedaVentaSimbolo;
					
					currentItem.categoriaNivel = catNivel;
					listaTemporalCostos.addItem(currentItem);
					
					keyConfiguraciones[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] += 1; 
					keyPiezas[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] += currentItem.costoFactorProducto.cantidadAA;//calcularTotalPiezas(currentItem.costoFactorProducto);
					
					
					if ( currentItem.restablecerCosto) 
						keyEnfoque[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = true;
					
				}
				
				for( var x:int = 0; x < listaTemporalCostos.length; x++ )
				{
					
					currentItem = listaTemporalCostos[x]  as ConfiguracionPrecioProducto;
					
					if(keyConfiguraciones.hasOwnProperty(currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia))
					{
						currentItem.totalProductos = keyConfiguraciones[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia];
						currentItem.costoFactorProducto.totalPiezas = keyPiezas[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia];
						currentItem.isEnfocado = keyEnfoque[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia];
					}
					
				}
				
				if(listaTemporalCostos != null && listaTemporalCostos.length > 0 )
				{
					grpFormulaPrecioLista.currentMonedaVenta = currentProveedor.monedaVentaAbreviatura;
					grpFormulaPrecioLista.currentSimboloVenta = currentProveedor.monedaVentaSimbolo;
					grpFormulaPrecioLista.dataProvider = listaTemporalCostos.source;
				}
				else
				{
					grpFormulaPrecioLista.dataProvider = new Array();
				}
			}
			
			private function calcularItemsListaClasificacion($listaClasif:ArrayCollection):void
			{
				listaTemporalClasif = new ArrayCollection;
				listaTemporalClasif = ObjectUtil.copy($listaClasif) as ArrayCollection;
				
				for (var i:int = 0; i < listaTemporalClasif.length; i++) 
				{
					var currentItem:ClasificacionConfiguracionPrecio = listaTemporalClasif[i] as ClasificacionConfiguracionPrecio;
					currentItem.cantidadConceptos = 1;
					
					if(currentItem.restablecerCliente)
					{
						currentItem.isEnfocado = true;
					}else{
						currentItem.isEnfocado = false;
						
					}
				}
				
			}
			
			public function recibirNivel($catNivel:String):void
			{
				catNivel = _tipoNivel = $catNivel;	
			}
			
			//recibe configuración del nivel precio lista precio lista
			public function set recibirConfiguracionPLista(conf:ConfiguracionPrecioProducto):void
			{
				if(conf== null)
					return;
				grpEdicionTodosFactores.cargaInformacion(conf, 'Precio lista',currentProveedor);
			}
			
			//recibe configuración del nivel precio GENERALES
			public function set recibeConfiguracionFamilia( $configuraGenerales:ArrayCollection ):void{
				if( $configuraGenerales == null || $configuraGenerales.length == 0 ){
					return;
				}
				grpEdicionTodosFactores.cargaInformacion($configuraGenerales[0],"Generales",currentProveedor);
			}
			
			//RECIBE CONFIGURACION PARA LA CLASIFICACIÓN
			public function set recibirConfiguracionPrecioClasificacion(conf:ConfiguracionPrecioProducto):void
			{
				if(conf== null)
				{
					var fechas:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_FECHA_OFERTA_SELECCIONADO);
					dispatchEvent(fechas); 
					return;
				}
				
				grpEdicionTodosFactores.cargaInformacion(conf, 'Clasificacion',currentProveedor); 
			}
			
			protected function lstProductoEnfoque_itemSeleccionadoHandler(event:Event):void
			{
				var currentItem:Object = (event.currentTarget as ListaConItemsEnfocados).currentItemTarget;
				_currentSeleccionado = ObjectUtil.copy(currentItem) as ConfiguracionPrecioProducto;
				if (currentItem is ConfiguracionPrecioProducto )
				{
					
					grpEdicionTodosFactores.cargaInformacion( currentItem as ConfiguracionPrecioProducto, 'Producto', currentProveedor );
				}
				
			}
			
			
			protected function filtrarCosto():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaVisual:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _listaUniversoCosto ) as ArrayCollection;
				
				if( txtCosto.text != '' )
				{
					_listaVisual  = new ArrayCollection(listaAFiltrar.source.filter(buscarCoincidenciasCosto));
				}else
				{
					_listaVisual = ObjectUtil.copy( listaAFiltrar ) as ArrayCollection;
				}
				var totalProductos:int = 0;
				for( var i:int = 0; i < _listaVisual.length; i++ )
				{
					if ( (_listaVisual[i] as ConfiguracionPrecioProducto ).restablecerCosto)
					{
						( _listaVisual[i] as ConfiguracionPrecioProducto ).isEnfocado = true;
					} 
				}
				_listaVisual.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
				enumerarLista(_listaVisual);
				lstCostoEnfoque.dataProvider = new ArrayCollection();
				lstCostoEnfoque.dataProvider = _listaVisual;
				lstCostoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
			}
			
			protected function buscarCoincidenciasCosto($item:ConfiguracionPrecioProducto,id:uint, array:Array):Boolean
			{
				if( UtilsFormatosNumericos.redondearNEAREST_WithOutSeparator($item.producto.costo).indexOf(txtCosto.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else
				{
					return false;
				}
			}
			
			protected function filtrarProducto():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaVisual:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _listaUniversoProducto ) as ArrayCollection;
				
				if( txtProducto.text != '' )
				{
					if (checkBusqueda.selected )
					{
						_listaVisual  = new ArrayCollection(listaAFiltrar.source.filter(buscarCoincidenciasPrecioListaProducto));
					}
					else
					{
						_listaVisual  = new ArrayCollection(listaAFiltrar.source.filter(buscarCoincidenciasProducto));
					}
				}
				else
				{
					_listaVisual = ObjectUtil.copy( listaAFiltrar ) as ArrayCollection;
				}
				
				for( var i:int = 0; i < _listaVisual.length; i++ )
				{
					if (( _listaVisual[i] as ConfiguracionPrecioProducto ).restablecer)
					{
						( _listaVisual[i] as ConfiguracionPrecioProducto ).isEnfocado = true;
					}
				}
				var totales:ConfiguracionPrecioProducto = new ConfiguracionPrecioProducto();
				_listaVisual.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
				enumerarLista(_listaVisual);
				lstProductoEnfoque.dataProvider = new ArrayCollection();
				lstProductoEnfoque.dataProvider = _listaVisual;
				lstProductoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
			}
			
			protected function buscarCoincidenciasProducto($item:ConfiguracionPrecioProducto,id:uint, array:Array):Boolean
			{
				if( $item.producto.concepto.toUpperCase().indexOf(txtProducto.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else if( $item.producto.codigo.toUpperCase().indexOf(txtProducto.text.toUpperCase()) != -1 )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			
			protected function buscarCoincidenciasPrecioListaProducto($item:ConfiguracionPrecioProducto,id:uint, array:Array):Boolean
			{
				if(UtilsFormatosNumericos.redondearNEAREST_WithOutSeparator($item.producto.costo).indexOf(txtProducto.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else
				{
					return false;
				}
			}
			
			
			private function guarda( $evt:EventoCatClientes_Oferta ):void{
				var evt:EventoCatClientes_Oferta;
				var lista:ArrayCollection = new ArrayCollection();
				_idProveedorGuardado = 0;
				
				evt = new EventoCatClientes_Oferta( EventoCatClientes_Oferta.GUARDAR_FACTOR_CLIENTE_SERVICIO );	
				evt.parametrosOferta = new ParametrosOfertaCliente();
				evt.parametrosOferta.temporal = EventoCatClientes_Oferta.isTemporal;
				evt.parametrosOferta.duracionTemp = EventoCatClientes_Oferta.timeTemporal;
				
				if( _nivel == 'Producto' )
				{
					evt.parametrosOferta.idConfigPrecioProd = $evt.configuracionPrecioProducto.idConfiguracionPrecioProducto;
					evt.parametrosOferta.idCliente =_idCliente;
					evt.parametrosOferta.nivelConfigPrecio = 'Producto';
					evt.parametrosOferta.tipoNivelIngreso = _tipoNivel;
					evt.parametrosOferta.factor = $evt.factorCliente;
					evt.parametrosOferta.restablecer = $evt.solicitarRestablecer;
					_idProveedorGuardado = $evt.idProveedor; 
				}
				else if( _nivel == 'Precio lista' )
				{
					evt.parametrosOferta.idConfigPrecioProd = $evt.configuracionPrecioProducto.idConfiguracionPrecioProducto;
					evt.parametrosOferta.idCliente =_idCliente;
					evt.parametrosOferta.nivelConfigPrecio = 'Costo';
					evt.parametrosOferta.tipoNivelIngreso = _tipoNivel;
					evt.parametrosOferta.factor = $evt.factorCliente;
					evt.parametrosOferta.restablecer = $evt.solicitarRestablecer;
					_idProveedorGuardado = $evt.idProveedor; 
				}
				else if( _nivel == 'Clasificacion' )
				{
					evt.parametrosOferta.idConfigPrecioProd = $evt.IdConfiguracionPProducto;
					evt.parametrosOferta.idCliente =_idCliente;
					evt.parametrosOferta.nivelConfigPrecio = 'Clasificacion';
					evt.parametrosOferta.tipoNivelIngreso = _tipoNivel;
					evt.parametrosOferta.factor = $evt.factorCliente;
					evt.parametrosOferta.restablecer = $evt.solicitarRestablecer;
					_idProveedorGuardado = $evt.idProveedor; 
				}
				else if( _nivel == 'Generales' )
				{
					evt.parametrosOferta.idConfigPrecioProd = $evt.IdConfiguracionPProducto;
					evt.parametrosOferta.idCliente =_idCliente;
					evt.parametrosOferta.nivelConfigPrecio = 'Familia';
					evt.parametrosOferta.tipoNivelIngreso = _tipoNivel;
					evt.parametrosOferta.factor = $evt.factorCliente;
					evt.parametrosOferta.restablecer = $evt.solicitarRestablecer;
					_idProveedorGuardado = $evt.idProveedor; 
				}
				
				if($evt.solicitarRestablecerTemp)
					evt.parametrosOferta.temporal = $evt.solicitarRestablecerTemp;
				
				evt.parametrosOferta.precioListaAnterior = $evt.precioListaAnterior;
				evt.parametrosOferta.costoFijo = $evt.factorCostoFijo;
				evt.parametrosOferta.compuestaCostoF = $evt.checkCostoFijo;
				evt.parametrosOferta.compuestaFactorU = $evt.checkFactorUtilidad;
				evt.parametrosOferta.idAgente = $evt.configuracionPrecioProducto.costoFactorProducto.idAgenteAduanal;
				evt.parametrosOferta.idLugar = $evt.configuracionPrecioProducto.costoFactorProducto.idLugarAgenteAduanal;
				evt.parametrosOferta.idConcepto = $evt.configuracionPrecioProducto.costoFactorProducto.idLugarConcepto;
				evt.parametrosOferta.tiemposEntregaRuta = $evt.configuracionPrecioProducto.tiempoEntregaRuta; 
				
				
				if (evt.solicitarRestablecer)
					evt.ventana = "CatClientes_Oferta_Restablecer "+evt.nivel+"( idCliente:"+_idCliente+", idProveedor:"+_idProveedorGuardado+", IdConfiguracionPProducto:"+evt.IdConfiguracionPProducto+" )";
				else
					evt.ventana = "CatClientes_Oferta "+evt.nivel+"( idCliente:"+_idCliente+", idProveedor:"+_idProveedorGuardado+", IdConfiguracionPProducto:"+evt.IdConfiguracionPProducto+" )";
				
				dispatchEvent(evt);
			}
			
			protected function filtrarListaClasificacion():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaVisual:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _listaUniversoClasificacion ) as ArrayCollection;
				
				if( StringUtil.trim(txtClasificacion.text).length > 0 )
				{
					_listaVisual  = new ArrayCollection(listaAFiltrar.source.filter(buscarCoincidenciasClasificacion));
				}
				else
				{
					_listaVisual = listaAFiltrar;
				}
				
				for( var i:int = 0; i < _listaVisual.length; i++ )
				{
					if ( (_listaVisual[i] as ClasificacionConfiguracionPrecio ).idConfigClasificacion != (_listaVisual[i] as ClasificacionConfiguracionPrecio ).idConfigFamilia)
					{
						( _listaVisual[i] as ClasificacionConfiguracionPrecio ).isEnfocado = true;
					} 
				}
				
				if(_listaVisual.length > 1)
				{
					_listaVisual.source.sortOn(["ordenarIsEnfocado","conceptoMinuscula"],[Array.DESCENDING]);
				}
				enumerarLista(_listaVisual);
				lstClasificacionEnfoque.dataProvider = new ArrayCollection();
				lstClasificacionEnfoque.dataProvider = _listaVisual;
				lstClasificacionEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
			}
			
			protected function buscarCoincidenciasClasificacion($item:ClasificacionConfiguracionPrecio,id:uint, array:Array):Boolean
			{
				if( $item.concepto.toUpperCase().indexOf(txtClasificacion.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else
				{
					return false;
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				
				vertical =this.verticalScrollPosition;
				trace("VERTICAL: "+vertical);
				if(unscaledWidth != 0)
				{
					grpEdicionTodosFactores.width = 937;
					grpEdicionTodosFactores.percentHeight = 100;
					
					if(unscaledWidth > 1100)
					{
						if(grpListaItems.visible)
						{
							grpListaItems.width = ((unscaledWidth / 2)*.65);
							grpTodosFactores.width = (unscaledWidth - grpListaItems.width);
							
							
							grpListaItems.x = 0;
							grpListaItems.y = 0;
							grpTodosFactores.x = ((unscaledWidth / 2)*.65);
							grpTodosFactores.y = 0;
							
							if (_nivel == "Clasificacion")
							{
								grpListaItems.width = (unscaledWidth * .25);  // 350;
								grpEdicionTodosFactores.width = grpTodosFactores.width = (unscaledWidth * .50); //570;
								grpFormulaPrecioLista.width = (unscaledWidth * .25);  // 350;
								
								grpListaItems.x = 0;
								grpListaItems.y = 0;
								grpTodosFactores.x = grpListaItems.width;
								grpTodosFactores.y = 0;
								grpFormulaPrecioLista.x = grpEdicionTodosFactores.width + grpListaItems.width;
								grpFormulaPrecioLista.y=0; 
							}
						}
						else
						{
							grpTodosFactores.width = (unscaledWidth * .70); 
							grpTodosFactores.x = 0;
							grpTodosFactores.y = 0;
							
							grpFormulaPrecioLista.width = (unscaledWidth * .30);
							grpFormulaPrecioLista.x = grpTodosFactores.width;
							grpFormulaPrecioLista.y=0;
						}
						
					}
					else 
					{
						//trace("Entró al menor de 900");
						grpEdicionTodosFactores.width = 550;
						grpListaItems.width=300;
						grpTodosFactores.width = 550;
						
						if(grpListaItems.visible)
						{
							grpListaItems.x = 0;
							grpListaItems.y = 0;
							grpTodosFactores.x = grpListaItems.width;
							grpTodosFactores.y = 0;
							
							if (_nivel == "Clasificacion")
							{
								grpListaItems.x = 0;
								grpListaItems.y = 0;
								grpTodosFactores.width = 550;
								grpTodosFactores.x = grpListaItems.width;
								grpTodosFactores.y = 0;
								grpFormulaPrecioLista.width = 350;
								grpFormulaPrecioLista.x = grpTodosFactores.width + grpListaItems.width;
								grpFormulaPrecioLista.y=0;
							}
						}
						else
						{
							grpTodosFactores.width = 550;
							grpTodosFactores.x = 0;
							grpTodosFactores.y = 0;
							
							grpFormulaPrecioLista.width = 350;
							grpFormulaPrecioLista.x = grpTodosFactores.width;
							grpFormulaPrecioLista.y=0;
						}
						
					}
				} 
			} 
			
			protected function lstClasificacionEnfoque_itemSeleccionadoHandler(event:Event):void
			{
				if((event.currentTarget as ListaConItemsEnfocados).currentItemTarget is ClasificacionConfiguracionPrecio)
				{
					var listaClasifEnfoqueCurrentItem:ClasificacionConfiguracionPrecio;
					listaClasifEnfoqueCurrentItem = (event.currentTarget as ListaConItemsEnfocados).currentItemTarget as ClasificacionConfiguracionPrecio;
					
					//ESTO ES PARA LLAMAR LA CONFIGURACIÓN DE LA CLASIFICACIÓN
					if(listaClasifEnfoqueCurrentItem.totalProductos > 0)
					{
						var obtenerConfClasificacion:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.OBTENER_CONFIGURACION_CLASIFICACION);
						obtenerConfClasificacion.idCurrentSolicitud = listaClasifEnfoqueCurrentItem.idConfigFamilia;
						obtenerConfClasificacion.idClasificacion = listaClasifEnfoqueCurrentItem.idClasificacion;
						obtenerConfClasificacion.idCliente = _idCliente;
						obtenerConfClasificacion.nivelIngreso = _tipoNivel;
						dispatchEvent(obtenerConfClasificacion);
					}else{
						//COMO NO TIENE PRODUCTOS, NO SE MANDA A CONSULTAR EL SERVICIO, Y SE LIMPIAN LOS CAMPOS Y LABELS
						grpEdicionTodosFactores.limpiaCampos();
						grpEdicionTodosFactores.btnEditar.enabled = false;
						var fua:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_FECHA_OFERTA_SELECCIONADO);
						dispatchEvent(fua); 
					}
					
					
					//ESTA PARTE ES PARA LLENAR EL PANEL DE LA FORMULA, LLAMAR A LOS COSTOS RELACIONADOS CON LA CLASIFICACIÓN
					if(listaClasifEnfoqueCurrentItem.totalProductos > 0)
					{
						//grpFormulaPrecioLista.dataProvider = new ArrayCollection();
						var obtenerPreciosPorClasificacion:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.OBTENER_LOS_COSTOS_RELACIONADOS_CON_LA_CLASIFICACION_CLIENTE);
						obtenerPreciosPorClasificacion.idClasificacion = listaClasifEnfoqueCurrentItem.idClasificacion;
						obtenerPreciosPorClasificacion.nivelIngreso = _tipoNivel;
						obtenerPreciosPorClasificacion.idCliente = _idCliente;
						dispatchEvent(obtenerPreciosPorClasificacion);
						
						grpFormulaPrecioLista.mouseEnabled = true;
						grpFormulaPrecioLista.mouseFocusEnabled = true;
						grpFormulaPrecioLista.mouseChildren = true;
					}
					else
					{
						grpFormulaPrecioLista.dataProvider = new Array;
						grpFormulaPrecioLista.mouseEnabled = false;
						grpFormulaPrecioLista.mouseFocusEnabled = false;
						grpFormulaPrecioLista.mouseChildren = false;
					}
					
				}
			}
			
			protected function lstCostoEnfoque_itemSeleccionadoHandler(event:Event):void
			{
				var currentItem:Object = (event.currentTarget as ListaConItemsEnfocados).currentItemTarget;
				_currentSeleccionado = ObjectUtil.copy(currentItem) as ConfiguracionPrecioProducto;
				if (currentItem is ConfiguracionPrecioProducto )
				{
					var obtenerConfLista:EventoCatClientes_Oferta;
					if((currentItem as ConfiguracionPrecioProducto).idConfiguracionCosto == 0  && (currentItem as ConfiguracionPrecioProducto).restablecer == false)
					{
						obtenerConfLista = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.OBTENER_CONFIGURACION_PRECIO_LISTA_CONF_FAMILIA);
						obtenerConfLista.idCurrentSolicitud =  (currentItem as ConfiguracionPrecioProducto).idConfiguracionFamilia;
					}
					else
					{
						obtenerConfLista = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.OBTENER_CONFIGURACION_PRECIO_LISTA_CONF_COSTO);
						obtenerConfLista.idCurrentSolicitud =  (currentItem as ConfiguracionPrecioProducto).idConfiguracionCosto;
					}
					obtenerConfLista.idCategoriaPrecioLista = (currentItem as ConfiguracionPrecioProducto).producto.categoriaPrecioLista;
					obtenerConfLista.nivelIngreso=_tipoNivel;
					obtenerConfLista.idCliente =  _idCliente;
					dispatchEvent(obtenerConfLista);
					
					//getConfiguracionPrecioClienteCosto(Long idConfiguracionCosto,Long CategoriaPrecio, Long idCliente, String tipoNivelIngreso
				} 
				
				
				
				
				
				/*              ESTE ES EL DE JONA PARA PEDIR LA CONFIGURACION DE COSTO
				private var listaCostoEnfoqueCurrentItem:ConfiguracionPrecioProducto;
				if ((event.currentTarget as ListaConItemsEnfocados).currentItemTarget is ConfiguracionPrecioProducto )
				{
				listaCostoEnfoqueCurrentItem = (event.currentTarget as ListaConItemsEnfocados).currentItemTarget as ConfiguracionPrecioProducto;
				
				var obtenerConfLista:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.OBTENER_CONFIGURACION_PRECIO_LISTA_CONF_COSTO);
				if((listaCostoEnfoqueCurrentItem as ConfiguracionPrecioProducto).idConfiguracionCosto == 0)
				{
				obtenerConfLista.idCurrentSolicitud =  (listaCostoEnfoqueCurrentItem as ConfiguracionPrecioProducto).idConfiguracionFamilia;
				}
				else
				{
				obtenerConfLista.idCurrentSolicitud =  (listaCostoEnfoqueCurrentItem as ConfiguracionPrecioProducto).idConfiguracionCosto;
				}
				
				obtenerConfLista.idCategoriaPrecioLista = (listaCostoEnfoqueCurrentItem as ConfiguracionPrecioProducto).producto.categoriaPrecioLista;
				dispatchEvent(obtenerConfLista);
				} */
				
			}
			
			
			protected function enfoqueHandlerCosto(event:MouseEvent):void
			{
				if( _enfocarCosto )
				{
					_enfocarCosto = false;	
					lstCostoEnfoque.isEnfoqueActivado = _enfocarCosto;
					vgbtnExportarRestablecerCosto.visible= vgbtnExportarRestablecerCosto.includeInLayout = _enfocarCosto;
				}
				else
				{
					_enfocarCosto = true;
					lstCostoEnfoque.isEnfoqueActivado = _enfocarCosto;
					if (lstCostoEnfoque.dataProviderEnfocados != null && 
						lstCostoEnfoque.dataProviderEnfocados.length > 0 && 
						!lstCostoEnfoque.dataProviderEnfocados[0].hasOwnProperty("isTotales"))
					{
						vgbtnExportarRestablecerCosto.visible = vgbtnExportarRestablecerCosto.includeInLayout = _enfocarCosto;
					}
				}
				
				btnEnfoqueCosto.rendererPq =! _enfocarCosto ? "enfoque" : "enfoquedownNaranja"; 
			}
			
			protected function enfoqueHandlerClasificacion(event:MouseEvent):void
			{
				if( _enfocarClasificacion )
				{
					_enfocarClasificacion = false;	
					lstClasificacionEnfoque.isEnfoqueActivado = _enfocarClasificacion;
					grpBtnExpListaClasificacionEnfocados.visible = grpBtnExpListaClasificacionEnfocados.includeInLayout = _enfocarClasificacion;
				}
				else
				{
					_enfocarClasificacion = true;
					lstClasificacionEnfoque.isEnfoqueActivado = _enfocarClasificacion;
					if (lstClasificacionEnfoque.dataProviderEnfocados != null && 
						lstClasificacionEnfoque.dataProviderEnfocados.length > 0 && 
						!lstClasificacionEnfoque.dataProviderEnfocados[0].hasOwnProperty("isTotales"))
					{
						grpBtnExpListaClasificacionEnfocados.visible = grpBtnExpListaClasificacionEnfocados.includeInLayout = _enfocarClasificacion;
					}
					else
					{
						grpEdicionTodosFactores.limpiaCampos();
						var confi:ConfiguracionPrecioProducto = new ConfiguracionPrecioProducto;
						confi.producto = new Producto;
						var pro:Proveedor = new Proveedor;
						pro.monedaVenta= "";
						pro.monedaVentaAbreviatura= "";
						pro.monedaVentaSimbolo= "";
						grpEdicionTodosFactores.cargaInformacion(confi, 'Clasificacion',pro); 
					}
				}
				
				btnEnfoqueClasificacion.rendererPq = !_enfocarClasificacion ? "enfoque" : "enfoquedownNaranja"; 
			}
			
			protected function enfoqueHandleProducto(event:MouseEvent):void
			{
				if( _enfocarProducto )
				{
					_enfocarProducto = false;	
					lstProductoEnfoque.isEnfoqueActivado = _enfocarProducto;
					vgpbtnExportarRestablecerProducto.visible = vgpbtnExportarRestablecerProducto.includeInLayout = _enfocarProducto;
				}
				else
				{
					_enfocarProducto = true;
					lstProductoEnfoque.isEnfoqueActivado = _enfocarProducto;
					if (lstProductoEnfoque.dataProviderEnfocados != null && 
						lstProductoEnfoque.dataProviderEnfocados.length > 0 && 
						!lstProductoEnfoque.dataProviderEnfocados[0].hasOwnProperty("isTotales") ){
						vgpbtnExportarRestablecerProducto.visible = vgpbtnExportarRestablecerProducto.includeInLayout = _enfocarProducto;
					}
				}
				
				btnEnfoqueProducto.rendererPq =! _enfocarProducto ? "enfoque" : "enfoquedownNaranja";
			}
			
			protected function generaArchivoCosto(event:MouseEvent):void
			{
				var file:File = new File();
				var hoja:ArrayCollection = new ArrayCollection;
				var fila:Array = new Array;
				fila[0] = hoja.addItem("#");
				fila[1] = hoja.addItem("Total");
				fila[2] = hoja.addItem("# Productos");
				fila[3] = hoja.addItem("AA");
				fila[4] = hoja.addItem("AM");
				fila[5] = hoja.addItem("AB");
				fila[6] = hoja.addItem("MA");
				fila[7] = hoja.addItem("MM");
				fila[8] = hoja.addItem("MB");
				fila[9] = hoja.addItem("Dist.");
				fila[10] = hoja.addItem("FE.");
				fila[11] = hoja.addItem("Stock");
				fila[12] = hoja.addItem("Público");
				
				var tamano:int = lstCostoEnfoque.dataProviderEnfocados == null ? 0 : lstCostoEnfoque.dataProviderEnfocados.length -1;
				
				for(var i:int = 0; i < tamano; i++)
				{
					fila = new Array();
					fila[0] = '"' + lstCostoEnfoque.dataProviderEnfocados[i].numFila + '"';
					fila[1] = '"' + lstCostoEnfoque.dataProviderEnfocados[i].producto.costo + '"';
					fila[2] = '"' + lstCostoEnfoque.dataProviderEnfocados[i].totalProductos + '"';
					fila[3] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + '' + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoAA) + ' · ' + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialAA + '"';
					fila[4] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoAM) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialAM + '"';
					fila[5] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoAB) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialAB + '"';
					fila[6] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoMA) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialMA + '"';
					fila[7] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoMM) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialMM + '"';
					fila[8] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoMB) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialMB + '"';
					fila[9] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoDistribuidor) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialDistribuidor + '"';
					fila[10] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoFExpress) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialFExpress + '"';
					fila[11] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoStock) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialStock + '"';
					fila[12] = '"'+ lstCostoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoPublico) + " · " + lstCostoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialPublico + '"';
					hoja.addItem('\r' + fila );
				}
				file.save(hoja,"PrecioLista-" + UtilsFecha.formatoPAraGuardarFechaDDMMMYYYYHHMM(new Date) + ".csv");
			}
			
			protected function generaArchivoProducto(event:MouseEvent):void
			{
				var file:File = new File();
				var hoja:ArrayCollection = new ArrayCollection;
				var fila:Array = new Array;
				fila[0] = hoja.addItem("#");
				fila[1] = hoja.addItem("Precio");
				fila[2] = hoja.addItem("Catalogo");
				fila[3] = hoja.addItem("Concepto");
				fila[4] = hoja.addItem("AA");
				fila[5] = hoja.addItem("AM");
				fila[6] = hoja.addItem("AB");
				fila[7] = hoja.addItem("MA");
				fila[8] = hoja.addItem("MM");
				fila[9] = hoja.addItem("MB");
				fila[10] = hoja.addItem("Dist.");
				fila[11] = hoja.addItem("FE.");
				fila[12] = hoja.addItem("Stock");
				fila[13] = hoja.addItem("Publico");
				
				var tamano:int = lstProductoEnfoque.dataProviderEnfocados == null ? 0 : lstProductoEnfoque.dataProviderEnfocados.length -1;
				
				for(var i:int = 0; i < tamano; i++)
				{
					fila = new Array();
					fila[0] = '"' + lstProductoEnfoque.dataProviderEnfocados[i].numFila + '"';
					fila[1] = '"' + lstProductoEnfoque.dataProviderEnfocados[i].producto.costo + '"';
					fila[2] = '"' + lstProductoEnfoque.dataProviderEnfocados[i].producto.codigo + '"';
					fila[3] = '"' + lstProductoEnfoque.dataProviderEnfocados[i].producto.concepto + '"';
					fila[4] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoAA) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialAA + '"';
					fila[5] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoAM) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialAM + '"';
					fila[6] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoAB) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialAB + '"';
					fila[7] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoMA) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialMA + '"';
					fila[8] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoMM) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialMM + '"';
					fila[9] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoMB) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialMB + '"';
					fila[10] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoDistribuidor) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialDistribuidor + '"';
					fila[11] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoFExpress) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialFExpress + '"';
					fila[12] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoStock) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialStock + '"';
					fila[13] = '"'+ lstProductoEnfoque.dataProviderEnfocados[i].producto.monedaSimboloString + " " + UtilsFormatosNumericos.precisionADosDecimalesConComas(lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.montoPublico) + " · " + lstProductoEnfoque.dataProviderEnfocados[i].costoFactorProducto.diferencialPublico + '"';
					hoja.addItem('\r' + fila );
				}
				file.save(hoja,"Producto-" + UtilsFecha.formatoPAraGuardarFechaDDMMMYYYYHHMM(new Date) + ".csv");
			}
			
			private function generaArchivoClasificacion(event:MouseEvent):void
			{
				var file:File = new File();
				var hoja:ArrayCollection = new ArrayCollection;
				var fila:Array = new Array;
				fila[0] = hoja.addItem("#");
				fila[1] = hoja.addItem("Concepto");
				fila[2] = hoja.addItem("No. Productos");
				
				var tamano:int = lstClasificacionEnfoque.dataProviderEnfocados == null ? 0 : lstClasificacionEnfoque.dataProviderEnfocados.length -1;
				
				for(var i:int = 0; i < tamano; i++)
				{
					fila = new Array();
					fila[0] = '"' + lstClasificacionEnfoque.dataProviderEnfocados[i].numFila + '"';
					fila[1] = '"' + lstClasificacionEnfoque.dataProviderEnfocados[i].concepto + '"';
					fila[2] = '"' + lstClasificacionEnfoque.dataProviderEnfocados[i].totalProductos + '"';
					hoja.addItem('\r' + fila );
				}
				file.save(hoja,"Producto-" + UtilsFecha.formatoPAraGuardarFechaDDMMMYYYYHHMM(new Date) + ".csv");
			}
			
			private function armartextosParaBotonesNivelesIngreso($currentItem:ConfiguracionPrecioProducto):void
			{
				if($currentItem)
				{
					$currentItem.costoFactorProducto.precioUAA_String ="AA · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUAA) + " · " + $currentItem.costoFactorProducto.diferencialAA + "%";
					$currentItem.costoFactorProducto.precioUAM_String ="AM · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUAM) + " · " + $currentItem.costoFactorProducto.diferencialAM + "%";
					$currentItem.costoFactorProducto.precioUAB_String ="AB · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUAB) + " · " + $currentItem.costoFactorProducto.diferencialAB + "%";
					$currentItem.costoFactorProducto.precioUBajo_String ="BAJO · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUBajo) + " · " + $currentItem.costoFactorProducto.diferencialBajo + "%";
					$currentItem.costoFactorProducto.precioUDistribuidor_String ="Dist · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUDistribuidor) + " · " + $currentItem.costoFactorProducto.diferencialDistribuidor + "%";
					
					$currentItem.costoFactorProducto.precioUMA_String ="MA · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUMA) + " · " + $currentItem.costoFactorProducto.diferencialMM + "%";
					$currentItem.costoFactorProducto.precioUMM_String ="MM · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUMM) + " · " + $currentItem.costoFactorProducto.diferencialMM + "%";
					$currentItem.costoFactorProducto.precioUMB_String ="MB · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUMB) + " · " + $currentItem.costoFactorProducto.diferencialMB + "%";
					$currentItem.costoFactorProducto.precioUFExpress_String ="FE · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUFExpress) + " · " + $currentItem.costoFactorProducto.diferencialFExpress + "%";
					$currentItem.costoFactorProducto.precioUStock_String ="Stock · "+ currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUStock) + " · " + $currentItem.costoFactorProducto.diferencialStock + "%";
					$currentItem.costoFactorProducto.precioUPublico_String = currentProveedor.monedaVentaSimbolo + UtilsFormatosNumericos.precisionADosDecimalesConComas($currentItem.costoFactorProducto.precioUPublico) + " · " + $currentItem.costoFactorProducto.diferencialPublico + "%";
				}
			}
			private function enumerarLista($array:ArrayCollection):void
			{
				for (var i:int = 0; i < $array.length; i++)
				{
					$array[i].numFila = i + 1;
				}
			}
			
			private function changePrompt():void{
				if(checkBusqueda.selected)
				{
					txtProducto.prompt = 'Precio Lista';
					txtProducto.restrict = "0-9.";
				}
				else
				{
					txtProducto.prompt =  'Producto';
					txtProducto.restrict = null;
				}
			}
			
			protected function lstClasificacionEnfoque_desenfoqueAutomaticoHandler(event:Event):void
			{
				btnEnfoqueClasificacion.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
			
			public function set recibeConfiguracionSeleccionada($confg:ConfiguracionPrecio):void
			{
				if($confg == null)
				{
					return;
				}
				currentConfiguracionPrecio = $confg;
			}
			
			public function set recibeCostosRelacionadosConLaClasificacion($costos:ArrayCollection):void
			{
				if($costos == null)
					return;
				
				for (var i:int = 0; i < $costos.length; i++) 
				{
					armartextosParaBotonesNivelesIngreso($costos[i] as ConfiguracionPrecioProducto); 
				}
				
				grpFormulaPrecioLista.dataProvider = $costos.source;
			}
			
			protected function restablecerTodasConfiguracionesPorNivel($nivel:String):void
			{
				var event:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.RESTABLECER_TODAS_CONFIGURACIONES_POR_NIVEL);
				event.nivel = $nivel;
				if ($nivel == 'Clasificacion'){
					event.idConfigFamilia = currentConfiguracionPrecio.idConfiguracionPrecio;
					event.ventana = "CatClientes_Oferta "+ event.nivel + " (idCliente:" + _idCliente + ", idProveedor:" + currentProveedor.idProveedor + 
						", idCofigFamilia:"+ currentConfiguracionPrecio.idConfiguracionPrecio +" )";
				}else{
					event.idConfigFamilia = _currentSeleccionado.idConfiguracionFamilia;
					event.ventana = "CatClientes_Oferta "+ event.nivel + " (idCliente:" + _idCliente + ", idProveedor:" + _currentSeleccionado.idProveedor + 
						", idCofigFamilia:"+ _currentSeleccionado.idConfiguracionFamilia +" )";
				}
				event.idCliente = _idCliente;
				dispatchEvent(event);
				
			}
			
			public function set confirmarRestablecerTodasConfiguraciones($dato:Boolean ):void{
				if ($dato){ 
					dispatchEvent(new EventoCatClientes_Oferta(EventoCatClientes_Oferta.SOLICITAR_ACTUALIZACION_DE_LAS_CONFIGURACIONES_CLIENTE));
				}
			}
			
			protected function lstCostoEnfoque_desenfoqueAutomaticoHandler(event:Event):void
			{
				btnEnfoqueCosto.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			
			}
			
			protected function lstProductoEnfoque_desenfoqueAutomaticoHandler(event:Event):void
			{
				btnEnfoqueProducto.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
			
			protected function lstCostoEnfoque_mouseWheelHandler(event:MouseEvent):void
			{
				event.delta = event.delta > 0 ? 3 : -3;
				trace("Scroll: "+event.delta);
			}
		]]>
	</fx:Script>
	
	<s:Group id="grpListaItems" height="100%" visible="false" includeInLayout="false">
		<s:Rect id="fondo" width="100%" height="100%" >
			
			<s:fill>
				<s:SolidColor color="white" />
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" height="100%" >
			<s:VGroup width="100%" height="100%" paddingLeft="15" paddingTop="10" paddingBottom="10" gap="0" id="grpListaCosto">
				<s:VGroup width="100%" horizontalAlign="center" gap="10">
					<s:Group width="100%" >
						<s:HGroup width="100%" horizontalAlign="right" paddingRight="20">
							<pqNet:botonPqNetLargo id="btnEnfoqueCosto"  rendererPq="enfoque" click="enfoqueHandlerCosto(event)" verticalCenter="0" horizontalCenter="0"  />
						</s:HGroup>
					</s:Group>
				</s:VGroup>
				<s:TextInput fontStyle="normal" id="txtCosto" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" prompt="Costo" change="filtrarCosto()" enter="filtrarCosto()"  restrict="0-9."/>
				<s:Spacer height="20"/>
				<listas:ListaConItemsEnfocados id="lstCostoEnfoque" width="100%" height="100%"
											   itemRenderer1="{CatClienteOferta_IR_ListaCostoEnfoque}"
											   desenfoqueAutomatico="lstCostoEnfoque_desenfoqueAutomaticoHandler(event)"
											   itemSeleccionado="lstCostoEnfoque_itemSeleccionadoHandler(event)" areClikeablesDesenfocados="true"
											   propiedadesASumar="{['producto.cant','totalProductos']}"
											   etiquetasTotal="{([{singular:'Costo',plural:'Costos'},{singular:'Producto',plural:'Productos'}])}"
											   generarKey="{(['producto.categoriaPrecioLista','producto.licencia'])}"/>
				
				<s:VGroup id="vgbtnExportarRestablecerCosto" width="100%" horizontalAlign="center" gap="10" visible="false" includeInLayout="false">
					<otros:division width="100%" />
					<s:HGroup width="100%">
						<pqNet:botonPqNetLargo label="Restablecer Todo" click="restablecerTodasConfiguracionesPorNivel('Costo')"/>
						<s:Spacer width="100%"/>
						<pqNet:botonPqNetLargo id="btnExportarCosto" icono="exportar" label="Exportar" click="generaArchivoCosto(event)" right="0" verticalCenter="0" />
					</s:HGroup>
				</s:VGroup>
				
			</s:VGroup>
			<s:VGroup width="100%" height="100%" paddingLeft="15" paddingTop="10" paddingBottom="10" gap="0" id="grpListaProducto">
				<s:VGroup width="100%" horizontalAlign="center" gap="10">
					<s:Group width="100%" >
						<s:HGroup width="100%" horizontalAlign="center">
							<chekbox:CheckBoxPq id="checkBusqueda" selected="false" labelLeft="Producto" labelRight="Precio Lista" left="0" verticalCenter="0" width="180" change="filtrarProducto(); changePrompt();" />
						</s:HGroup>
						<s:HGroup width="100%" horizontalAlign="right" paddingRight="20">
							<pqNet:botonPqNetLargo id="btnEnfoqueProducto"  rendererPq="enfoque" click="enfoqueHandleProducto(event)" verticalCenter="0" horizontalCenter="0"  />
						</s:HGroup>
					</s:Group>
				</s:VGroup>
				<s:TextInput fontStyle="normal" id="txtProducto" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" prompt="Producto" change="filtrarProducto()" enter="filtrarProducto()" />		
				<s:Spacer height="20"/>
				<listas:ListaConItemsEnfocados id="lstProductoEnfoque" width="100%" height="100%"
											   itemRenderer1="{CatClienteOferta_IR_ListaProductosEnfoque}"
											   desenfoqueAutomatico="lstProductoEnfoque_desenfoqueAutomaticoHandler(event)"
											   itemSeleccionado="lstProductoEnfoque_itemSeleccionadoHandler(event)"
											   propiedadesASumar="{'totalProductos'}" areClikeablesDesenfocados="true"
											   etiquetasTotal="{([{singular:'Producto',plural:'Productos'}])}"
											   generarKey="{(['producto.categoriaPrecioLista','producto.idProducto','producto.licencia'])}"/>
				
				<s:VGroup id="vgpbtnExportarRestablecerProducto" width="100%" horizontalAlign="center" gap="10" visible="false" includeInLayout="false">
					<otros:division width="100%" />
					<s:HGroup width="100%">
						<pqNet:botonPqNetLargo label="Restablecer Todo" click="restablecerTodasConfiguracionesPorNivel('Producto')"/>
						<s:Spacer width="100%"/>
						<pqNet:botonPqNetLargo id="btnExportarProducto" icono="exportar" label="Exportar" click="generaArchivoProducto(event)" right="0" verticalCenter="0" />
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
			
			<s:VGroup width="100%" height="100%" paddingLeft="15" paddingTop="10" paddingBottom="10" gap="0" id="grpListaClasificacion">
				<s:VGroup width="100%" horizontalAlign="right" gap="10">
					<s:Group width="100%" >
						<s:HGroup width="100%" horizontalAlign="right" paddingRight="20">
							<pqNet:botonPqNetLargo id="btnEnfoqueClasificacion"  rendererPq="enfoque" click="enfoqueHandlerClasificacion(event)" verticalCenter="0" horizontalCenter="0"  />
						</s:HGroup>
					</s:Group>
				</s:VGroup>
				<s:TextInput fontStyle="normal" id="txtClasificacion" width="100%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" prompt="Concepto" change="filtrarListaClasificacion()" enter="filtrarListaClasificacion()"/>
				<s:Spacer height="20"/>
				<listas:ListaConItemsEnfocados id="lstClasificacionEnfoque" width="100%" height="100%"
											   itemRenderer1="{CatProOferta_IR_ListaClasificacionEnfoque}"
											   itemSeleccionado="lstClasificacionEnfoque_itemSeleccionadoHandler(event)" 
											   propiedadesASumar="{'cantidadConceptos'}" areClikeablesDesenfocados="true"
											   desenfoqueAutomatico="lstClasificacionEnfoque_desenfoqueAutomaticoHandler(event)"
											   etiquetasTotal="{([{singular:'Concepto',plural:'Conceptos'}])}"
											   generarKey="{(['idClasificacion'])}"
											   />
				<s:VGroup id="grpBtnExpListaClasificacionEnfocados" width="100%" horizontalAlign="right" gap="10" visible="false" includeInLayout="false">
					<otros:division width="100%" />
					<s:HGroup width="100%" gap="0">
						<pqNet:botonPqNetLargo label="Restablecer Todo" click="restablecerTodasConfiguracionesPorNivel('Clasificacion')" width="145" />
						<s:Spacer width="100%"/>
						<pqNet:botonPqNetLargo icono="exportar" label="Exportar" click="generaArchivoClasificacion(event)" width="145" />
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
			
			<s:Spacer width="8"/>
		</s:HGroup>
	</s:Group>
	
	<s:Group height="100%" id="grpTodosFactores" >
		<s:Rect id="fondoGris" width="100%" height="100%" visible="false">
			<s:filters>
				<shaders:sombraBevelFilter direccion="left"/>
			</s:filters>
			<s:fill>
				<s:SolidColor color="#eaeaea" />
			</s:fill>
		</s:Rect>
		<contenedores:VGroupConPaddingStandardPqNet height="100%" horizontalCenter="0" horizontalAlign="center" width="60%">
			<oferta:CatClientes_VOferta_Panel id="grpEdicionTodosFactores" />
		</contenedores:VGroupConPaddingStandardPqNet>
	</s:Group>
	
	
	<oferta:CatClientes_PanelFactoresPrecio id="grpFormulaPrecioLista" height="100%" />
</s:Group>
