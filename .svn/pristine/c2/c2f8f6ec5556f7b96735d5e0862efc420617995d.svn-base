<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 xmlns:otros="skins.otros.*" 
		 xmlns:contenedores="skins.skin.contenedores.*" 
		 xmlns:label="skins.skin.label.*" 
		 xmlns:pqNet="skins.botones.pqNet.*"
		 xmlns:lstscrl="skins.spark.components.*"  
		 xmlns:mapas="mx.com.proquifa.proquifanet.rsl.vista.mapas.catalogos.proveedores.*"
		 xmlns:direccion="mx.com.proquifa.proquifanet.rsl.vista.mapas.catalogos.proveedores.generales.*"
		 xmlns:mapasComerciales="mx.com.proquifa.proquifanet.rsl.vista.mapas.catalogos.proveedores.comerciales.*"
		 xmlns:mapasTecnicos="mx.com.proquifa.proquifanet.rsl.vista.mapas.catalogos.proveedores.tecnicos.*" 
		 xmlns:mapasLogistica="mx.com.proquifa.proquifanet.rsl.vista.mapas.catalogos.proveedores.acuerdos.*" 
		 xmlns:mapasEstadisticas="mx.com.proquifa.proquifanet.rsl.vista.mapas.catalogos.proveedores.estadisticas.*" 
		 xmlns:botonesToggle="skins.botonesToggle.*"
		 xmlns:catalogos="skins.skin.comun.catalogos.*"
		 xmlns:botBusq="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.*"
		 width="100%" height="100%" xmlns:layouts="skins.layouts.*"
		 >
	<fx:Declarations>
		<mapas:MapaCatProGenerales/>
		<mapas:MapaCatProContactos/>
		<mapasComerciales:MapaCatProOferta/>
		<mapasComerciales:MapaCatProMarcas/>
		<mapasTecnicos:MapaCatProProductos/>
		<mapasTecnicos:MapaCatProLicencias />
		<mapasLogistica:MapaCatProLogistica />
		<mapasTecnicos:MapaCatProClasificacion dispatcher="{this}"/>
		<mapasLogistica:MapaCatProAcuerdos dispatcher="{this}"/>
		<mapasEstadisticas:MapaCatProEstadisticasGenerales dispatcher="{this}"/>
		<direccion:MapaCatProDirecciones dispatcher="{this}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.core.mate;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.proveedores.EventoCatProGeneral;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Proveedor;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.core.mx_internal;
			import mx.events.ResizeEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import skins.catalogos.catalogoColores;
			
			import spark.events.IndexChangeEvent;
			
			private var _habilitados:ArrayCollection;
			private var _deshabilitados:ArrayCollection;
			private var _arregloSinImagenes:ArrayCollection;
			
			private var _universosProveedores:ArrayCollection;
			private var _currentItem:Proveedor;
			private var _idProveedor:int = 0;
			private var findOneImagen:Boolean = false;
			private var pasoDivideProveedor:Boolean;
			private var _componenteZonaTrabajo:CatProZonaTrabajo = null;
			
			
			private var arrayKeyConImagenes:Object;
			private var seConstruyoDeshabilitados:Boolean = false;
			private var itemsEnPantalla:int = 7;
			private var cambioNumItems:Boolean = false;
			
			public static var agregarProveedor:Boolean = false;
			
			[Bindable] private var _arrButton:ArrayCollection = new ArrayCollection
				([  
					{ valor:'Habilitados', colorBase: catalogoColores.LABEL_VERDE_AZUL, fontSize:14 }, 
					{ valor:'Deshabilitados', colorBase: catalogoColores.LABEL_VERDE_AZUL, fontSize:14 }
				] );
			
			/**
			 * al crearse el componente se solicitan todos los proveedores
			 */ 
			public function iniciarCatalogoProveedores():void
			{
				botoneraProveeHabDesHabilitados.selectedIndex = 0;
				_habilitados= null;
				_deshabilitados= null;
				_arregloSinImagenes = null;
				_universosProveedores = null;
				_currentItem = null;
				_idProveedor = 0;
				findOneImagen = false;
				pasoDivideProveedor = false;
				arrayKeyConImagenes = null;
				seConstruyoDeshabilitados = false;
				itemsEnPantalla = 7;
				cambioNumItems = false;
				
				
				addEventListener( ResizeEvent.RESIZE, recreaVista,false,0,true );
				//addEventListener( EventoCatProGeneral.CAMBIA_VISTA_MENU_PROVEEDORES,cambiaVista,false,0,true );
				btnBusqueda.addEventListener(EventoCatProGeneral.ENVIO_PROVEDORES_BUSCADOS,recibeBusqueda,false,0,true);
				var $evt:EventoCatProGeneral = new EventoCatProGeneral( EventoCatProGeneral.OBTENER_PROVEEDORES );
				$evt.empleado = DatosGlobales.getInstance()._usuario;
				$evt.busquedaProveedores = 'Todos';
				dispatchEvent($evt);
				
			}
			
			/**
			 * al recibirse los proveedores, se solicitan las imagenes
			 */ 
			public function set recibeProveedores($datos:ArrayCollection):void
			{
				if( $datos == null || $datos.length == 0 ){
					return;
				}
				
				_universosProveedores = new ArrayCollection();
				_habilitados = new ArrayCollection();
				_deshabilitados = new ArrayCollection();
				_universosProveedores = ObjectUtil.copy( $datos ) as ArrayCollection;
				
				//Optimización para recorrido en busca de las imágenes de cada proveedor
				arrayKeyConImagenes = new Object;
				var _arrTempSinImagenes:Array = ObjectUtil.copy( $datos.source ) as Array;
				var temp:Array = _arrTempSinImagenes.filter(quitarProveedoresSinImagen);
				_arrTempSinImagenes = null;
				_arregloSinImagenes = new ArrayCollection(temp);
				
				solicitaImagenes();
				
			}
			
			/**
			 *permitira iniciar y/o continuar la solicitud de imagenes
			 */ 
			private function solicitaImagenes():void
			{
				
				for( var i:int = 0 ; i < _arregloSinImagenes.length; i++ )
				{
					_currentItem = ObjectUtil.copy( _arregloSinImagenes[ i ] ) as Proveedor;
					if( _currentItem.imagen != null && _currentItem.imagen != '' ){ //se evalua si al proveedor se le a insertado un aimegn o no para evitar la solictud y disminuir el tiempo el proceso
						findOneImagen = true;
						var variables:URLLoader = new URLLoader();
						var request:URLRequest = new URLRequest();
						variables.dataFormat = URLLoaderDataFormat.BINARY;
						
						request = new URLRequest("http://" + Destinos.ipUsandose+'/logoProveedores/' + _currentItem.idProveedor +'.' + _currentItem.imagen); //ip oscar
						
						request.idleTimeout = 1*1000;
						
						variables.addEventListener(Event.COMPLETE, completeHandlerProveedores);
						variables.addEventListener(IOErrorEvent.IO_ERROR, completeHandlerErrorProveedores);
						
						try
						{
							variables.load(request);
						} 
						catch (error:Error)
						{
							trace( "Unable to load URL: " + error );
						}
						
						_arregloSinImagenes.length > 0 ? _arregloSinImagenes.removeItemAt( i ) : null;
						i = _arregloSinImagenes.length;
					}
				}
				if (!findOneImagen)
				{
					divideTipoProveedor();
					findOneImagen = false;
				}
			}
			/**
			 * recibe sel request la imagen, se valida si existe la 
			 */ 
			private function completeHandlerErrorProveedores(event:Event):void
			{
				var loader:URLLoader = URLLoader(event.target);
				var bytes:ByteArray = new ByteArray();
				trace("no existe archivo PROVEEDORES=================dsfsfsdfsdfsd" + _currentItem.idProveedor + " : " + _currentItem.nombre);	
				bytes = null;
				
				remueveDatos();
			}
			
			private function completeHandlerProveedores(event:Event):void
			{
				var loader:URLLoader = URLLoader(event.target);
				var bytes:ByteArray = new ByteArray();
				try{
					bytes = loader.data;
				}catch (error:*){
					trace("no existe archivo COMPLETE EOROROROR");
					bytes = null;
				}
				
				if(arrayKeyConImagenes.hasOwnProperty(_currentItem.idProveedor)){
					var posicionProveedor:uint = arrayKeyConImagenes[_currentItem.idProveedor] as Number;
					(_universosProveedores[posicionProveedor] as Proveedor).bitsImagen = bytes;
				}
				
				remueveDatos();
			}
			
			
			private function quitarProveedoresSinImagen($item:Proveedor, $id:uint,$array:Array):Boolean
			{
				
				if($item.imagen == null || StringUtil.trim($item.imagen).length <= 0)
				{
					return false;
				}
				else
				{
					arrayKeyConImagenes[$item.idProveedor] = $id;
					return true;
				}
			}
			
			private function remueveDatos():void
			{
				if( _arregloSinImagenes.length > 0 )
				{  //si aun existen datos se continuan solicitando las imagenes
					solicitaImagenes();
				}
				else
				{	//si ya no existen mas datos se continua generarndo la vista
					divideTipoProveedor();
				}
			}
			
			private function divideTipoProveedor():void
			{
				pasoDivideProveedor = false;
				lblHabilitados.text ="0 Proveedores";
				
				for( var i:int = 0; i < _universosProveedores.length ; i++ )
				{
					if( (_universosProveedores[i] as Proveedor).habilitado == false )
					{
						_deshabilitados.addItem( _universosProveedores[i] );
					}
					else if( (_universosProveedores[i] as Proveedor).habilitado )
					{
						_habilitados.addItem( _universosProveedores[i] );
					}
					
					if( _idProveedor != 0 && (_universosProveedores[i] as Proveedor).idProveedor == _idProveedor )
					{
						_componenteZonaTrabajo.recibeProveedorCiclo( _universosProveedores[i] as Proveedor );
					}
				}
				
				if(botoneraProveeHabDesHabilitados.selectedIndex == 0)
					btnBusqueda.recibeProveedores(_habilitados);
				else
					btnBusqueda.recibeProveedores(_deshabilitados);
			}
			
			private function generaRenglones( $listas:ArrayCollection, $tipo:String, $elementosPorRenglon:int = 7 ):void
			{
				var arregloTemp:ArrayCollection = new ArrayCollection();
				var lista:Array= new Array();
				var numFilas:uint;
				
				lista = ObjectUtil.copy( $listas.source ) as Array;
				
				numFilas = (lista.length) / $elementosPorRenglon;
				
				if(((lista.length) % $elementosPorRenglon) > 0 )
				{
					numFilas ++;
				}
				
				for( var i:int = 0; i < numFilas; i++  )
				{
					var tem:Array = new Array;
					if(i == (numFilas-1))
					{
						tem = lista.slice((i*$elementosPorRenglon));
					}
					else
					{
						tem = lista.slice((i*$elementosPorRenglon),((i+1)*$elementosPorRenglon));
					}
					
					arregloTemp.addItem( new ArrayCollection(tem));
				}
				
				lstHabilitados.dataProvider = new ArrayCollection();
				lstHabilitados.dataProvider = ObjectUtil.copy( $listas ) as ArrayCollection;
				lista.length == 1 ? lblHabilitados.text = '1 Proveedor' : lblHabilitados.text = lista.length+ ' Proveedores';
			}
			
			/**
			 * esta funcion permite re_hacer la vista segun el tama√±o de la ventana 
			 */ 
			private function recreaVista( $evt:Event ):void{
				cambioNumItems = false;
				
				if( width < 1200 )
				{
					if(itemsEnPantalla != 5 )
					{
						seConstruyoDeshabilitados = false; 
						cambioNumItems = true;
					}
					itemsEnPantalla = 5 ;
				}
				
				if( width > 1200 && width < 1500 )
				{ 
					if(itemsEnPantalla != 6 )
					{
						seConstruyoDeshabilitados = false;
						cambioNumItems = true;
					}
					itemsEnPantalla = 6 ;
				}
				
				if( width > 1500 )
				{ 
					if(itemsEnPantalla != 7 )
					{
						seConstruyoDeshabilitados = false;
						cambioNumItems = true;
					}
					itemsEnPantalla = 7; 
				}
				
				if( grpHabilitados.visible && cambioNumItems  )
				{
					/* 	if( busquedaHabilitados.text  != "")
					{
					filtroPorTexto( 'habilitados' );
					}else
					{
					generaRenglones( _habilitados, 'habilitados', itemsEnPantalla );
					} */
				}
				else if( grpHabilitados.visible && cambioNumItems )
				{
					/* 	if( busquedaDeshabilitados.text  != "")
					{
					filtroPorTexto( 'desHabilitados' );
					}
					else
					{
					generaRenglones( _deshabilitados, 'deshabilitados', itemsEnPantalla );
					} */
				}
			}
			
			/**
			 * agregamos o reutilizamos la seccion de trabajo
			 */ 
			private function cambiaVista( $evt:EventoCatProGeneral ):void
			{
				zonaTrabajo.visible = zonaTrabajo.includeInLayout = false; 
				
				if( _componenteZonaTrabajo == null )
				{
					_componenteZonaTrabajo = new CatProZonaTrabajo();
					zonaTrabajo.addElement( _componenteZonaTrabajo );
				}
				
				if( $evt.vieneDe == 'proveedores' )
				{
					grpProveedores.visible = grpProveedores.includeInLayout = false;
					zonaTrabajo.visible = zonaTrabajo.includeInLayout = true; 
					_componenteZonaTrabajo.recibeProveedor( $evt.proveedorSeleccionado );
					/* _componenteZonaTrabajo.deSeleccion(); */
				}
				else
				{
					grpProveedores.visible = grpProveedores.includeInLayout = true;
				}
			}
			
			protected function botoneraBarra_changingHandler(event:IndexChangeEvent):void
			{
				if((event.currentTarget as ButtonBarColores).selectedItem == null)
				{
					event.preventDefault();
				}
				else
				{
					if( botoneraProveeHabDesHabilitados.selectedItem != undefined )
					{
						var $dato:String = '';
						botoneraProveeHabDesHabilitados.selectedItem.valor == 'Habilitados' ? $dato = 'habilitados' : $dato = 'deshabilitados';
						
						if( $dato == 'deshabilitados' )
						{
							if( !seConstruyoDeshabilitados )
							{
								if(_deshabilitados == null)
									btnBusqueda.recibeProveedores(new ArrayCollection());
								else
									btnBusqueda.recibeProveedores(_deshabilitados);
								
								btnBusqueda.switchClientes();
							}
						}
						else
						{
							if( !seConstruyoDeshabilitados )
							{
								if(_habilitados == null)
									btnBusqueda.recibeProveedores(new ArrayCollection());
								else
									btnBusqueda.recibeProveedores(_habilitados);
								btnBusqueda.switchClientes();
							}
						}
					}
				}
			}
			
			protected function agregarNuevoProveedor(event:MouseEvent):void
			{
				agregarProveedor = true;
				/* var evt:EventoCatProGeneral = new EventoCatProGeneral( EventoCatProGeneral.CAMBIA_VISTA_MENU_PROVEEDORES );
				evt.proveedorSeleccionado = new Proveedor();
				evt.vieneDe = 'proveedores';
				dispatchEvent( evt ); */
				
				var evt:EventoCatProGeneral = new EventoCatProGeneral(EventoCatProGeneral.CAMBIA_VISTAS_NIVEL_SUPERIOR_CAT_PROVEEDORES);
				evt.proveedorSeleccionado = new Proveedor();
				evt.vieneDe = "vistaTodosLosProveedores";
				dispatchEvent(evt);
				
			}
			
			public function set actualizaProveedoresDeGenerales( $evt:EventoCatProGeneral ):void
			{
				if($evt == null)
					return;
				
				if( !isNaN( $evt.idProveedor ) && $evt.idProveedor != 0 ){
					_idProveedor = $evt.idProveedor;
					pasoDivideProveedor = true;
				}
			}
			
			private function recibeBusqueda(evt:EventoCatProGeneral):void
			{
				if(evt.proveedoresResultantes)
				{
					var _proveedores:ArrayCollection = Util.sortArray(evt.proveedoresResultantes,"nombre");
					_proveedores.source = (Util.sortArray(evt.proveedoresResultantes,"nombre") as ArrayCollection).toArray();
					generaRenglones( _proveedores, 'habilitados', itemsEnPantalla );
				}
			}
			
		]]>
	</fx:Script>
	<s:VGroup  width="100%" height="100%" id="grpProveedores" paddingTop="20" paddingBottom="20"  horizontalAlign="center" gap="10">
		
		
		<s:HGroup width="100%" paddingLeft="20" paddingRight="20">
			<catalogos:TituloParaVistaDefaultEnCatalogos id="btnRegresar" labelIzquierdo="PROVEEDORES" labelDerecho="[CATÁLOGOS]"/>
		</s:HGroup>
		
		<s:Group width="100%" height="100%">
			<s:VGroup width="100%" height="100%" gap="10" horizontalAlign="center">
				<botonesToggle:ButtonBarColores width="350" height="30" id="botoneraProveeHabDesHabilitados" changing="botoneraBarra_changingHandler(event)" dataProvider="{_arrButton}" selectedIndex="0" requireSelection="true"/>
				<s:Group  width="100%" height="100%">
					<s:VGroup id="grpHabilitados" width="100%" height="100%" paddingTop="130" horizontalAlign="center" gap="10">
						<lstscrl:List width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off" id="lstHabilitados" 
									  itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.zitemRenderer.vistaPrincipal.CatPro_IR_RenglonProveedores">
							<lstscrl:layout>
								<layouts:LayoutListaGrid id="layoutLista"  numColumnas="7" numFilas="4" horizontalGap="0" verticalGap="0" useVirtualLayout="true" 
														 paddingTop="0" paddingBottom="0" widthMin="230" heightMin="230"/>
							</lstscrl:layout>
						</lstscrl:List>
						<s:VGroup width="100%" horizontalAlign="center" gap="10">
							<label:TituloGris id="lblHabilitados" paddingTop="0"/>
							<label:TituloGris text="TOTAL" paddingTop="0"/>
						</s:VGroup>
					</s:VGroup>
					<botBusq:CatProveedores_BotoneraBusqueda id="btnBusqueda" width="100%"/>
				</s:Group>
			</s:VGroup>
		</s:Group>
		<otros:divisionGruesa width="100%" />
		<pqNet:botonPqNetLargo icono="agregarPequenio" label="Agregar" click="agregarNuevoProveedor(event)"/>
		
		
	</s:VGroup>
	<s:HGroup  width="100%" height="100%" id="zonaTrabajo" includeInLayout="false" visible="false"/>
</s:Group>
