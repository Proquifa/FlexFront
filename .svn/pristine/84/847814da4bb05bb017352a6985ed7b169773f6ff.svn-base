<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componentes ="mx.com.proquifa.proquifanet.rsl.vista.vistas.tableros.clientes.componentes.*" 
		 xmlns:graficas="skins.skin.graficas.*"
		 width="100%" height="100%"  
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.PartidaCotizacion;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
			import mx.utils.ObjectUtil;
			
			private var keys:Object;
			public var _currentType:String;
			private  var _infoMarcaET:ArrayCollection;
			private  var _infoMarcaFT:ArrayCollection;
			private var arrayMarcaET:Array = new Array();
			private var arrayMarcaFT:Array = new Array();
			private var totalCotizacion:Object;
			private var total:int = 0;
			
			public function set obtenerFiltroGrafico(tipo:String):void{
				if(_currentType != tipo){
					_currentType = tipo;
					total = 0;
					totalCotizacion = new Object;
					if(_currentType =="ET"){
						if(_infoMarcaET != null){
							calcularTotales(arrayMarcaET);
							myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoMarcaET,null,"cotizacionesTotal",true,total);
							
						}
					}
					else if(_currentType =="FT"){
						calcularTotales(arrayMarcaFT);	
						myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoMarcaFT,null,"cotizacionesTotal",true,total);
						
					}
				}
			}
			
			private function calcularTotales(listaCotiza:Array):void{
				for each (var partida:PartidaCotizacion in listaCotiza) 
				{
					if(!totalCotizacion.hasOwnProperty(partida.cotizacion)){
						totalCotizacion[partida.cotizacion]=1;
						total++;
					}
				}
				
			}
			
			public function set obtenerInfoGrafico($infoGrafica:ArrayCollection):void{
				if($infoGrafica == null) return ;
				totalCotizacion = new Object;
				total = 0;
				
				_infoMarcaET = new ArrayCollection();
				_infoMarcaFT = new ArrayCollection();
				myChart.dataProvider = new ArrayCollection();
				
				var arrayTemp:Array =  new Array();
				arrayTemp = $infoGrafica.source; 
				
				/**
				 * Se dividen todos las marcas que estan en tiempo vs las fuera de tiempo y se ordenan
				 * */ 
				
				
				arrayMarcaET = arrayTemp.filter(ObtenerTodasLasMarcasET);
				arrayMarcaFT = arrayTemp.filter(ObtenerTodasLasMarcasFT);
				arrayMarcaET.sortOn("fabrica");
				arrayMarcaFT.sortOn("fabrica");
				
				//Para liberar memoria
				arrayTemp = new Array();
				
				/**
				 * arreglo temporal para controlar el ciclo del for que se encargará de sumar las cantidades de cada Marca,
				 * quitando las duplicados
				 * */
				
				keys= new Object();
				var arrayTotalMarcasET:Array = new Array();
				arrayTotalMarcasET = arrayMarcaET.filter(quitaDuplicados);
				
				keys= new Object();
				var arrayTotalMarcasFT:Array = new Array();
				arrayTotalMarcasFT = arrayMarcaFT.filter(quitaDuplicados);
				
				/**
				 * Se forman los objetos que serán enviados a la grafica, los totales de cada Marca
				 * */
				
				FormarLasMarcas(arrayTotalMarcasET,arrayMarcaET,"MARCA_ET",_infoMarcaET);
				FormarLasMarcas(arrayTotalMarcasFT,arrayMarcaFT,"MARCA_FT",_infoMarcaFT);
				
				//myChart.dataProvider = myChart.aplicarFormatoConsultaCotizaciones(new ArrayCollection());
				
				if(_currentType =="ET"){
					calcularTotales(arrayMarcaET);	
					myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoMarcaET,null,"cotizacionesTotal",true,total);
					
				}
				else{
					calcularTotales(arrayMarcaFT);	
					myChart.dataProvider = myChart.aplicarFormatoConsultas(_infoMarcaFT,null,"cotizacionesTotal",true,total);
					
				}
				
				//Para liberar memoria
				arrayTotalMarcasET = new Array();
				arrayTotalMarcasFT= new Array();
			}
			
			private function FormarLasMarcas(TotalMarcas:Array,arrayTemp:Array,etiqueta:String,infoMarca:ArrayCollection):void
			{
				
				var totalPartidas:int;
				var totalPiezas:int;
				var totalCotizaciones:int;
				var totalMonto:Number;
				var totalClientes:int;
				var keysMarca:Object;
				
				var marcasInfo:Array = ObjectUtil.copy(arrayTemp) as Array;
				
				var currentPartidaCoti:PartidaCotizacion; 
				var j:int;
				//var currentCotizacion:String;
				var itemResumenConsulta:ResumenConsulta;
				for(var i:int =0; i<TotalMarcas.length; i++){
					j=0;
					keys = new Object();
					keysMarca = new Object();
					totalPartidas =0;
					totalPiezas =0;
					totalCotizaciones =0;
					totalMonto =0;
					totalClientes =0;
					currentPartidaCoti = marcasInfo[j] as PartidaCotizacion;
					while( (TotalMarcas[i] as PartidaCotizacion).fabrica == currentPartidaCoti.fabrica ){
						totalPartidas += currentPartidaCoti.partida;
						totalPiezas += currentPartidaCoti.cantidad;
						totalMonto += currentPartidaCoti.precio;
						
						if(!keys.hasOwnProperty(currentPartidaCoti.cotizacion)){
							keys[currentPartidaCoti.cotizacion] = currentPartidaCoti.cotizacion;
							totalCotizaciones++;
						}
						
						//Para el conteo de clientes en cada marca
						if(!keysMarca.hasOwnProperty(currentPartidaCoti.cliente)){
							keysMarca[currentPartidaCoti.cliente] = currentPartidaCoti.cliente;
							totalClientes++;
						}
						
						marcasInfo.shift();
						if(marcasInfo.length >0)
							currentPartidaCoti = marcasInfo[j] as PartidaCotizacion;
						else
							currentPartidaCoti =new PartidaCotizacion();
						
					}
					
					itemResumenConsulta = new ResumenConsulta();
					itemResumenConsulta.conceptoResultado = (TotalMarcas[i] as PartidaCotizacion).fabrica.toLocaleUpperCase();
					itemResumenConsulta.etiqueta = etiqueta;
					itemResumenConsulta.total = totalMonto;
					itemResumenConsulta.totalClientes = totalClientes;
					itemResumenConsulta.cotizacionesTotal = totalCotizaciones;
					itemResumenConsulta.partidas = totalPartidas;
					itemResumenConsulta.piezasTotal = totalPiezas;
					
					infoMarca.addItem(ObjectUtil.copy(itemResumenConsulta));
				}
			}
			
			public function quitaDuplicados(item:PartidaCotizacion, idx:uint, _clientes:Array):Boolean{
				if (keys.hasOwnProperty(item.fabrica)) {
					return false;
				} else {
					keys[item.fabrica] = item.fabrica;
					return true;
				}
			}
			
			private function ObtenerTodasLasMarcasET(item:Object, idx:uint, _clientes:Array):Boolean
			{
				return item.conforme == "SC" ? true : false;
			}
			
			private function ObtenerTodasLasMarcasFT(item:Object, idx:uint, _clientes:Array):Boolean
			{
				return item.conforme == "SNC" ? true : false;
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" verticalAlign="middle" gap="0">
		<s:Spacer width="100%" height="10%"/>
		<graficas:PieChartPqGris id="myChart" width="100%" height="100%" 
								 dataProvider="{null}"
								 lineasHabilitadas="true" etiquetasHabilitadas="true" habilitarResumen="true"
								 showDataTips="false"  innerRadius=".5">   
			<graficas:series>
				<graficas:pieSeriesPqNet field="piezasTotal"/>  <!--piezasTotal-->
			</graficas:series>
		</graficas:PieChartPqGris>
		<s:Spacer width="100%" height="10%"/>
	</s:VGroup>
	<s:VGroup width="100%" height="100%" verticalAlign="bottom" horizontalAlign="center" gap="0">
		<s:VGroup width="100%" height="8%" verticalAlign="middle">
			<componentes:tituloChartTablero width="100%" text="MARCAS" textAlign="center"/>
		</s:VGroup>
		<s:Spacer width="100%" height="2%"/>
	</s:VGroup>
</s:Group>