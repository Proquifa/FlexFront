<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="976" height="535"
				paddingBottom="15" paddingLeft="20" paddingRight="20" paddingTop="15" x="75  " y="140"
				showCloseButton="true" close="cierraReferencias()" xmlns:label="skins.skin.label.*" xmlns:otros="skins.otros.*" xmlns:s="library://ns.adobe.com/flex/spark" >
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.filesystem.File;
			import flash.net.navigateToURL;
			import flash.sampler.getInvocationCount;
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoAdministrador;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoAnalisisincidente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidenteConsulta;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidenteProgramarAccion;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.incidentes.EventoIncidenteRechazado;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Referencia;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.RutasPdF;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.controls.Alert;
			import mx.controls.List;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			private var fechaHoy:Date = new Date();
			[Bindable]
			private var referencia:Referencia = null;
			[Bindable]
			private var file:File = null;
			[Bindable]
			public var vieneD:String;	
			public var folioIncidente:String;	
			public var listaReferencias:ArrayCollection = new ArrayCollection();	
			private var pdfByteArray:ByteArray = null;
			private var listaFinalReferencias:ArrayCollection = new ArrayCollection();
			
			public function iniciaReferencias():void{
					if( this.listaReferencias == null){		
						this.listaReferencias = new ArrayCollection();				
					}else{
						//todas las referencias se le dan a la lista final (para conservar de forma temporal las que se pretenden eliminar en el servicio)
						this.listaFinalReferencias =  ObjectUtil.copy( this.listaReferencias ) as ArrayCollection;
						//las referencias que seran mostradas en el grid tendran que contener su atributo borrar como false
						//ademas se le reasigna folio para que queden guardadas de esa forma y un numero para que en la lista se vean en orden
						for( var i:int = 0; i < this.listaReferencias.length ; i++ ){
							if( ( this.listaReferencias.getItemAt( i ) as Referencia ).borrar == true ){
								this.listaReferencias.removeItemAt( i );
							}
							(this.listaReferencias.getItemAt( i ) as Referencia ).numFila = (i + 1); 
							if( this.listaReferencias.length < 10  ){
								(this.listaReferencias.getItemAt( i ) as Referencia ).folio = "AMP" + this.folioIncidente.substring( 3, this.folioIncidente.length ) + "-0" + (this.listaReferencias.length+1).toString(); 		
							}else{
								(this.listaReferencias.getItemAt( i ) as Referencia ).folio = "AMP" + this.folioIncidente.substring( 3, this.folioIncidente.length ) + "-" + (this.listaReferencias.length+1).toString();     	 	  	  
							}
						}
						//se le asigna al data grid solo las referencias temporales que se supone seran guardadas
						this.dtgReferencias.dataProvider = this.listaReferencias;
					}
					if( vieneD == "url" || vieneD == "consultaIncidente"){ // solo es lectura no se puede agregar ni eiminar por este camino
						(this.dtgReferencias.columns[5] as DataGridColumn).visible = false;
						this.btnAdjunto.enabled = false;
						this.btnGuardar.visible = false;
					}else{
						(this.dtgReferencias.columns[5] as DataGridColumn).visible = true;
						(this.dtgReferencias.columns[0] as DataGridColumn).width = 66;
						(this.dtgReferencias.columns[1] as DataGridColumn).width = 350;
						(this.dtgReferencias.columns[2] as DataGridColumn).width = 150;
						(this.dtgReferencias.columns[3] as DataGridColumn).width = 150;
						(this.dtgReferencias.columns[4] as DataGridColumn).width = 100;
						(this.dtgReferencias.columns[5] as DataGridColumn).width = 120;
						this.btnAdjunto.enabled = true;
						this.btnGuardar.visible = true;
					}
			}
			/**
			 * En este metodo se abre el Finder para seleccionar el archivo y en sus SubFunciones se obtienen los atributos del File:
			 * nativePath o ruta (donde se podra obtener el nombre del archivo)  y el ByteArray)
			 */ 
			 private function buscarArchivo():void{
			 	file = new File();
			 	referencia = new Referencia();
				file.addEventListener(Event.SELECT, selectHandler);
                file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
                file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
                file.addEventListener(Event.COMPLETE,completeHandler);
                file.browse();
			 }
			 private function selectHandler(event:Event):void {
                var file:FileReference = FileReference(event.target);
                file.load();
             }
             private function ioErrorHandler(event:IOErrorEvent):void {
                trace("ioErrorHandler: " + event);
             }
             private function progressHandler(event:ProgressEvent):void {
				var file:FileReference = FileReference(event.target);
				trace("progressHandler: name=" + file.name + "bytesLoaded = " + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
             }
             private function completeHandler(event:Event):void {
                trace("completeHandler: " + event);
               creaReferencia();
             }
             /**
              * Hasta aqui termina el metodo para obtener los datos del archivo a cargar
              */ 
             
             /**
              * Metodo para crear una referencia (un renglon)
              */ 
              private function creaReferencia():void{
              	if(this.listaReferencias == null ){
              		this.listaReferencias = new ArrayCollection();
              	}
              	for(var i:int = 0; i < this.listaReferencias.source.length; i++ ){              		           		              		
              		if( this.file.name == (this.listaReferencias.getItemAt( i ) as Referencia).nombreArchivo  ){
              			Alert.show( "Este documento ya fue agregado" ,"¡Atención!" );
              			return; //sale de la funcion
              		}
              	}              	
              	 this.referencia = new Referencia;
              	 	  referencia.numFila = ( this.listaReferencias.length ) + 1;
              	 	  referencia.nombreArchivo = this.file.name;
              	 	  referencia.bytes = this.file.data;
              	 	  if(vieneD == "analisisIncidente" || vieneD == "programacionAccion" || vieneD == "tomarDecision" || vieneD == "incidenteRechazado" ){ //viene del Componente Analisisincidente rsl Incidentes
              	 	  	referencia.origen = "Gestion";    
              	 	  	if( this.listaReferencias.length < 10  ){
							referencia.folio = "AMP" + this.folioIncidente.substring( 3, this.folioIncidente.length ) + "-0" + (this.listaReferencias.length+1).toString(); 		
              	 	  	}else{
	              	 	  	referencia.folio = "AMP" + this.folioIncidente.substring( 3, this.folioIncidente.length ) + "-" + (this.listaReferencias.length+1).toString();     	 	  	  
              	 	  	}
              	 	  } /* else if( vieneD == "incidenteRechazado"){
						  referencia.origen = "Rechazados";    
						  if( this.listaReferencias.length < 10  ){
							  referencia.folio = "AMP" + this.folioIncidente.substring( 3, this.folioIncidente.length ) + "-0" + (this.listaReferencias.length+1).toString(); 		
						  }else{
							  referencia.folio = "AMP" + this.folioIncidente.substring( 3, this.folioIncidente.length ) + "-" + (this.listaReferencias.length+1).toString();     	 	  	  
						  }
					  } */ else{
              	 	  	referencia.origen = "Registro";
              	 	  }              
					  referencia.idUsuario = DatosGlobales.getInstance()._usuario.idEmpleado; 
					  referencia.nombreResponsable = DatosGlobales.getInstance()._usuario.usuario;
              	 	  referencia.idReferencia = 0;   	 	  
              	 	  referencia.urlArchivo = file.nativePath;
              	 	  referencia.extensionArchivo = file.extension;
              	 	  if( file.extension.toLowerCase() == "pdf" ){
              	 	  		//referencia.tipo = "documento";              	 	  	
              	 	  }else if ( file.extension.toLowerCase() == "jpg" || file.extension.toLowerCase() =="jpeg" || file.extension.toLowerCase() == "png" ){
              	 	  		//referencia.tipo = "imagen";
              	 	  } else if( file.extension.toLowerCase() == "mov" ){
              	 	  		//referencia.tipo = "video";
              	 	  }else{
              	 	  	Alert.show("Formato de archivo no permitido","¡Atención!");
              	 	  	referencia = null;
              	 	  	return;
              	 	  } 
              	 this.listaReferencias.addItem( referencia );
              	 this.listaFinalReferencias.addItem( referencia );
              	 this.dtgReferencias.dataProvider = this.listaReferencias;
              	 this.file = null;
              }
              /**
               *  Metodo que elimina uan referefencia o visualiza un archivo
               */ 
              private function gridClickEvent(event:ListEvent):void{	 
		        	var bandera:Boolean = new Boolean;	  
			    	if (event.columnIndex == 4) { //ver
			    		if( vieneD == "url" || this.dtgReferencias.selectedItem.idReferencia != 0 ){
			    			var url:URLRequest = new URLRequest( RutasPdF.GENERAL_RUTA + RutasPdF.INCIDENTE_RUTA + this.dtgReferencias.selectedItem.idReferencia
			    			+ "." + this.dtgReferencias.selectedItem.extensionArchivo );
			    			navigateToURL( url );	
			    		}else{
			    			var carpetaLocal:URLRequest = new URLRequest("file://" + this.dtgReferencias.selectedItem.urlArchivo);
			    			navigateToURL( carpetaLocal );	
			    		}		    		
			    	}else if (event.columnIndex == 5 ){ //eliminar
			    		if( this.vieneD == "analisisIncidente" || this.vieneD == "programacionAccion" || vieneD == "tomarDecision"  || vieneD == "incidenteRechazado" ){ //viene del Componente Analisisincidente rsl Incidentes
							if( this.dtgReferencias.selectedItem.nombreResonsable == DatosGlobales.getInstance()._usuario.usuario ){
								if( this.dtgReferencias.selectedItem.idReferencia > 0 ){
				    				for( var x:int = 0;x < this.listaFinalReferencias.length; x++){
				    					if( (this.listaFinalReferencias.getItemAt(x) as Referencia ).idReferencia == this.dtgReferencias.selectedItem.idReferencia ){
				    						//Si la referencia cuenta con id A la listaFinal se le pone como atributo borrar como true a esa referencia.
											//LA referencia sigue existentiendo pero no sera mas visible y se eliminara al guardar
											(this.listaFinalReferencias.getItemAt(x) as Referencia ).borrar = true;
				    					}
				    				}
				    			}else{
				    				for( var z:int = 0;z < this.listaFinalReferencias.length; z++){
				    					if( (this.listaFinalReferencias.getItemAt(z) as Referencia ).nombreArchivo == this.dtgReferencias.selectedItem.nombreArchivo ){
				    						this.listaFinalReferencias.removeItemAt( z );
				    					}
				    				}
				    			}
		              			if(this.dtgReferencias.selectedItem.origen == "Registro"){
		              				Alert.show("Imposible eliminar el archivo adjunto","¡Atención!");
		              				return;//sale de la funcion
		              			}
							 }else{
								Alert.show("Usted no es responsable del documento y por lo tanto no es posible eliminar la referencia.","¡ATENCION!");
							} 
	              		}   
			    		var nombreArchivoGrid:String = this.dtgReferencias.selectedItem.nombreArchivo;
			    		for( var i:int = 0; i < listaReferencias.source.length;  i++ ){
			    			if( ( this.listaReferencias.getItemAt( i ) as Referencia ).nombreArchivo == nombreArchivoGrid){
			    				this.listaReferencias.removeItemAt( i );
			    			}
			    		}
			    		for( var y:int = 0; y < listaReferencias.source.length;  y++ ){
			    			if( this.listaReferencias.source.length > 0 ) {
				    			(this.listaReferencias.getItemAt( y ) as Referencia).numFila = y + 1;
			    			}
			    		}
			    		//this.listaReferencias.refresh();
			    		this.dtgReferencias.dataProvider = this.listaReferencias;
			    		
			    	}else{
			    		
			    	}
              } 
              /**
               * Metodo para asignar la lista de referencias al componente RegistroIncidentes
               */ 
              private function asignaReferencias():void{
              	if( this.listaReferencias != null ){
	              		//if(this.listaReferencias.source.length >= 0 ){
              			if( this.vieneD == "analisisIncidente" ){
              				var eventoAI:EventoAnalisisincidente = new EventoAnalisisincidente( EventoAnalisisincidente.REGRESA_LISTA_REFERENCIAS );
              				eventoAI.listaReferencias = this.listaFinalReferencias;
              				dispatchEvent( eventoAI );
              			}else if( this.vieneD == "programacionAccion" ){
              				var eventop:EventoIncidenteProgramarAccion = new EventoIncidenteProgramarAccion( EventoIncidenteProgramarAccion.REGRESAR_LISTA_REFRENCIA);
              				eventop.listaReferencias = this.listaFinalReferencias;
              				dispatchEvent( eventop );
              			}else if(this.vieneD == "tomarDecision" ){
							var eventoD:EventoAnalisisincidente = new EventoAnalisisincidente( EventoAnalisisincidente.REGRESA_LISTA_REFERENCIAS_DECISION );
							eventoD.listaReferencias = this.listaFinalReferencias;
							dispatchEvent( eventoD );
						}else if(this.vieneD == "incidenteRechazado"){
							var eventoR:EventoIncidenteRechazado = new EventoIncidenteRechazado( EventoIncidenteRechazado.ACTUALIZA_REFERENCIAS );
							eventoR.listaReferencias = this.listaFinalReferencias;
							dispatchEvent( eventoR );
						}else{              				
			              	var	evento:EventoIncidente = new EventoIncidente( EventoIncidente.RECIBIR_ARRAY_COLLECTION_DE_REFERENCIAS_INCIDENTE);
			              	evento.listaDeArchivos = this.listaReferencias;
			              	evento.vieneD = "Aceptar";
			              	dispatchEvent( evento );
              			}
              		
              	}
              	cierraReferencias();
              }
              /**
               * Metodo para aplicar el Reset de las referencias 
               */ 
              private function reset():void{
              		(this.dtgReferencias.columns[4] as DataGridColumn).visible = true;	
                    this.dtgReferencias.dataProvider = null;
					this.listaReferencias = new ArrayCollection();
					this.referencia = new Referencia();						
					this.folioIncidente = "";
					this.listaFinalReferencias = new ArrayCollection();
              }
              private function cierraReferencias():void{	
              	reset();
				if( this.vieneD == "analisisIncidente" ){
					var evento:EventoAnalisisincidente = new EventoAnalisisincidente( EventoAnalisisincidente.CIERRA_POP_UP_REFERENCIAS);
					dispatchEvent( evento );
					var evt2:EventoAdministrador = new EventoAdministrador( EventoAdministrador.CIERRA_POP_UP_REFERENCIAS );
					dispatchEvent( evt2 );	
				}else if ( this.vieneD == "programacionAccion" ){
					var eventoPA:EventoIncidenteProgramarAccion = new EventoIncidenteProgramarAccion( EventoIncidenteProgramarAccion.CERRAR_POP_UP_REFERENCIAS);
					dispatchEvent( eventoPA );
					var cerrar:EventoAdministrador = new EventoAdministrador( EventoAdministrador.CIERRA_POP_UP_REFERENCIAS );
					dispatchEvent( cerrar );	
				}else if ( this.vieneD == "consultaIncidente" ){
					var eventoCI:EventoIncidenteConsulta = new EventoIncidenteConsulta( EventoIncidenteConsulta.CIERRA_REFERENCIAS );
					dispatchEvent( eventoCI );
				}else{
					var evt:EventoIncidente = new EventoIncidente( EventoIncidente.CERRAR_POP_UP_REFERENCIAS_INICIDENTE );
					dispatchEvent( evt );	
					var cerrar2:EventoAdministrador = new EventoAdministrador( EventoAdministrador.CIERRA_POP_UP_REFERENCIAS );
					dispatchEvent( cerrar2 );			
				}
				this.vieneD = "";	
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<!--<mx:Label text="Referencias" fontSize="40" fontWeight="bold"/>-->
		<label:labelTitulo_Otros text="Referencias" />
		<!--<mx:Spacer height="3"/>-->
		<!--<mx:HRule width="100%"/>-->
		<otros:division width="100%"/>
		<mx:Spacer height="3"/>
		<mx:HBox width="100%" horizontalAlign="right">
			<!--<mx:Button click="buscarArchivo()" width="80" id="btnAdjunto" label="Adjunto"/>-->
			<s:Button styleName="botonNegroOld" click="buscarArchivo()" width="80" id="btnAdjunto" label="Adjunto"/>
		</mx:HBox>
		<mx:DataGrid width="100%" height="100%" id="dtgReferencias" itemClick="gridClickEvent(event)" textAlign="center" >
			<mx:columns>
				<mx:DataGridColumn headerText="#" dataField="numFila" width="0.04"/>
				<mx:DataGridColumn headerText="Nombre de Archivo" dataField="nombreArchivo" width="0.5"/>
				<mx:DataGridColumn headerText="Origen" dataField="origen" width="0.1"/>
				<mx:DataGridColumn headerText="Responsable" dataField="nombreResonsable" width="0.1"/>  	
				<mx:DataGridColumn headerStyleName="" width="0.07" >
					<mx:itemRenderer>
						<mx:Component>
							<mx:LinkButton label="Ver" textDecoration="underline" color="#0C4AFC"/>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="" width="0.1">
					<mx:itemRenderer>
						<mx:Component>
							<mx:LinkButton label="Eliminar" textDecoration="underline">
									<mx:Script>
									<![CDATA[
										import mx.controls.dataGridClasses.DataGridListData;
										import mx.states.SetStyle;
											override public function set data(value:Object):void{
												if(value != null){
													super.data = value;
													if(data.idReferencia != "" || data.idReferencia != 0) {
														setStyle("color", 0x8e9a9d); //gris
													}else{
														setStyle("color", 0x0C4AFC);//azul
													}
												}
											}		
									]]>
									</mx:Script>														
							</mx:LinkButton>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="url" dataField="urlArchivo" visible="false"/>  	
				<mx:DataGridColumn headerText="Extension" dataField="extensionArchivo" visible="false"/>	
				<mx:DataGridColumn headerText="IdReferencia" dataField="idReferencia" visible="false"/>	
				<mx:DataGridColumn headerText="Borrado" dataField="borrar" visible="false"/>	
			</mx:columns>
		</mx:DataGrid>
		<mx:Spacer height="3"/>
		<!--<mx:HRule width="100%"/>-->
		<otros:division width="100%"/>
		<mx:Spacer height="3"/>
		<mx:HBox width="100%">
			<!--<mx:Button label="Cancelar" click="cierraReferencias()" width="80" />-->
			<s:Button styleName="botonNegroOld" label="Cancelar" click="cierraReferencias()" width="80" />
			<mx:Spacer width="100%"/>
			<!--<mx:Button label="Guardar" click="asignaReferencias()" width="80"  id="btnGuardar"/>-->
			<s:Button styleName="botonNegroOld" label="Guardar" click="asignaReferencias()" width="80"  id="btnGuardar"/>
		</mx:HBox>
	</mx:VBox>
</mx:TitleWindow>
