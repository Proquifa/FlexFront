package mx.com.proquifa.proquifanet.rsl.vista.utils
{
	import mx.com.proquifa.proquifanet.rsl.vista.eventos.tableros.clientes.EventoTableroClientes;
	import mx.formatters.NumberBaseRoundType;
	import mx.formatters.NumberFormatter;
	import mx.utils.StringUtil;
	
	public class UtilsFormatosNumericos
	{
		public function UtilsFormatosNumericos()
		{
		}
		public static function precisionADosDecimales(cantidad:Number):String{
			var numeroFormateado:String;
			var formatoNumero:mx.formatters.NumberFormatter= new NumberFormatter();
			formatoNumero.precision = 2;
			formatoNumero.thousandsSeparatorFrom = "";
			formatoNumero.thousandsSeparatorTo = "";
			numeroFormateado = formatoNumero.format( cantidad );
			return numeroFormateado
		}
		
		public static function precisionADosDecimalesConComas(cantidad:Number):String{
			var numeroFormateado:String;
			var formatoNumero:mx.formatters.NumberFormatter= new NumberFormatter();
			formatoNumero.precision = 2;
			numeroFormateado = formatoNumero.format( cantidad );
			return numeroFormateado
		}
		
		public static function precisionASeisDecimalesConComas(cantidad:Number):String{
			
			var decimal:Number = cantidad - Math.floor(cantidad);
			var numeroFormateado:String;
			var formatoNumero:mx.formatters.NumberFormatter= new NumberFormatter();
			
			if(decimal > 0)
				formatoNumero.precision = 6;
			else
				formatoNumero.precision = 2;
			
			numeroFormateado = formatoNumero.format( cantidad );
			return numeroFormateado
		}
		
		public static function precisionConComas(cantidad:Number):String{
			var numeroFormateado:String;
			var formatoNumero:mx.formatters.NumberFormatter= new NumberFormatter();
			numeroFormateado = formatoNumero.format( cantidad );
			return numeroFormateado
		}
		
		public static function agregarCerosALaIzquierda(cantidad:Number):String{
			var numeroFormateado:String;
			cantidad < 1000 ? numeroFormateado = '0'+cantidad : numeroFormateado = cantidad.toString();
			cantidad < 100 ? numeroFormateado = '00'+cantidad : numeroFormateado = cantidad.toString();
			cantidad < 10 ? numeroFormateado = '000'+cantidad : numeroFormateado = cantidad.toString();
			return numeroFormateado
		}
		
		
		public static function precisionSinDecimales(cantidad:Number):String
		{
			var temp:int = int(cantidad); 
			return temp.toString();
		}
		
		public static function truncarDecimalesFloor($cantidad:Number,$numeroDecimales:uint):Number
		{
			var numTemp:Number = Math.floor(Math.pow(10,$numeroDecimales)*$cantidad)/Math.pow(10,$numeroDecimales);
			return numTemp;
		}
		
		public static function truncarDecimalesCeil($cantidad:Number,$numeroDecimales:uint):Number
		{
			var numTemp:Number = Math.ceil(Math.pow(10,$numeroDecimales)*$cantidad)/Math.pow(10,$numeroDecimales);
			return numTemp;
		}
		
		public static function redondearNEAREST(cantidad:Number):String
		{
			var numeroFormateado:String;
			var formatoNumero:mx.formatters.NumberFormatter= new NumberFormatter();
			formatoNumero.rounding = NumberBaseRoundType.NEAREST;
			numeroFormateado = formatoNumero.format( cantidad );
			
			return numeroFormateado
		}
		
		public static function redondearNEAREST_WithOutSeparator(cantidad:Number):String
		{
			var numeroFormateado:String;
			var formatoNumero:mx.formatters.NumberFormatter= new NumberFormatter();
			formatoNumero.rounding = NumberBaseRoundType.NEAREST;
			formatoNumero.useThousandsSeparator = false;
			numeroFormateado = formatoNumero.format( cantidad );
			
			return numeroFormateado
		}
		
		public static function shortNumbersMK( $labelCantidad:String ):String{
			var strReturn:String = '';
			var prefijo:String = '';
			var cuerpo:String = '';
			var postfijo:String = '';
			
			// Obteniendo el monto
			var pattern:RegExp = /[0-9]+(?:\.[0-9]*)?/g;
			var result:Object = pattern.exec( $labelCantidad );
			var cantidadStr:String = '';
			while (result != null) {
				cantidadStr += result.toString();
				result = pattern.exec( $labelCantidad );
			}
			var cantidad:Number = isNaN( Number( cantidadStr ) ) ? -1: Number( cantidadStr );
			// /Obteniendo el monto
			
			// Obteniendo el prefijo
			if( $labelCantidad.indexOf( '$' ) > -1 )
				prefijo = '$ ';
			// /Obteniendo el prefijo
			
			// Generando la abreviatura	
			var millones:Number =  cantidad/1000000;
			var kilos:Number = 0;
			if( millones >= 1 )
				kilos = cantidad - ( millones * 1000000 ) / 1000;
			else
				kilos = cantidad / 1000;
			if( kilos >= 1 ){
				if( kilos < 100 )
					cuerpo = String( int(kilos*10) /10 ) + 'K ';
				else
					cuerpo = int( kilos ).toString() + 'K ';
			}
			if( millones >= 1 ){
				if( kilos > 100 )
					cuerpo = String( int(millones*10) /10 ) + 'M ';
				else
					cuerpo = int(millones).toString() + 'M ';
			}
			// /Generando la abreviatura
			
			strReturn = prefijo + cuerpo + postfijo;
			
			/* si el monto no supera el millar entonces no aplicar cambios */
			if( millones < 1 && kilos < 1 )
				strReturn = $labelCantidad;
			return strReturn;
		}
		
		public static function getMesesTrabajados():Number
		{
			/*var fecha:Date = new Date();
			var _month:Number = 0;
			switch(evento.parametros.periodo)
			{
			case "Anual":
			{
			if(evento.parametros.anio == fecha.fullYear)
			{
			_month = fecha.month == 0 ? 1:fecha.month;
			
			}
			else
			{
			_month = 12;
			}
			break;
			}
			case "Semestral":
			{
			if(evento.parametros.anio == fecha.fullYear)
			{
			if(fecha.month > evento.parametros.rangoMinMes && fecha.month <evento.parametros.rangoMaxMes)
			{
			_month = fecha.month - (evento.parametros.rangoMinMes-1);
			}
			else
			{
			_month = 6;
			}
			}
			else
			{
			_month = 6;
			}
			break;
			}
			case "Trimestral":
			{
			if(evento.parametros.anio == fecha.fullYear)
			{
			if(fecha.month > evento.parametros.rangoMinMes && fecha.month <evento.parametros.rangoMaxMes)
			{
			_month = fecha.month - (evento.parametros.rangoMinMes-1);
			}
			else
			{
			_month = 3;
			}
			}
			else
			{
			_month = 3;
			}
			break;
			}
			
			default:
			{
			_month = 1;
			break;
			}
			}
			return _month;*/
			
			var fechaTmp:Date = new Date();
			var numMes:int;
			
			var month:Date = new Date(fechaTmp.getFullYear(), fechaTmp.getMonth() + 1, 0);
			numMes = month.date;
			
			return (fechaTmp.getMonth() ) + (fechaTmp.getUTCDate()/numMes);
		}
		
		
		public static function formatoADecimales(cantidad:Number):String{
			var numeroFormateado:String;
			var formatoNumero:mx.formatters.NumberFormatter= new NumberFormatter();
			formatoNumero.precision = 2;
			formatoNumero.thousandsSeparatorFrom = "";
			formatoNumero.thousandsSeparatorTo = "";
			numeroFormateado = formatoNumero.format( cantidad );
			if (numeroFormateado.lastIndexOf(".00") != -1 )
				numeroFormateado = numeroFormateado.replace(".00","");
			return numeroFormateado
		}
		
	}
}