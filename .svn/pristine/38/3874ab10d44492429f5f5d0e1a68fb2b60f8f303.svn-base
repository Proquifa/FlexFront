<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:plantilla="mx.com.proquifa.vista.vistas.plantilla.*"
		 xmlns:gestorCompras="mx.com.proquifa.vista.mapas.gestorCompras.*" 
		 xmlns:arribo="mx.com.proquifa.vista.mapas.gestorCompras.arribo.*" 
		 width="100%" height="100%" 
		 creationComplete="init(event)"
		 >
	
	<fx:Declarations>
		<gestorCompras:MapaGestorCompras />
		<arribo:MapaArriboGestorCompras />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.com.proquifa.vista.vistas.gestorCompras.componentes.ordenDespachoPublicacion.VistaOrdenDespacho_Public;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			
			/*[Bindable] private var listaPendiente:ArrayCollection = new ArrayCollection([{pendiente:'Cargar Factura',conteo:null},{pendiente:'Lista de Arribo Materiales',conteo:null},{pendiente:'Lista de Arribo Publicaciones',conteo:null},{pendiente:'Orden de Despacho Materiales',conteo:null},{pendiente:'Orden de Despacho Publicaciones',conteo:null}]);*/
			[Bindable] private var listaPendiente:ArrayCollection = new ArrayCollection([{pendiente:'Cargar Factura',conteo:null}]);
			private var cargarFactura:CargarFactura;
			private var listaArribo:VistaListaArribo;
			private var listaArriboPublicaciones:VistaListaArriboPub;
			private var ordenDespacho:VistaOrdenDespacho;
			private var ordenDespachoPublic:VistaOrdenDespacho_Public;
			
			/*
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			+  reload - Recarga la informacion solo para la pantalla incial.... 
			+  update-Recarga la informacion pantalla incial y se propaga la informacion seleccionando el
			+  proveedor que guardo la orden de compra si es que le queda alguna partida
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			*/
			public static var accionCargarFactura:String = "reload"; 
			
			protected function plantillagestorcompras1_pendienteSeleccionadoHandler(event:EventoGestorCompras):void
			{
				switch(event.pendiente.toUpperCase())
				{
					case "CARGAR FACTURA":
					{
						if (!cargarFactura)
							cargarFactura = new CargarFactura();
						plantilla.agregarContenido(cargarFactura);
						accionCargarFactura = "reload";
						var evento:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_COMPRAS_POR_PAGAR);
						evento.usuario = DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(evento);
						break;
					}
						
					/*case "LISTA DE ARRIBO MATERIALES":
					{
						if (!listaArribo)
							listaArribo = new VistaListaArribo();	
						plantilla.agregarContenido(listaArribo);
						var eve:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.LISTADO_ARRIBO);
						eve.idEmpleado = DatosGlobales.getInstance()._usuario.clave;
						eve.publicaciones = false;
						dispatchEvent(eve);
						break;
					}
					case "LISTA DE ARRIBO PUBLICACIONES":
					{
						if (!listaArriboPublicaciones)
							listaArriboPublicaciones = new VistaListaArriboPub();
						plantilla.agregarContenido(listaArriboPublicaciones);
						var evePub:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.LISTADO_ARRIBO_PUBLICACIONES);
						evePub.idEmpleado = DatosGlobales.getInstance()._usuario.clave;
						evePub.publicaciones = true;
						dispatchEvent(evePub);
						break;
					}
						
					case "ORDEN DE DESPACHO MATERIALES":
					{
						if (!ordenDespacho)
							ordenDespacho = new VistaOrdenDespacho();
						plantilla.agregarContenido(ordenDespacho);
						
						var evtDes:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DE_DESPACHO);
						evtDes.idOC = 0;
						evtDes.tipoPublicaciones = false;
						dispatchEvent(evtDes);
						break;
					}
						
					case "ORDEN DE DESPACHO PUBLICACIONES":
					{
						if (!ordenDespachoPublic)
							ordenDespachoPublic = new VistaOrdenDespacho_Public();
						plantilla.agregarContenido(ordenDespachoPublic);
						
						var evtDesPub:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DE_DESPACHO_PUBLICACIONES);
						evtDesPub.idOC = 0;
						evtDesPub.tipoPublicaciones = true;
						dispatchEvent(evtDesPub);
						break;
					}*/
					default:
					{
						break;
					}
				}
			}
			
			protected function init(evento:FlexEvent):void
			{
				var event:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.CARGAR_NUMERO_PENDIENTES_MENU);
				event.usuario = DatosGlobales.getInstance()._usuario.usuario;
				event.rol = "";
				/*evento.idEmpleado = DatosGlobales.getInstance()._usuario.r;*/
				dispatchEvent(event);
			}
			
			public function set recibirIndicadorPendientes(value:ArrayCollection):void
			{
				var listaAux:ArrayCollection = ObjectUtil.copy(listaPendiente) as ArrayCollection;
				for(var x:int = 0; x < listaAux.length;x++){
					for(var y:int = 0; y < value.length;y++){
						if((listaAux[x].pendiente == "Cargar Factura") && (value[y].pendiente == "cargarFactura")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Lista de Arribo Materiales") && (value[y].pendiente == "listaArriboMaterial")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Lista de Arribo Publicaciones") && (value[y].pendiente == "listaArriboPublic")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Orden de Despacho Materiales") && (value[y].pendiente == "ordenDespachoMaterial")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].pendiente == "Orden de Despacho Publicaciones") && (value[y].pendiente == "ordenDespachoPublic")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
					}	
				}
				listaPendiente = listaAux;
				plantilla.listaPendientes = listaPendiente;
				plantilla.lstPendientes.lstPendientes.selectedIndex = 0; 
			}
		]]>
	</fx:Script>
	
	
	
	<plantilla:PlantillaGestorCompras id="plantilla" width="100%" height="100%" listaPendientes="{listaPendiente}" pendienteSeleccionadoPlantilla="plantillagestorcompras1_pendienteSeleccionadoHandler(event)" />
</s:Group>
