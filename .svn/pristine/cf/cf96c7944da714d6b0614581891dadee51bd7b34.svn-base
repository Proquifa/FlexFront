<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"  
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:menu="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.*"
		  xmlns:generales="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.*"
		  xmlns:financieros="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.financieros.*"
		  xmlns:oferta="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.comerciales.oferta.*"
		  xmlns:estadisticas="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.estadisticas.generales.*"
		  width="100%" height="100%"
		  >
	
	<fx:Script>
		<![CDATA[
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotones;
			
			private var alerta:Boolean;
		
			public function set chageCurrentState($currentState:String):void {
				currentState = $currentState;
			}
			
			public function set conPalomita(data:Boolean):void {
				imagen.visible = imagen.includeInLayout = data;
			}
			
			
			public function set incompleto(incom:Boolean):void {
				imagenAlerta.visible = imagenAlerta.includeInLayout = incom;
				alerta = incom; 
			}
		
			
			/*public var myTip:ToolTipCotizacionReportar;
			protected function createToolTip(event:ToolTipEvent):void
			{
				myTip = new ToolTipCotizacionReportar();
				event.toolTip = myTip;	
				myTip.mensaje = "InformaciÃ³n Incompleta";
				
				ToolTipManager.hideDelay = Infinity;
			}
			
			private function positionTip(event:ToolTipEvent):void{				
				var tmp:int;
				var point:Point = new Point(event.currentTarget.x, event.currentTarget.y);
				
				tmp=(event.toolTip.width/2)-this.width/2;				
				event.toolTip.x = event.toolTip.x - (event.currentTarget.width + myTip.width - 30);
				event.toolTip.y = event.toolTip.y - (event.currentTarget.height + (myTip.height/2) + 5);
				
				
				
				ToolTipManager.hideDelay = Infinity;
			}
			
			protected function destroyBigTip(event:MouseEvent):void
			{
				ToolTipManager.destroyToolTip(myTip); 
			}*/
			
			
			protected function overImagen(event:MouseEvent):void
			{
				if(alerta)
				{
					popUp.move(imagenAlerta.x - (imagePopUp.width/2 - (imagenAlerta.width/2)), imagenAlerta.height);
					popUp.displayPopUp = true;
				}
			}
			
			protected function imageOut(event:MouseEvent):void
			{
				popUp.displayPopUp = false;
			}
			
		]]>
	</fx:Script>
	
	
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>
	
	
	<s:VGroup width="100%" height="100%" gap="0" horizontalAlign="center" verticalAlign="middle" >
		<s:Group width="100%" height="100%" >
			<s:Rect height="10" width="100%" verticalCenter="5" >
				<s:fill>
					<s:SolidColor id="colorRect" color="0xe8e8e7" color.selected="0x{catalogoColores.BTN_VERDE_AZUL}" />
				</s:fill>
			</s:Rect>
			<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center" >
				<s:Label styleName="tab_texto_12_Helvetica" color="#ACACAC" color.selected="#444444"
						 text="informacion" maxDisplayedLines="1" verticalAlign="middle" fontWeight="bold" id="lblTitulo"/>
				<s:Group id="imagenAlerta" height="100%" visible="false" includeInLayout="false" mouseOver="overImagen(event)" mouseOut="imageOut(event)" >
					<mx:Image source="{catalogoIconosBotones.getInstance().iconoAlerta_barra}" bottom="0" />
				</s:Group> 
				
				<s:PopUpAnchor id="popUp" popUpPosition="below">
					<s:Group >
						<mx:Image id="imagePopUp" source="{catalogoIconosBotones.getInstance().toolRepotar}"/>
					</s:Group>
					
				</s:PopUpAnchor>
				
				<mx:Image id="imagen" source="{catalogoIconosBotones.getInstance().paloma_check}" />
			</s:HGroup>
		</s:Group>  
	</s:VGroup>  
</s:Group>