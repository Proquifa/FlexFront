<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%"
		  creationComplete="init(event)"
		  >
	<fx:Declarations>
		<mx:SeriesInterpolate id="fxInterpolateIn" duration="300"/>
		<s:SolidColorStroke id="trazoGruezo" color="0x424242" weight="2"/>
		<s:SolidColorStroke id="trazoDelgado" color="0x424242" weight="1"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.DocumentoOrdenDespacho;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.events.FlexEvent;
			
			
			private var _dataProvider:ArrayCollection;
			private var sql:Query;
			
			protected function init(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:ArrayCollection):void
			{
				if(!value)
					return;
				
				_dataProvider = value;
				sql = new Query(value,["tipo"]);
				generarVista();
			}
			
			
			private function generarVista():void
			{
				var finalArray:ArrayCollection = new ArrayCollection();
				var tiposDoc:Array = sql.getPunteros(["tipo"]);
				var docND:int;
				var docD:int;
				if(tiposDoc.length > 0)
				{
					for (var y:int = 0; y < tiposDoc.length; y++) 
					{
						var objeto:Object = new Object();
						objeto.tipo = "";
						objeto.docD = 0;
						objeto.docND = 0;
						objeto.total = 0;
						var punteros:Array = sql.getPunteros([tiposDoc[y]]);
						var arrayResult:ArrayCollection = sql.armarLista(punteros);
						
						for (var i:int = 0; i < arrayResult.length; i++) 
						{
							var current:DocumentoOrdenDespacho = arrayResult[i] as DocumentoOrdenDespacho;
							objeto.tipo = current.tipo;
							if(current.faltante && current.cargado)
							{
								objeto.docD += 1;
							}
							else 
							{
								if(current.faltante)
									objeto.docND += 1;
								else
									objeto.docD += 1;
							}
						}
						objeto.total = Number(objeto.docD) + Number(objeto.docND);
						objeto.tipo += "/"+objeto.total;
						finalArray.addItem(objeto);
						docD += objeto.docD
						docND += objeto.docND
					}
					
					var ert:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.CAMBIAR_COLOR_BOTON_ORDEN_DESPACHO);
					if(docND > 0)
						ert.completadaOrden = false;
					else
						ert.completadaOrden = true;
					
					dispatchEvent(ert);
					
					myChart.dataProvider = finalArray;
				}
				
			}
			
			
			private function formateoEje( $valor:Number, $valorPrevio:Object, $eje:Object ):String
			{
				var strRegreso:String = "";
				if($valor != 0 ) strRegreso = String( $valor );
				return strRegreso;
			}
			
			private function obtenerValor($eje:Object, $valor:String ):String
			{
				var arreglo:Array = $valor.split("/");
				return arreglo[1];
			}
			
			
		]]>
	</fx:Script>
	
	
	
	<mx:ColumnChart width="100%" height="100%" id="myChart"
					showDataTips="false" dataTipMode="single"  
					showDataTipTargets="false"
					mouseSensitivity="5" seriesFilters="[]"
					>
		
		<mx:series>
			
			<mx:ColumnSet type="stacked" showErrorTip="false">
				<mx:ColumnSeries id="serieDisponible"
								 yField="docD" 
								 labelPosition="inside"
								 displayName="docD"
								 styleName="titulo_Helvetica_20_Blanco"
								 showDataEffect="{fxInterpolateIn}"
								 itemRenderer="mx.com.proquifa.vista.vistas.gestorCompras.componentes.ordenDespacho.resumen.BarraVerde"
								 />
				
				<mx:ColumnSeries id="serieNoDisponible"
								 yField="docND" 
								 labelPosition="inside"
								 displayName="docND"
								 styleName="titulo_Helvetica_20_Blanco"
								 showDataEffect="{fxInterpolateIn}"
								 itemRenderer="mx.com.proquifa.vista.vistas.gestorCompras.componentes.ordenDespacho.resumen.BarraRoja"
								 />
			</mx:ColumnSet>
			
			
		</mx:series>
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="vTipo" categoryField="tipo" />
		</mx:horizontalAxis>
		
		<mx:verticalAxis>
			<mx:LinearAxis id="vCantidad" baseAtZero="true" labelFunction="formateoEje"/>
		</mx:verticalAxis>
		
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer axis="{vCantidad}" showLine="false" tickPlacement="none" styleName="axisVerticalLabels" />
		</mx:verticalAxisRenderers>
		
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer axis="{vTipo}" showLine="false" placement="bottom" labelFunction="obtenerValor"/>
			<mx:AxisRenderer axis="{vTipo}" axisStroke="{trazoGruezo}" tickStroke="{trazoDelgado}" placement="bottom" >
				<mx:labelRenderer>
					<fx:Component>
						<mx:Label  width="100%" fontWeight="normal" fontSize="12">
							<fx:Script><![CDATA[
								
								[Bindable]
								private var myTip:String;
								
								override public function set data(value:Object):void
								{
									if(value == null)
										return;
									
									var valor:Array = (value.text as String).split("/");
									if(valor[0] == "CartaUso")
									{
										myTip = "CARTA DE USO";
									}
									else if(valor[0] == "Pakinglist")
									{
										myTip = "PACKING LIST";
									}
									else
									{
										myTip = (valor[0] as String).toUpperCase();
									}
									
									this.text = myTip.toUpperCase();
								}
								
								
							]]></fx:Script>
						</mx:Label>
						
					</fx:Component>
				</mx:labelRenderer>
			</mx:AxisRenderer>
			
		</mx:horizontalAxisRenderers>
		
		<mx:backgroundElements>
			<mx:GridLines >
				<mx:horizontalStroke>
					<s:SolidColorStroke weight="0.5" color="0xeeeeee" />
				</mx:horizontalStroke>
			</mx:GridLines>
		</mx:backgroundElements>
	</mx:ColumnChart>
	
</s:VGroup>
