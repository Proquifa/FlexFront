<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:cmbCat="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 xmlns:otros="skins.otros.*" 
		 xmlns:label="skins.skin.label.*" 
		 xmlns:pqNet="skins.botones.pqNet.*" 
		 xmlns:chekbox="skins.skin.chekbox.*" 
		 xmlns:input="skins.skin.textinput.*" 
		 xmlns:contenedores="skins.skin.contenedores.*"
		 xmlns:textarea="skins.skin.textarea.*" 
		 xmlns:shaders="skins.skin.shaders.*" 
		 xmlns:numericStepper="skins.skin.numericStepper.*" 
		 creationComplete="group1_creationCompleteHandler(event)"
		 width="100%" height="100%" xmlns:evento="skins.botones.evento.*" xmlns:dateField="skins.skin.dateField.*" xmlns:generales="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.*" xmlns:botoneraFlotante="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.botoneraFlotante.*" xmlns:coverflowpqnet="mx.com.proquifa.proquifanet.rsl.vista.vistas.comun.coverflowpqnet.*" xmlns:itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.itemRenderer.*" xmlns:vistaOferta="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.comerciales.oferta.vistaOferta.*" xmlns:botonesToggle="skins.botonesToggle.*" xmlns:comun="mx.com.proquifa.proquifanet.rsl.vista.vistas.comun.*" xmlns:componentes="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.*" xmlns:ver="skins.botones.colores.ver.*" 
		 >
	
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.alertPqNet.EventoAlertaPqNet;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientesContratos;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.EventoCatClientes_General;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.comerciales.oferta.EventoCatClientes_Oferta;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.clientes.comerciales.oferta.ParametrosOfertaCliente;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.proveedores.EventoCatProGeneral;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ClasificacionConfiguracionPrecio;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ConfiguracionPrecio;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ConfiguracionPrecioProducto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.TiempoEntrega;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Cliente;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contrato;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Proveedor;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.StringFunciones;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsGrid;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.comerciales.oferta.itemRender.CatClienteOferta_IR_titulosAnimados;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.itemRenderer.CatClientesContratos_ListaPreciosListaEnfocados;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.itemRenderer.CatClientesOferta_ListaEnfocados_IR;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.generales.itemRenderer.CatClientes_IR_listaConfiguracionProductos;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			
			import flashx.textLayout.elements.BreakElement;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotoneras;
			[Bindable] public var heightComponentes:Number = 30;
			private var _habilitados:ArrayCollection;
			[Bindable] public static  var clienteActual:Cliente;
			[Bindable]private var universoProveedores:ArrayCollection;
			public  var _titulo:CatClienteOferta_IR_titulosAnimados = new CatClienteOferta_IR_titulosAnimados();
			private var numeroDeConfifuracionSeleccionada:uint;
			private var _indiceSeleccionado:int;
			private var _ConfPProducto_Gral:Number;
			private var currentProveedor:Proveedor;
			private var _currentSeleccionado:ConfiguracionPrecioProducto;
			[Bindable]public static var nivelActual_Contrato:String = "Generales";
			[Bindable]public static var ProveedorActual_Contratos:Proveedor;
			public static var idFamiliaActual:Number; 
			private var auxListaconfiguracionesPreList:ArrayCollection = new ArrayCollection();
			private var indexEncontrado:Number = -1;
			
			
			
			public var  vieneDeEditar:Boolean;
			
			[Bindable] private	var arrayMenu:ArrayList = new ArrayList(["1.- VIGENCIA Y MARCAS","2.-FAMILIAS","3.-CONTRATO"]);	
			
			private var _arregloConfiguraciones:ArrayCollection;
			private var _arrButton:ArrayCollection = new ArrayCollection( [  { valor:' PRECIO', colorBase: catalogoColores.LABEL_VERDE_AZUL, fontSize:16, icono:'precioChico' }, 
				{ valor:' TIEMPO ENTREGA', colorBase: catalogoColores.LABEL_VERDE_AZUL, fontSize:16, icono:'tiempoEntrega' },
			] );
			
			
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				
				/*addEventListener(EventoCatClientes_General.MANDAR_INDEX_MENU_FLOTANTE,recibirInformacionMenuFlotante);*/
				addEventListener("agregarItem",agregarItem,false,0,true);
				addEventListener("removerItem",removerItem,false,0,true);
				
				obtenerProveedores();
				cargarComboAnos();
				menuFlo.data = arrayMenu;
				
				menuFlo.addEventListener("avanzarVista",avanzarVista);
				menuFlo.addEventListener("verificaSiavanza",verificaSiAvanza);
				menuFlo.addEventListener("regresarVista",regresarVista);
				
				botoneraBarra.dataProvider = _arrButton;
				botoneraBarra.selectedIndex = 0;
				
				addEventListener( EventoCatClientes_Oferta.RECORRE_TITULO_SELECCIONADO, verificarCambiosDeConfiguraciones,false,0,true );
				addEventListener( EventoCatClientes_Oferta.CAMBIA_NIVEL_EN_VISTA_OFERTA, cargaInformacion,false,0,true );
				
				lstClasificacionEnfoque.addEventListener("agregarClasificacion",obenterInfoConfClasificacion);
				seccionClasificacion.listaClasificacion.addEventListener("EliminarConfClasificacionContratos",eliminarConfClasificacion);
				
				
				lstProductoEnfoque.addEventListener("agregarProducto",agregarNuevoProducto);
				seccionProductos.listaProductosConf.addEventListener("EliminarConfProductoContratos",eliminarConfProducto);
				
				lstCostoEnfoque.addEventListener("agregarPrecioLista",agregarElementoPrueba);
				seccionPrecioLista.listaPreciosLisCon.addEventListener("EliminarconfPreListaContratos",eliminarConfPrecioLis)
				
				seccionPrecioLista.cli = clienteActual;
				seccionClasificacion.cli = clienteActual;
				
				menuFlo.maxItemList = 1;
				
				contratoFirmado.addEventListener("verificarCompleto",verificaVistaCompleta);
				
				seccionGenerales.addEventListener("ActualizarGenerales",almacenarNivelGeneral);
				seccionTiempoEntrega.addEventListener("ActualizarGenerales",almacenarNivelGeneral);
				
				
			}
			
			
			
			var valores:ArrayCollection = new ArrayCollection();
			private function almacenarNivelGeneral(event:Event):void{
				
				indexEncontrado = 0;
				obtenerConfiguracionPL(_arregloConfiguraciones[0]);
			}			
			
			
			/*SECCIÓN AGREGAR/ELIMINAR CONFIGURACIÓN COSTO*/	
			
			private var agregarDatos:Boolean;
			protected function agregarElementoPrueba(event:Event):void
			{
				var currentItem:Object = (event.currentTarget as ListaConItemsEnfocados).currentItemTarget;
				_currentSeleccionado = ObjectUtil.copy(currentItem) as ConfiguracionPrecioProducto;
				obtenerConfiguracionPL(_currentSeleccionado);
			}
			
			private function obtenerConfiguracionPL(currenSeleccionado:ConfiguracionPrecioProducto):void
			{
				if (currenSeleccionado is ConfiguracionPrecioProducto )
				{
					var obtenerConfLista:EventoCatClientesContratos;
					if((currenSeleccionado as ConfiguracionPrecioProducto).idConfiguracionCosto == 0  && (currenSeleccionado as ConfiguracionPrecioProducto).restablecer == false)
					{
						obtenerConfLista = new EventoCatClientesContratos(EventoCatClientesContratos.OBTENER_CONFIGURACION_PRECIO_LISTA_CONF_FAMILIA_CONTRATOS);
						obtenerConfLista.idCurrentSolicitud =  (currenSeleccionado as ConfiguracionPrecioProducto).idConfiguracionFamilia;
					}
					else
					{
						obtenerConfLista = new EventoCatClientesContratos(EventoCatClientesContratos.OBTENER_CONFIGURACION_PRECIO_LISTA_CONF_COSTO_CONTRATOS);
						obtenerConfLista.idCurrentSolicitud =  (currenSeleccionado as ConfiguracionPrecioProducto).idConfiguracionCosto;
					}
					obtenerConfLista.idCategoriaPrecioLista = (currenSeleccionado as ConfiguracionPrecioProducto).producto.categoriaPrecioLista;
					obtenerConfLista.nivelIngreso = clienteActual.nivelIngreso;
					obtenerConfLista.idCliente =  clienteActual.idCliente;
					dispatchEvent(obtenerConfLista);
					agregarDatos= true;
					
				}
			}
			
			
			public function set recibirConfiguracionPLista(conf:ConfiguracionPrecioProducto):void
			{
				if(conf== null)
					return;
				
				
				if(nivelActual_Contrato!= "Generales")
				{
					if(agregarDatos)
					{
						
						var indice:int;
						if(indexEncontrado >= 0)
							indice = indexEncontrado;
						else
							indice = lstCostoEnfoque.newIndexSinEnfoque;
						
						if(lstCostoEnfoque.dataProvider[indice].tiempoEntregaRuta == null)
							lstCostoEnfoque.dataProvider[indice].tiempoEntregaRuta = new ArrayCollection();
						
						if(lstCostoEnfoque.dataProvider[indice].parametrosOferta == null)
						{
							lstCostoEnfoque.dataProvider[indice].tiempoEntregaRuta = conf.tiempoEntregaRuta;
							lstCostoEnfoque.dataProvider[indice].idConfiguracionPrecioProducto = conf.idConfiguracionPrecioProducto;
							lstCostoEnfoque.dataProvider[indice].costoFactorProducto.idAgenteAduanal = conf.costoFactorProducto.idAgenteAduanal;
							lstCostoEnfoque.dataProvider[indice].costoFactorProducto.idLugarAgenteAduanal = conf.costoFactorProducto.idLugarAgenteAduanal;
							lstCostoEnfoque.dataProvider[indice].costoFactorProducto.idLugarConcepto = conf.costoFactorProducto.idLugarConcepto;
							lstCostoEnfoque.dataProvider[indice].nivel = nivelActual_Contrato;
							lstCostoEnfoque.dataProvider[indice].parametrosOferta = llenarParametrosOferta(conf);
							
						}
						agregarNuevoPrecioLis();
					}
				}
				else if(nivelActual_Contrato == "Generales")
				{
					var indice:int = 0;
					_arregloConfiguraciones[indice].parametrosOferta = llenarParametrosOferta(conf);
					var inicial:ArrayCollection = _arregloConfiguraciones as ArrayCollection;
					var currentCopia:Object = ObjectUtil.copy(inicial[indice]) as Object;
					
					
					
					
					if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
					{
						
						if (mapaMarcas[ProveedorActual_Contratos.idProveedor].hasOwnProperty([nivelActual_Contrato]))
						{
							mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = currentCopia;
						}
						else
						{
							mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = new ConfiguracionPrecioProducto();
							mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = currentCopia;
						}
						
						
					}
					
				}
				
			}
			
			
			private function agregarNuevoPrecioLis():void{
				
				var indice:int;
				
				if(indexEncontrado >= 0)
					indice = indexEncontrado;
				else
				    indice = lstCostoEnfoque.newIndexSinEnfoque;
				var inicial:ArrayCollection = lstCostoEnfoque.dataProvider as ArrayCollection;
				var final:ArrayCollection = seccionPrecioLista.listaPreciosLisCon.dataProvider as ArrayCollection;
				var currentCopia:Object = ObjectUtil.copy(inicial[indice]) as Object;
				
				if(final == null)
					final = new ArrayCollection();
				
				inicial.removeItemAt(indice);
				inicial.removeItemAt(inicial.length - 1);
				lstCostoEnfoque.dataProvider = inicial;
				
				/*final.addItem(currentCopia);*/
				
				if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
				{
					
					if (mapaMarcas[ProveedorActual_Contratos.idProveedor].hasOwnProperty([nivelActual_Contrato]))
					{
						(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).addItem(currentCopia);
					}
					else
					{
						mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = new ArrayCollection();
						(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).addItem(currentCopia);
					}
					
					
				}
				seccionPrecioLista.listaPreciosLisCon.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection;
				
				agregarDatos = false;
				indexEncontrado = -1;
				enumerarListasConfiguraciones(seccionPrecioLista.listaPreciosLisCon.dataProvider as ArrayCollection);
				
				if (vieneDeEditar)
				{
					if(totalIds.length > 0)
					{
						totalIds.removeItemAt(0);
						if (totalIds.length > 0 ) {
							
							var result:ArrayCollection =  UtilsGrid.indexQueryCampoX(lstCostoEnfoque.dataProvider, 'idConfiguracion', totalIds[0].idConfiguracion);
							
							if(result.length > 0)
							{
								var index:int = UtilsGrid.indexQueryCampoX(lstCostoEnfoque.dataProvider, 'idConfiguracion', totalIds[0].idConfiguracion)[0];
								indexEncontrado = index;
								obtenerConfiguracionPL(lstCostoEnfoque.dataProvider[index]);
							}
							agregarDatos = true;
						}
					}
				
				}
				
			}
			private function eliminarConfPrecioLis(event:Event):void{
				
				var indice:int = seccionPrecioLista.listaPreciosLisCon.selectedIndex;
				var final:ArrayCollection = seccionPrecioLista.listaPreciosLisCon.dataProvider as ArrayCollection;
				var currentCopia:Object = ObjectUtil.copy(final[indice]) as Object;
				var inicial:ArrayCollection = lstCostoEnfoque.dataProvider as ArrayCollection;
				
				inicial.removeItemAt(inicial.length - 1);
				inicial.addItem(currentCopia);
				lstCostoEnfoque.dataProvider = inicial;
				if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
				{
					(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).removeItemAt(indice);
				}
			/*	final.removeItemAt(indice)*/
				
				seccionPrecioLista.listaPreciosLisCon.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection;
				
				enumerarListasConfiguraciones(seccionPrecioLista.listaPreciosLisCon.dataProvider as ArrayCollection);
			}
			
			
			/////////////////////////////////*SECCIÓN AGREGAR/ELIMINAR CONFIGURACIÓN CLASIFICACIÓN*/////////////////////////////////////////////////////////////////////////
			
			
			protected function obenterInfoConfClasificacion(event:Event):void
			{
				if((event.currentTarget as ListaConItemsEnfocados).currentItemTarget is ClasificacionConfiguracionPrecio)
				{
					var listaClasifEnfoqueCurrentItem:ClasificacionConfiguracionPrecio;
					listaClasifEnfoqueCurrentItem = (event.currentTarget as ListaConItemsEnfocados).currentItemTarget as ClasificacionConfiguracionPrecio;
					
					if(listaClasifEnfoqueCurrentItem.totalProductos > 0)
					{
						var obtenerConfClasificacion:EventoCatClientesContratos = new EventoCatClientesContratos(EventoCatClientesContratos.OBTENER_CONFIGURACION_CLASIFICACION_CONTRATOS);
						obtenerConfClasificacion.idCurrentSolicitud = listaClasifEnfoqueCurrentItem.idConfigFamilia;
						obtenerConfClasificacion.idClasificacion = listaClasifEnfoqueCurrentItem.idClasificacion;
						obtenerConfClasificacion.idCliente = clienteActual.idCliente;
						obtenerConfClasificacion.nivelIngreso = clienteActual.nivelIngreso;
						dispatchEvent(obtenerConfClasificacion);
					}
				}
				
			}
			
			
			public function set recibirConfiguracionPrecioClasificacion(conf:ConfiguracionPrecioProducto):void
			{
				if(conf== null)
					return;
				
				var indice:int = lstClasificacionEnfoque.newIndexSinEnfoque;
				
				if(lstClasificacionEnfoque.dataProvider[indice].parametrosOferta == null)
				{
					lstClasificacionEnfoque.dataProvider[indice].confPrecioProducto = conf;
					lstClasificacionEnfoque.dataProvider[indice].costoFactorProducto = conf.costoFactorProducto;
					lstClasificacionEnfoque.dataProvider[indice].parametrosOferta = new ParametrosOfertaCliente;
					lstClasificacionEnfoque.dataProvider[indice].parametrosOferta = llenarParametrosOferta(conf);
					
				}
				
				agregarNuevaClasificacion();
				
			}
			
			
		
			
			
			
			private function agregarNuevaClasificacion():void{
				
				var indice:int = lstClasificacionEnfoque.newIndexSinEnfoque;
				var inicial:ArrayCollection = lstClasificacionEnfoque.dataProvider as ArrayCollection;
				var final:ArrayCollection = seccionClasificacion.listaClasificacion.dataProvider as ArrayCollection;
				var currentCopia:Object = ObjectUtil.copy(inicial[indice]) as Object;
				
				if(final == null)
					final = new ArrayCollection();
				
				inicial.removeItemAt(indice);
				inicial.removeItemAt(inicial.length - 1);
				lstClasificacionEnfoque.dataProvider = inicial;
				
				if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
				{
					
					if (mapaMarcas[ProveedorActual_Contratos.idProveedor].hasOwnProperty([nivelActual_Contrato]))
					 {
						(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).addItem(currentCopia);
					 }
					else
					 {
						mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = new ArrayCollection();
						(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).addItem(currentCopia);
					 }
					
				
			  }
				
			/*	final.addItem(currentCopia);*/
				
				     seccionClasificacion.listaClasificacion.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection;
				     enumerarListasConfiguracionesTipoClasificacion(lstClasificacionEnfoque.dataProvider as ArrayCollection);
					enumerarListasConfiguracionesTipoClasificacion(seccionClasificacion.listaClasificacion.dataProvider as ArrayCollection);
			
				
			}
			
			
			private function eliminarConfClasificacion(event:Event):void{
				
				var indice:int = seccionClasificacion.listaClasificacion.selectedIndex;
				var final:ArrayCollection = seccionClasificacion.listaClasificacion.dataProvider as ArrayCollection;
				var currentCopia:Object = ObjectUtil.copy(final[indice]) as Object;
				var inicial:ArrayCollection = lstClasificacionEnfoque.dataProvider as ArrayCollection;
				
				inicial.removeItemAt(inicial.length - 1);
				inicial.addItem(currentCopia);
				lstClasificacionEnfoque.dataProvider = inicial;
				
				if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
				{
					(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).removeItemAt(indice);
				}
				
			/*	final.removeItemAt(indice);*/
				seccionClasificacion.listaClasificacion.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection;
				enumerarListasConfiguracionesTipoClasificacion(lstClasificacionEnfoque.dataProvider as ArrayCollection);
				enumerarListasConfiguracionesTipoClasificacion(seccionClasificacion.listaClasificacion.dataProvider as ArrayCollection);
			}
			
			
		///////////////////////////*SECCIÓN AGREGAR/ELIMINAR CONFIGURACIÓN PRODUCTO*///////////////////////////
			private function agregarNuevoProducto(event:Event):void{
				insertarInformacionAlproducto();
			}
			
			
			
			
			
			private function insertarInformacionAlproducto():void{
				var indice:int;
				if(indexEncontrado >=0)
					indice = indexEncontrado;
				else
				 indice = lstProductoEnfoque.newIndexSinEnfoque;
				var inicial:ArrayCollection = lstProductoEnfoque.dataProvider as ArrayCollection;
				var final:ArrayCollection = seccionProductos.listaProductosConf.dataProvider as ArrayCollection;
				var currentCopia:Object = ObjectUtil.copy(inicial[indice]) as Object;
				currentCopia.nivel = nivelActual_Contrato;
				
				if(currentCopia.parametrosOferta == null)
				{
					currentCopia.parametrosOferta  = new ParametrosOfertaCliente();
					currentCopia.parametrosOferta = llenarParametrosOferta(currentCopia as ConfiguracionPrecioProducto);
				}
					else
					currentCopia.parametrosOferta = llenarParametrosOferta(currentCopia as ConfiguracionPrecioProducto);
					
				
				if(final == null)
					final = new ArrayCollection();
				
				inicial.removeItemAt(indice);
				inicial.removeItemAt(inicial.length - 1);
				lstProductoEnfoque.dataProvider = inicial;
				
				if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
				{
					
					if (mapaMarcas[ProveedorActual_Contratos.idProveedor].hasOwnProperty([nivelActual_Contrato]))
					{
						(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).addItem(currentCopia);
					}
					else
					{
						mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = new ArrayCollection();
						(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).addItem(currentCopia);
					}
					
					
				}
				
				
				/*final.addItem(currentCopia);*/
				
				seccionProductos.listaProductosConf.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection;
				enumerarListasConfiguraciones(lstProductoEnfoque.dataProvider as ArrayCollection);
				enumerarListasConfiguraciones(seccionProductos.listaProductosConf.dataProvider as ArrayCollection);
				indexEncontrado = -1;
				
				if (vieneDeEditar)
				{
					if(totalIds.length > 0)
					{
						totalIds.removeItemAt(0);
						if (totalIds.length > 0 ) {
							
							var result:ArrayCollection =  UtilsGrid.indexQueryCampoX(lstCostoEnfoque.dataProvider, 'idConfiguracionPrecioProducto', totalIds[0].idConfiguracion);
							
							if(result.length > 0)
							{
								var index:int = UtilsGrid.indexQueryCampoX(lstCostoEnfoque.dataProvider, 'idConfiguracionPrecioProducto', totalIds[0].idConfiguracion)[0];
								indexEncontrado = index;
								insertarInformacionAlproducto();
							}
							
						}
					}
					
				}
				
			}
			
			private function eliminarConfProducto(event:Event):void{
				
				var indice:int = seccionProductos.listaProductosConf.selectedIndex;
				var final:ArrayCollection = seccionProductos.listaProductosConf.dataProvider as ArrayCollection;
				var currentCopia:Object = ObjectUtil.copy(final[indice]) as Object;
				var inicial:ArrayCollection = lstProductoEnfoque.dataProvider as ArrayCollection;
				
				inicial.removeItemAt(inicial.length - 1);
				inicial.addItem(currentCopia);
				lstProductoEnfoque.dataProvider = inicial;
				
				if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
				{
					(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection).removeItemAt(indice);
				}
				/*final.removeItemAt(indice);*/
				
				seccionProductos.listaProductosConf.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] as ArrayCollection;
				enumerarListasConfiguraciones(lstProductoEnfoque.dataProvider as ArrayCollection);
				enumerarListasConfiguraciones(seccionProductos.listaProductosConf.dataProvider as ArrayCollection);
				
			}
			
			
			private function enumerarListasConfiguraciones($listConfAenumerar:ArrayCollection):void
			{
				for (var i:int = 0; i < $listConfAenumerar.length; i++) 
				{
					if ($listConfAenumerar[i] is ConfiguracionPrecioProducto)
						($listConfAenumerar[i] as ConfiguracionPrecioProducto).numFila = i+1;
				}
			}
			
			
			private function enumerarListasConfiguracionesTipoClasificacion($listConfAenumerar:ArrayCollection):void
			{
				for (var i:int = 0; i < $listConfAenumerar.length; i++) 
				{
					if ($listConfAenumerar[i] is ClasificacionConfiguracionPrecio)
						($listConfAenumerar[i] as ClasificacionConfiguracionPrecio).numFila = i+1;
				}
			}
			
			
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
			
			protected function llenarParametrosOferta(confaux:ConfiguracionPrecioProducto):ParametrosOfertaCliente
			{
				var parametrosOfertaAux:ParametrosOfertaCliente = new ParametrosOfertaCliente();
				var evt:EventoCatClientes_Oferta;
				var lista:ArrayCollection = new ArrayCollection();
			
				confaux.parametrosOferta = new ParametrosOfertaCliente();
				confaux.parametrosOferta.temporal = false;
				confaux.parametrosOferta.duracionTemp = 0;
				
				
				
				
				if( CatClientesContratos.nivelActual_Contrato == 'Producto' )
				{
					parametrosOfertaAux.idConfigPrecioProd = confaux.idConfiguracionPrecioProducto;
					parametrosOfertaAux.idCliente = clienteActual.idCliente;
					parametrosOfertaAux.nivelConfigPrecio = 'Producto';
					parametrosOfertaAux..tipoNivelIngreso = clienteActual.nivelIngreso;
					parametrosOfertaAux..factor = confaux.costoFactorProducto.factorCliente;
				
				}
				else if( CatClientesContratos.nivelActual_Contrato== 'Precio lista' )
				{
					parametrosOfertaAux.idConfigPrecioProd = confaux.idConfiguracionPrecioProducto;
					parametrosOfertaAux.idCliente = clienteActual.idCliente;
					parametrosOfertaAux.nivelConfigPrecio = 'Costo';
					parametrosOfertaAux.tipoNivelIngreso = clienteActual.nivelIngreso;
					parametrosOfertaAux.factor = confaux.costoFactorProducto.factorCliente;
					
					
				}
				else if( CatClientesContratos.nivelActual_Contrato == 'Clasificacion' )
				{
					parametrosOfertaAux.idConfigPrecioProd = confaux.idConfiguracionPrecioProducto;
					parametrosOfertaAux.idCliente = clienteActual.idCliente;
					parametrosOfertaAux.nivelConfigPrecio = 'Clasificacion';
					parametrosOfertaAux.tipoNivelIngreso = clienteActual.nivelIngreso;
					parametrosOfertaAux.factor = confaux.costoFactorProducto.factorCliente;
					
					
				}
				else if( CatClientesContratos.nivelActual_Contrato == 'Generales' )
				{
					parametrosOfertaAux.idConfigPrecioProd = confaux.idConfiguracionPrecioProducto;
					parametrosOfertaAux.idCliente = clienteActual.idCliente;
					parametrosOfertaAux.nivelConfigPrecio = 'Familia';
					parametrosOfertaAux.tipoNivelIngreso = clienteActual.nivelIngreso;
					parametrosOfertaAux.factor = Number(seccionGenerales.txtFactor.text);
					
				}
				
				
				
				parametrosOfertaAux.temporal = false;
				parametrosOfertaAux.precioListaAnterior = false; 
				parametrosOfertaAux.costoFijo = confaux.costoFactorProducto.factorCostoFijo;
				parametrosOfertaAux.compuestaCostoF = true;
				parametrosOfertaAux.compuestaFactorU = true;
				parametrosOfertaAux.idAgente = confaux.costoFactorProducto.idAgenteAduanal;
				parametrosOfertaAux.idLugar = confaux.costoFactorProducto.idLugarAgenteAduanal;
				parametrosOfertaAux.idConcepto = confaux.costoFactorProducto.idLugarConcepto;
				if(CatClientesContratos.nivelActual_Contrato != 'Generales')
				parametrosOfertaAux.tiemposEntregaRuta = confaux.tiempoEntregaRuta;
				else{
					valores = new ArrayCollection();
					_configuracion.costoFactorProducto.factorCliente = Number(seccionGenerales.txtFactor.text);
					if(_encuentraRuta)
					{
					seccionTiempoEntrega.guardarValoresTiempoEntrega(_currentIndex);
					valores.addItem(_arrayLocalTE );
					valores.addItem(_arrayGuadalajaraTE );
					valores.addItem(_arrayForaneolTE );
					valores.addItem(_arrayCentroATE );
					valores.addItem(_arraySudaTE );
					valores.addItem(_arrayRestoMundoTE ); 
					}
					
					parametrosOfertaAux.tiemposEntregaRuta = valores;
				}
					
				parametrosOfertaAux.idProveedor = ProveedorActual_Contratos.idProveedor;
				parametrosOfertaAux.idConfigFamilia = confaux.idConfiguracion;
				
				return parametrosOfertaAux;

				
			}		
			
			private var evtCC:EventoCatClientes_Oferta;
			private function alertGuardarConfiguraciones(eventObj:EventoAlertaPqNet):void {
				if (eventObj.respuesta.botonSeleccionado == "SI"){
					
					
					alertaSingleton.show("mandar a guardar contratos");
					
				}
				else{
					mapaMarcas = new Object;
					mueveTitulos(evtCC);
					
				}
			}
			
			private function verificarCambiosDeConfiguraciones(event:EventoCatClientes_Oferta):void
			{
				if(auxConfiguracionSeleccionada.idConfiguracionPrecio != event.idConfigFamilia)
				{
					evtCC = event;
					var conInfo:Boolean = false;
					for( var i:int = 0; i < listaProSeleciconados.dataProvider.length ; i++ )
					{
						var proveedor:Proveedor = listaProSeleciconados.universo[i];
						if (mapaMarcas.hasOwnProperty(proveedor.idProveedor) ) {
							if (mapaMarcas[proveedor.idProveedor].hasOwnProperty("Generales") && mapaMarcas[proveedor.idProveedor]["Generales"].length > 0 ) {
								conInfo = true;
								break;
							}
							if (mapaMarcas[proveedor.idProveedor].hasOwnProperty("Clasificacion") && mapaMarcas[proveedor.idProveedor]["Clasificacion"].length > 0 ) {
								conInfo = true;
								break;
							}
							if (mapaMarcas[proveedor.idProveedor].hasOwnProperty("Producto") && mapaMarcas[proveedor.idProveedor]["Producto"].length > 0 ) {
								conInfo = true;
								break;
							}
							if (mapaMarcas[proveedor.idProveedor].hasOwnProperty("Precio lista") && mapaMarcas[proveedor.idProveedor]["Precio lista"].length > 0 ) {
								conInfo = true;
								break;
							}
							
						}
					}
					if(conInfo )
					{
						alertaSingleton.show("¿Guardar configuraciones?",catalogoAlertas.TIT_ADV_atencion,"","SI","NO","","",null,false,alertGuardarConfiguraciones);
						
					}
					else
					{
						
						mueveTitulos(evtCC);
					}
				}
				
				auxConfiguracionSeleccionada = ObjectUtil.copy(_configuracionSeleccionada) as ConfiguracionPrecio;
			
			}
			
			private function mueveTitulos( event:EventoCatClientes_Oferta ):void
			{
				
				if(currentItemSelected != event.idConfiguracion)
				{
					
					currentItemSelected = event.idConfiguracion;
					
					var totalMovimientos:int = 0;
					totalMovimientos = event.idConfiguracion; //esete id es realmente la ubicacion en la lista de titulos
					totalMovimientos = totalMovimientos - numeroDeConfifuracionSeleccionada;
					var $dato:String = '';
					
					if( totalMovimientos < 0)
					{
						$dato = 'izquierda';
						totalMovimientos = totalMovimientos * (-1);
					}
					else if(  totalMovimientos > 0  )
					{
						$dato = 'derecha';
					}
					else
					{
						totalMovimientos = 0;
					}
					
					for( var i:int = totalMovimientos; i > 0; i-- ){
						cambia( $dato,totalMovimientos );
					}
				
					{
						var enviarConfiguracion:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_CONFIGURACION_SELECCIONADA_CLIENTES);
						enviarConfiguracion.configuracionPrecio = event.configuracionPrecio;
						dispatchEvent(enviarConfiguracion);
						_configuracionSeleccionada = event.configuracionPrecio;
						auxConfiguracionSeleccionada = event.configuracionPrecio;
					}
					
					{
						
						var cambiarNiveles:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.CAMBIA_NIVEL_EN_VISTA_OFERTA);
						cambiarNiveles.nivel = event.nivel == null ? _nivel:event.nivel;
						dispatchEvent(cambiarNiveles);
						
						
					}
				}
			}  
			
			
			private function cargaInformacion($evt:EventoCatClientes_Oferta):void
			{ 
				_nivel =$evt.nivel;		
				nivelActual_Contrato = _nivel;
				
				dispatchEvent(new EventoCatClientes_Oferta(EventoCatClientes_Oferta.SOLICITAR_ACTUALIZACION_DE_LAS_CONFIGURACIONES_CLIENTE));
				
			} 
			
			private function avanzarVista(event:Event):void{
					
					if(menuFlo.maxItemList == 2)
					{
						menuFlo.maxItemList = 2;
						vistauno.visible = vistauno.includeInLayout = false;
						vistaDos.visible = vistaDos.includeInLayout = true;
						fechasContrato.visible = fechasContrato.includeInLayout = false;
						listaProSeleciconados.dataProvider(listaProCon.dataProvider as ArrayCollection);
					}
					else if(menuFlo.maxItemList == 3){
						
						if(contratoCliente != null  && contratoCliente.idContrato > 0 && contratoCliente.generado)
						{
							vistauno.visible = vistauno.includeInLayout = false;
							vistaDos.visible = vistaDos.includeInLayout = false;
							vistaTres.visible = vistaTres.includeInLayout = true;
							fechasContrato.visible = fechasContrato.includeInLayout = false;
							
							var generarDocContrato:EventoCatClientesContratos = new EventoCatClientesContratos (EventoCatClientesContratos.OBTENER_DOCUMENTO_CONTRATO);
							generarDocContrato.contrato = contratoCliente;
							generarDocContrato.rutaCliente = clienteActual.ruta;
							generarDocContrato.nivelIngreso = clienteActual.nivelIngreso;
							dispatchEvent(generarDocContrato);
							
							
						}
						else{
							menuFlo.maxItemList = 2;
							menuFlo.selectedIndex= 1;
							menuFlo.selectedCurrentView(2,1);
							alertaSingleton.show("Para avanzar tiene que generar el contrato");
						}
						
					}
				
			}
			
			private function verificaSiAvanza(event:Event):void{
				if(verificaInfoVistaUno() == "completa"){
					menuFlo.maxItemList = menuFlo.maxItemList +1;
					menuFlo.avanzaEntrePestanas(1);
				}
				else if(verificaInfoVistaUno() == "incompleta")
				{
					alertaSingleton.show("Información incompleta");
				}
				else if(verificaInfoVistaUno() == "fechasError"){
					alertaSingleton.show("La fecha inicio contrato no puede ser mayor a la fecha fin de contrato");
					
				}
				
			}
			
		
			
			private function regresarVista(event:Event):void{
				vistauno.visible = vistauno.includeInLayout = false;
				vistaDos.visible = vistaDos.includeInLayout = false;
				fechasContrato.visible = fechasContrato.includeInLayout = false;
				vistaTres.visible = vistaTres.includeInLayout = false;
				
				if(menuFlo.maxItemList > 1)
				{
					if(menuFlo.selectedIndex == 0)
						menuFlo.maxItemList = 1;
					else
					 menuFlo.maxItemList = menuFlo.maxItemList - 1;
				}
				
				if(menuFlo.selectedIndex == 0){
					vistauno.visible = vistauno.includeInLayout = true;
					fechasContrato.visible = fechasContrato.includeInLayout = true;
				}
				else if(menuFlo.selectedIndex == 1){
					vistaDos.visible = vistaDos.includeInLayout = true;
				}
				else if(menuFlo.selectedIndex == 2){
					vistaTres.visible = vistaTres.includeInLayout = true;
				}
				
				
			}
			
			private function verificaInfoVistaUno():String
			{
				var vistaCompletaUno:String = "completa";
				
				if(fechaFin.txtDateField.text == "" || fechaInicio.txtDateField.text == "" || listaProCon.dataProvider == null || listaProCon.dataProvider.length == 0|| cmbCondicionesPago.selectedIndex ==0) 
				{
					vistaCompletaUno = "incompleta";
				}
				else
				{
					if(fechaInicio.selectedDate > fechaFin.selectedDate)
						vistaCompletaUno = "fechasError";
				}
				
				return vistaCompletaUno;
				
				
			}
			
			private function obtenerProveedores():void{
				var $evt:EventoCatProGeneral = new EventoCatProGeneral( EventoCatProGeneral.OBTENER_PROVEEDORES );
				$evt.empleado = DatosGlobales.getInstance()._usuario;
				$evt.busquedaProveedores = 'Todos';
				dispatchEvent($evt);
			}
			
			public function set recibeProveedores($datos:ArrayCollection):void
			{
				if( $datos == null || $datos.length == 0 ){
					return;
				}
				
				
				_habilitados = new ArrayCollection();
				
				for( var i:int = 0; i < $datos.length ; i++ )
				{
					
					if( ($datos[i] as Proveedor).habilitado )
					{
						_habilitados.addItem( $datos[i] );
					}
					
					
				}
				
				universoProveedores = ObjectUtil.copy(_habilitados) as ArrayCollection;
				listaPro.dataProvider(_habilitados);
				
			}
			
			
		   
		/*SE RECIBEN LAS CONFIGURACIONES */
			
			//recibe configuración del nivel precio GENERALES
			public function set recibeConfiguracionFamilia( $configuraGenerales:ArrayCollection ):void{
				if( $configuraGenerales == null || $configuraGenerales.length == 0 ){
					return;
				}
				cargarInformacionSeccionPreEntrega($configuraGenerales[0],"Generales",currentProveedor);
			}
			
			//recibe configuración del nivel precio lista precio lista
			/*public function set recibirConfiguracionPLista(conf:ConfiguracionPrecioProducto):void
			{
				if(conf== null)
					return;
				cargarInformacionSeccionPreEntrega(conf, 'Precio lista',currentProveedor);
			}*/
			
			
			////////////////////////////////////////////////////////////////////////////*fin*///////////////////////////////////////////////////////////////////////////	
			
			protected function editarInfo($vieneDe:String = ''):void 
			{
				
			}
			
			
			
			
			
			public function set confirmaModificacion(confirmaGuardado:Boolean):void
			{
				if( confirmaGuardado == true)
					trace("Se registro la modificacion");
			}
			
			
			
			
			
			
			
			
			protected function editar(event:MouseEvent):void
			{
				
			}
			
			
			
			protected function cancelar(event:MouseEvent):void
			{
				
				
				inicia();
				
			}
			
			public function inicia():void
			{
				
				editarInfo('cancelar');
				
			}
			
			private static var contadorFinal:Number = 0;
			private var indiceValidar:int;
			protected function entroItem(event:DragEvent):void
			{
				
				
			}
			
			private function agregarItem(evt:Event):void
			{
				var indice:int = listaPro.listtodosPRO.selectedIndex;
				var inicial:ArrayCollection = listaPro.listtodosPRO.dataProvider as ArrayCollection;
				var final:ArrayCollection = listaProCon.dataProvider as ArrayCollection;
				var currentCopia:Proveedor = ObjectUtil.copy(inicial[indice]) as Proveedor;  
				
				if(final == null)
					final = new ArrayCollection();
				
				inicial.removeItemAt(indice);
				final.addItem(currentCopia);
				
				
				for (var p:int = 0; p < listaPro.universo.length; p++) 
				{
					if(listaPro.universo[p].idProveedor == currentCopia.idProveedor )
					{
						listaPro.universo.removeItemAt(p);
						break;
					}
					
				}
				
				listaProCon.dataProvider = final;
				actualizarVista();
				enumerarListaProveedores(final);ProveedorActual_Contratos
				
				
				
			}
			
			private function enumerarListaProveedores($contratos:ArrayCollection):void
			{
				for (var i:int = 0; i < $contratos.length; i++) 
				{
					Proveedor($contratos[i]).numFila = i+1;
				}
			}
			
			
			private function actualizarVista():void{
				if(listaProCon.dataProvider.length > 0){
					textoG.includeInLayout = textoG.visible = false;
					grpListaProCon.visible = grpListaProCon.includeInLayout = true;
				}
				else{
					textoG.includeInLayout = textoG.visible = true;
					grpListaProCon.visible = grpListaProCon.includeInLayout = false;
					
				}
			}
			
			
			private function removerItem(evt:Event):void
			{
				var indice:int = listaProCon.selectedIndex;
				var final:ArrayCollection = listaProCon.dataProvider as ArrayCollection;
				var currentCopia:Proveedor = ObjectUtil.copy(final[indice]) as Proveedor;
				var inicial:ArrayCollection = listaPro.listtodosPRO.dataProvider as ArrayCollection;
				
				inicial.addItem(currentCopia);
				final.removeItemAt(indice);
				listaPro.universo.addItem(currentCopia);
				
				actualizarVista();
				
			}
			
			[Bindable]	
			private var listaP:ArrayCollection = new ArrayCollection();
			private var listaFinalcbm:ArrayCollection = new ArrayCollection();
			private function cargarComboAnos():void{
				
				var fechaHoy:Date = new Date();
				var resultado: Number = 0;
				var cont:Number = -2;
				var inValor:Number = 1;
				
				
				var anoAct:Number = fechaHoy.fullYear;
				
				for (var k:int = -2; k<=2 ; k++) 
				{
					var num:Object = new Object();
					num.valor = anoAct + (cont);
					num.llave = inValor;
					cont = cont +1;
					inValor = inValor +1;
					listaP.addItem(num);
				}
				
				
			}
			
			public function limpiarVistas():void{
				listaProCon.dataProvider = new ArrayCollection();
				fechaFin.selectedDate = null;
				fechaInicio.selectedDate = null;
				listaPro.dataProvider(ObjectUtil.copy(universoProveedores) as ArrayCollection);
			}
			
			private function verificarClienteCorporativo():void
			{
				if(clienteActual && clienteActual.idCorporativo > 0)
				{
					
					alertaSingleton.show( 'Este Cliente pertenece a un Corporativo, se modificaran TODOS los clientes hermanos.   ¿Desea Continuar?' ,catalogoAlertas.TIT_ADV_atencion,'catClientesOfertaCorp','','','SI','NO');
				}
				/*else
					guarda();*/
			}
			
			
			protected function lnkGuardar_clickHandler(event:MouseEvent,generarCon:Boolean):void
			{
				if(verificaInfoVistaUno() == "completa")
				{
					if(generarCon)
						alertaSingleton.show("Ya no se podrán realizar más modificaciones al contrato ¿Está seguro de continuar?",catalogoAlertas.TIT_ADV_atencion,"","SI","NO","","",null,false,respuestaalertaDeceaGenerarContrato);
					else
						guardarContrato(generarCon);
				}
				else if(verificaInfoVistaUno() == "incompleta")
				{
					alertaSingleton.show("Información incompleta");
				}
				else if(verificaInfoVistaUno() == "fechasError"){
					alertaSingleton.show("La fecha inicio contrato no puede ser mayor a la fecha fin de contrato");
					
				}
				
			}
			
			private function guardarContrato(generarCon:Boolean):void{
				var contratoNew:Contrato = new Contrato();
				var listaConfiguraciones:ArrayCollection = new ArrayCollection;
				contratoNew.fechaFin = fechaFin.selectedDate;
				contratoNew.fechaInicio = fechaInicio.selectedDate;
				contratoNew.idCliente =  clienteActual.idCliente;
				contratoNew.condionesPago = cmbCondicionesPago.selectedItem.valor;
				/*	contratoNew.documento = cargarDocumento.byteArray;*/
				if(vieneDeEditar || ( contratoCliente != null && contratoCliente.idContrato > 0))
					contratoNew.idContrato = contratoCliente.idContrato;
				else
					contratoNew.idContrato = 0;
				
				contratoNew.generado = generarCon;
				contratoNew.marcas = listaProCon.dataProvider as ArrayCollection;
				
				
				for(var i:String in mapaMarcas)
				{
					if (mapaMarcas[i].hasOwnProperty("Clasificacion") && mapaMarcas[i]["Clasificacion"].length > 0) {
						listaConfiguraciones.addAll( mapaMarcas[i]["Clasificacion"]);
					}
					if (mapaMarcas[i].hasOwnProperty("Generales") && mapaMarcas[i]["Generales"].parametrosOferta != null) {
						listaConfiguraciones.addItem( mapaMarcas[i]["Generales"]);
					}
					if (mapaMarcas[i].hasOwnProperty("Precio lista") && mapaMarcas[i]["Precio lista"].length > 0) {
						listaConfiguraciones.addAll( mapaMarcas[i]["Precio lista"]);
					}
					if (mapaMarcas[i].hasOwnProperty("Producto") && mapaMarcas[i]["Producto"].length > 0) {
						listaConfiguraciones.addAll( mapaMarcas[i]["Producto"]);
					}
				}
				
				var lista:ArrayCollection = new ArrayCollection();
				for (var m:int = 0; m < listaConfiguraciones.length; m++) 
				{
					lista.addItem(listaConfiguraciones[m].parametrosOferta);
				}
				
				contratoNew.configuracionesContrato = lista;
				
				var eve:EventoCatClientes_General = new EventoCatClientes_General(EventoCatClientes_General.GUARDAR_CONTRATO_CLIENTE);
				eve.contrato = contratoNew;
				dispatchEvent( eve );
				
			}
			
			private function respuestaalertaDeceaGenerarContrato(eventObj:EventoAlertaPqNet):void {
				
				if (eventObj.respuesta.botonSeleccionado == "SI"){
				
					   guardarContrato(true);
					
				}
				
			}
			
			
			
			protected function lnkCancelar_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("canceloAgregarContrato"));
				
			}
			
			
			public function set recivecontratoGuardado(contra:Contrato):void{
				
				if( contra != null && contra.idContrato > 0)
				{
					contratoCliente = contra;
					
					if(!contra.generado)
					{
						lnkGenerarContratoActivo.visible = lnkGenerarContratoActivo.includeInLayout = true;
						lnkGenerarContrato.visible = lnkGenerarContrato.includeInLayout = false;
						
					}
					else{
						lnkGenerarContratoActivo.visible = lnkGenerarContratoActivo.includeInLayout = false;
						lnkGenerarContrato.visible = lnkGenerarContrato.includeInLayout = false;
						lnkGuardar.visible = lnkGuardar.includeInLayout = false;
						lnkFinalizar.visible = lnkFinalizar.includeInLayout = true;
						menuFlo.avanzaEntrePestanas(1);
						menuFlo.grpRegresa.enabled = false;
						menuFlo.imgRegresaV.enabled = true;
						
					}
				
				}
				
			} 
			
			public var contratoCliente:Contrato;
			public function reciveContratoAeditar(ContraA:Contrato):void{
				var cont:int = 0;
				contratoCliente = ContraA;
				fechaFin.selectedDate = ContraA.fechaFin;
				fechaInicio.selectedDate = ContraA.fechaInicio;
				
				for (var i:int = 0; i < ContraA.marcas.length; i++) 
				{
					cont = cont +1;
					ContraA.marcas[i].numFila = cont;
				}
				
				listaProCon.dataProvider = ObjectUtil.copy(ContraA.marcas) as ArrayCollection;
				
				
				for (var k:int = 0; k < listaPro.listtodosPRO.dataProvider.length ; k++) 
				{
					for (var m:int = 0; m < ContraA.marcas.length ; m++) 
					{
						if( ContraA.marcas[m].idProveedor == listaPro.listtodosPRO.dataProvider[k].idProveedor )
						{
							listaPro.listtodosPRO.dataProvider.removeItemAt(k);
						}
						
					}
					
				}
				
				
				for (var i:int = 0; i < cmbCondicionesPago.dataProvider.length; i++) 
				{
					if(cmbCondicionesPago.dataProvider[i].valor== ContraA.condionesPago)
					{
						cmbCondicionesPago.selectedIndex = i;
						break;
					}
				}
				
				
				/*	cargarDocumento.recibeUrlDocumento(RutasPdF.GENERAL_RUTA + RutasPdF.CONTRATOS_CLIENTE + ContraA.idContrato + ".pdf");*/
				actualizarVista();
				
				
				
			}
			
			private var arregroTitulosPorFamilia:ArrayCollection;
			public function set recibeLasFamiliasDelProveedorSeleccionado($familias:ArrayCollection):void
			{
				txtClasificacion.text = "";
				txtCosto.text = "";
				txtProducto.text = "";
				
				if(listaProSeleciconados.listtodosPRO.selectedItem != undefined ) 
					currentProveedor = listaProSeleciconados.listtodosPRO.selectedItem;
				
				_universoProductos = new ArrayCollection;
				_universoCostos = new ArrayCollection;
				_universoClasificaciones = new ArrayCollection; 
				
				if($familias == null || $familias.length ==0 )
				{
					_nivel = "Generales";
					mandarALimpiarTodo();
					arregroTitulosPorFamilia = new ArrayCollection;
					grpImagenes.removeAllElements();
					
					if (_titulo)
						_titulo.modificarCurrentNivel("General");
					
					var fechas:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_FECHA_OFERTA_SELECCIONADO);
					dispatchEvent(fechas); 
					
					return;
				}
				
				trace("llegaron las familias");
				
				arregroTitulosPorFamilia = $familias;
				familySort();
				
				numeroDeConfifuracionSeleccionada = 0;
				(arregroTitulosPorFamilia[0] as ConfiguracionPrecio).titutloSeleccionado = true;
				
				_configuracionSeleccionada = new ConfiguracionPrecio;
				_configuracionSeleccionada = ObjectUtil.copy((arregroTitulosPorFamilia[0] as ConfiguracionPrecio)) as ConfiguracionPrecio;
				auxConfiguracionSeleccionada = ObjectUtil.copy((arregroTitulosPorFamilia[0] as ConfiguracionPrecio)) as ConfiguracionPrecio;
				
				var enviarConfiguracion:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_CONFIGURACION_SELECCIONADA_CLIENTES);
				enviarConfiguracion.configuracionPrecio = (arregroTitulosPorFamilia[0] as ConfiguracionPrecio);
				
				btnIzquierdo.enabled = false;
				
				if( arregroTitulosPorFamilia.length == 1 )
				{
					btnDerecho.enabled = false;	
				}
				else if( arregroTitulosPorFamilia.length > 1 )
				{
					btnDerecho.enabled = true;
				}
				
				_indiceSeleccionado = 0;
				_nivel = 'Generales';
				if (grpImagenes.numElements > 0 ){
					var itemRender:CatClienteOferta_IR_titulosAnimados = grpImagenes.getElementAt(0) as CatClienteOferta_IR_titulosAnimados;
					itemRender.modificarCurrentNivel("General");
					itemRender.idClick = "btnGeneralgp";
					itemRender.btnGeneral.selected = true;
					itemRender.btnPrecioLista.selected = false;
					itemRender.btnProducto.selected = false;
					itemRender.btnClasificacion.selected = false;
					itemRender.btnExportarProd.selected = false;
				}
				/*lblSeccion.text = 'GENERALES';*/
				acomoda();
				
				dispatchEvent( enviarConfiguracion );
				
				almecenarConfiguracionesSeleccionadas();
				
				dispatchEvent(new EventoCatClientes_Oferta(EventoCatClientes_Oferta.SOLICITAR_ACTUALIZACION_DE_LAS_CONFIGURACIONES_CLIENTE));
				
			}
			
			
			
			public var mapaMarcas:Object = new Object;
			private function almecenarConfiguracionesSeleccionadas():void
			{
				
			/*	mapaMarcas = new Object();
				*/
				seccionPrecioLista.listaPreciosLisCon.dataProvider = new ArrayCollection();
				seccionClasificacion.listaClasificacion.dataProvider = new ArrayCollection();
				seccionProductos.listaProductosConf.dataProvider = new ArrayCollection();
				if (mapaMarcas.hasOwnProperty(ProveedorActual_Contratos.idProveedor))
				{
					if (mapaMarcas[ProveedorActual_Contratos.idProveedor]['Generales'])
					{
						
					}
					if (mapaMarcas[ProveedorActual_Contratos.idProveedor]['Precio lista'])
					{
						seccionPrecioLista.listaPreciosLisCon.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor]['Precio lista'] as ArrayCollection;
					}
					if (mapaMarcas[ProveedorActual_Contratos.idProveedor]['Clasificacion'])
					{
						seccionClasificacion.listaClasificacion.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor]['Clasificacion'] as ArrayCollection;
					}
					if (mapaMarcas[ProveedorActual_Contratos.idProveedor]['Producto'])
					{
						seccionProductos.listaProductosConf.dataProvider = mapaMarcas[ProveedorActual_Contratos.idProveedor]['Producto'] as ArrayCollection;
					}
					
					
				}
				else
				{
					mapaMarcas[ProveedorActual_Contratos.idProveedor] = new Object;
					if(nivelActual_Contrato != "Generales")
					mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = new ArrayCollection();
					else
						mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato] = new ConfiguracionPrecioProducto();
				}
			
			}
			
			private function recibeResize($evt:Event):void{
				setTimeout( acomoda, 470 ); //130
			}
			
			private var _primerResize:Boolean = true;
			
			private function acomoda():void
			{
				if( arregroTitulosPorFamilia != null && arregroTitulosPorFamilia.length > 0)
				{
					cargaTitulosEnElGrupoPorMedioDeTodasLasFamilias();
				}
				
				grpImagenes.x = ( cnvPanel.width/2 ) -120;
				moveLeft.stop();
				moveLeft.duration = 0;
				moveLeft.xBy = -178 * _indiceSeleccionado;
				moveLeft.play();
				_primerResize = false;
			}
			
			private function cargaTitulosEnElGrupoPorMedioDeTodasLasFamilias():void
			{
				grpImagenes.removeAllElements();
				var numItemsQueCaben:int = 0;
				var iniciaConteo:Boolean = false;
				numItemsQueCaben = ( cnvPanel.width / 2  )  / 177;
				
				for(var g:int =0; g < arregroTitulosPorFamilia.length; g++ )
				{
					
					var currentItem:ConfiguracionPrecio = arregroTitulosPorFamilia[g] as ConfiguracionPrecio;
					
					currentItem.numFila = g ;
					
					var _titulo:CatClienteOferta_IR_titulosAnimados = new CatClienteOferta_IR_titulosAnimados();
					
					
					if(g==0)
					{
						currentItem.ubicacionItem = 'Primero';
						_titulo.data = currentItem;
					}
					else
					{
						
						if((g+1) == arregroTitulosPorFamilia.length)
						{
							currentItem.ubicacionItem = 'Ultimo';
						}
						else
						{
							currentItem.ubicacionItem = 'Medio';
						}
						_titulo.data = currentItem;
						
					}
					
					if( !iniciaConteo )
					{
						grpImagenes.addElement(_titulo);
					}
					else
					{
						if( numItemsQueCaben > 0)
						{
							grpImagenes.addElement(_titulo);
							numItemsQueCaben = numItemsQueCaben - 1;
						}
					}
					
					if(( arregroTitulosPorFamilia[g] as ConfiguracionPrecio ).titutloSeleccionado )
					{
						iniciaConteo = true;
					}
				}
			}
			
			
			
			private function familySort():void
			{
				var tempSort:ArrayCollection = new ArrayCollection();
				var filtrado:Query = new Query(arregroTitulosPorFamilia,["industria","tipo","subtipo","control"]);
				var arrayIndustrial:ArrayCollection = new ArrayCollection(['Farma','Alimentos','Aguas','Clínico','Gobierno']);
				var arrayTipoFarma:ArrayCollection = new ArrayCollection(['Estandares','Reactivos','Publicaciones','Labware','Medicamentos','Asesorías','Capacitaciones']);
				var arrayTipoAlimentos:ArrayCollection = new ArrayCollection(['Estandares','Reactivos','Labware','Diagnóstico','Publicaciones','Medicamentos','Asesorías','Capacitaciones']);
				var arrayTipoAgua:ArrayCollection = new ArrayCollection(['Estandares','Reactivos','Labware','Pruebas de aptitud','Publicaciones','Medicamentos','Asesorías','Capacitaciones']);
				var arraySubtipo:ArrayCollection = new ArrayCollection(['Químico','Biológico']);
				var arrayControl:ArrayCollection = new ArrayCollection(['Normal','Nacionales','Mundiales','Origen']);
				var punteros:Array = new Array;
				var arrayTipo:ArrayCollection = new ArrayCollection;
				
				
				for (var i:int = 0; i < arrayIndustrial.length; i++ )
				{
					if (arrayIndustrial[i] == 'Farma' || arrayIndustrial[i] == 'Clínico' || arrayIndustrial[i] == 'Gobierno' )
					{
						arrayTipo = arrayTipoFarma;
					}
					else if(arrayIndustrial[i] == 'Alimentos')
					{
						arrayTipo = arrayTipoAlimentos;
					}
					else
					{
						arrayTipo = arrayTipoAgua;
					}
					
					for (var j:int = 0; j < arrayTipo.length; j++)
					{
						if (arrayTipo[j] == 'Estandares' || arrayTipo[j] == 'Reactivos')
						{
							for (var k:int = 0; k < arraySubtipo.length; k++)
							{
								for (var l:int = 0; l < arrayControl.length; l++)
								{
									punteros = filtrado.getPunteros([arrayIndustrial[i],arrayTipo[j],arraySubtipo[k],arrayControl[l]],'industria');
									tempSort.addAll(filtrado.armarLista(punteros));
								}
							}
						}
						else
						{
							punteros = filtrado.getPunteros([arrayIndustrial[i],arrayTipo[j],null,null],'industria');
							tempSort.addAll(filtrado.armarLista(punteros));
						}
					}
				}
				arregroTitulosPorFamilia = ObjectUtil.copy(tempSort) as ArrayCollection;
			}
			
			
			
			private var _universoProductos:ArrayCollection;
			private var _universoCostos:ArrayCollection;
			private var _universoClasificaciones:ArrayCollection;
			private var _arregloTitulos:ArrayCollection;
			private var _nivel:String= 'Generales';
			private var _configuracionSeleccionada:ConfiguracionPrecio;
			private var auxConfiguracionSeleccionada:ConfiguracionPrecio;
			private var _listaUniversoProducto:ArrayCollection;
			
			public function  set escucharPeticionDeActualizarConfiguracionesCliente(event:EventoCatClientes_Oferta):void
			{
				if(event == null || listaProSeleciconados.listtodosPRO.selectedItem == undefined )
				{
					return;
				}
				_universoProductos = null;
				_universoCostos = null;
				_universoClasificaciones = null;
				
				if(_nivel == "Producto")
				{
					
					var eve:EventoCatClientesContratos = new EventoCatClientesContratos(EventoCatClientesContratos.OBTENER_INFORMACION_CONTRATOS);
					eve.idProveedor = listaProSeleciconados.listtodosPRO.selectedItem.idProveedor;
					eve.idCliente = clienteActual.idCliente;
					eve.nivelIngreso = clienteActual.nivelIngreso;
					eve.idConfiguracion  = _configuracionSeleccionada.idConfiguracionPrecio;
					dispatchEvent(eve); 
				} 
				else if(_nivel == "Clasificacion")
				{
					var obtenerTodasLasClasif:EventoCatClientesContratos = new EventoCatClientesContratos (EventoCatClientesContratos.OBTENER_CONFIGURACIONES_CLASIFICACION_CLIENTE_CONTRATOS);
					obtenerTodasLasClasif.idConfiguracion = _configuracionSeleccionada.idConfiguracionPrecio;
					obtenerTodasLasClasif.idCliente = clienteActual.idCliente;
					dispatchEvent(obtenerTodasLasClasif);
				}
				else  // NIVELES GENERAL Y PRECIO LISTA 
				{
				var productosXCosto:EventoCatClientesContratos = new EventoCatClientesContratos (EventoCatClientesContratos.OBTENER_CONFIGURACIONES_PRECIO_COSTO_CLIENTE_CONTRATOS);
				productosXCosto.idConfiguracion = _configuracionSeleccionada.idConfiguracionPrecio;
				productosXCosto.idCliente = clienteActual.idCliente;
				productosXCosto.nivelIngreso = clienteActual.nivelIngreso;
				dispatchEvent(productosXCosto);
				}
			}
			
			private function mandarALimpiarTodo():void
			{
				var listanueva:ArrayCollection = new ArrayCollection(); 
				enviaInformacionAgrupada(listanueva,_nivel);
			}
			
			
			private var d:int;
			private var listaTemporalCostos:ArrayCollection;
			private var auxArregloConfiguraciones:ArrayCollection;
			private var totalIds:ArrayCollection = new ArrayCollection();
			public function enviaInformacionAgrupada($listaConfiguracion:ArrayCollection, $nivel:String ):void
			{
				
				if(listaProSeleciconados.listtodosPRO.selectedItem == undefined )
				{
					return;
				}
				
				
				
			if($listaConfiguracion != null && $listaConfiguracion.length > 0)
				
				_arregloConfiguraciones = ObjectUtil.copy( $listaConfiguracion ) as ArrayCollection;
			
			grupPrecioLista.visible = grupPrecioLista.includeInLayout = false;
			grupClasificaciones.visible = grupClasificaciones.includeInLayout = false;
			seccionGenerales.visible = seccionGenerales.includeInLayout = false;
			seccionClasificacion.visible = seccionClasificacion.includeInLayout = false;
			grupProductos.visible = grupProductos.includeInLayout = false;
			listaPreciosLista.visible = listaPreciosLista.includeInLayout = false;
			seccionProductos.visible = seccionProductos.includeInLayout = false;
			seccionPrecioLista.visible = seccionPrecioLista.includeInLayout = false;
			seccionTiempoEntrega.visible = seccionTiempoEntrega.includeInLayout = false;
			grpBotonera.visible = grpBotonera.includeInLayout = false;
				
				if($nivel == 'Producto')
				{
					
					for(  d = 0; d < _arregloConfiguraciones.length; d++ )
					{
						( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).totalProductos = 1;
						( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).costoFactorProducto.totalPiezas =  ( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).costoFactorProducto.cantidadAA;  // calcularTotalPiezas(( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).costoFactorProducto);
						if (( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).restablecer)
						{
							( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).isEnfocado = true;
						}
						else
						{
							( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).isEnfocado = false;
						}
						
						if (( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).producto.licencia == null || ( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).producto.licencia == '--NINGUNO--' ){
							( _arregloConfiguraciones[d] as ConfiguracionPrecioProducto).producto.licencia = "";
						}
					}
					_listaUniversoProducto = ObjectUtil.copy( _arregloConfiguraciones ) as ArrayCollection;
					
					
					if(_arregloConfiguraciones.length > 1 )
					{
						_arregloConfiguraciones.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
					}
					
					
					enumerarLista(_arregloConfiguraciones);
					lstProductoEnfoque.dataProvider = new ArrayCollection();
					lstProductoEnfoque.dataProvider = _arregloConfiguraciones;
					lstProductoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
					
					
					grupMedio.percentWidth = 80;
					grupProductos.visible = grupProductos.includeInLayout = true;
					seccionProductos.visible = seccionProductos.includeInLayout = true;
					
					if (vieneDeEditar){ 
						
						var query:Query = new Query(contratoCliente.listaDeIdsNivel, ['nivel','idProveedor']);
						var punteros:Array = query.getPunteros(['Producto',ProveedorActual_Contratos.idProveedor]);
						totalIds = query.armarLista(punteros);
						if (totalIds.length > 0 ) {
							
							var result:ArrayCollection =  UtilsGrid.indexQueryCampoX(lstProductoEnfoque.dataProvider, 'idConfiguracionPrecioProducto', totalIds[0].idConfiguracion);
							if(result.length > 0)
							{
								var index:int = UtilsGrid.indexQueryCampoX(lstProductoEnfoque.dataProvider, 'idConfiguracionPrecioProducto', totalIds[0].idConfiguracion)[0];
								indexEncontrado = index;
								insertarInformacionAlproducto();
								
							}
							
							
						}
					} 
				
					
				}
				
				else if($nivel == "Clasificacion")
				{
					
					calcularItemsListaClasificacion(_arregloConfiguraciones); 
					
					if(listaTemporalClasif.length > 1)
					{
						listaTemporalClasif.source.sortOn(["ordenarIsEnfocado","conceptoMinuscula"]);
					}
					enumerarLista(listaTemporalClasif);
					
					lstClasificacionEnfoque.dataProvider = new ArrayCollection;
					lstClasificacionEnfoque.dataProvider = listaTemporalClasif;
					lstClasificacionEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
					
					grupMedio.percentWidth = 60;
					grupClasificaciones.visible = grupClasificaciones.includeInLayout = true;
					seccionClasificacion.visible = seccionClasificacion.includeInLayout = true;
					listaPreciosLista.establecerColorFondo("gris");
					listaPreciosLista.visible = listaPreciosLista.includeInLayout = true;
				/*	if (vieneDeEditar){
						
						var query:Query = new Query(contratoCliente.listaDeIdsNivel, ['nivel','idProveedor']);
						var punteros:Array = query.getPunteros(['Clasificacion',ProveedorActual_Contratos.idProveedor]);
						totalIds = query.armarLista(punteros);
						if (totalIds.length > 0 ) {
						
							var result:ArrayCollection =  UtilsGrid.indexQueryCampoX(lstClasificacionEnfoque.dataProvider, 'idConfiguracion', totalIds[0].idConfiguracion);
							if(result.length > 0)
							{
								var index:int = UtilsGrid.indexQueryCampoX(lstCostoEnfoque.dataProvider, 'idConfiguracion', totalIds[0].idConfiguracion)[0];
								indexEncontrado = index;
								obtenerConfiguracionPL(lstCostoEnfoque.dataProvider[index]);
							}
							
							
						}
					} */
				}
				
				else if($nivel == 'Precio lista' )
				{
					
					calcularItemsDeLaListaDeCostos(_arregloConfiguraciones);
				
					listaTemporalCostos.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
					enumerarLista(listaTemporalCostos);
					
					lstCostoEnfoque.dataProvider = new ArrayCollection();
					lstCostoEnfoque.dataProvider = listaTemporalCostos;
					lstCostoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
					
					grupMedio.percentWidth = 80;
					seccionPrecioLista.visible = seccionPrecioLista.includeInLayout = true;
					grupPrecioLista.visible = grupPrecioLista.includeInLayout = true;
				
					if (vieneDeEditar){
						
						var query:Query = new Query(contratoCliente.listaDeIdsNivel, ['nivel','idProveedor']);
						var punteros:Array = query.getPunteros(['Costo',ProveedorActual_Contratos.idProveedor]);
						totalIds = query.armarLista(punteros);
						if (totalIds.length > 0 ) {
							
							/*encontrarIdConfigurcionEnLista(lstCostoEnfoque.dataProvider as ArrayCollection,totalIds[0].idConfiguracion);*/
							var result:ArrayCollection =  UtilsGrid.indexQueryCampoX(lstCostoEnfoque.dataProvider, 'idConfiguracion', totalIds[0].idConfiguracion);
							
							if(result.length > 0)
							{
								var index:int = UtilsGrid.indexQueryCampoX(lstCostoEnfoque.dataProvider, 'idConfiguracion', totalIds[0].idConfiguracion)[0];
								indexEncontrado = index;
								obtenerConfiguracionPL(lstCostoEnfoque.dataProvider[index]);
							}
						
							
						}
					} 
				}
				else 
				{
					
					var evt:EventoCatClientesContratos = new EventoCatClientesContratos( EventoCatClientesContratos.OBTENER_CONFIGURACION_FAMILIA_CONTRATOS );
					evt.idConfigFamilia = (_arregloConfiguraciones[0] as ConfiguracionPrecioProducto).idConfiguracionFamilia;
					evt.idCliente =  clienteActual.idCliente;
					evt.nivelIngreso =  clienteActual.nivelIngreso;
					_ConfPProducto_Gral = (_arregloConfiguraciones[0] as ConfiguracionPrecioProducto).idConfiguracionPrecioProducto;
					dispatchEvent( evt ); 
					
					calcularItemsDeLaListaDeCostos(_arregloConfiguraciones);
					grupMedio.percentWidth = 80;
					seccionGenerales.visible = seccionGenerales.includeInLayout = true;
					listaPreciosLista.establecerColorFondo("blanco");
					listaPreciosLista.visible = listaPreciosLista.includeInLayout = true;
					grpBotonera.visible = grpBotonera.includeInLayout = true;
					listaPreciosLista.recibeInformacionDeConfiguracion(_universoCostos.source);
				}
			}
			
			
			private function encontrarIdConfigurcionEnLista(lista:ArrayCollection,idAbuscar:Number):void
			{
				for (var i:int = 0; i < lista.length; i++)
				{
					if(lista[i].idConfiguracion == idAbuscar)
					{
						alertaSingleton.show("Se encontro configuracion");
						break;
					}
				}
			}
			
		
			private function enumerarLista($array:ArrayCollection):void
			{
				for (var i:int = 0; i < $array.length; i++)
				{
					$array[i].numFila = i + 1;
				}
			}
			
			private var currentItemSelected:int;
			private function cambia( $sentido:String, totalmovimientos:int = 1 ):void
			{
				
				$sentido == 'izquierda' ?   _indiceSeleccionado = _indiceSeleccionado - 1 : _indiceSeleccionado = _indiceSeleccionado + 1;
				_indiceSeleccionado == 0 ? btnIzquierdo.enabled = false : btnIzquierdo.enabled = true;
				_indiceSeleccionado == arregroTitulosPorFamilia.length - 1 ? btnDerecho.enabled = false : btnDerecho.enabled = true;
				
				for( var m:int = 0; m < arregroTitulosPorFamilia.length; m++ )
				{
					( arregroTitulosPorFamilia[m] as ConfiguracionPrecio ).animacion = false;	
				}
				
				for( var r:int = 0; r < arregroTitulosPorFamilia.length; r++ )
				{
					( arregroTitulosPorFamilia[r] as ConfiguracionPrecio ).titutloSeleccionado = false;
					if( ( arregroTitulosPorFamilia[r] as ConfiguracionPrecio ).numFila == _indiceSeleccionado )
					{
						( arregroTitulosPorFamilia[r] as ConfiguracionPrecio ).titutloSeleccionado = true;	
						( arregroTitulosPorFamilia[r] as ConfiguracionPrecio ).animacion = true;
						
						if( $sentido == 'derecha' )
						{ //se mueve a la izquierda se anima el de la derecha
							( arregroTitulosPorFamilia[r-1] as ConfiguracionPrecio ).animacion = true;
						}
						else
						{
							( arregroTitulosPorFamilia[r+1] as ConfiguracionPrecio ).animacion = true;
						}
						numeroDeConfifuracionSeleccionada = ( arregroTitulosPorFamilia[r] as ConfiguracionPrecio ).numFila;
						currentItemSelected = ( arregroTitulosPorFamilia[r] as ConfiguracionPrecio ).idConfiguracionPrecio;
					}
				}
				if( $sentido == 'izquierda' )
				{
					moveRight.stop();
					moveRight.duration = 1000;
					moveRight.xBy = 178;
					moveRight.play();
					
					cargaTitulosEnElGrupoPorMedioDeTodasLasFamilias();
					
					grpImagenes.x = ( cnvPanel.width/2 ) -120;
					moveRight.stop();
					moveRight.duration = 0;
					moveRight.xBy = -178 * _indiceSeleccionado;
					moveRight.play();
					_primerResize = false;
					
				}else{
					
					moveLeft.stop();
					moveLeft.duration = 1000;
					moveLeft.xBy = -178;
					moveLeft.play();
					
					cargaTitulosEnElGrupoPorMedioDeTodasLasFamilias();
					
					grpImagenes.x = ( cnvPanel.width/2 ) -120;
					moveLeft.stop();
					moveLeft.duration = 0;
					moveLeft.xBy = -178 * _indiceSeleccionado;
					moveLeft.play();
					_primerResize = false;
				}  
			}
			
			
			
			private var indiceSeleccionadoAnteriorBotonera:int = 0;
			protected function botoneraBarra_clickHandler():void
			{
				
				seccionClasificacion.visible = seccionClasificacion.includeInLayout = false;
				seccionGenerales.visible = seccionGenerales.includeInLayout = false;
				seccionPrecioLista.visible = seccionPrecioLista.includeInLayout = false;
				seccionProductos.visible = seccionPrecioLista.includeInLayout = false;
				seccionTiempoEntrega.visible = seccionTiempoEntrega.includeInLayout = false;
				
				if(botoneraBarra.selectedIndex == 1)
				{
					
					seccionTiempoEntrega.visible = seccionTiempoEntrega.includeInLayout = true;
				}
				else{
					if(_nivel == 'Generales'  ){
						seccionGenerales.visible = seccionGenerales.includeInLayout = true;
					}
					else if(_nivel == 'Precio lista' )
					{
						seccionPrecioLista.visible = seccionPrecioLista.includeInLayout = true;
					}
					else if(_nivel == 'Clasificacion' ){
						seccionClasificacion.visible = seccionClasificacion.includeInLayout = true;
					}
					else if(_nivel == 'Producto'){
						seccionProductos.visible = seccionPrecioLista.includeInLayout = true;
					}
						
				}
			}
			
		
			
			public function set recibeCostosRelacionadosConLaClasificacion($costos:ArrayCollection):void
			{
				if($costos == null)
					return;
				
				for (var i:int = 0; i < $costos.length; i++) 
				{
					/*armartextosParaBotonesNivelesIngreso($costos[i] as ConfiguracionPrecioProducto); */
				}
				
				/*grpFormulaPrecioLista.dataProvider = $costos.source;*/
			}
			
			
			
			
			private var indiceListaClasi:Number;
			protected function lstClasificacionEnfoque_itemSeleccionadoHandler(event:Event):void
			{
				
				
			}
			
			protected function lstClasificacionEnfoque_desenfoqueAutomaticoHandler(event:Event):void
			{
			}
			
			public function set recibeConfiguracionesProducto( $listConfProductos:ArrayCollection ):void
			{
				if( $listConfProductos == null || $listConfProductos.length == 0 )
				{
					mandarALimpiarTodo();
					return;
				}
				
				if(_nivel == "Producto"){
					_universoProductos = filtrarListaCla($listConfProductos);
					enviaInformacionAgrupada(_universoProductos, _nivel );
				}
				
			}
			
			public function set recibeConfiguracionesPrecioCosto($listaConfCosto:ArrayCollection):void
			{
				if( $listaConfCosto == null || $listaConfCosto.length == 0)
				{
					mandarALimpiarTodo();
					return;
				}
				
				if(_nivel != "Producto" && _nivel != "Clasificacion"){
					
					_universoCostos = filtrarListaCla($listaConfCosto);
					enviaInformacionAgrupada( _universoCostos,_nivel );
				}
				
			}
			
			public function set recibeConfiguracionesClasificacion($listaConfClasif:ArrayCollection):void
			{
				if( $listaConfClasif == null)
				{
					mandarALimpiarTodo();
					return;
				}
				
				if(_nivel == "Clasificacion"){
					
					_universoClasificaciones = filtrarListaCla($listaConfClasif);
					enviaInformacionAgrupada( _universoClasificaciones,_nivel );
				}
				
			}
			
			
			private function filtrarListaCla(lis:ArrayCollection):ArrayCollection
			{
				var auxListaTemp: ArrayCollection = new ArrayCollection();
				var arrayTemp:ArrayCollection = new ArrayCollection;
				if (mapaMarcas[ProveedorActual_Contratos.idProveedor].hasOwnProperty([nivelActual_Contrato]))
				{
					arrayTemp = ObjectUtil.copy((mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato])) as ArrayCollection;
					
				}
				
				if(nivelActual_Contrato == 'Generales'){
					
					if(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato].parametrosOferta != null) 
					{
						trace("vas por buen camino nely");
						seccionGenerales.txtFactor.text = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato].parametrosOferta.factor.toString();
					}
					
					
				}
				
				
				if(nivelActual_Contrato == 'Precio lista'){
					for (var l:int = 0; l < lis.length; l++) 
					{
						if(arrayTemp.length > 0)
						{
							for (var m:int = 0; m < arrayTemp.length; m++) 
							{
								if (lis[l].producto.categoriaPrecioLista == arrayTemp[m].producto.categoriaPrecioLista){
									lis.removeItemAt(l--);
									arrayTemp.removeItemAt(m);
									break;
								}
							}	
						}
						else{
							break;
						}
						
						
						
					}
					
				}
					
				else if(nivelActual_Contrato == "Clasificacion")
				{
					for (var i:int = 0; i < lis.length; i++) 
					{
						if(arrayTemp.length > 0)
						{
							for (var j:int = 0; j < arrayTemp.length; j++) 
							{
								if (lis[i].idClasificacion == arrayTemp[j].idClasificacion){
									lis.removeItemAt(i--);
									arrayTemp.removeItemAt(j);
									break;
								}
							}	
						}
						else{
							break;
						}
						
						
						
					}
				}
					
				else if(nivelActual_Contrato == 'Producto'){
					for (var p:int = 0; p < lis.length; p++) 
					{
						if(arrayTemp.length > 0)
						{
							for (var k:int = 0; k < arrayTemp.length; k++) 
							{
								if (lis[p].idConfiguracionPrecioProducto == arrayTemp[k].idConfiguracionPrecioProducto){
									lis.removeItemAt(p--);
									arrayTemp.removeItemAt(k);
									break;
								}
							}	
						}
						else{
							break;
						}
						
						
						
					}
					
				}
				
				auxListaTemp = lis;
				return auxListaTemp;
				
			}
			
			
			private var listaTemporalClasif:ArrayCollection;
			private function calcularItemsListaClasificacion($listaClasif:ArrayCollection):void
			{
				listaTemporalClasif = new ArrayCollection;
				listaTemporalClasif = ObjectUtil.copy($listaClasif) as ArrayCollection;
				
				for (var i:int = 0; i < listaTemporalClasif.length; i++) 
				{
					var currentItem:ClasificacionConfiguracionPrecio = listaTemporalClasif[i] as ClasificacionConfiguracionPrecio;
					currentItem.cantidadConceptos = 1;
					
					if(currentItem.restablecerCliente)
					{
						currentItem.isEnfocado = true;
					}else{
						currentItem.isEnfocado = false;
						
					}
				}
				
			}
			
			protected function lstProductoEnfoque_desenfoqueAutomaticoHandler(event:Event):void
			{
				/*btnEnfoqueProducto.dispatchEvent(new MouseEvent(MouseEvent.CLICK));*/
			}
			
			protected function lstProductoEnfoque_itemSeleccionadoHandler(event:Event):void
			{
				var currentItem:Object = (event.currentTarget as ListaConItemsEnfocados).currentItemTarget;
				_currentSeleccionado = ObjectUtil.copy(currentItem) as ConfiguracionPrecioProducto;
				if (currentItem is ConfiguracionPrecioProducto )
				{
					
					cargarInformacionSeccionPreEntrega( currentItem as ConfiguracionPrecioProducto, 'Producto', currentProveedor );
				}
				
			}
			
			
			
			protected function calcularItemsDeLaListaDeCostos($listaPrecios:ArrayCollection):void
			{
				//calcular items de la lista de costo de una vez
				listaTemporalCostos = new ArrayCollection();
				var keyConfiguraciones:Object = new Object;
				var keyPiezas:Object = new Object;
				var keyEnfoque:Object = new Object;
				var currentItem:ConfiguracionPrecioProducto;
				var currentTemp:ConfiguracionPrecioProducto;
				
				var enfoque:Boolean = false;
				
				for (var i:int = 0; i < $listaPrecios.length; i++)
				{
					currentItem = $listaPrecios[i]  as ConfiguracionPrecioProducto;
					
					if (currentItem.producto.licencia == null || currentItem.producto.licencia == '--NINGUNO--' )
						currentItem.producto.licencia = "";
					
					enfoque = true;
					currentTemp = currentItem;
					currentTemp.producto.cant = 1;
					keyConfiguraciones[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = 1;
					keyPiezas[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = currentItem.costoFactorProducto.cantidadAA; // calcularTotalPiezas(currentItem.costoFactorProducto);
					keyEnfoque[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = false;
					var currentSimboloMoneda:String = listaProSeleciconados.listtodosPRO.selectedItem.monedaVentaSimbolo;
					
					currentItem.categoriaNivel = clienteActual.nivelIngreso;;
					listaTemporalCostos.addItem(currentItem);
					
					keyConfiguraciones[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] += 1; 
					keyPiezas[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] += currentItem.costoFactorProducto.cantidadAA;//calcularTotalPiezas(currentItem.costoFactorProducto);
					
					
					if ( currentItem.restablecerCosto) 
						keyEnfoque[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia] = true;
					
				}
				
				for( var x:int = 0; x < listaTemporalCostos.length; x++ )
				{
					
					currentItem = listaTemporalCostos[x]  as ConfiguracionPrecioProducto;
					
					if(keyConfiguraciones.hasOwnProperty(currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia))
					{
						currentItem.totalProductos = keyConfiguraciones[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia];
						currentItem.costoFactorProducto.totalPiezas = keyPiezas[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia];
						currentItem.isEnfocado = keyEnfoque[currentItem.producto.categoriaPrecioLista + "" + currentItem.producto.licencia];
					}
					
				}
				
				
			}
			
			
			protected function lstCostoEnfoque_desenfoqueAutomaticoHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				
			}
			
			
			
			
			protected function lstCostoEnfoque_itemSeleccionadoHandler(event:Event):void
			{
				
			}
			
			
			/*SECCIÓN DE BUSQUEDA DE LISTAS */
			
			protected function filtrarCosto():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaVisual:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _universoCostos ) as ArrayCollection;
				
				if( txtCosto.text != '' )
				{
					_listaVisual  = new ArrayCollection(listaAFiltrar.source.filter(buscarCoincidenciasCosto));
				}else
				{
					_listaVisual = ObjectUtil.copy( listaAFiltrar ) as ArrayCollection;
				}
				var totalProductos:int = 0;
				for( var i:int = 0; i < _listaVisual.length; i++ )
				{
					if ( (_listaVisual[i] as ConfiguracionPrecioProducto ).restablecerCosto)
					{
						( _listaVisual[i] as ConfiguracionPrecioProducto ).isEnfocado = true;
					} 
				}
				_listaVisual.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
				enumerarLista(_listaVisual);
				lstCostoEnfoque.dataProvider = new ArrayCollection();
				lstCostoEnfoque.dataProvider = _listaVisual;
				lstCostoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
			}
			
			protected function buscarCoincidenciasCosto($item:ConfiguracionPrecioProducto,id:uint, array:Array):Boolean
			{
				if( UtilsFormatosNumericos.redondearNEAREST_WithOutSeparator($item.producto.costo).indexOf(txtCosto.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else
				{
					return false;
				}
			}
			
			protected function filtrarListaClasificacion():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaVisual:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _universoClasificaciones ) as ArrayCollection;
				
				if( StringUtil.trim(txtClasificacion.text).length > 0 )
				{
					_listaVisual  = new ArrayCollection(listaAFiltrar.source.filter(buscarCoincidenciasClasificacion));
				}
				else
				{
					_listaVisual = listaAFiltrar;
				}
				
				for( var i:int = 0; i < _listaVisual.length; i++ )
				{
					if ( (_listaVisual[i] as ClasificacionConfiguracionPrecio ).idConfigClasificacion != (_listaVisual[i] as ClasificacionConfiguracionPrecio ).idConfigFamilia)
					{
						( _listaVisual[i] as ClasificacionConfiguracionPrecio ).isEnfocado = true;
					} 
				}
				
				if(_listaVisual.length > 1)
				{
					_listaVisual.source.sortOn(["ordenarIsEnfocado","conceptoMinuscula"],[Array.DESCENDING]);
				}
				enumerarLista(_listaVisual);
				lstClasificacionEnfoque.dataProvider = new ArrayCollection();
				lstClasificacionEnfoque.dataProvider = _listaVisual;
				lstClasificacionEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
			}
			
			protected function buscarCoincidenciasClasificacion($item:ClasificacionConfiguracionPrecio,id:uint, array:Array):Boolean
			{
				if( $item.concepto.toUpperCase().indexOf(txtClasificacion.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else
				{
					return false;
				}
			}
			
			
			protected function filtrarProducto():void
			{
				var listaAFiltrar:ArrayCollection = new ArrayCollection();
				var _listaVisual:ArrayCollection = new ArrayCollection();
				listaAFiltrar = ObjectUtil.copy( _listaUniversoProducto ) as ArrayCollection;
				
				if( txtProducto.text != '' )
				{
					
					_listaVisual  = new ArrayCollection(listaAFiltrar.source.filter(buscarCoincidenciasProducto));
					
				}
				else
				{
					_listaVisual = ObjectUtil.copy( listaAFiltrar ) as ArrayCollection;
				}
				
				for( var i:int = 0; i < _listaVisual.length; i++ )
				{
					if (( _listaVisual[i] as ConfiguracionPrecioProducto ).restablecer)
					{
						( _listaVisual[i] as ConfiguracionPrecioProducto ).isEnfocado = true;
					}
				}
				var totales:ConfiguracionPrecioProducto = new ConfiguracionPrecioProducto();
				_listaVisual.source.sortOn(["isEnfocado","costoProducto"],[Array.DESCENDING,Array.NUMERIC]);
				enumerarLista(_listaVisual);
				lstProductoEnfoque.dataProvider = new ArrayCollection();
				lstProductoEnfoque.dataProvider = _listaVisual;
				lstProductoEnfoque.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGING));
			}
			
			protected function buscarCoincidenciasProducto($item:ConfiguracionPrecioProducto,id:uint, array:Array):Boolean
			{
				if( $item.producto.concepto.toUpperCase().indexOf(txtProducto.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else if( $item.producto.codigo.toUpperCase().indexOf(txtProducto.text.toUpperCase()) != -1 )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			

			////////////////////////////////////////*SECCIÓN PRECIO Y ENTREGA*////////////////////////////////////////////////////////////
			
			private var _arrayLocalTE:TiempoEntrega;
			private var _arrayGuadalajaraTE:TiempoEntrega;
			private var _arrayForaneolTE:TiempoEntrega;
			private var _arrayCentroATE:TiempoEntrega;
			private var _arraySudaTE:TiempoEntrega;
			private var _arrayRestoMundoTE:TiempoEntrega;
			[Bindable] private var _configuracion:ConfiguracionPrecioProducto; 
			private var _respaldoConfiguracion:ConfiguracionPrecioProducto;
			private var _encuentraRuta:Boolean = false;
			private var clickeado:String = "";
			[Bindable] private var _clickeado:String = "";
			
			public function cargarInformacionSeccionPreEntrega( $dato:ConfiguracionPrecioProducto, $nivel:String, $proveedor:Proveedor):void
			{
				if(currentProveedor == null)
					return;
				seccionGenerales.txtFactor.text='';
				seccionGenerales.txtFactor.errorString='';
				seccionGenerales.txtCostoFijo.text='';
				seccionGenerales.txtCostoFijo.errorString='';
				
				var fechas:EventoCatClientes_Oferta = new EventoCatClientes_Oferta(EventoCatClientes_Oferta.ENVIAR_FECHA_OFERTA_SELECCIONADO);
				fechas.dateFUA = $dato.fua;
				dispatchEvent(fechas); 
				
				
				if(currentProveedor.isProveedorNacional)
				{
					
					seccionTiempoEntrega.grpTiempoEReqPermiso.visible = seccionTiempoEntrega.grpTiempoEReqPermiso.includeInLayout = false;
				}
				else
				{
					
					seccionTiempoEntrega.grpTiempoEReqPermiso.visible = seccionTiempoEntrega.grpTiempoEReqPermiso.includeInLayout = true;
				}
				
				
				_configuracion = ObjectUtil.copy( $dato ) as ConfiguracionPrecioProducto;
				_respaldoConfiguracion = ObjectUtil.copy( $dato ) as ConfiguracionPrecioProducto;
				
				
				if (_configuracion.costoFactorProducto != null) 
				{
					if(nivelActual_Contrato == "Generales")
					{
						if(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato].parametrosOferta != null)
							seccionGenerales.txtFactor.text = mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato].parametrosOferta.factor.toString();
						else
							seccionGenerales.txtFactor.text = _configuracion.costoFactorProducto.factorCliente.toString(); 
					}
					else
					{
					 seccionGenerales.txtFactor.text = _configuracion.costoFactorProducto.factorCliente.toString(); 
					}
					seccionGenerales.txtCostoFijo.text = _configuracion.costoFactorProducto.factorCostoFijo == -1 ? "0":_configuracion.costoFactorProducto.factorCostoFijo.toString();
				}
				
				if( !isNaN( $dato.idProveedor ))
				{
					seleccionaItemsCombos();   
				}
				
			}
			
			private function seleccionaItemsCombos():void
			{
				
				if(_configuracion.rutaCliente)
				{
					_clickeado = StringFunciones.noAccent(_configuracion.rutaCliente);
					_encuentraRuta = true;
				}
				else
				{
					_encuentraRuta = false;
				}
				
			
				if(nivelActual_Contrato == "Generales")
				{
					if(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato].parametrosOferta != null)
					{
						aplicaTiemposDelMapa(mapaMarcas[ProveedorActual_Contratos.idProveedor][nivelActual_Contrato].parametrosOferta);
					}
					else{
						setTiemposEntregas();
					}
					
				}
				else
				{
					setTiemposEntregas();
				}
				
				
				
				_arrayCentroATE.ruta = "Centroamerica";
				_arrayForaneolTE.ruta = "Foraneo";
				_arrayGuadalajaraTE.ruta = "Guadalajara";
				_arrayLocalTE.ruta = "Local";
				_arrayRestoMundoTE.ruta = "Resto del mundo";
				_arraySudaTE.ruta = "Sudamerica";
				
			}
			
			
			private function setTiemposEntregas():void
			{
				_arrayCentroATE = new TiempoEntrega();
				_arrayForaneolTE = new TiempoEntrega();
				_arrayGuadalajaraTE = new TiempoEntrega();
				_arrayLocalTE = new TiempoEntrega();
				_arrayRestoMundoTE = new TiempoEntrega();
				_arraySudaTE = new TiempoEntrega();
				
				if (_encuentraRuta && _configuracion.tiempoEntregaRuta  && _configuracion.tiempoEntregaRuta.length > 0)
				{
					for (var r:Number=0; r< _configuracion.tiempoEntregaRuta.length; r++)
					{
						var current:TiempoEntrega = _configuracion.tiempoEntregaRuta[r] as TiempoEntrega;
						if (current.ruta)
						{
							switch(StringFunciones.noAccent(current.ruta))
							{
								case 'Local':
								{
									_arrayLocalTE = current;
									break;
								}
								case 'Guadalajara':
								{
									_arrayGuadalajaraTE = current;
									break;
								}
								case 'Foraneo':
								{
									_arrayForaneolTE = current;
									break;
								}
								case 'Centroamerica':
								{
									_arrayCentroATE = current;
									break;
								}
								case 'Sudamerica':
								{
									_arraySudaTE = current;
									break;
								}
								case 'Resto del mundo':
								{
									_arrayRestoMundoTE = current;
									break;
								}
									
								default:
								{
									break;
								}
							}
						}
					}
				}	
				aplicarTiempoEntrega(); 
			}
			
			private function aplicaTiemposDelMapa(parmOferta:ParametrosOfertaCliente):void
			{
				_arrayCentroATE = new TiempoEntrega();
				_arrayForaneolTE = new TiempoEntrega();
				_arrayGuadalajaraTE = new TiempoEntrega();
				_arrayLocalTE = new TiempoEntrega();
				_arrayRestoMundoTE = new TiempoEntrega();
				_arraySudaTE = new TiempoEntrega();
				
				if (_encuentraRuta && parmOferta.tiemposEntregaRuta.length > 0)
				{
					for (var r:Number=0; r< parmOferta.tiemposEntregaRuta.length; r++)
					{
						var current:TiempoEntrega = parmOferta.tiemposEntregaRuta[r] as TiempoEntrega;
						if (current.ruta)
						{
							switch(StringFunciones.noAccent(current.ruta))
							{
								case 'Local':
								{
									_arrayLocalTE = current;
									break;
								}
								case 'Guadalajara':
								{
									_arrayGuadalajaraTE = current;
									break;
								}
								case 'Foraneo':
								{
									_arrayForaneolTE = current;
									break;
								}
								case 'Centroamerica':
								{
									_arrayCentroATE = current;
									break;
								}
								case 'Sudamerica':
								{
									_arraySudaTE = current;
									break;
								}
								case 'Resto del mundo':
								{
									_arrayRestoMundoTE = current;
									break;
								}
									
								default:
								{
									break;
								}
							}
						}
					}
				}	
				aplicarTiempoEntrega(); 
			}
			
			private var _currentIndex:Number = NaN;
			private function aplicarTiempoEntrega():void
			{
				var tiempoEntregaSelected:TiempoEntrega = new TiempoEntrega(); 
				switch(_clickeado)
				{
					case "Local":
					{
						tiempoEntregaSelected = _arrayLocalTE;
						_currentIndex =0;
						
						break;
					}
					case "Guadalajara":
					{
						tiempoEntregaSelected = _arrayGuadalajaraTE; 
						_currentIndex =1;
						
						break;
					}
					case "Foraneo":
					{
						tiempoEntregaSelected = _arrayForaneolTE; 
						_currentIndex =2;
						
						break;
					}
					case "Centroamerica":
					{
						tiempoEntregaSelected = _arrayCentroATE; 
						_currentIndex =3;
					
						break;
					}
					case "Sudamerica":
					{
						tiempoEntregaSelected = _arraySudaTE; 
						_currentIndex =4;
						
						break;
					}
					case "Resto del mundo":
					{
						tiempoEntregaSelected = _arrayRestoMundoTE; 
						_currentIndex =5;
					
						break;
					}
						
					default:
					{
						tiempoEntregaSelected = new TiempoEntrega();
						break;
					}
				}
				
				if (tiempoEntregaSelected)
				{
					seccionTiempoEntrega._arrayCentroATE = _arrayCentroATE;
					seccionTiempoEntrega._arrayForaneolTE = _arrayForaneolTE;
					seccionTiempoEntrega._arrayGuadalajaraTE = _arrayGuadalajaraTE;
					seccionTiempoEntrega._arrayLocalTE = _arrayLocalTE;
					seccionTiempoEntrega._arrayRestoMundoTE = _arrayRestoMundoTE;
					seccionTiempoEntrega._arraySudaTE = _arraySudaTE;
					seccionTiempoEntrega._configuracion = _configuracion;
					seccionTiempoEntrega.recibeTiempoEntrega(tiempoEntregaSelected);
					
				}
				
		
			}
			
			
			protected function fechaInicio_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function lnkFinalizarActivo_clickHandler(event:MouseEvent):void
			{
				var evenFinalizar:EventoCatClientesContratos = new EventoCatClientesContratos (EventoCatClientesContratos.FINALIZAR_CONTRATO_CLIENTE);
				contratoCliente.finalizado = true;
				evenFinalizar.contrato = contratoCliente;
				evenFinalizar.documento = contratoFirmado.byteArray;
				evenFinalizar.renovar = true;
				dispatchEvent(evenFinalizar);
				
				
			}
			
			private function verificaVistaCompleta(event:Event):void
			{
			    if(contratoFirmado.archivoCargado && contratoGenerado.archivoCargado)
				{
					lnkFinalizar.visible = lnkFinalizar.includeInLayout = false;
					lnkFinalizarActivo.visible = lnkFinalizarActivo.includeInLayout = true;
				}
				else{
					lnkFinalizar.visible = lnkFinalizar.includeInLayout = true;
					lnkFinalizarActivo.visible = lnkFinalizarActivo.includeInLayout = false;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Sine id="sineEasing" easeInFraction="0.3"/>
		<s:Power id="powerEasing"  exponent="4"/>
		<s:Move id="moveRight"  target="{grpImagenes}" easer="{powerEasing}"/>
		<s:Move id="moveLeft"  target="{grpImagenes}" easer="{powerEasing}"/>
		
	</fx:Declarations>
	
	
	<s:VGroup width="100%" height="100%" id="grpContenedorPrincipal" >
		
		<s:BorderContainer borderVisible="false" width="100%" height="100%" backgroundColor="white" backgroundAlpha="0">
			
			<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="0" >
				
				<s:VGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center" >
					
					<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
						
						<botoneraFlotante:botonSecciones height="20%" width="80%" id="menuFlo" data="{arrayMenu}"   />
						
					</s:HGroup>  
					
				</s:VGroup>  
				
				
				
				<s:VGroup width="100%" height="90%" id="vistauno" gap="0" >
					
					<s:HGroup width="100%" height="10%" horizontalAlign="center" verticalAlign="middle" id="fechasContrato" >
						
						<s:HGroup width="25%" height="100%" horizontalAlign="center" verticalAlign="middle" >
							<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle"  >
								<s:Label styleName="tab_texto_12_Helvetica"  fontSize="14" color="#424242" text="Inicio de Contrato:" textAlign="left" fontFamily="Helvetica" fontWeight="bold" />
								<dateField:DatePickerDefault bordeRedondo="false" height="30" colorBorde="#eaeaea" grosorBorde="1" id="fechaInicio" verticalAlignTextInput="middle" widthLabelDatePicker="200" click="fechaInicio_clickHandler(event)"
															 heightLabelDatePicker="{heightComponentes}" fontSizeText="14" />
							</s:HGroup>  
						</s:HGroup>
						
						<s:HGroup width="25%" height="100%" horizontalAlign="center"   >
							<s:HGroup width="100%" height="100%"  verticalAlign="middle" horizontalAlign="center" >
								<s:Label styleName="tab_texto_12_Helvetica"  fontSize="14" color="#424242" text="Final de Contrato:" textAlign="left" fontFamily="Helvetica" fontWeight="bold" />
								<dateField:DatePickerDefault bordeRedondo="false" height="30" colorBorde="#eaeaea" grosorBorde="1" id="fechaFin" verticalAlignTextInput="middle" widthLabelDatePicker="200"
															 heightLabelDatePicker="{heightComponentes}" fontSizeText="14" />
							</s:HGroup>  
						</s:HGroup>
					
						<s:HGroup width="25%" height="100%" verticalAlign="middle" horizontalAlign="center">
							<s:Label styleName="tab_texto_12_Helvetica"  fontSize="14" color="#424242" text="Condiciones de Pago" textAlign="left" fontFamily="Helvetica" fontWeight="bold" />
							<cmbCat:ComboCatalogos  fontSize="14" width="200" height="30" id="cmbCondicionesPago" creationComplete="{cmbCondicionesPago.cargarCondicionesDePago('--NINGUNO--') }"/>
							
						</s:HGroup>  
						
						
						<s:HGroup width="25%" height="100%" verticalAlign="middle" horizontalAlign="center">
						
						<componentes:botonVerdeAguaConImagen id="reInactivo" width="100%" height="28" horizontalCenter="0" label="RENOVAR CONTRATO" autosize="true" soloClic="true" sizeAutoDisplay="285" enabled="false"
							colorBase="0xBCBEC0" colorTextoDown="0xffffff" colorDown="0xBCBEC0" imagen="agregar"  />
							
							<componentes:botonVerdeAguaConImagen id="reActivo" width="100%" height="28" horizontalCenter="0" label="RENOVAR CONTRATO" autosize="true" soloClic="true" sizeAutoDisplay="285" visible="false" includeInLayout="false"
															colorBase="0xBCBEC0" colorTextoDown="0xffffff" colorDown="0xBCBEC0" imagen="agregar" click="lnkGuardar_clickHandler(event,true)" />
							
							
							
						</s:HGroup>  
						
					
					</s:HGroup> 
					
					<otros:division width="100%" height="1" colorLinea="negro" />	
					
					<s:HGroup width="100%" height="90%" gap="0" paddingTop="0"  >
						
						<generales:ListaProveedoresContratos width="20%" height="100%" id="listaPro" />	
						
						<s:VGroup width="80%" height="100%"  >
							
							
							<s:Group width="100%" height="100%"  >
								
								<s:Rect width="100%" height="100%" >
									<s:fill>
										<s:SolidColor color="#f3f3f4" />
									</s:fill>
								</s:Rect>
								
								<s:VGroup width="100%" height="90%" id="textoG" verticalAlign="middle">
									
									<label:TituloNovecento_18 id="lblSeleccionNoPartidas" text="AGREGUE O ARRASTRE LAS MARCAS DE LA LISTA " maxDisplayedLines="1"  width="100%"  textAlign="center" verticalAlign="middle" horizontalCenter="0" color="#c2c3c9" fontSize="30" />
									<label:TituloNovecento_18  text="PARA INCLUIRLAS AL CONTRATO" maxDisplayedLines="1"  width="100%"  textAlign="center" verticalAlign="middle" horizontalCenter="0" color="#c2c3c9" fontSize="30" />
								</s:VGroup>
								
								
								<s:VGroup width="100%" height="100%" visible="false" includeInLayout="false" id="grpListaProCon" paddingLeft="5"  paddingRight="5" horizontalAlign="center" gap="0"  >
									
									<s:VGroup width="80%" height="5%" verticalAlign="bottom" paddingTop="25" >
										<s:Label styleName="tab_texto_12_Helvetica"  fontSize="14" color="#424242" text="#     Nombre"  fontFamily="Helvetica" fontWeight="bold"  width="100%"/>
										<otros:division width="100%" height="1" colorLinea="negro" />	
									</s:VGroup>  
									
									
									<s:List width="80%" height="85%" id="listaProCon" contentBackgroundColor="#f3f3f4" borderVisible="false" horizontalScrollPolicy="off" focusColor="#FFFFFF" focusEnabled="false" dropEnabled="true" dragDrop="entroItem(event)" top="5"
											itemRenderer="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.clientes.itemRenderer.IRCatClientesProveedoresEnContrato" />
									
									<s:VGroup width="80%" height="10%" >
										
										<otros:division width="100%" height="3" bottom="0"  />	
										<s:Label styleName="tab_texto_12_Helvetica" width="80%"  fontSize="14" color="#424242" text="{listaProCon.dataProvider.length} Marcas" textAlign="center" fontFamily="Helvetica" fontWeight="bold" bottom="0" />
										
									</s:VGroup>  
									
								</s:VGroup>  
								
							</s:Group>	
							
						</s:VGroup>  
						
						
					</s:HGroup>  
					
					<!--	aqui-->
						
					
				</s:VGroup>  
				
				
				<s:HGroup width="100%" height="90%" gap="0" paddingTop="0" id="vistaDos" visible="false" includeInLayout="false" > <!--inicia seccion familias-->
					
					<generales:ContenedorListaMarcasSeleccionada width="20%" height="100%" id="listaProSeleciconados" />
				
				<s:VGroup width="80%" height="100%" gap="0"  >
					
					<s:VGroup width="100%" height="135" verticalAlign="middle" depth="99">
						<s:Group width="100%" height="100%">
							<s:Rect id="fondo" width="100%" height="100%" >
								<s:filters>
									<s:DropShadowFilter alpha="1" angle="90" blurX="0" blurY="7"
														color="#424242" distance="1" hideObject="false" inner="false"
														knockout="false" quality="3" strength="0.9"/>
									<s:DropShadowFilter alpha="1" angle="270" blurX="0" blurY="7"
														color="#424242" distance="1" hideObject="false" inner="false"
														knockout="false" quality="3" strength="0.9"/>
								</s:filters>
								<s:fill>
									<s:SolidColor color="black" />
								</s:fill> 
							</s:Rect>
							<s:HGroup width="100%" height="135" gap="0" verticalAlign="middle" id="grpNegro"  >
								<s:Group width="170" height="135" mouseDown="{imgBotonI.source= catalogoIconosBotoneras.getInstance().flechasIzquierdaDown}" id="btnIzquierdo" click="cambia('izquierda')"
										 mouseOver="{imgBotonI.source= catalogoIconosBotoneras.getInstance().flechasIzquierdaDown }" mouseOut="{imgBotonI.source= catalogoIconosBotoneras.getInstance().flechasIzquierda}" >
									<s:Image source="{ catalogoIconosBotoneras.getInstance().fondoBotonNegroGrande}" height="135" width="169"/>
									<s:Image id="imgBotonI" source="{ catalogoIconosBotoneras.getInstance().flechasIzquierda }" horizontalCenter="15" verticalCenter="0" />
								</s:Group>
								<s:VGroup paddingTop="-4" width="83%" depth="-5000" id="grpPanel">
									<s:Panel  width="100%" depth="-5000" id="pnlImagenes" borderVisible="false" borderAlpha="0" dropShadowVisible="false"  contentBackgroundAlpha="0" backgroundAlpha="0" 
											  controlBarVisible="false" skinClass="skins.skin.panelSpark.PanelSinTitleBar"   >
										<mx:Canvas width="100%" id="cnvPanel" borderAlpha="0" dropShadowVisible="false" contentBackgroundAlpha="0" backgroundAlpha="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
											<s:HGroup width="100%" verticalAlign="middle" id="grpImagenes" gap="-2" />
										</mx:Canvas>
										
									</s:Panel>
								</s:VGroup>
								<s:Group width="170" height="135" mouseDown="{imgBotonD.source = catalogoIconosBotoneras.getInstance().flechasDerechaDown}"  id="btnDerecho" click="cambia('derecha')"
										 mouseOver="{imgBotonD.source= catalogoIconosBotoneras.getInstance().flechasDerechaDown }" mouseOut="{imgBotonD.source= catalogoIconosBotoneras.getInstance().flechasDerecha}" >
									<s:Image source="{ catalogoIconosBotoneras.getInstance().fondoBotonNegroGrande}" height="135" width="170"/>
									<s:Image id="imgBotonD" source="{ catalogoIconosBotoneras.getInstance().flechasDerecha }" horizontalCenter="-15" verticalCenter="0"/>
								</s:Group>
							</s:HGroup>
						</s:Group>
					</s:VGroup>
					
					
					<s:HGroup width="100%" height="100%" depth="98">
						
						<s:VGroup width="20%" height="100%" visible="false"  includeInLayout="false" id="grupPrecioLista" >
							
							<s:Group width="100%" height="100%"  >
								
								<s:Rect width="100%" height="100%" >
									<s:fill>
										<s:SolidColor color="#f3f3f4" />
									</s:fill>
								</s:Rect>
								
								<s:VGroup width="100%" height="100%"  horizontalAlign="center" paddingTop="10" paddingRight="10"  >
									
									<s:TextInput fontStyle="normal" id="txtCosto" width="90%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" prompt="Costo" change="filtrarCosto()" enter="filtrarCosto()"  restrict="0-9."/>
									<s:Spacer height="20"/>
									
									<s:HGroup width="100%" height="100%" horizontalAlign="center"  >
										
										<comun:ListaConItemsEnfocados id="lstCostoEnfoque" width="100%" height="100%" contentBackgroundColor="#f3f3f4"
																	  itemRenderer1="{CatClientesContratos_ListaPreciosListaEnfocados}"
																	  desenfoqueAutomatico="lstCostoEnfoque_desenfoqueAutomaticoHandler(event)"
																	  itemSeleccionado="lstCostoEnfoque_itemSeleccionadoHandler(event)" areClikeablesDesenfocados="true"
																	  propiedadesASumar="{['producto.cant','totalProductos']}"
																	  etiquetasTotal="{([{singular:'Costo',plural:'Costos'},{singular:'Producto',plural:'Productos'}])}"
																	  generarKey="{(['producto.categoriaPrecioLista','producto.licencia'])}"/>
										<!--<otros:VDivisionDelgada height="100%" width="2" />-->
										
									</s:HGroup> 
								</s:VGroup>  
							</s:Group>
						</s:VGroup>  
						
						<s:VGroup width="20%" height="100%" visible="false"  includeInLayout="false" id="grupClasificaciones" >
							
							<s:Group width="100%" height="100%"  >
								
								<s:Rect width="100%" height="100%" >
									<s:fill>
										<s:SolidColor color="#f3f3f4" />
									</s:fill>
								</s:Rect>
								
								<s:VGroup width="100%" height="100%"  horizontalAlign="center" paddingTop="10" >
									<s:TextInput fontStyle="normal" id="txtClasificacion" width="90%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" prompt="Concepto" change="filtrarListaClasificacion()" enter="filtrarListaClasificacion()"/>
									<s:Spacer height="20"/>
									
									<s:HGroup width="100%" height="100%" horizontalAlign="center"  >
										
										<comun:ListaConItemsEnfocados id="lstClasificacionEnfoque" width="100%" height="100%"
																	  itemRenderer1="{CatClientesOferta_ListaEnfocados_IR}"
																	  itemSeleccionado="lstClasificacionEnfoque_itemSeleccionadoHandler(event)" 
																	  propiedadesASumar="{'cantidadConceptos'}" areClikeablesDesenfocados="true"
																	  desenfoqueAutomatico="lstClasificacionEnfoque_desenfoqueAutomaticoHandler(event)"
																	  etiquetasTotal="{([{singular:'Concepto',plural:'Conceptos'}])}"
																	  generarKey="{(['idClasificacion'])}"
																	  />
										<!--<otros:VDivisionDelgada height="100%" width="2" />-->
									</s:HGroup>  
								</s:VGroup> 
							</s:Group>
						</s:VGroup>  
						
			
						<s:VGroup width="20%" height="100%" visible="false" includeInLayout="false" id="grupProductos" >
							
							<s:Group width="100%" height="100%"  >
								
								<s:Rect width="100%" height="100%" >
									<s:fill>
										<s:SolidColor color="#f3f3f4" />
									</s:fill>
								</s:Rect>
								
								
								<s:VGroup width="100%" height="100%"   horizontalAlign="center" paddingTop="10" paddingRight="10" >
									
									<s:TextInput fontStyle="normal" id="txtProducto" width="90%" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" prompt="Producto" change="filtrarProducto()" enter="filtrarProducto()" />		
									<s:Spacer height="20"/>
									<s:HGroup width="100%" height="100%" horizontalAlign="center"  >
										
										<comun:ListaConItemsEnfocados id="lstProductoEnfoque" width="100%" height="100%" contentBackgroundColor="#f3f3f4"
																	  itemRenderer1="{CatClientes_IR_listaConfiguracionProductos}"
																	  desenfoqueAutomatico="lstProductoEnfoque_desenfoqueAutomaticoHandler(event)"
																	  itemSeleccionado="lstProductoEnfoque_itemSeleccionadoHandler(event)"
																	  propiedadesASumar="{'totalProductos'}" areClikeablesDesenfocados="true"
																	  etiquetasTotal="{([{singular:'Producto',plural:'Productos'}])}"
																	  generarKey="{(['producto.categoriaPrecioLista','producto.idProducto','producto.licencia'])}"/>
										<!--<otros:VDivisionDelgada height="100%" width="2" />-->
										
									</s:HGroup>  
								</s:VGroup >  
							</s:Group>
						</s:VGroup>  
						
						
						
						<s:VGroup width="80%" height="100%" paddingLeft="10" paddingRight="10" id="grupMedio" gap="0" >
							
							<s:HGroup width="100%" height="8%" verticalAlign="bottom" >
								<s:Label styleName="tab_texto_12_Helvetica"  fontSize="30" color="#257d92" text="{ProveedorActual_Contratos.nombre}" textAlign="left" fontFamily="Helvetica" fontWeight="bold" />
								<s:Label styleName="tab_texto_12_Helvetica"  fontSize="30"  text="· {nivelActual_Contrato.toUpperCase()}" textAlign="left" fontFamily="Helvetica" fontWeight="bold" />
							</s:HGroup>  
							<otros:division width="100%" height="3" bottom="0"  />	
							
							<s:VGroup width="100%" height="40" paddingTop="20" visible="false" includeInLayout="false"  id="grpBotonera" >
								<botonesToggle:ButtonBarColores  width="100%" id="botoneraBarra" height="40" click="botoneraBarra_clickHandler()" horizontalCenter="0" />
							</s:VGroup>
							
							
							<generales:CatClientes_VistaContratoGenerales width="100%" height="100%" id="seccionGenerales"  />
							<generales:CatClientes_VistaConfiguracionClasificacion width="100%" height="100%" id="seccionClasificacion" visible="false" includeInLayout="false" />
							<generales:CatClientes_VistaConfiguracionProductos width="100%" height="100%" id="seccionProductos" visible="false" includeInLayout="false" />
							<generales:CatClientes_VistaConfiguracionPrecioLista width="100%" height="100%" id="seccionPrecioLista" visible="false" includeInLayout="false" top="-20" />
							<generales:CatClientes_Contratos_SeccionTiempoEntrega width="100%" height="100%" id="seccionTiempoEntrega" visible="false" includeInLayout="false" />
						</s:VGroup>  
						
						<generales:ContenedorPreciosLista_PrecioCliente width="20%" height="100%" id="listaPreciosLista" />
						
					</s:HGroup>  
					
				</s:VGroup>  
					<!--grupo principal medio-->
				</s:HGroup>  <!--termina Seccion familias-->
				
				<s:HGroup width="100%" height="90%" gap="0" paddingTop="0" id="vistaTres" visible="false" includeInLayout="false" >
					
					<generales:CatClientes_VizualizarContrato id="contratoGenerado" width="100%" height="100%" tipo="contrato_generado" />
					<mx:Spacer width="20" />
					<generales:CatClientes_VizualizarContratoFirmado id="contratoFirmado" width="100%" height="100%"  tipo="contrato_firmado"  />
					
				</s:HGroup>  
				
				
				
				<s:VGroup width="100%" paddingBottom="10" gap="10" verticalAlign="middle" >
					<otros:divisionGruesa width="100%"/>
					<s:Group width="100%" id="grpBotones">
						<s:HGroup width="100%" id="grpGuardarCancelar" paddingLeft="20"  paddingRight="20">
							<pqNet:botonPqNetLargo label="CANCELAR" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL }" click="lnkCancelar_clickHandler(event)" id="lnkCancelar" />
							<s:Spacer width="100%"/>
							<pqNet:botonPqNetLargo label="GUARDAR" id="lnkGuardar" colorBase="0x{catalogoColores.LABEL_VERDE_AZUL }" click="lnkGuardar_clickHandler(event,false)"  />
							<pqNet:botonPqNetLargo width="275" fontSize="18" label="GENERAR CONTRATO" id="lnkGenerarContratoActivo" colorBase="0x{catalogoColores.LABEL_VERDE_CLARO}" click="lnkGuardar_clickHandler(event,true)" visible="false" includeInLayout="false"  />
							<pqNet:botonPqNetLargo width="275" fontSize="18" label="GENERAR CONTRATO" id="lnkGenerarContrato" colorBase="0x{catalogoColores.LABEL_GRIS }"/>
							<pqNet:botonPqNetLargo width="275" fontSize="18" enabled="false" label="FINALIZAR" id="lnkFinalizar" colorBase="0x{catalogoColores.LABEL_GRIS }" visible="false" includeInLayout="false" />
							<pqNet:botonPqNetLargo width="275" fontSize="18" label="FINALIZAR" id="lnkFinalizarActivo" colorBase="0x{catalogoColores.LABEL_VERDE_CLARO}" visible="false" includeInLayout="false" click="lnkFinalizarActivo_clickHandler(event)"/>
						</s:HGroup>
					</s:Group>
					
				</s:VGroup>  
				
			</s:VGroup>
		</s:BorderContainer>
		
	</s:VGroup>
</s:Group>