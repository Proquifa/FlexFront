<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" width="100%"
				xmlns:lay="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.zitemRenderer.empresasGeneral.*"
				currentStateChanging="itemrenderer1_currentStateChangingHandler(event)" xmlns:otros="skins.otros.*" xmlns:pqNet="skins.botones.pqNet.*" 
				xmlns:label="skins.skin.label.*" xmlns:textinput="skins.skin.textinput.*" xmlns:spacers="skins.skin.spacers.*" xmlns:chekbox="skins.skin.chekbox.*">
	
	<fx:Declarations>
		<s:Parallel id="mostrarModificar" effectEnd="mostrarModificar_effectEndHandler(event)">
			<s:Resize heightFrom="0" heightTo="287" duration="267"/>
			<s:Fade startDelay="50" duration="100" alphaFrom="0.1" alphaTo="1"/>
		</s:Parallel>
		<s:Parallel id="ocultarModificar" effectStart="ocultarModificar_effectStartHandler(event)" effectEnd="ocultarModificar_effectEndHandler(event)">
			<s:Resize  heightFrom="287" heightTo="0" duration="267"/>
			<s:Fade startDelay="0" duration="200" alphaFrom="1" alphaTo="0"/>
		</s:Parallel>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.catalogos.proveedores.generales.EventoCatProContactos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.RutasPdF;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Util;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.generales.CuadradoContacto;
			import mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.generales.PanelContactosAnimado;
			import mx.events.EffectEvent;
			import mx.events.StateChangeEvent;
			import mx.geom.TransformOffsets;
			import mx.utils.StringUtil;
			
			import spark.components.Group;
			import spark.components.VGroup;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotoneras;
			import skins.catalogos.catalogoIconosBotones;
			import skins.catalogos.catalogoIconosEtiquetas;
			import skins.skin.contenedores.CatalogoProveedores.ContenedorEditarContactoSkin;
			
			private var currentAncho:Number;
			private var isShowHabilitados:Boolean = true;
			[Bindable]private var muestraCargaFirma:Boolean;
		
			
			public var naftaHabilitado:Boolean;
			[Bindable] public static var heightBtnPDF:Number = 30;
			
 			override public function set data(value:Object):void{
				
				grpTodo.removeAllElements();
				isShowHabilitados = (this.owner.parent as PanelContactosAnimado).isCurrentHabilitados;
				
				for (var i:int = 0; i < value.length; i++) 
				{
					
					grpTodo.addElement(crearCubo(value[i],i));
					
				
				}
				
				
				
					
				
			}
			
			private var myXForm:TransformOffsets;
			private function crearCubo($item:*,$id:int):Group
			{
				var content:CuadradoContacto = new CuadradoContacto;
				content.id = "button_"+$id;
				myXForm = new TransformOffsets;
				content.postLayoutTransformOffsets = myXForm;
				content.isHabilitado = isShowHabilitados;
				
				
				if(($item as Object).hasOwnProperty("CuboAgregar")){
					
					content.tipoDeCubo = "agregar";
				}else{
					content.tipoDeCubo = "contacto";
					
					if($item.titulo != null && StringUtil.trim($item.titulo).length > 0 && $item.titulo != "ND")
						content.nombreContacto = $item.titulo + " " + $item.nombre;
					else
						content.nombreContacto = $item.nombre;
					
					content.item = $item;
					content.area = $item.departamento;
					content.puesto = $item.puesto;
					
					
					content.email =$item.EMail; 
					
/* 					if($item.telefono != null && StringUtil.trim($item.telefono).length > 0 && $item.telefono != "ND" )
						content.tel1 = $item.telefono;
					
					if($item.telefonoN != null && StringUtil.trim($item.telefonoN).length > 0 && $item.telefonoN != "ND")
						content.tel2 = $item.telefonoN;
					
					if($item.fax != null && StringUtil.trim($item.fax).length > 0 && $item.fax != "ND")
						content.fax =  $item.fax; */
					
					
					content.contatenarTel1($item.telefono,$item.extension1);
					content.contatenarTel2($item.telefonoN,$item.extension2);
					
				/*	if($item.contactoNAFTA)
					{
						nafta.selected = true;
					}*/
					
					if($item.rutaFirma!= null){
						
						
						pdfGrisC.visible = pdfGrisC.includeInLayout = false;
						
					}
				
					
				}
				
				content.addEventListener("DisparandoEventoCustomCuboCatProveedoresContacto",escuchaEventClickButtonContacto,false,0,true); 
				
				return content;
			}
			
			[Bindable]
			private var paddingLeft:Number
			private var lastIdButtonSelected:String;
			private var lastButtomSelected:Object;
			private function escuchaEventClickButtonContacto(eve:Event):void
			{
				
				if(!mostrarModificar.isPlaying && !ocultarModificar.isPlaying)
				{
					
					if(grpTodosModificar.width > 780)
					{
						grpModificar.width = 780;
						
						if(eve.currentTarget.hasOwnProperty("puntoMedio")){
							
							var temp:Number =(eve.currentTarget as CuadradoContacto).puntoMedio - (grpModificar.width / 2); 
							var temp2:Number =(eve.currentTarget as CuadradoContacto).puntoMedio + (grpModificar.width / 2); 
							
							if(temp <= 0){
								paddingLeft = 0;
								(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as CuadradoContacto).puntoMedio;
							}else if(temp2 > grpTodosModificar.width){
								paddingLeft = (grpTodosModificar.width - grpModificar.width)-10;
								(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as CuadradoContacto).puntoMedio - paddingLeft;
							}else{
								paddingLeft = temp;
								(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as CuadradoContacto).puntoMedio - paddingLeft;
							}
							
						}
					}
					else
					{
						paddingLeft = 0;
						grpModificar.width = grpTodosModificar.width-10;
						if(eve.currentTarget.hasOwnProperty("puntoMedio")){
							(grpModificar.skin as ContenedorEditarContactoSkin).xIndicador = (eve.currentTarget as CuadradoContacto).puntoMedio;
						}
					}
					
					if(grpTodosModificar.visible)
					{
						
						if(lastIdButtonSelected != eve.currentTarget.id)
						{				
							lastIdButtonSelected = eve.currentTarget.id;
							
							(lastButtomSelected as CuadradoContacto).setCurrentState("normal");
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
							
							lastButtomSelected = eve.currentTarget;
							
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleX + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleY + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = (lastButtomSelected as Group).postLayoutTransformOffsets.x - 4.7;
							
							
							if((eve.currentTarget as CuadradoContacto).tipoDeCubo == "contacto"){
								btnModificar.visible = btnModificar.includeInLayout = true;
								btnAgregar.visible = btnAgregar.includeInLayout = false;
								_contacto = eve.currentTarget.item as Contacto;
							}else{
								
								btnAgregar.visible = btnAgregar.includeInLayout = true;
								btnModificar.visible = btnModificar.includeInLayout = false;
								_contacto = new Contacto;
							}
							
						}
						else
						{
							
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
							
							lastIdButtonSelected = null;
							
							if(!mostrarModificar.isPlaying && !ocultarModificar.isPlaying){
								grpTodosModificar.visible = false;
							}
							
						}
					}
					else
					{
						
						if(lastIdButtonSelected != eve.currentTarget.id){
							
							lastIdButtonSelected = eve.currentTarget.id;
							lastButtomSelected = eve.currentTarget;
							
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleX + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = (lastButtomSelected as Group).postLayoutTransformOffsets.scaleY + 0.04;
							(lastButtomSelected as Group).postLayoutTransformOffsets.x = (lastButtomSelected as Group).postLayoutTransformOffsets.x - 4.7;
							
							if((eve.currentTarget as CuadradoContacto).tipoDeCubo == "contacto")
							{
								btnModificar.visible = btnModificar.includeInLayout = true;
								btnAgregar.visible = btnAgregar.includeInLayout = false;
								
								if(isShowHabilitados)
								{
									lblHabilitar.includeInLayout = lblHabilitar.visible = false;
									checkBoxHabilitar.includeInLayout = checkBoxHabilitar.visible = false;
								}
								else
								{
									lblHabilitar.includeInLayout = lblHabilitar.visible = true;
									checkBoxHabilitar.includeInLayout = checkBoxHabilitar.visible = true;
								}
						
								
								_contacto = eve.currentTarget.item as Contacto;
							}
							else
							{
								checkBoxHabilitar.includeInLayout = checkBoxHabilitar.visible = false;
								lblHabilitar.includeInLayout = lblHabilitar.visible = false;
								
								lblNombreArchivo.includeInLayout = lblNombreArchivo.visible = true;
								cargaFirma.includeInLayout = cargaFirma.visible = true;
								
								btnAgregar.visible = btnAgregar.includeInLayout = true;
								btnModificar.visible = btnModificar.includeInLayout = false;
								_contacto = new Contacto;
							}
							
							grpTodosModificar.percentWidth = 100;
							grpTodosModificar.visible = true;
						}
					}
				}
			}
			
			protected function itemrenderer1_currentStateChangingHandler(event:StateChangeEvent):void
			{
				if(event.newState == "normal" && grpTodosModificar.visible){
					grpTodosModificar.visible = false;
					
					(lastButtomSelected as CuadradoContacto).setCurrentState("normal");
					(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
					(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
					(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
					
					lastIdButtonSelected = null;
				}
			}
			
			protected function imgCerrar_clickHandler(event:MouseEvent):void
			{
				grpTodosModificar.visible = false;
				
				(lastButtomSelected as CuadradoContacto).setCurrentState("normal");
				(lastButtomSelected as Group).postLayoutTransformOffsets.scaleX = 1.0;
				(lastButtomSelected as Group).postLayoutTransformOffsets.scaleY = 1.0;
				(lastButtomSelected as Group).postLayoutTransformOffsets.x = 0;
				
				lastIdButtonSelected = null;
			}
			
			protected function mostrarModificar_effectEndHandler(event:EffectEvent):void
			{
				if(nafta.selected)
				{
					lblNombreArchivo.text = "";
					lblNombreArchivo.visible = true;
					cargaFirma.visible = true;
				}
				else
				{
					lblNombreArchivo.text = "";
					lblNombreArchivo.visible = false;
					cargaFirma.visible = false;
				}
				
				grpContenidoModificar.percentWidth = 100;
				grpTodosModificar.percentWidth  = 100;
				grpContenidoModificar.visible = true;
			}
			
			//OCULTAR GRP MODIFICAR
			protected function ocultarModificar_effectStartHandler(event:EffectEvent):void
			{
				grpContenidoModificar.visible = false;
			}
			
			protected function ocultarModificar_effectEndHandler(event:EffectEvent):void
			{
				grpContenidoModificar.percentWidth = 100;
				grpTodosModificar.height = 0;
				grpTodosModificar.percentWidth = 100;
			}
			
			[Bindable]
			private var _contacto:Contacto; 
			protected function btnModificar_clickHandler(event:MouseEvent):void
			{
				var contacto2:Contacto = new Contacto;
				contacto2 = _contacto;
				contacto2.tipo = "Proveedores";
				contacto2.departamento = txtDepto.text.toUpperCase();
				contacto2.EMail = txtEmail.text;
				contacto2.fax = txtFax.text.toUpperCase();
				contacto2.titulo = txtTitulo.text.toUpperCase(); 
				contacto2.nombre = txtNombre.text.toUpperCase();
				contacto2.puesto = txtPuesto.text.toUpperCase();
				contacto2.telefono = txtTel.text.toUpperCase();
				contacto2.telefonoN = txtTel2.text.toUpperCase();
				contacto2.extension1 = txtExt1.text.toUpperCase();
				contacto2.extension2 = txtExt2.text.toUpperCase();
				contacto2.habilitado = checkBoxHabilitar.selected;
				contacto2.contactoNAFTA = nafta.selected;
				
			/*	var modificar:EventoCatProContactos = new EventoCatProContactos(EventoCatProContactos.MODIFICAR_CONTACTO_VISTA);
				modificar.contacto = _contacto;
				modificar.contacto.tipo = "Proveedores";*/
			/*	
				modificar.contacto.departamento = txtDepto.text.toUpperCase();
				modificar.contacto.EMail = txtEmail.text;
				modificar.contacto.fax = txtFax.text.toUpperCase();
				modificar.contacto.titulo = txtTitulo.text.toUpperCase(); 
				modificar.contacto.nombre = txtNombre.text.toUpperCase();
				modificar.contacto.puesto = txtPuesto.text.toUpperCase();
				modificar.contacto.telefono = txtTel.text.toUpperCase();
				modificar.contacto.telefonoN = txtTel2.text.toUpperCase();
				modificar.contacto.extension1 = txtExt1.text.toUpperCase();
				modificar.contacto.extension2 = txtExt2.text.toUpperCase();
				modificar.contacto.habilitado = checkBoxHabilitar.selected;
				modificar.contacto.contactoNAFTA = nafta.selected;
				
				
				
				dispatchEvent(modificar);
*/
				if(nafta.selected)
				{
					var verifica:EventoCatProContactos = new EventoCatProContactos(EventoCatProContactos.VERIFICACONTACTONAFTA)
					verifica.contacto = contacto2;
					verifica.rutaFirmaEvento = _contacto.rutaFirma; 
					verifica.firmaEvento = _contacto.firma;
					dispatchEvent(verifica);	
				}
				
			}
			
			protected function btnAgregar_clickHandler(event:MouseEvent):void
			{
				var evtAgrega:EventoCatProContactos = new EventoCatProContactos(EventoCatProContactos.AGREGAR_CONTANTO_VISTA);
				
				evtAgrega.contacto = new Contacto();
				evtAgrega.contacto.habilitado = true;
				evtAgrega.contacto.tipo = 'Proveedores';
				evtAgrega.contacto.idContacto = 0;
				evtAgrega.contacto.idEmpresa = 0;
				
				if( txtNombre.text == '' )
				{
					alertaSingleton.show( 'Debe establecer el nombre del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtTitulo.text == '')
				{
					alertaSingleton.show( 'Debe establecer el título del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtPuesto.text == '')
				{
					alertaSingleton.show( 'Debe establecer el puesto del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtDepto.text == '')
				{
					alertaSingleton.show( 'Debe establecer el departamento del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtTel.text == '')
				{
					alertaSingleton.show( 'Debe establecer el t1 del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				}
				if( txtEmail.text == '')
				{
					alertaSingleton.show( 'Debe establecer el e-Mail del contacto.', catalogoAlertas.TIT_ADV_informacionIncompleta );
					return;
				} 
				
				evtAgrega.contacto.nombre = txtNombre.text.toUpperCase();
				evtAgrega.contacto.titulo = txtTitulo.text.toUpperCase();
				evtAgrega.contacto.departamento = txtDepto.text.toUpperCase();
				evtAgrega.contacto.EMail = txtEmail.text;
				evtAgrega.contacto.fax = txtFax.text.toUpperCase();
				evtAgrega.contacto.puesto = txtPuesto.text.toUpperCase();
				evtAgrega.contacto.telefono = txtTel.text.toUpperCase();
				evtAgrega.contacto.telefonoN = txtTel2.text.toUpperCase();
				evtAgrega.contacto.extension1 = txtExt1.text.toUpperCase();
				evtAgrega.contacto.extension2 = txtExt2.text.toUpperCase();
				dispatchEvent(evtAgrega);
			}
			
			protected function interacionConLosTextImputs_focusOutHandler(event:FocusEvent):void
			{
				
				if(event.currentTarget != null){
					
					event.stopImmediatePropagation();
					event.preventDefault();
					
					switch(event.currentTarget.id)
					{
						case "txtNombre":{txtTitulo.setFocus();break;}
						case "txtTitulo":{txtPuesto.setFocus();break;}
						case "txtPuesto":{txtDepto.setFocus();break;}
						case "txtDepto":{txtTel.setFocus();break;}
						case "txtTel":{txtExt1.setFocus();break;}
						case "txtExt1":{txtTel2.setFocus();break;}
						case "txtTel2":{txtExt2.setFocus();break;}
						case "txtExt2":{txtFax.setFocus();break;}
						case "txtFax":{txtEmail.setFocus();break;}
					}
				}
			}
			
			protected function cargarArchivo(event:MouseEvent):void
			{
				
				browseFileSystem();
			}
			
	
            public var file:File = new File();
	       
		
		
			
			
			public function browseFileSystem():void{
				file = new File();
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				
				var docFilter:FileFilter;
				docFilter = new FileFilter("Documents", "*.jpg;*.png");
				file.addEventListener(Event.COMPLETE,completeHandler);
				file.browse([docFilter]); 
			}
			
			private function selectHandler(event:Event):void 
			{
				var file:FileReference = FileReference(event.target);
				file.load();
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void 
			{
				trace("ioErrorHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void 
			{
				var file:FileReference = FileReference(event.target);
				trace("progressHandler: name=" + file.name + "bytesLoaded = " + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			
			private function completeHandler(event:Event):void 
			{
				trace("completeHandler: " + event);
				    
				    _contacto.rutaFirma = file.nativePath;
			        lblNombreArchivo.text = file.name;	
					_contacto.firma = this.file.data;
				
					pdfGrisC.visible = pdfGrisC.includeInLayout = false;
					
				
			}
			
			protected function iconoTextFirma(eventomos:MouseEvent):void
			{
				
				if(nafta.selected)
				{
					grupoCargaArchivo.visible = true;
					lblNombreArchivo.text = "";
					lblNombreArchivo.visible = true;
				}
				else
				{
					grupoCargaArchivo.visible = false;
					lblNombreArchivo.text = "";
					lblNombreArchivo.visible = false;
				}
				
			}
			
			protected function visualizarPDF_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest;
					if(_contacto.firma == null)
					{
					request = new URLRequest(encodeURI( "http://"+Destinos.ipUsandose+"/SAP/"+RutasPdF.ARCHIVOS_CONTACTOS+_contacto.rutaFirma));
					navigateToURL(request);
					}
					else{
					    request = new URLRequest("file://"+  encodeURI(_contacto.rutaFirma));
						navigateToURL(request);
					}
			
			}
			
			
			
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:Group id="grpTodo" width="100%" height="255">
		<s:layout>
			<lay:LayoutFilaBottonPanelContactos/>
		</s:layout>
	</s:Group>
	
	<s:HGroup width="100%" id="grpTodosModificar" height="0" visible="false" showEffect="{mostrarModificar}" hideEffect="{ocultarModificar}">
		<s:Spacer width="{paddingLeft}"/>
		<s:SkinnableContainer  id="grpModificar" height="100%" width="780" 
							   skinClass="skins.skin.contenedores.CatalogoProveedores.ContenedorEditarContactoSkin"> <!--HEIGHT 0, visible false-->
			
			<s:Group id="grpContenidoModificar" width="100%" height="350" visible="false"> <!--FIX VISIBLE FALSE-->
				<s:HGroup width="100%" height="100%" paddingTop="15" gap="3">
					<spacers:spacerVerticalPqNet/>
					<s:VGroup width="100%" paddingTop="15">
						<s:HGroup  width="100%" verticalAlign="middle">
							<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_proveedoresContacto }"/>
							<label:TextoBankGothic_18_Blanco text="Contacto"/>
						</s:HGroup>
						<s:HGroup width="100%" >
							<s:VGroup height="25%" horizontalAlign="right" gap="27" paddingTop="8">
								<label:TextoBankGothic_16_Blanco text="Nombre: "/>
								<label:TextoBankGothic_16_Blanco text="Título: "/>
								<label:TextoBankGothic_16_Blanco text="Puesto: "/>
								<label:TextoBankGothic_16_Blanco text="Departamento: "/>
									
								<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" gap="0" height="30" paddingTop="-9">
									<label:TextoBankGothic_16_Blanco text="Nafta: " width="70%"/>
									<s:Group width="30" height="30">
										<chekbox:checkBoxCuadroBlanco id="nafta" selected="{_contacto.contactoNAFTA}" click="iconoTextFirma(event)"/>
									</s:Group>
							   </s:HGroup>
								<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" gap="0" height="30" paddingTop="-9">
								 <label:TextoBankGothic_16_Blanco text="Habilitar: " id="lblHabilitar" paddingTop="-9"/>
								</s:HGroup>
							</s:VGroup>
							<s:VGroup width="75%" gap="10">
								<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{ _contacto.nombre }" id="txtNombre" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{ _contacto.titulo }" id="txtTitulo" maxChars="5" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{ _contacto.puesto }" id="txtPuesto" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{ _contacto.departamento }" id="txtDepto" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
								<s:Group visible="{_contacto.contactoNAFTA}" id="grupoCargaArchivo">
									<s:HGroup width="100%" gap="10">
										<textinput:txtInputNegroDefaultPQNet width="100%" id="lblNombreArchivo" fontStyle="normal" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase" visible="{_contacto.contactoNAFTA}" />
										<mx:Image id="cargaFirma" source="{catalogoIconosBotones.getInstance().cargar_archivo}" click="cargarArchivo(event)" />
										<mx:Image id="pdfVerdeC" height="{heightBtnPDF}"  source="{catalogoIconosBotones.getInstance().vista_previa}" verticalAlign="middle"  horizontalAlign="left" 
												  click="visualizarPDF_clickHandler(event)" visible="{_contacto.rutaFirma == null ? false:true}" includeInLayout="{_contacto.rutaFirma == null ? false:true}"/>
										<mx:Image id="pdfGrisC" height="{heightBtnPDF}"  source="{catalogoIconosBotones.getInstance().vista_previa_gris}" verticalAlign="middle"  horizontalAlign="left" visible="{_contacto.rutaFirma == null ? true:false}" includeInLayout="{_contacto.rutaFirma == null ? true:false}" />
									</s:HGroup>
								</s:Group>
								<s:Spacer height="15"/>
								<chekbox:checkBoxCuadroBlanco id="checkBoxHabilitar" selected="{_contacto.habilitado}"/>

								
							</s:VGroup>
						</s:HGroup>
					</s:VGroup>  
					<spacers:spacerVerticalPqNet/>
					<s:VGroup height="100%" paddingTop="10" paddingBottom="15">
						<otros:vDivisionGruesa height="100%" color="#151515"/>
					</s:VGroup>  
					<spacers:spacerVerticalPqNet/>
					<s:Group width="100%" height="100%" >
						<s:VGroup width="100%" paddingTop="15">
							<s:HGroup  width="100%" verticalAlign="middle">
								<s:Image source="{ catalogoIconosEtiquetas.getInstance().etiquetas_telefonoblanco }"/>
								<label:TextoBankGothic_18_Blanco text="Teléfonos y Fax"/>
							</s:HGroup>
							<s:HGroup width="100%" >
								<s:VGroup height="100%" horizontalAlign="right" gap="27" paddingTop="8">
									<label:TextoBankGothic_16_Blanco text="T1:"/>
									<label:TextoBankGothic_16_Blanco text="T2:"/>
									<label:TextoBankGothic_16_Blanco text="Fax:"/>
									<label:TextoBankGothic_16_Blanco text="e-Mail:"/>
								</s:VGroup>
								<s:VGroup width="100%" gap="10">
									<s:HGroup width="100%">
										<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.telefono}" id="txtTel" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
										<label:TextoBankGothic_16_Blanco text="Ext1:" paddingTop="8"/>
										<textinput:txtInputNegroDefaultPQNet width="40" fontStyle="normal" text="{_contacto.extension1}" id="txtExt1" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
									</s:HGroup>
									<s:HGroup width="100%">
										<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.telefonoN}" id="txtTel2" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
										<label:TextoBankGothic_16_Blanco text="Ext2:" paddingTop="8"/>
										<textinput:txtInputNegroDefaultPQNet width="40" fontStyle="normal" text="{_contacto.extension2}" id="txtExt2" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
									</s:HGroup>
									<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{_contacto.fax}" id="txtFax" keyFocusChange="interacionConLosTextImputs_focusOutHandler(event)" typographicCase="uppercase"/>
									<textinput:txtInputNegroDefaultPQNet width="100%" fontStyle="normal" text="{ _contacto.EMail }" id="txtEmail"/>
								</s:VGroup>
							</s:HGroup>
							<s:VGroup width="100%" horizontalAlign="right">
								<pqNet:botonPqNetLargo id="btnModificar" label="Modificar" click="btnModificar_clickHandler(event)" chromeColor="0x{ catalogoColores.LABEL_AZUL_TENUE}"/>
								<pqNet:botonPqNetLargo id="btnAgregar" label="Agregar" click="btnAgregar_clickHandler(event)" chromeColor="0x{ catalogoColores.LABEL_AZUL_TENUE}"/>
							</s:VGroup>
						</s:VGroup>
						<s:Image id="imgOcultarModificar" right="0" top="12" source="{catalogoIconosBotoneras.getInstance().botoncerrar}"/>
						<!--Area de selección para el botón, fue implementado así por que la imagen por si misma no recibía bien el click en toda su area, aunque se le indicaba al group que 
						activara los eventos en áreas transparentes, /mouseEnableWhereIsTransparent/-->
						<s:Graphic buttonMode="true" right="0" top="12" mouseEnabledWhereTransparent="false" toolTip="Cerrar" useHandCursor="true" click="imgCerrar_clickHandler(event)">
							<s:Rect id="hit1" width="14" height="14" x="0" y="0">
								<s:fill>
									<s:SolidColor color="red" alpha="0"/>
								</s:fill>
							</s:Rect>
						</s:Graphic>
					</s:Group>  
					<spacers:spacerVerticalPqNet/>
				</s:HGroup>
			</s:Group>
		</s:SkinnableContainer>
	</s:HGroup>
</s:ItemRenderer>
