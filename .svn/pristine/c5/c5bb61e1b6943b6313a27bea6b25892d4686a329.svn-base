<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:componentes="mx.com.proquifa.vista.vistas.monitorearOcNoArribada.componentes.*"
		 xmlns:checkBox="mx.com.proquifa.vista.vistas.skin.checkBox.*" 
		 creationComplete="ini(event)"
		 width="100%" height="100%" 
		 resize="calc(event)"
		 >
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.MonitorearOcNoArribada;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.RegistroConfirmacion;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.StringFunciones;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.vista.eventos.MonitorearOCNoArribada.EventoMonitorearOcNoArribada;
			import mx.com.proquifa.vista.eventos.registrarConfirmacion.EventoRegistrarConfirmacion;
			import mx.effects.AnimateProperty;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.utils.ObjectUtil;
			
			import spark.core.NavigationUnit;
			
			[Bindable] private var contadorDisponibles:Number = 0;
			[Bindable] private var contadorCancelar:Number = 0;
			[Bindable] private var contadorCambio:Number = 0;
			[Bindable] private var contadorBack:Number = 0;
			[Bindable] public var numPartidasActuales:Number = 0;
			
			[Bindable] private var sizeFontAgente:Number;
			[Bindable] private var sizeFontTiny:Number;
			[Bindable] private var sizeFontP:Number;
			private var _dataProvider:ArrayCollection;
			private var bloqueoListaEditado:Boolean;
			
			private var _referencia:Boolean;
			private var _condicion:Boolean;
			private var _medio:Boolean;
			private var _confirma:Boolean;
			
			[Bindable]
			public function get confirma():Boolean
			{
				return _confirma;
			}
			
			public function set confirma(value:Boolean):void
			{
				_confirma = value;
			}
			
			[Bindable]
			public function get medio():Boolean
			{
				return _medio;
			}
			
			public function set medio(value:Boolean):void
			{
				_medio = value;
			}
			
			[Bindable]
			public function get condicion():Boolean
			{
				return _condicion;
			}
			
			public function set condicion(value:Boolean):void
			{
				_condicion = value;
			}
			
			[Bindable]
			public function get referencia():Boolean
			{
				return _referencia;
			}
			
			public function set referencia(value:Boolean):void
			{
				_referencia = value;
			}
			
			[Bindable]
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public static var tamListaSinArribo:int = 0;
			
			
			
			public function set dataProvider(value:ArrayCollection):void
			{
				
				var listnoarribada:ArrayCollection = new ArrayCollection();
				var listcancelyarribada:ArrayCollection = new ArrayCollection();
				
				for(var i:int = 0; i < value.length; i++)
				{
					if(value[i].tipoArribo == "No Arribada")
					{
						listnoarribada.addItem(value[i]);	
					}
					else
						listcancelyarribada.addItem(value[i]);
				}
				var ordenarPartida:ArrayCollection;
				_dataProvider = listnoarribada;
				lstOrdenesCompra.dataProvider = new ArrayCollection();
				
				lstOrdenesCompra.dataProvider = ObjectUtil.copy(listnoarribada) as ArrayCollection;
				obtenerTotalesIniciales(dataProvider);
				numPartidasActuales = listnoarribada.length;
				dispatchEvent(new Event("terminarEspera"));
				
				
				lstOrdenesCompra2.dataProvider = listcancelyarribada;
				ordenarPartida = lstOrdenesCompra2.dataProvider as ArrayCollection;
				ordenarPartida = StringFunciones.sortArreglo(ordenarPartida,"tipoArribo",true);
				lstOrdenesCompra2.dataProvider = ordenarPartida;
				
				lstOrdenesCompra.height = lstOrdenesCompra.dataProvider.length * 97;
				lstOrdenesCompra2.height = lstOrdenesCompra2.dataProvider.length * 97;
				
				mostrarTotales(ObjectUtil.copy(value) as ArrayCollection);
				tamListaSinArribo = listnoarribada.length;
			}
			
			protected function calc(event:ResizeEvent):void
			{
				sizeFontAgente = (18 / 693) * (unscaledWidth);
				sizeFontAgente = sizeFontAgente > 18 ? 18:sizeFontAgente;
				sizeFontAgente = sizeFontAgente < 14 ? 14:sizeFontAgente;
				
				sizeFontTiny = (14 / 693) * (unscaledWidth);
				sizeFontTiny = sizeFontTiny > 14 ? 14:sizeFontTiny;
				sizeFontTiny = sizeFontTiny < 10 ? 10:sizeFontTiny;
				
				sizeFontP = (12 / 693) * (unscaledWidth);
				sizeFontP = sizeFontP > 12 ? 12:sizeFontP;
				sizeFontP = sizeFontP < 9 ? 9:sizeFontP;
				
				
				
			}
			[Bindable]private var listaTemp:ArrayCollection = new ArrayCollection();
			private function guardarValorChk(event:EventoMonitorearOcNoArribada):void
			{
				var indice:int;
				var objTemp:MonitorearOcNoArribada;
				var piezas:int;
				indice = event.indiceDividir;
				piezas = event.piezas;
				if(piezas != 0){
					listaTemp = new ArrayCollection();
					
					listaTemp = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;
					objTemp = ObjectUtil.copy(listaTemp[indice]) as MonitorearOcNoArribada;
					
					if(!objTemp.indice)
						objTemp.indice = ""+(indice+1);
					objTemp.numFila += 1;
					/*if((lstOrdenesCompra.dataProvider[indice]).tipoPendiente != "original";)
					(lstOrdenesCompra.dataProvider[indice]).tipoPendiente = "original";*/
					
					objTemp.indicePadre = indice;
					objTemp.tipoPendiente = "creado";
					
					(listaTemp[indice]).cantidadCompra = piezas;
					objTemp.cantidadCompra -= piezas;
					
					(listaTemp[indice]).modificado = true;
					objTemp.modificado = false;
					
					objTemp.idPartidaCompra = 0;
					objTemp.fechaAlmacen = null;
					
					if(event.tipoSelect == "disponible"){
						objTemp.bloqueoRestablecer = "disponible";
						objTemp.estadoDisponible = "restablecer";
						(listaTemp[indice]).tipoPartida = "disponible";
						(listaTemp[indice]).estadoDisponible = "editar";
					}
					if(event.tipoSelect == "back"){
						objTemp.bloqueoRestablecer = "back";
						objTemp.estadoBackOrder = "restablecer";
						(listaTemp[indice]).tipoPartida = "BackOrder";
						(listaTemp[indice]).estadoBackOrder = "editar";						
					}
					if(event.tipoSelect == "cambio"){
						objTemp.bloqueoRestablecer = "cambio";
						objTemp.estadoCambio = "restablecer";
						(listaTemp[indice]).tipoPartida = "FEE";
						(listaTemp[indice]).estadoCambio = "editar";						
					}
					if(event.tipoSelect == "cancelar"){
						objTemp.bloqueoRestablecer = "cancelar";
						objTemp.estadoCancelar = "restablecer";
						(listaTemp[indice]).tipoPartida = "Cancelada";
						(listaTemp[indice]).estadoCancelar = "editar";						
					}
					/*objTemp.indice += "."+(indice+1) ;*/
					/*objTemp.numFila += 1;*/
					/*objTemp.dummy = true;*/
					if(objTemp.cantidadCompra  > 0)
						listaTemp.addItem(objTemp);
					lstOrdenesCompra.dataProvider = new ArrayCollection();
					lstOrdenesCompra.dataProvider = ObjectUtil.copy(listaTemp) as ArrayCollection;
					asignarDataProvider();
					
				}
			}
			
			private function asignarDataProvider():void
			{
				var ordenarPartida:ArrayCollection;
				lstOrdenesCompra.dataProvider = ObjectUtil.copy(listaTemp) as ArrayCollection;
				calcularTotalesEstados();
				verificarDisponibles(listaTemp);
				
			}
			private function restablecerValores(event:EventoMonitorearOcNoArribada):void
			{
				var indice:int;
				var objTemp:MonitorearOcNoArribada;
				var piezas:int;
				indice = event.indiceActual;
				piezas = event.piezas;
				
				objTemp = lstOrdenesCompra.dataProvider[indice];
				objTemp.cantidadCompra += piezas;
				
				if(objTemp.indice == null)
					objTemp.modificado = false;
				
				if(event.tipoSelect == "disponible")
					objTemp.estadoDisponible = "normal";
				if(event.tipoSelect == "back")
					objTemp.estadoBackOrder = "normal";
				if(event.tipoSelect == "cambio")
					objTemp.estadoCambio = "normal";
				if(event.tipoSelect == "cancelar")
					objTemp.estadoCancelar = "normal";
				
				objTemp.fechaAlmacenString = "ND";
				
				listaTemp = new ArrayCollection();
				listaTemp = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;
				listaTemp.setItemAt(objTemp,indice);
				listaTemp.removeItemAt(event.indiceDividir);
				setTimeout(asignarDataProvider,1000);
			}
			protected function ini(event:FlexEvent):void
			{
				addEventListener(EventoMonitorearOcNoArribada.CLIC_ACEPTAR_DIVIDIR_LISTA,guardarValorChk);
				addEventListener(EventoRegistrarConfirmacion. CLIC_MANDAINDEX,estadoV);
				
				addEventListener(EventoMonitorearOcNoArribada.CLIC_ACEPTAR_RESTABLECER_LISTA,restablecerValores);
				
				addEventListener(EventoMonitorearOcNoArribada.CLIC_DESMARCAR,desmarcarTodas);
				////////////////////Eventos
				/*lstOrdenesCompra.addEventListener("chkSeleccionado",guardarValorChk, false, 0, true);
				lstOrdenesCompra.addEventListener("chkSinSeleccion",reiniciarValorChk, false, 0, true);*/
			}
			
			[Bindable]public var piezas:int; 
			[Bindable]public var montoString:String; 
			[Bindable]public var clientes:int; 
			
			private function mostrarTotales(value:ArrayCollection):void
			{
				var monto:Number = 0; 
				piezas = 0;
				monto = 0;
				for (var i:int = 0; i < value.length; i++) 
				{
					piezas += value[i].totalPiezas;
					monto += value[i].montoTotal;
				}
				montoString = UtilsFormatosNumericos.precisionADosDecimalesConComas(monto);
			}
			protected function todos(event:MouseEvent,tipo:String):void
			{
				if(tipo == "cambio")
				{
					//PARA POPUP
					if(checkTipoCambio.selected && (lstOrdenesCompra.dataProvider.length > 0)){
						checkTipoCambio.selected = false;
						dispatchEvent(new Event("todosCambioPopUp"));
					}else{
						lstOrdenesCompra.dataProvider = new ArrayCollection();
						lstOrdenesCompra.dataProvider = ObjectUtil.copy(dataProvider) as ArrayCollection;
						
						listaTemp = new ArrayCollection();
						listaTemp = ObjectUtil.copy(dataProvider) as ArrayCollection;
						setTimeout(asignarDataProvider,1000);
					}
					
					/*dispatchEvent(new Event("todosCambioPopUp"));*/
				}
			}
			
			
			public function seleccionarTodo(value:Boolean,fechaRmt:Date,tipo:String,dateNuevaFEE:Date = null,justificacion:String = null,
																		motivo:String = null,archivo:ByteArray = null,nombreArchivo:String = null,rutaArchivo:String = null):void
			{
				var listaTodos:ArrayCollection = ObjectUtil.copy(dataProvider) as ArrayCollection;
				listaTemp = new ArrayCollection();
				var i:int;
				if(tipo == "cambio"){
					for (i = 0; i < listaTodos.length; i++) 
					{
						listaTodos[i].estadoCambio = "editar";	
						listaTodos[i].modificado = true;	
						listaTodos[i].tipoPartida = "FEE";
						listaTodos[i].fechaAlmacen = fechaRmt;
						listaTodos[i].fechaNueva = dateNuevaFEE;
						listaTodos[i].motivo = motivo;
						listaTodos[i].comentarios = justificacion;
						listaTodos[i].documento = archivo;
						listaTodos[i].nombreDocumento = nombreArchivo;
						
						/*current.fechaNueva = fechaNueva;
						current.fechaAlmacen = datefechaAlmacen;
						current.motivo = motivo;
						current.comentarios = justificacion;
						current.documento = archivo;
						current.nombreDocumento = nombreArchivo;*/
					}
					
					checkTipoCambio.selected = value;
				}
				
				listaTemp = ObjectUtil.copy(listaTodos) as ArrayCollection;
				setTimeout(asignarDataProvider,1000);
				
			}
			
			
			
			
			protected function desmarcarTodas(event:EventoMonitorearOcNoArribada):void
			{
				var indice:int;
				var cantidadCompra:int = 0;
				var objetosEliminar:ArrayCollection = new ArrayCollection;
				indice = event.indiceActual;
				
				listaTemp = new ArrayCollection();
				listaTemp = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;
				for (var i:int = 0; i < listaTemp.length; i++) 
				{
					if(listaTemp[i].indice == indice){
						cantidadCompra += listaTemp[i].cantidadCompra;
						objetosEliminar.addItem(listaTemp[i]);						
					}
				}
				if(indice != 0){
					listaTemp[indice-1].estadoDisponible = "normal";
					listaTemp[indice-1].estadoBackOrder = "normal";
					listaTemp[indice-1].estadoCambio = "normal";
					listaTemp[indice-1].estadoCancelar = "normal";
					listaTemp[indice-1].cantidadCompra += cantidadCompra;
					listaTemp[indice-1].modificado = false;
					listaTemp[indice-1].fechaAlmacenString = "ND";
				}else{
					listaTemp[indice].estadoDisponible = "normal";
					listaTemp[indice].estadoBackOrder = "normal";
					listaTemp[indice].estadoCambio = "normal";
					listaTemp[indice].estadoCancelar = "normal";
					listaTemp[indice].cantidadCompra += cantidadCompra;
					listaTemp[indice].modificado = false;
					listaTemp[indice].fechaAlmacenString = "ND";
				}
				
				for (var j:int = 0; j < objetosEliminar.length; j++) 
				{
					listaTemp.removeItem(objetosEliminar[j]);
				}
				
				lstOrdenesCompra.dataProvider = ObjectUtil.copy(listaTemp) as ArrayCollection;
				setTimeout(asignarDataProvider,1000);
			}
			
			public var todas:Boolean;
			public function obtenerPartidasListas(medio:String,condiciones:String,nombreConfirma:String,numeroRef:String):ArrayCollection
			{
				var numpartidas:Number;
				var listaPartidas:ArrayCollection = new ArrayCollection();
				var partidasUtilizadas:ArrayCollection = new ArrayCollection();
				listaPartidas = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;
				var completa:Boolean;
				/*for (var i:int = 0; i < listaPartidas.length; i++) 
				{
				if(listaPartidas[i].indice != null){
				(listaPartidas[i] as RegistroConfirmacion).idPartidaCompra = 0;
				}
				}*/
				
				var sql:Query = new Query(listaPartidas,["modificado"]);
				var punteros:Array = sql.getPunteros([true]);
				
				for (var i:int = 0; i < punteros.length; i++) 
				{
					partidasUtilizadas.addItem( sql.universo.getItemAt(punteros[i]) );
					
				}
				for (var j:int = 0; j < partidasUtilizadas.length; j++) 
				{
					partidasUtilizadas[j].responsable = DatosGlobales.getInstance()._usuario.usuario;
					partidasUtilizadas[j].medioPago = medio;
					partidasUtilizadas[j].condicionesPago = condiciones;
					partidasUtilizadas[j].confirma = nombreConfirma;
					partidasUtilizadas[j].referencia = numeroRef;
				}
				
				var punterosMod:Array = sql.getPunteros(["false"],"modificado");
				for (var k:int = 0; k < punterosMod.length; k++) 
				{
					if(listaPartidas[punterosMod[k]].cantidadCompra == 0){
						completa = true;
					}
					else{
						completa = false;
						break;
					}
				}
				if(punterosMod.length == 0)
					completa = true;
				
				/*if( sql.getPunteros(["false"],"modificado").length > 0 )
				todas=false;
				else
				todas=true;*/
				todas=completa;
				
				return partidasUtilizadas;
			}
			
			public function calcularTotalesEstados():void
			{
				var listaTemp:ArrayCollection = new ArrayCollection();
				var disponibles:int = 0;
				var cambio:int = 0;
				var back:int = 0;
				var cancelar:int = 0;
				listaTemp = ObjectUtil.copy(lstOrdenesCompra.dataProvider) as ArrayCollection;
				for (var i:int = 0; i < listaTemp.length; i++) 
				{
					if(listaTemp[i].estadoDisponible == 'editar')
						disponibles += 1;
					if(listaTemp[i].estadoCancelar == 'editar')
						cancelar += 1;
					if(listaTemp[i].estadoCambio == 'editar')
						cambio += 1;
					if(listaTemp[i].estadoBackOrder == 'editar')
						back += 1;
				}
				contadorDisponibles = disponibles;
				contadorCambio = cambio;
				contadorBack = back;
				contadorCancelar = cancelar;
				
			}
			private function obtenerTotalesIniciales(value:ArrayCollection):void
			{
				var sql:Query = new Query(value,["cliente","dummy"]);
				var punteros:Array = sql.getPunteros([null,"false"]);
				clientes = sql.getPunteros(["cliente"],"cliente").length
				piezas = sql.getSumarCampo("totalPiezas",punteros);
				
				
				contadorDisponibles = 0;
				contadorCancelar = 0;
				contadorCambio = 0;
				contadorBack= 0;
			}
			
			private function verificarDisponibles(value:ArrayCollection):void
			{
				var sql:Query = new Query(value,["tipoPendiente"]);
				var punteros:Array = sql.getPunteros(["normal"]);
				var objTemp:MonitorearOcNoArribada;
				/////////////////  TODOS DISPONIBLES
				var todosDisponibles:Boolean;
				for (var i:int = 0; i < punteros.length; i++) 
				{
					objTemp =  (sql.universo.getItemAt(punteros[i]) as MonitorearOcNoArribada);
					if(objTemp.estadoDisponible == "editar")
						todosDisponibles = true;
					else{
						todosDisponibles = false;
						break;
					}
				} 
				
				//checkTipo.selected = todosDisponibles;
				
				/////////////////  TODOS MODIFICADOS O PARCIAL
				var todosModificados:Boolean = false;
				var originalesModificados:Boolean;
				var contactoCompleto:Boolean;
				var j:int;
				for (j= 0; j < punteros.length; j++) 
				{
					objTemp =  (sql.universo.getItemAt(punteros[j]) as MonitorearOcNoArribada);
					if(objTemp.estadoDisponible == "editar"){
						originalesModificados = true;
						break;
					}
					else if(objTemp.estadoCancelar == "editar"){
						originalesModificados = true;
						break;
					}
					else if(objTemp.estadoCambio == "editar"){
						originalesModificados = true;
						break;
					}
					else if(objTemp.estadoBackOrder == "editar"){
						originalesModificados = true;
						break;
					}else{
						originalesModificados = false;
					}
				}
				
				for (j = 0; j < punteros.length; j++) 
				{
					objTemp =  (sql.universo.getItemAt(punteros[j]) as MonitorearOcNoArribada);
					if(objTemp.estadoDisponible == "editar"){
						todosModificados = true;
					}
					else if(objTemp.estadoCancelar == "editar"){
						todosModificados = true;
					}
					else if(objTemp.estadoCambio == "editar"){
						todosModificados = true;
					}
					else if(objTemp.estadoBackOrder == "editar"){
						todosModificados = true;
					}
					else{
						todosModificados = false;
						break;
					}
				}
				
				
				if(todosModificados)
					dispatchEvent(new Event("partidasTodasModificadas"));
				else if(originalesModificados)
					dispatchEvent(new Event("partidasModificadasAlgunas"));
				else
					dispatchEvent(new Event("partidasSinModificadas"));
			}
			
			private function scrollToIndex(index:int,tam:Number = 219, animationDuration:int = 100):void 
			{
			
			   
				var tamlista:Number = 0;
				var listaTemp2:ArrayCollection = new ArrayCollection();
				listaTemp2 = lstOrdenesCompra.dataProvider as ArrayCollection;
				tamlista = listaTemp2.length-1;
				var tam:Number = tamlista - 2;
				var pt:Point = lstOrdenesCompra.layout.getScrollPositionDeltaToElement(index);
				var verticalScroll:int = lstOrdenesCompra.layout.verticalScrollPosition;
				var verticalScrollOld:int = lstOrdenesCompra.layout.verticalScrollPosition;
				var delta:int = -1;
				if (pt != null )
				{
					while (pt)
					{
						lstOrdenesCompra.validateNow();
						if (pt.y > 0) {
							delta = lstOrdenesCompra.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN);
						} else {
							verticalScrollOld = delta;
							delta = lstOrdenesCompra.layout.getVerticalScrollPositionDelta(NavigationUnit.UP);
						}
						lstOrdenesCompra.layout.verticalScrollPosition += delta;
						verticalScroll += delta;
						pt = lstOrdenesCompra.layout.getScrollPositionDeltaToElement(index);
						if ((delta == 0 || verticalScrollOld == delta) && pt != null ){
							break;
						}
					}
					var animation:AnimateProperty = new AnimateProperty(lstOrdenesCompra.dataGroup);
					animation.property = "verticalScrollPosition";
					animation.duration = animationDuration;
					animation.toValue = verticalScroll;
				}
				
				trace("Antes Delta: " + vgScrollListas.layout.verticalScrollPosition);
				
				if (index <= tam-1)
				vgScrollListas.layout.verticalScrollPosition = index * 97;
				
				else 
				{
					
					if(index == tamlista || index == (tamlista-1) )
					{
					vgScrollListas.layout.verticalScrollPosition = index * 97;
					vgScrollListas.layout.verticalScrollPosition = vgScrollListas.layout.verticalScrollPosition + tam + 97;
					}
					else if (index > tam)
					{
					vgScrollListas.layout.verticalScrollPosition = index * 97;
					vgScrollListas.layout.verticalScrollPosition = vgScrollListas.layout.verticalScrollPosition + tam;
					}
					
				}
				
				
				
				
				
				
				trace("Despues Delta: " + vgScrollListas.layout.verticalScrollPosition);
			}
			
			public function verificar():void
			{
				verificarDisponibles(listaTemp)
			}
			
			public function estadoV(event:EventoMonitorearOcNoArribada):void
			{
				var indice:int = event.indiceActual;
				var tipo:String = event.tipoSelect;
				
				var listaTemp2:ArrayCollection = new ArrayCollection();
				listaTemp2 = lstOrdenesCompra.dataProvider as ArrayCollection;
				
				if (tipo != "cerrar" )
				{
					for (var i:int = 0; i < listaTemp2.length; i++) 
					{
						
						if(i == indice)
						{
							(listaTemp2[i] as RegistroConfirmacion).estadoVistaSecundaria = tipo;
							(listaTemp2[i] as RegistroConfirmacion).segundaVista = true;
						}
						else{
							(listaTemp2[i] as RegistroConfirmacion).estadoVistaSecundaria = " ";
							(listaTemp2[i] as RegistroConfirmacion).segundaVista = false;
							
						}	
					}
				}
				switch(tipo)
				{
					case "chkDisponible":
					{
						lstOrdenesCompra.height = lstOrdenesCompra.dataProvider.length * 97; 
						break;
					}
					case "chkCambio":
					{
						lstOrdenesCompra.height = (lstOrdenesCompra.dataProvider.length * 97) + 157; 
						break;
					}
					case "chkBack":
					{
						lstOrdenesCompra.height = (lstOrdenesCompra.dataProvider.length * 97) + 219; 
						break;
					}
					case "chkCancelar":
					{
						lstOrdenesCompra.height = (lstOrdenesCompra.dataProvider.length * 97) + 210; 
						break;
					}
						
					default:
					{
						lstOrdenesCompra.height = lstOrdenesCompra.dataProvider.length * 97; 
						break;
					}
				}
				scrollToIndex(lstOrdenesCompra.selectedIndex, event.tamcomplemento);
				
				if (lstOrdenesCompra.selectedIndex == (listaTemp2.length)-1 || lstOrdenesCompra.selectedIndex == (listaTemp2.length)-2 )
				{
					setTimeout(scrollToIndex,100,lstOrdenesCompra.selectedIndex,event.tamcomplemento);
				}
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="#008894" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:VGroup width="100%" height="100%" padding="1" gap="0">
		<s:HGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center"  gap="0">
			<s:HGroup width="3%" height="100%" verticalAlign="middle" horizontalAlign="center">
			</s:HGroup>  
			
			<s:HGroup width="3%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontAgente}" color="#424242" text="#" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			
			<s:HGroup width="25%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontAgente}" color="#424242" text="DESCRIPCIÓN" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:Spacer width="10"/>
			<s:HGroup width="13%" height="100%" verticalAlign="middle" horizontalAlign="left">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontAgente}" color="#424242" text="CLIENTE" textAlign="left" maxDisplayedLines="1"/>			
			</s:HGroup> 
			<s:VGroup width="14%" height="100%" verticalAlign="middle" horizontalAlign="center" gap="0">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontAgente}" color="#424242" text="FEA" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontAgente}" color="#424242" text="1ER ALMACÉN" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
			</s:VGroup>  
			
			<s:HGroup width="12%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontAgente}" color="#424242" text="HISTORIAL" textAlign="center" maxDisplayedLines="2"/>			
			</s:HGroup>  
			<s:VGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:HGroup width="100%" height="100%" />
				<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontP}" color="#9A020E" text="CANCELAR" textAlign="center" maxDisplayedLines="2" height="100%" verticalAlign="middle"/>			
				</s:VGroup>  
			</s:VGroup>  
			<s:VGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:HGroup width="100%" height="100%" />
				<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontP}" color="#49056A" text="BACK ORDER" textAlign="center" maxDisplayedLines="2" height="100%" verticalAlign="middle"/>			
				</s:VGroup>  
			</s:VGroup>  
			<s:VGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<componentes:checkBoxColoreCR id="checkTipoCambio" width="15" height="15" verticalCenter="0" horizontalCenter="0" click="todos(event,'cambio')" tipoCheck="cambio"/>
				</s:HGroup>
				
				<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontP}" color="#DC5000" text="CON" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
					<s:Label styleName="TituloNovecento_18" fontWeight="bold" fontSize="{sizeFontP}" color="#DC5000" text="IMPACTO FEE" textAlign="center" maxDisplayedLines="1" height="100%" verticalAlign="middle"/>			
				</s:VGroup>  
			</s:VGroup>  
			
		</s:HGroup>  
		<s:Rect width="100%" height="1">
			<s:fill>
				<s:SolidColor color="#424242" />
			</s:fill>
		</s:Rect>
		<s:Scroller width="100%" height="100%" id="ScrollListas">
			<s:VGroup width="100%" height="100%" id="vgScrollListas" >
				<s:List width="100%"  borderVisible="false" horizontalScrollPolicy="off" 
						selectedIndex="0" id="lstOrdenesCompra" contentBackgroundAlpha="0" 
						itemRenderer="mx.com.proquifa.vista.vistas.monitorearOcNoArribada.itemRender.IR_partidasMonitorear" 
						/>
				
				<s:Group minHeight="1">
					<s:List width="100%"  borderVisible="false" horizontalScrollPolicy="off" 
							selectedIndex="0" id="lstOrdenesCompra2" contentBackgroundAlpha="0"
							itemRenderer="mx.com.proquifa.vista.vistas.monitorearOcNoArribada.itemRender.IR_partidasMonitorear" 
							/>
				</s:Group>  
				
			</s:VGroup> 
		</s:Scroller>
		
		<s:Rect width="100%" height="1">
			<s:fill>
				<s:SolidColor color="#424242" />
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" height="10%" verticalAlign="middle" horizontalAlign="center" gap="0" maxHeight="48">
			<s:HGroup width="6%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label  styleName="tab_texto_14_Helvetica" fontSize="{sizeFontTiny}" color="#424242" text="#{lstOrdenesCompra.dataProvider.length + lstOrdenesCompra2.dataProvider.length}" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="5%" height="100%" verticalAlign="middle" horizontalAlign="left">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFontTiny}" color="#424242" text="{piezas} {piezas==1?'pza':'pzas'}" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="14%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFontTiny}" color="#424242" text="Monto total:${montoString}" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="31%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFontTiny}" color="#424242" text="{clientes} {clientes==1?'Cliente':'Clientes'}" textAlign="center" maxDisplayedLines="1"/>			
			</s:HGroup>  
			<s:HGroup width="14%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFontAgente}" color="#424242" text="" textAlign="center" maxDisplayedLines="2"/>			
			</s:HGroup>  
			<s:HGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFontTiny}" color="#840615" textAlign="center" maxDisplayedLines="2" text="{contadorCancelar}"/>			
			</s:HGroup>  
			<s:HGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFontTiny}" color="#400d68" textAlign="center" maxDisplayedLines="2" text="{contadorBack}"/>			
			</s:HGroup>  
			<s:HGroup width="10%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFontTiny}" color="#c15105" textAlign="center" maxDisplayedLines="2" text="{contadorCambio}"/>			
			</s:HGroup>  
			
		</s:HGroup>  
		
	</s:VGroup>  
</s:Group>
