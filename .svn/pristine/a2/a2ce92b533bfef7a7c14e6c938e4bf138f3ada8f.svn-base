<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:GestionarBackOrder="mx.com.proquifa.vista.mapas.GestionarBackOrder.*" 
		 xmlns:registrarConf="mx.com.proquifa.vista.mapas.registrarConfirmacion.*" 
		 xmlns:monitorear="mx.com.proquifa.vista.mapas.MonitorearOcNoArribada.*" 
		 xmlns:RegistrarArribo="mx.com.proquifa.vista.mapas.RegistrarArribo.*"
		 xmlns:registrarDesp="mx.com.proquifa.vista.mapas.registrarDespacho.*"
		 xmlns:gestorCompras="mx.com.proquifa.vista.mapas.gestorCompras.*" 
		 xmlns:arribo="mx.com.proquifa.vista.mapas.gestorCompras.arribo.*" 
		 xmlns:cargarF="mx.com.proquifa.vista.mapas.cargarFaltante.*" 
		 xmlns:compra="mx.com.proquifa.vista.mapas.tramitarCompra.*"
		 xmlns:plantilla="mx.com.proquifa.vista.vistas.plantilla.*"
		 xmlns:mapas="mx.com.proquifa.vista.mapas.*" 
		 width="100%" height="100%" 
		 creationComplete="init(event)" xmlns:GestionarBackOrderXCancelar="mx.com.proquifa.vista.mapas.GestionarBackOrderXCancelar.*" 
		 >
	
	<fx:Declarations>
		<gestorCompras:MapaGestorCompras />
		<arribo:MapaArriboGestorCompras />
		<RegistrarArribo:MapaRegistrarArribo />
		<compra:MapaTramitarCompraMateriales />
		<compra:MapaTramitarCompraPublicaciones />
		
		<mapas:MapaComprasCompradorMaster />
		<cargarF:MapaCargarFaltante />
		<registrarDesp:MapaRegistrarDespacho />
		<registrarConf:MapaRegistrarConfirmacion />
		<monitorear:MapaMonitorearOcNoArribada />
		<!--<GestionarBackOrder:MapaGestionarBackOrder/>
		<GestionarBackOrderXCancelar:MapaGestionarBackOrderXCancelar/>-->
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.ListaArribo;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.OrdenDespacho;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.vista.eventos.EventoComprasCompradorMaster;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.com.proquifa.vista.eventos.MonitorearOCNoArribada.EventoMonitorearOcNoArribada;
			import mx.com.proquifa.vista.eventos.RegistarArribo.EventoRegistrarArribo;
			import mx.com.proquifa.vista.eventos.cargarFaltante.EventoCargarFaltante;
			import mx.com.proquifa.vista.eventos.gestionarBackOrder.EventoGestionarBackOrder;
			import mx.com.proquifa.vista.eventos.registrarConfirmacion.EventoRegistrarConfirmacion;
			import mx.com.proquifa.vista.eventos.registrarDespacho.EventoRegistrarDespacho;
			import mx.com.proquifa.vista.eventos.tramitarCompra.EventoTramitarComprarMateriales;
			import mx.com.proquifa.vista.eventos.tramitarCompra.EventoTramitarComprarPublicaciones;
			import mx.com.proquifa.vista.vistas.cargarFaltante.VistaCargarFaltanteOD;
			import mx.com.proquifa.vista.vistas.gestionarBackOrder.VistaGestionarBackOrder;
			import mx.com.proquifa.vista.vistas.gestorCompras.componentes.ordenDespachoPublicacion.VistaOrdenDespacho_Public;
			import mx.com.proquifa.vista.vistas.gestorCompras.componentes.registrarDespacho.VistaRegistrarDespacho;
			import mx.com.proquifa.vista.vistas.monitorearOcNoArribada.VistaMonitorearOcNoArribada;
			import mx.com.proquifa.vista.vistas.registrarArribo.Vista_RegistrarArribo;
			import mx.com.proquifa.vista.vistas.registrarConfirmacion.VistaRegistrarConfirmacion;
			import mx.com.proquifa.vista.vistas.tramitarCompra.VistaTramitar_PrincipalMateriales;
			import mx.com.proquifa.vista.vistas.tramitarCompra.VistaTramitar_PrincipalPublicaciones;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			
			[Bindable] 
			private var listaPendiente:ArrayCollection = new ArrayCollection([
				{pendiente:'Materiales',conteo:null, subMenu:true, tipo:'MaterOrdenCompra'},
				{pendiente:'Publicaciones',conteo:null, subMenu:true, tipo:'PublOrdenCompra'},
				{pendiente:'Cargar Factura',conteo:null, subMenu:false, tipo:'cargaFactura'},
				{pendiente:'Registrar Arribo',conteo:null, subMenu:false, tipo:'registrarArribo'},
				{pendiente:'Registrar ConfirmaciÃ³n',conteo:null, subMenu:false, tipo:'registrarConfirmacion'},
				{pendiente:'Monitorear OC No Arribada',conteo:null, subMenu:false, tipo:'monitorearOcNoArribada'},
				{pendiente:'Declarar Arribo Aduana',conteo:null, subMenu:false, tipo:''},
				{pendiente:'Material',conteo:null, subMenu:true, tipo:'declararArriboAduanaMaterial'},
				{pendiente:'Publicaciones',conteo:null, subMenu:true, tipo:'declararArriboAduanaPublicaciones'}
			]);
				/*{pendiente:'Gestionar Back Order',conteo:null, subMenu:false, tipo:''},
				{pendiente:'Por Cancelar',conteo:null, subMenu:true, tipo:'gestionarBackOrderXCancelar'},
				{pendiente:'Por Gestionar',conteo:null, subMenu:true, tipo:'gestionarBackOrder'},*/
			
			[Bindable] private var listaPendienteImportaciones:ArrayCollection = new ArrayCollection([
				{pendiente:'Planificar Despacho',conteo:null, subMenu:false, tipo:'MaterDespacho'},
				{pendiente:'Cargar Faltante',conteo:null, subMenu:false, tipo:'cargarFaltante'},
				{pendiente:'Registrar Despacho',conteo:null, subMenu:false, tipo:'registrarDespacho'}
				
			]);
			
			private var cargarFaltanteOD:VistaCargarFaltanteOD;
			private var registrarArribo:Vista_RegistrarArribo;
			private var cargarFactura:CargarFactura;
			private var listaArribo:VistaListaArribo;
			private var listaArriboPublicaciones:VistaListaArriboPub;
			private var ordenDespacho:VistaOrdenDespacho;
		/*	private var ordenDespachoPublic:VistaOrdenDespacho_Public;*/
			private var generarAcuse:VistaGenerarAcuse;
			private var tramitarCompra:VistaTramitar_PrincipalMateriales;
			private var tramitarCompraPub:VistaTramitar_PrincipalPublicaciones;
			private var registrarCompras:VistaRegistrarDespacho;
			private var registrarConfirmacion:VistaRegistrarConfirmacion;
			private var MonitorearOcNoArribada:VistaMonitorearOcNoArribada;
			private var gestionarBackOrder:VistaGestionarBackOrder;
			/*private var gestionarBackOrderXCancelar:vistaGestionarBackOrderXCancelar;*/
			private var declararArriboAduanalMaterial:VistaListaArribo;
			private var declararArriboAduanalPublicaciones:VistaListaArriboPub;
			
			private var currentPlantilla:String = "plantillaMaster";
			private var indicadoresListos:Boolean;
			
			/*
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			+  reload - Recarga la informacion solo para la pantalla incial.... 
			+  update-Recarga la informacion pantalla incial y se propaga la informacion seleccionando el
			+  proveedor que guardo la orden de compra si es que le queda alguna partida
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			*/
			
			public static var accionCargarFactura:String = "reload"; 
			private var selectIndex:int=0;
			
			protected function plantillagestorcompras1_pendienteSeleccionadoHandler(event:EventoGestorCompras):void
			{
				//obtenerPendientes();
				
				switch(event.pendiente)
				{
					case "cargaFactura":
					{
						if (!cargarFactura)
							cargarFactura = new CargarFactura();
						this[currentPlantilla].agregarContenido(cargarFactura);
						accionCargarFactura = "reload";
						var evento:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_COMPRAS_POR_PAGAR);
						evento.usuario = DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(evento);
						break;
					}
						
						
					case "MaterDespacho":
					{
						if (!ordenDespacho)
							ordenDespacho = new VistaOrdenDespacho();
						this[currentPlantilla].agregarContenido(ordenDespacho);
						
						var evtDes:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DE_DESPACHO);
						evtDes.idOC = 0;
						dispatchEvent(evtDes);
						
						var evt:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDENES_DESPACHO_GUARDADAS);
						evt.ordenDespacho = new OrdenDespacho;
						evt.ordenDespacho.usuario = DatosGlobales.getInstance()._usuario.idEmpleado;
					/*	evt.ordenDespacho.tipoVista = "materiales";*/
						dispatchEvent(evt);
						break;
					}
						
			/*		case "PublDespacho":
					{
						if (!ordenDespachoPublic)
							ordenDespachoPublic = new VistaOrdenDespacho_Public();
						this[currentPlantilla].agregarContenido(ordenDespachoPublic);
						
						var evtDesPub:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDEN_DE_DESPACHO_PUBLICACIONES);
						evtDesPub.idOC = 0;
						dispatchEvent(evtDesPub);
						
						var event:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.OBTENER_ORDENES_DESPACHO_GUARDADAS_PUBLICACIONES);
						event.ordenDespacho = new OrdenDespacho;
						event.ordenDespacho.usuario = DatosGlobales.getInstance()._usuario.idEmpleado;
						event.ordenDespacho.tipoVista = "publicaciones";
						dispatchEvent(event);
						break;
					}*/
						
					case "cargarFaltante":
					{
						if (!cargarFaltanteOD)
							cargarFaltanteOD = new VistaCargarFaltanteOD();
						this[currentPlantilla].agregarContenido(cargarFaltanteOD);
						
						var err:EventoCargarFaltante = new EventoCargarFaltante(EventoCargarFaltante.OBTENER_ORDEN_DESPACHO_FALTANTES);
						err.usuario = DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(err);
						break;
					}
						
					case "registrarArribo":
					{
						if (!registrarArribo)
							registrarArribo = new Vista_RegistrarArribo();
						this[currentPlantilla].agregarContenido(registrarArribo);
						
						var evtr:EventoRegistrarArribo = new EventoRegistrarArribo(EventoRegistrarArribo.OBTENER_LISTA_ORDENES_ARRIBO);
						evtr.usuario = DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(evtr);
						break;
					}
						
					case "MaterOrdenCompra":
					{
						if (!tramitarCompra)
							tramitarCompra = new VistaTramitar_PrincipalMateriales();
						this[currentPlantilla].agregarContenido(tramitarCompra);
						
						var eve:EventoTramitarComprarMateriales = new EventoTramitarComprarMateriales(EventoTramitarComprarMateriales.OBTENER_PEDIDOS_PENDIENTES_TRAMITAR_COMPRA_MATERIALES);
						eve.internacional = true;
						eve.publicaciones = false;
						eve.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado;
						dispatchEvent(eve);
						break;
					}
				    case "PublOrdenCompra":
					{
						if (!tramitarCompraPub)
							tramitarCompraPub = new VistaTramitar_PrincipalPublicaciones();
						this[currentPlantilla].agregarContenido(tramitarCompraPub);
						
						var evePub:EventoTramitarComprarPublicaciones = new EventoTramitarComprarPublicaciones(EventoTramitarComprarPublicaciones.OBTENER_PEDIDOS_PENDIENTES_TRAMITAR_COMPRA_PUBLICACIONES);
						evePub.internacional = true;
						evePub.publicaciones = true;
						evePub.idEmpleado = DatosGlobales.getInstance()._usuario.idEmpleado;
						dispatchEvent(evePub);
						break;
					}
					case "registrarDespacho":
					{
						if (!registrarCompras)
							registrarCompras = new VistaRegistrarDespacho();
						this[currentPlantilla].agregarContenido(registrarCompras);
						
						var eveRegDesp:EventoRegistrarDespacho = new EventoRegistrarDespacho(EventoRegistrarDespacho.OBTENER_ORDEN_DESPACHO_REGISTRADAS);
						eveRegDesp.usuario = DatosGlobales.getInstance()._usuario.usuario;
						dispatchEvent(eveRegDesp);
						break;
					}
					case "registrarConfirmacion":
					{
						if (!registrarConfirmacion)
							registrarConfirmacion = new VistaRegistrarConfirmacion();
						this[currentPlantilla].agregarContenido(registrarConfirmacion);
						
						var eveRegConf:EventoRegistrarConfirmacion = new EventoRegistrarConfirmacion(EventoRegistrarConfirmacion.OBTENER_INFO_COMPRA_AGRUPADA);
						eveRegConf.empleado = DatosGlobales.getInstance()._usuario;
						dispatchEvent(eveRegConf);
						break;
					}
						
						
					case "monitorearOcNoArribada":
					{
						if (!MonitorearOcNoArribada)
							MonitorearOcNoArribada = new VistaMonitorearOcNoArribada();
						this[currentPlantilla].agregarContenido(MonitorearOcNoArribada);
						
						var eveMoOc:EventoMonitorearOcNoArribada = new EventoMonitorearOcNoArribada(EventoMonitorearOcNoArribada.OBTENER_INFO_COMPRA_AGRUPADA);
						eveMoOc.empleado = DatosGlobales.getInstance()._usuario;
						dispatchEvent(eveMoOc);
						
						break;
					}
						
						
					/*case "gestionarBackOrderXCancelar":
					{
						if (!gestionarBackOrderXCancelar)
							gestionarBackOrderXCancelar = new vistaGestionarBackOrderXCancelar();
						this[currentPlantilla].agregarContenido(gestionarBackOrderXCancelar);
						
						var eveGBOXC:EventoGestionarBackXCancelar = new EventoGestionarBackXCancelar(EventoGestionarBackXCancelar.OBTENER_PARTIDAS_AGRUPADAS);
						eveGBOXC.empleado = DatosGlobales.getInstance()._usuario;
						dispatchEvent(eveGBOXC);
						
		         	break;
					}
						
					case "gestionarBackOrder":
					{
						if (!gestionarBackOrder)
							gestionarBackOrder = new VistaGestionarBackOrder();
						this[currentPlantilla].agregarContenido(gestionarBackOrder);
						
						var eveGBO:EventoGestionarBackOrder = new EventoGestionarBackOrder(EventoGestionarBackOrder.OBTENER_PARTIDAS_AGRUPADAS);
						eveGBO.empleado = DatosGlobales.getInstance()._usuario;
						dispatchEvent(eveGBO);
						
						break;
					}*/	
						
						
					case "declararArriboAduanaMaterial":
					{
						if (!declararArriboAduanalMaterial){
							declararArriboAduanalMaterial = new VistaListaArribo();
							declararArriboAduanalMaterial.cmpTitulo.titulo = "DECLARAR ARRIBO ADUANA Â· MATERIALES";
						}
						this[currentPlantilla].agregarContenido(declararArriboAduanalMaterial);
						var eveDAM:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.LISTADO_ARRIBO);
						eveDAM.idEmpleado = DatosGlobales.getInstance()._usuario.clave;
						eveDAM.publicaciones = false;
						dispatchEvent(eveDAM);
						dispatchEvent( new Event("recargarPendientes",true));
						break;
					}
						
					case "declararArriboAduanaPublicaciones":
					{
						if (!declararArriboAduanalPublicaciones){
							declararArriboAduanalPublicaciones = new VistaListaArriboPub();
							declararArriboAduanalPublicaciones.cmpTitulo.titulo = "DECLARAR ARRIBO ADUANA Â· PUBLICACIONES";
						}
						this[currentPlantilla].agregarContenido(declararArriboAduanalPublicaciones);
						var eveDAP:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.LISTADO_ARRIBO);
						eveDAP.idEmpleado = DatosGlobales.getInstance()._usuario.clave;
						eveDAP.publicaciones = false;
						dispatchEvent(eveDAP);
						dispatchEvent( new Event("recargarPendientes",true));
						break;
					}
						
					default:
					{
						break;
					}
					
				}
				dispatchEvent(new Event("recargarPendientes"));
			}
			
			protected function init(evento:FlexEvent):void
			{
				trace(parentApplication.APLICACION)
				//IDENTIFICA QUE APLICACION ESTA EJECUTANDOSE
				plantilla.visible = plantilla.includeInLayout = false;
				plantillaMaster.visible = plantillaMaster.includeInLayout = false;
				if ( parentApplication.APLICACION == "comprador" )
				{
					currentPlantilla = "plantilla";
					plantilla.visible = plantilla.includeInLayout = true;
				}
				else if ( parentApplication.APLICACION == "compradorMaster" )
				{
					currentPlantilla = "plantillaMaster";
					plantillaMaster.visible = plantillaMaster.includeInLayout = true;
				}
				
				
				obtenerPendientes();
				this[currentPlantilla].listaPendientes = listaPendiente;
				
			}
			
			private function obtenerPendientes():void
			{
				var eventComprador:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.CARGAR_NUMERO_PENDIENTES_MENU);
				eventComprador.usuario = DatosGlobales.getInstance()._usuario.usuario;
				eventComprador.rol = "";
				dispatchEvent(eventComprador);
				
				var event:EventoComprasCompradorMaster = new EventoComprasCompradorMaster(EventoComprasCompradorMaster.CARGAR_NUMERO_PENDIENTES_MENU);
				event.usuario = DatosGlobales.getInstance()._usuario.usuario;
				event.rol = "";
				event.empleado = DatosGlobales.getInstance()._usuario;
				dispatchEvent(event);
				addEventListener(EventoGestorCompras.CARGAR_PENDIENTE_MENU, plantillagestorcompras1_pendienteSeleccionadoHandler);
				addEventListener("recargarPendientes",recargarPendientes,false,0,true);
				
			}
			
			private function recargarPendientes(evt:Event):void
			{
				obtenerPendientes();
			}
			
			public function set recibirIndicadorPendientes(value:ArrayCollection):void
			{
				var x:int = 0;
				var y:int = 0;
				var indice:int;
				if(this[currentPlantilla].lstPendientes.lstPendientes != null){
					indice = this[currentPlantilla].lstPendientes.lstPendientes.selectedIndex;
				}
				
				var listaAux:ArrayCollection = ObjectUtil.copy(listaPendiente) as ArrayCollection;
				for(x = 0; x < listaAux.length;x++){
					for(y = 0; y < value.length;y++){
						if((listaAux[x].tipo == "cargaFactura") && (value[y].pendiente == "cargarFactura")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].tipo == "registrarArribo") && (value[y].pendiente == "registrarArribo")){
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].tipo == "registrarConfirmacion") && (value[y].pendiente == "registrarConfirmacion"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].tipo == "monitorearOcNoArribada") && (value[y].pendiente == "monitorearOcNoArribada"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						
						else if((listaAux[x].tipo == "gestionarBackOrder") && (value[y].pendiente == "gestionarBackOrder"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].tipo == "declararArriboAduanaMaterial") && (value[y].pendiente == "listaArriboMaterial"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
						else if((listaAux[x].tipo == "declararArriboAduanaPublicaciones") && (value[y].pendiente == "listaArriboPublic"))
						{
							listaAux[x].conteo = value[y].conteo;
							break;
						}
					}	
				}
				listaPendiente = listaAux;
				this[currentPlantilla].listaPendientes = listaPendiente;
				if(indice > 0)
					this[currentPlantilla].lstPendientes.lstPendientes.selectedIndex = indice;
				else
					this[currentPlantilla].lstPendientes.lstPendientes.selectedIndex = 0;
				
				if (currentPlantilla != "plantilla" )
				{
					if(this[currentPlantilla].lstPendientes.lstPendientesImportaciones != null){
						indice = this[currentPlantilla].lstPendientes.lstPendientesImportaciones.selectedIndex;
					}
					listaAux = new ArrayCollection();
					listaAux = ObjectUtil.copy(listaPendienteImportaciones) as ArrayCollection;
					for( x = 0; x < listaAux.length;x++)
					{
						for(y = 0; y < value.length;y++)
						{
							if((listaAux[x].tipo == "MaterDespacho") && (value[y].pendiente == "ordenDespachoMaterial"))
							{
								listaAux[x].conteo = value[y].conteo;
								break;
							}
							/*else if((listaAux[x].tipo == "PublDespacho") && (value[y].pendiente == "ordenDespachoPublic"))
							{
								listaAux[x].conteo = value[y].conteo;
								break;
							}*/
							else if((listaAux[x].tipo == "cargarFaltante") && (value[y].pendiente == "cargarFaltante"))
							{
								listaAux[x].conteo = value[y].conteo;
								break;
							}
							else if((listaAux[x].tipo == "registrarDespacho") && (value[y].pendiente == "registrarDespacho"))
							{
								listaAux[x].conteo = value[y].conteo;
								break;
							}
						}	
					}
					listaPendienteImportaciones = listaAux;
					this[currentPlantilla].listaPendientesImportaciones = listaPendienteImportaciones;
					
					if(indice > 0)
						this[currentPlantilla].lstPendientes.lstPendientesImportaciones.selectedIndex = indice;
					else
						this[currentPlantilla].lstPendientes.lstPendientesImportaciones.selectedIndex = 0;
				}
				indicadoresListos = true;
				
				//selectBloque();
			}
			
			public function set recibirIndicadorPendientesRC(value:ArrayCollection):void
			{
				asginarCR();
			}
			private function asginarCR():void
			{
				if(indicadoresListos){
					
				}else{
					setTimeout(asginarCR,100);
				}
				
			}
			
			private function selectBloque():void
			{
				this[currentPlantilla].lstPendientes.lstPendientes.selectedIndex = selectIndex;
			}
		]]>
	</fx:Script>
	
	
	<plantilla:PlantillaGestorCompras id="plantilla" width="100%" height="100%" listaPendientes="{listaPendiente}" pendienteSeleccionadoPlantilla="plantillagestorcompras1_pendienteSeleccionadoHandler(event)" />
	<plantilla:PlantillaCompradorMaster id="plantillaMaster" width="100%" height="100%" listaPendientes="{listaPendiente}" listaPendientesImportaciones="{listaPendienteImportaciones}"  pendienteSeleccionadoPlantilla="plantillagestorcompras1_pendienteSeleccionadoHandler(event)"/>
	
</s:Group>
