package mx.com.proquifa.vista.modelo.monitorearOcNoArribada
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	
	import mx.collections.ArrayCollection;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ConfiguracionPrecio;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.MonitorearOcNoArribada;
	import mx.com.proquifa.proquifanet.rsl.vista.modelo.consultas.comun.ResumenConsulta;
	import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
	import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
	import mx.com.proquifa.vista.eventos.MonitorearOCNoArribada.EventoMonitorearOcNoArribada;
	import mx.utils.ObjectUtil;
	
	public class ModeloMonitorearOcNoArribada extends EventDispatcher
	{
		
		// ++++++++++++++++++++  OBTIENE LISTA DE RESUMEN OC  ++++++++++++++++++++
		public var _sql:Query;
		private var resumenOC:ArrayCollection;
		private var resumenTotalOC:MonitorearOcNoArribada;
		private var resumenGraficaProveedor:ArrayCollection;
		private var resumenGraficaTransito:ArrayCollection;
		private var totalesTiempoLista:ArrayCollection;
		private var resumenGraficaFlete:ArrayCollection;
		private var resumenGraficaEntrega:ArrayCollection;
		private var totalesSemaforoLista:ArrayCollection;
		private var historial:ArrayCollection;
		
		public function setObtenerFaltanteOD(data:ArrayCollection):void
		{   
			if(data == null)
				resumenOC = new ArrayCollection();
			else{
				/*data = iniciarListaPrueba(); */////INICIO DE PRUEBA
				
				resumenOC = data;
				var punterosProvee:Array;
				var punterosTodos:Array;
				_sql = new Query(resumenOC,["nombreProveedor","todos"],true);
				punterosProvee = _sql.getPunteros(["nombreProveedor"],"nombreProveedor");
				resumenTotalOC = new MonitorearOcNoArribada();
				resumenGraficaProveedor = new ArrayCollection();
				totalesTiempoLista = new ArrayCollection();
				totalesSemaforoLista = new ArrayCollection();
				resumenGraficaTransito = new ArrayCollection();
				resumenGraficaFlete = new ArrayCollection();
				resumenGraficaEntrega = new ArrayCollection();
				punterosTodos = _sql.getPunteros([null,"false"]);
				
				
				
				/////////////////////////  TOTALES GRAFICA PROVEEDORES  /////////////////////////
				for each (var provee:String in punterosProvee) 
				{
					var tempReg:ResumenConsulta = new ResumenConsulta();
					var punterosTemp:Array;
					punterosTemp = _sql.getPunteros([provee]);
					tempReg.etiqueta = provee.toUpperCase();
					tempReg.totalProveedores = 1;
					tempReg.ocompras = _sql.getSumarCampo('totalOC',punterosTemp);
					tempReg.noProductos = _sql.getSumarCampo('totalProductos',punterosTemp);
					tempReg.piezasTotal = _sql.getSumarCampo('piezas',punterosTemp);
					tempReg.total = _sql.getSumarCampo('monto',punterosTemp);
					
					resumenGraficaProveedor.addItem(tempReg);
				}
				
				
				/////////////////////////  TOTALES GRAFICA FLETE  /////////////////////////
				var tempTransito:ResumenConsulta;
				
				tempTransito = new ResumenConsulta();
				tempTransito.etiqueta = 'Normal'.toUpperCase();
				tempTransito.tipoFletera = 1;
				tempTransito.totalFleteNormal = _sql.getSumarCampo("fleteNormalCompuesto.piezas",punterosTodos);
				tempTransito.totalFleteExpress = 0;
				tempTransito.total = _sql.getSumarCampo("fleteNormalCompuesto.monto",punterosTodos);
				
				if(tempTransito.totalFleteNormal > 0)
					resumenGraficaFlete.addItem(tempTransito);
				
				tempTransito = new ResumenConsulta();
				tempTransito.etiqueta = 'Express'.toUpperCase();
				tempTransito.tipoFletera = 1;
				tempTransito.totalFleteNormal = 0;
				tempTransito.totalFleteExpress = _sql.getSumarCampo("flete.piezas",punterosTodos);
				tempTransito.total = _sql.getSumarCampo("flete.monto",punterosTodos);
				
				if(tempTransito.totalFleteExpress > 0)
					resumenGraficaFlete.addItem(tempTransito);
				/////////////////////////  TOTALES GRAFICA ENTREGA  /////////////////////////
				
				tempTransito = new ResumenConsulta();
				tempTransito.etiqueta = 'Ãšnica'.toUpperCase();
				tempTransito.tipoEntrega = 1;
				tempTransito.totalEntregaProgramada = 0;
				tempTransito.totalEntregaUnica = _sql.getSumarCampo("entregaUnicaCompuesto.piezas",punterosTodos);
				tempTransito.total = _sql.getSumarCampo("entregaUnicaCompuesto.monto",punterosTodos);
				if(tempTransito.totalEntregaUnica > 0)
					resumenGraficaEntrega.addItem(tempTransito);
				
				tempTransito = new ResumenConsulta();
				tempTransito.etiqueta = 'Programada'.toUpperCase();
				tempTransito.tipoEntrega = 1;
				tempTransito.totalEntregaProgramada = _sql.getSumarCampo("programado.piezas",punterosTodos);
				tempTransito.totalEntregaUnica = 0;
				tempTransito.total = _sql.getSumarCampo("programado.monto",punterosTodos);
				
				if(tempTransito.totalEntregaProgramada > 0)
					resumenGraficaEntrega.addItem(tempTransito);
				
				
				/////////////////////////  TOTALES  /////////////////////////
				resumenTotalOC.totalOC = _sql.getSumarCampo("totalOC",punterosTodos);
				resumenTotalOC.monto = _sql.getSumarCampo("monto",punterosTodos);
				resumenTotalOC.piezas = _sql.getSumarCampo("piezas",punterosTodos);
				resumenTotalOC.totalProductos = _sql.getSumarCampo("totalProductos",punterosTodos);
				resumenTotalOC.dia1 = _sql.getSumarCampo("dia1",punterosTodos);
				resumenTotalOC.dia2 = _sql.getSumarCampo("dia2",punterosTodos);
				resumenTotalOC.dia3 = _sql.getSumarCampo("dia3",punterosTodos);
				resumenTotalOC.dia4 = _sql.getSumarCampo("dia4",punterosTodos);
				resumenTotalOC.totalRegular = _sql.getSumarCampo("regular.piezas",punterosTodos);
				resumenTotalOC.totalProgramado = _sql.getSumarCampo("programado.piezas",punterosTodos);
				resumenTotalOC.totalFlete = _sql.getSumarCampo("flete.piezas",punterosTodos);
				resumenTotalOC.totalEntregaUnica = resumenTotalOC.totalRegular + resumenTotalOC.totalFlete;
				resumenTotalOC.totalFleteNormal = resumenTotalOC.totalRegular + resumenTotalOC.totalProgramado;
				
				/////////////////////////  TOTALES DE TIEMPO Y SEMAFORO  /////////////////////////
				for (var i:int = 0; i < 4; i++) 
				{
					var totalesTiempo:Object = new Object();
					var totalesSemaforo:Object = new Object();
					totalesTiempo.monto = 0;
					totalesTiempo.piezas = 0;
					totalesTiempo.partidas = 0;
					totalesTiempo.tipo = "";
					
					totalesSemaforo.tipo = "";
					totalesSemaforo.piezas = 0;
					if(i==0){
						totalesTiempo.partidas = _sql.getSumarCampo("dia4",punterosTodos);
						totalesTiempo.tipo = "tiempo4";
						
						totalesSemaforo.partidas = _sql.getSumarCampo("fueraTiempo",punterosTodos);
						totalesSemaforo.tipo = "Retrasado";
					}
					else if(i==1){
						totalesTiempo.partidas = _sql.getSumarCampo("dia3",punterosTodos);
						totalesTiempo.tipo = "tiempo3";	
						
						totalesSemaforo.partidas = _sql.getSumarCampo("urgente",punterosTodos);
						totalesSemaforo.tipo = "Urgente";
					}
					else if(i==2){
						totalesTiempo.partidas = _sql.getSumarCampo("dia2",punterosTodos);
						totalesTiempo.tipo = "tiempo2";
						
						totalesSemaforo.partidas = _sql.getSumarCampo("enTiempo",punterosTodos);
						totalesSemaforo.tipo = "En tiempo";
					}
					else if(i==3){
						totalesTiempo.partidas = _sql.getSumarCampo("dia1",punterosTodos);
						totalesTiempo.tipo = "tiempo1";
					}
					totalesTiempoLista.addItem(totalesTiempo);
					if(i != 3)
						totalesSemaforoLista.addItem(totalesSemaforo);
				}
				
				
			}
			
			dispatchEvent(new Event("enviarListaResumenMonitorearOcNoArribada"));
			dispatchEvent(new Event("enviarTotalesListaResumenMonitorearOcNoArribada"));
			dispatchEvent(new Event("enviarTotalesGraficaProveedorResumenMonitorearOcNoArribada"));
			dispatchEvent(new Event("enviarTotalesGraficaTiempoMonitorearOcNoArribada"));
			dispatchEvent(new Event("enviarTotalesGraficaSemaforoMonitorearOcNoArribada"));
			dispatchEvent(new Event("enviarTotalesGraficaTransitoMonitorearOcNoArribada"));
		    dispatchEvent(new Event("enviarTotalesGraficaEntregaMonitorearOcNoArribada"));
		}
		
		[Bindable(event="enviarListaResumenMonitorearOcNoArribada")]
		public function get enviarResumenOC():ArrayCollection
		{
			return resumenOC;
		}
		[Bindable(event="enviarTotalesListaResumenMonitorearOcNoArribada")]
		public function get enviarTotalResumenOC():MonitorearOcNoArribada
		{
			return resumenTotalOC;
		}
		[Bindable(event="enviarTotalesGraficaProveedorResumenMonitorearOcNoArribada")]
		public function get enviarInfoProveedores():ArrayCollection
		{
			return resumenGraficaProveedor;
		}
		[Bindable(event="enviarTotalesGraficaFleteMonitorearOC")]
		public function get enviarInfoFlete():ArrayCollection
		{
			return ObjectUtil.copy(resumenGraficaProveedor) as ArrayCollection;
		}
		[Bindable(event="enviarTotalesGraficaTiempoMonitorearOcNoArribada")]
		public function get enviarInfoTiempo():ArrayCollection
		{
			return totalesTiempoLista;
		}
		[Bindable(event="enviarTotalesGraficaSemaforoMonitorearOcNoArribada")]
		public function get enviarInfoSemaforo():ArrayCollection
		{
			return totalesSemaforoLista;
		}
		[Bindable(event="enviarTotalesGraficaTransitoMonitorearOcNoArribada")]
		public function get enviarInfoTransito():ArrayCollection
		{
			return resumenGraficaFlete;
		}
		[Bindable(event="enviarTotalesGraficaEntregaMonitorearOcNoArribada")]
		public function get enviarInfoEntrega():ArrayCollection
		{
			return resumenGraficaEntrega;
		}
		private var partidas:ArrayCollection;
		private var familias:ArrayCollection;
		private var universoPartidas:ArrayCollection;
		private var partidasPorFamilia:ArrayCollection;
		public function setObtenerPartidasRC(value:ArrayCollection):void
		{
			if(value == null){
				partidas = new ArrayCollection();
				universoPartidas = new ArrayCollection();
			}
			else{
				/*value = iniciarPrueba();*/ ////INICIO DE PRUEBA
				
				/////////////////////////  EXCLUIR TIPO DE PARTIDAS CANCELADA Y BACK  /////////////////////////
				/*sqlPartida = new Query(value,["familia","tipoPartida"],true);
				var punterosActivos:Array;
				punterosActivos = sqlPartida.getPunteros([null,"null"]);*/
				var arrayActivos:ArrayCollection = new ArrayCollection();
				for (var i2:int = 0; i2 < value.length; i2++) 
				{
					if(value[i2].tipoPartida ==  null)
						arrayActivos.addItem(value[i2]);
					else if(value[i2].tipoPartida.toLowerCase() != "cancelada" && value[i2].tipoPartida.toLowerCase() != "backorder")
						arrayActivos.addItem(value[i2]);
				}
				value = ObjectUtil.copy(arrayActivos) as ArrayCollection;
				/////////////////////////  ASIGNAR PIEZAS TOTALES POR TIPO FLETE  /////////////////////////
				for (var k:int = 0; k < value.length; k++) 
				{
					if((value[k] as MonitorearOcNoArribada).tipoFlete.toLowerCase() == "regular"){
						value[k].piezasRegular += value[k].totalPiezas;
					}
					else if((value[k] as MonitorearOcNoArribada).tipoFlete.toLowerCase() == "programado"){
						value[k].piezasProgramado += value[k].totalPiezas;
					}
					else if((value[k] as MonitorearOcNoArribada).tipoFlete.toLowerCase() == "flete"){
						value[k].piezasExpress += value[k].totalPiezas;
					}
					value[k].tipoPendiente = "normal";
				}
				/*for (var i2:int = 0; i2 < value.length; i2++) 
				{
				value[i2].tipoPendiente = "normal";
				}*/
				
				
				universoPartidas = ObjectUtil.copy(value) as ArrayCollection;
				var sqlPartida:Query;
				var sqlTipo:Query;
				var punterosFamilia:Array;
				var punteros:Array;
				familias = new ArrayCollection();
				partidas = new ArrayCollection();
				sqlPartida = new Query(value,["familia"],true);
				
				punterosFamilia = sqlPartida.getPunteros(["familia"],"familia");
				//////////////////////////  SACA LAS FAMILIAS EN TOTAL DE PARTIDAS
				var familiasTemp:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < punterosFamilia.length; i++) 
				{
					var cp:ConfiguracionPrecio = new ConfiguracionPrecio();
					var arreglo:Array;
					arreglo = (punterosFamilia[i] as String).split('-');
					cp.tipo = arreglo[0] != 'null' ? arreglo[0]:'';
					cp.subtipo = arreglo[1] != 'null' ? arreglo[1]:'';
					cp.control = arreglo[2] != 'null' ? arreglo[2]:'';
					familiasTemp.addItem(cp);
				}
				familias = familySort(ObjectUtil.copy(familiasTemp) as ArrayCollection);
				
				///////////////////////// SE OBTIENE LA PRIMERA AGRUPACION POR LA PRIMERA FAMILIA
				var partidasFamilia:ArrayCollection = new ArrayCollection();
				if(punterosFamilia.length > 0)
					punteros = sqlPartida.getPunteros([punterosFamilia[0]]);
				else
					punteros = new Array();
				
				for (var j:int = 0; j < punteros.length; j++) 
				{
					var partidaTemp:MonitorearOcNoArribada;
					partidaTemp = ObjectUtil.copy(sqlPartida.universo.getItemAt(punteros[j])) as MonitorearOcNoArribada;
					partidasFamilia.addItem(partidaTemp);
				}
				partidasPorFamilia = ObjectUtil.copy(partidasFamilia) as ArrayCollection;
				
				///////////////////////// SE FILTRA POR TIPO (NO REGISTRADAS O PARCIALES)
				sqlTipo = new Query(partidasFamilia,["esRegistrada"],true);
				punteros = sqlTipo.getPunteros([false]);
				for (var y:int = 0; y < punteros.length; y++) 
				{
					var partidaTemp1:MonitorearOcNoArribada;
					partidaTemp1 = ObjectUtil.copy(sqlTipo.universo.getItemAt(punteros[y])) as MonitorearOcNoArribada;
					partidas.addItem(partidaTemp1);
				}
				
			}
			dispatchEvent(new Event("enviarPartidasMonitorearOcNoArriabada"));
			dispatchEvent(new Event("enviarFamiliasMonitorearOcNoArribada"));
			dispatchEvent(new Event("enviarPartidasPorFamiliasMonitorearOcNoArribada"));
			dispatchEvent(new Event("enviarUniversoPartidasMonitorearOcNoArribada"));
		}
		
		[Bindable(event="enviarPartidasMonitorearOcNoArriabada")]
		public function get enviarPartidasRC():ArrayCollection
		{
			return partidas;
		}
		[Bindable(event="enviarFamiliasMonitorearOcNoArribada")]
		public function get enviarFamiliasPorPartida():ArrayCollection
		{
			return familias;
		}
		[Bindable(event="enviarPartidasPorFamiliasMonitorearOcNoArribada")]
		public function get enviarPartidasPorFamilia():ArrayCollection
		{
			return partidasPorFamilia;
		}
		[Bindable(event="enviarUniversoPartidasMonitorearOcNoArribada")]
		public function get enviarUniversoPartidas():ArrayCollection
		{
			return universoPartidas;
		}
		
		private var respuestaRegistrar:int;
		public function setObtenerRespuestaRegistrar(value:int):void
		{
			// 1 bien
			//-1 no bien
			//-2 se bloquea hay una confirmacion
			/*if(value == 1)
			respuestaRegistrar = true	
			else if(value == -1)
			respuestaRegistrar = false
			else
			respuestaRegistrar = false*/
			respuestaRegistrar = value;
			dispatchEvent(new Event("enviaRespuestaMonitorearOcNoArribada"));
		}
		
		[Bindable(event="enviaRespuestaMonitorearOcNoArribada")]
		public function get enviarRespuestaRegistrar():int
		{
			return respuestaRegistrar;
		}
		
		private function familySort(familias:ArrayCollection):ArrayCollection
		{
			var tempSort:ArrayCollection = new ArrayCollection();
			var filtrado:Query = new Query(familias,["industria","tipo","subtipo","control"]);
			var arrayIndustrial:ArrayCollection = new ArrayCollection(['Farma','Alimentos','Aguas','ClÃ­nico','Gobierno','null']);
			var arrayTipoFarma:ArrayCollection = new ArrayCollection(['Estandares','Reactivos','Publicaciones','Labware','Medicamentos','AsesorÃ­as','Capacitaciones']);
			var arrayTipoAlimentos:ArrayCollection = new ArrayCollection(['Estandares','Reactivos','Labware','DiagnÃ³stico','Publicaciones','Medicamentos','AsesorÃ­as','Capacitaciones']);
			var arrayTipoAgua:ArrayCollection = new ArrayCollection(['Estandares','Reactivos','Labware','Pruebas de aptitud','Publicaciones','Medicamentos','AsesorÃ­as','Capacitaciones']);
			var arraySubtipo:ArrayCollection = new ArrayCollection(['QuÃ­mico','BiolÃ³gico']);
			var arrayControl:ArrayCollection = new ArrayCollection(['Normal','Nacionales','Mundiales','Origen']);
			var punteros:Array = new Array;
			var arrayTipo:ArrayCollection = new ArrayCollection;
			
			
			for (var i:int = 0; i < arrayIndustrial.length; i++ )
			{
				if (arrayIndustrial[i] == 'Farma' || 
					arrayIndustrial[i] == 'ClÃ­nico' || arrayIndustrial[i] == 'Gobierno' )
				{
					arrayTipo = arrayTipoFarma;
				}
				else if(arrayIndustrial[i] == 'Alimentos')
				{
					arrayTipo = arrayTipoAlimentos;
				}
				else
				{
					arrayTipo = arrayTipoAgua;
				}
				
				for (var j:int = 0; j < arrayTipo.length; j++)
				{
					if (arrayTipo[j] == 'Estandares' || arrayTipo[j] == 'Reactivos')
					{
						for (var k:int = 0; k < arraySubtipo.length; k++)
						{
							for (var l:int = 0; l < arrayControl.length; l++)
							{
								punteros = filtrado.getPunteros([arrayIndustrial[i].toLowerCase(),arrayTipo[j].toLowerCase(),arraySubtipo[k].toLowerCase(),arrayControl[l].toLowerCase()],'industria');
								tempSort.addAll(filtrado.armarLista(punteros));
							}
						}
					}
					else
					{
						punteros = filtrado.getPunteros([arrayIndustrial[i].toLowerCase(),arrayTipo[j].toLowerCase(),null,null],'industria');
						tempSort.addAll(filtrado.armarLista(punteros));
					}
				}
			}
			var familiasOrdenadas:ArrayCollection;
			familiasOrdenadas = ObjectUtil.copy(tempSort) as ArrayCollection;
			return familiasOrdenadas;
		}
		
		
		public function setObtenerHistorial(phistorial:ArrayCollection, event:EventoMonitorearOcNoArribada):void
		{
			historial = phistorial;
			historial.addItemAt(event, 0 );
			dispatchEvent(new Event("enviarHistorialModeloMonitorearCompraOcNoArribada"));
		}
		
		[Bindable(event="enviarHistorialModeloMonitorearCompraOcNoArribada")]
		public function get obtenerHistorial():ArrayCollection
		{
			return historial;
			
		}
		// ++++++++++++++++++++++++  ERRORES    +++++++++++++++++++++++++++
		public function errorRegistarConfirmacion(objeto:Object):void
		{
			trace("ERROR REGISTRAR CONFIRMACION")
			trace(objeto.toString())
			alertaSingleton.show( objeto.toString() );
		}
		
		public function ModeloMonitorearOcNoArribada()
		{
			
		}
	}
}


