<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("spark.components.Button")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Image;
			
			import spark.layouts.HorizontalAlign;
			import spark.layouts.VerticalAlign;
			
			private var _color:uint;
			private var _icono:Image = new Image();
			private var _horizontal:String;
			private var _texto:Boolean;
			private var _esquinaRedonda:Boolean;
			private var _borderColor:uint;
			private var _colorTexto:uint;
			private var _vertical:String;
			private var _conPaddingBottom:String;
			private var _deshabilitarBoton:Boolean = false;
			
			[Bindable]
			public function get deshabilitarBoton():Boolean
			{
				return _deshabilitarBoton;
			}
			
			public function set deshabilitarBoton(value:Boolean):void
			{
				_deshabilitarBoton = value;
			}
			
			[Bindable]
			public function get conPaddingBottom():String
			{
				return _conPaddingBottom;
			}

			public function set conPaddingBottom(value:String):void
			{
				_conPaddingBottom = value;
			}

			public function get vertical():String
			{
				return _vertical;
			}
			
			public function set vertical(value:String):void
			{
				_vertical = value;
				mostarIconoTopBottom();
			}
			
			[Bindable]
			public function get color():uint
			{
				return _color;
			}
			
			public function set color(value:uint):void
			{
				_color = value;
			}
			
			public function get icono():Image
			{
				return _icono;
			}
			
			public function set icono(value:Image):void
			{
				_icono = value;
			}
			
			public function get horizontal():String
			{
				return _horizontal;
			}
			
			public function set horizontal(value:String):void
			{
				_horizontal = value;
				mostarIcono();
			}
			
			[Bindable]
			public function get texto():Boolean
			{
				return _texto;
			}
			
			public function set texto(value:Boolean):void
			{
				_texto = value;
			}
			
			private function mostarIcono():void{
				switch(horizontal)
				{
					case HorizontalAlign.LEFT:
					{
						hgRight.removeAllElements();
						hgRight.visible = hgRight.includeInLayout = false;
						hgLeft.removeAllElements();
						hgLeft.addElement(icono);
						hgLeft.visible = hgLeft.includeInLayout = true;
						break;
					}
					case HorizontalAlign.RIGHT:
					{
						hgLeft.removeAllElements();
						hgLeft.visible = hgLeft.includeInLayout = false;
						hgRight.removeAllElements();
						hgRight.addElement(icono);
						hgRight.visible = hgRight.includeInLayout = true;
						break;
					}
						
					default:
					{
						hgRight.removeAllElements();
						hgRight.visible = hgRight.includeInLayout = false;
						hgLeft.removeAllElements();
						hgLeft.visible = hgLeft.includeInLayout = false;
						break;
					}
				}
				
				
			}
			
			private function mostarIconoTopBottom():void{
				switch(vertical)
				{
					case VerticalAlign.TOP:
					{
						hgBottom.removeAllElements();
						hgBottom.visible = hgBottom.includeInLayout = false;
						hgTop.removeAllElements();
						hgTop.addElement(icono);
						hgTop.visible = hgTop.includeInLayout = true;
						break;
					}
					case VerticalAlign.BOTTOM:
					{
						hgTop.removeAllElements();
						hgTop.visible = hgTop.includeInLayout = false;
						hgBottom.removeAllElements();
						hgBottom.addElement(icono);
						hgBottom.visible = hgBottom.includeInLayout = true;
						break;
					}
					default:
					{
						hgBottom.removeAllElements();
						hgBottom.visible = hgBottom.includeInLayout = false;
						hgTop.removeAllElements();
						hgTop.visible = hgTop.includeInLayout = false;
						break;
					}
				}
			}
			
			public function get esquinaRedonda():Boolean
			{
				return _esquinaRedonda;
			}
			
			public function set esquinaRedonda(value:Boolean):void
			{
				_esquinaRedonda = value;
				if (value ){
					rectFondo.radiusX = 8;
					rectFondo.radiusY = 8
				}
			}
			
			[Bindable]
			public function get borderColor():uint
			{
				return _borderColor;
			}
			
			public function set borderColor(value:uint):void
			{
				_borderColor = value;
			}
			
			public function get colorTexto():uint
			{
				return _colorTexto;
			}
			
			public function set colorTexto(value:uint):void
			{
				_colorTexto = value;
				this.labelDisplay.setStyle("color",value);
			}
			
			
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="down" stateGroups="selected" />
		<s:State name="over" />
		<s:State name="up" />
	</s:states>
	
	<s:Rect id="rectFondo" width="100%" height="100%" >
		<s:fill>
			<s:SolidColor color="{color}" alpha.down="0.8" alpha.over="0.9" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="{borderColor}" id="borde" alpha="0" weight="2" />
		</s:stroke>
	</s:Rect>
	<s:Rect id="rectDisable" width="100%" height="100%" visible="{deshabilitarBoton}" includeInLayout="{deshabilitarBoton}" >
		<s:fill>
			<s:SolidColor color="0xFFFFFF" alpha="0.5" alpha.over="0.5"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="{borderColor}" alpha="0" weight="2" />
		</s:stroke>
	</s:Rect>
	<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" paddingRight="10" paddingLeft="10">
		<s:HGroup width="100%" height="100%" id="hgTop" verticalAlign="middle" horizontalAlign="center"
				  visible="false" includeInLayout="false" verticalCenter="0" paddingTop="20"/>
		
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" gap="8" >
			
			<s:HGroup id="hgLeft" height="100%" horizontalAlign="center" verticalAlign="middle" 
					  horizontalCenter="0" visible="false" includeInLayout="false" paddingBottom="{conPaddingBottom}"/>
			
			<s:Label id="labelDisplay" 
					 includeInLayout="{texto}" visible="{texto}"
					 alpha.disabled="0.8"  />
			
			<s:HGroup id="hgRight" height="100%" horizontalAlign="center" verticalAlign="middle" 
					  horizontalCenter="0" visible="false" includeInLayout="false" />		
		</s:HGroup>
		
		<s:HGroup width="100%" height="100%" id="hgBottom" verticalAlign="middle" horizontalAlign="center"
				  visible="false" includeInLayout="false" verticalCenter="0" paddingTop="20"/>
		
	</s:VGroup>  
	
</s:Skin>
