<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:pqNet="skins.botones.pqNet.*"
		 width="100%" height="100%"
		 resize="calcular(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.OrdenDespacho;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.controls.HTML;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotones;
			
			private var _file:File;
			[Bindable]
			public var widModificado:int = 590;
			[Bindable]
			public var heiModificado:int = 632;
			[Bindable] private var numeroActual:Number;
			private var numeroMax:Number;
			[Bindable] private var arregloImagenes:ArrayCollection;
			private var _tipo:String;
			private var _byteArray:ByteArray;
			private var _currentOrdenDespacho:OrdenDespacho;
			private var _noPedimento:String;
			
			public var variacionW:int = 142.5;
			public var variacionH:int = 158.75;
			
			[Bindable]public var widthImagen:Number;
			[Bindable]public var heightImagen:Number;
			[Bindable]public var font25:Number;
			[Bindable]public var espacio1:Number;
			[Bindable]public var espacio2:Number;
			[Bindable]public var hightImagen:Number;
			public var archivoCargado:Boolean = false;
			/*
			[Bindable]public var widthPedimento:Number;
			[Bindable]public var heightPedimento:Number;*/
			
			public function get noPedimento():String
			{
				return _noPedimento;
			}
			
			public function set noPedimento(value:String):void
			{
				_noPedimento = value;
			}
			
			[Bindable]
			public function get currentOrdenDespacho():OrdenDespacho
			{
				return _currentOrdenDespacho;
			}
			
			public function set currentOrdenDespacho(value:OrdenDespacho):void
			{
				_currentOrdenDespacho = value;
			}
			
			public function get byteArray():ByteArray
			{
				return _byteArray;
			}
			
			public function set byteArray(value:ByteArray):void
			{
				_byteArray = value;
			}
			
			public function get tipo():String
			{
				return _tipo;
			}
			
		/*	public function set tipo(value:String):void
			{
				_tipo = value;
				switch(value){
					case "cargar_evidencia":
						imgCarga.source = catalogoIconosBotones.getInstance().cargar_evidencia;
						lblMensaje.text ="Cargar Evidencia de Embarque";
						lblTipo.text = ".png / .jpg";
						break;
					case "cargar_pedimento":
						imgCarga.source = catalogoIconosBotones.getInstance().cargar_pedimento;
						lblMensaje.text ="Cargar Pedimento";
						lblTipo.text = ".pdf";
						break;
					default:
				}
			}*/
			
			public function get file():File
			{
				return _file;
			}
			
			public function set file(value:File):void
			{
				_file = value;
			}
			
			public function cargarArchivos(event:MouseEvent):void
			{
				var docFilter:FileFilter;
				file = new File();
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				file.addEventListener(Event.COMPLETE,completeHandler);
				docFilter = new FileFilter("Documents", "*.pdf");
				file.browse([docFilter])
			}
			private function selectHandler(event:Event):void
			{
				var file:FileReference = FileReference(event.target);
				file.load();
			}
			private function ioErrorHandler(event:IOErrorEvent):void
			{
				trace("ioErrorHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void
			{
				var file:FileReference = FileReference(event.target);
				trace("progressHandler: name=" + file.name + "bytesLoaded = " + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			
			private function completeHandler(event:Event):void
			{
				trace("ARCHIVO CARGADO: " + event);
				
				try
				{
					var img:Loader = new Loader();
					
					byteArray = event.target.data;
					archivoCargado = true;
				
					recibeUrlDocumento(file.url);
					
				}
				catch (error:*){
					alertaSingleton.show("No se encontro archivo");
				}
			}
			
			public function decrementaZoom():void
			{
				if(widModificado > 300 && heiModificado > 300){
					heiModificado = heiModificado - variacionH;
					widModificado = widModificado - variacionW;
				}
			}
			public function incrementaZoom():void
			{
				if(widModificado <= 1160 && heiModificado <= 1280 ){
					widModificado = widModificado + variacionW;
					heiModificado = heiModificado + variacionH;
				}
			}
			
			protected function scrollId_mouseWheelHandler(event:MouseEvent):void
			{
				event.delta = event.delta > 0 ? .5 : -1;
			}
			
			protected function aumentarHoja():void
			{
				if(numeroActual < numeroMax - 1)
				{
					numeroActual++;
					var url:URLRequest = new URLRequest("http://" + Destinos.ipUsandose + arregloImagenes[numeroActual]);
					var img:Loader = new Loader();
					
					img.load(url);				
					img.contentLoaderInfo.addEventListener(Event.COMPLETE,loaded);	
				}
			}
			protected function restarHoja():void
			{
				if(numeroActual > 0)
				{
					numeroActual--;
					var url:URLRequest = new URLRequest("http://" + Destinos.ipUsandose + arregloImagenes[numeroActual]);
					var img:Loader = new Loader();
					
					img.load(url);				
					img.contentLoaderInfo.addEventListener(Event.COMPLETE,loaded);	
				}
			}
			public function loaded(e:Event):void
			{
				var bitmap:Bitmap = e.target.content;
			/*	imagenVisualizaId.source = bitmap;*/
				e.target.removeEventListener(Event.COMPLETE,loaded);
				grupCargar.visible= grupCargar.includeInLayout = false;
				grupImagen.visible= grupImagen.includeInLayout = true;
				archivoCargado = true;
			}
			
			protected function calcular(event:ResizeEvent):void
			{
				if(tipo == "cargar_evidencia"){
					widthImagen = (216/694) * (unscaledWidth);
					heightImagen = (188/935) * (unscaledHeight);
					
					widthImagen = widthImagen > 216 ? 216:widthImagen;
					widthImagen = widthImagen < 108 ? 108:widthImagen;
					heightImagen = heightImagen > 188 ? 188:heightImagen;
					heightImagen = heightImagen < 94 ? 84:heightImagen;
				}
				else if(tipo == "cargar_pedimento"){
					widthImagen = (204/694) * (unscaledWidth);
					heightImagen = (264/935) * (unscaledHeight);
					
					widthImagen = widthImagen > 204 ? 204:widthImagen;
					widthImagen = widthImagen < 102 ? 102:widthImagen;
					heightImagen = heightImagen > 264 ? 264:heightImagen;
					heightImagen = heightImagen < 135 ? 135:heightImagen;
				}
				font25 = (25/694) * (unscaledWidth);
				
				font25 = font25 > 25 ? 25:font25;
				font25 = font25 < 18 ? 18:font25;
				
				
				espacio1 = (20/935) * (unscaledHeight);
				espacio1 = espacio1 > 20 ? 20:espacio1;
				espacio1 = espacio1 < 8 ? 8:espacio1;
				espacio2 = (30/935) * (unscaledHeight);
				espacio2 = espacio2 > 30 ? 30:espacio2;
				espacio2 = espacio2 < 15 ? 15:espacio2;
				
				hightImagen = (255/935) * (unscaledHeight);
				hightImagen = hightImagen > 255 ? 255:hightImagen;
				hightImagen = hightImagen < 134 ? 134:hightImagen;
			}
			
			public function reset():void
			{
				byteArray = null;
				archivoCargado = false;
				grupCargar.visible= grupCargar.includeInLayout = true;
				grupImagen.visible= grupImagen.includeInLayout = false;
				switch(tipo){
					case "cargar_evidencia":
						imgCarga.source = catalogoIconosBotones.getInstance().cargar_evidencia;
						lblMensaje.text ="Cargar Evidencia de Embarque";
						lblTipo.text = ".png / .jpg";
						break;
					case "cargar_pedimento":
						imgCarga.source = catalogoIconosBotones.getInstance().cargar_pedimento;
						lblMensaje.text ="Cargar Pedimento";
						lblTipo.text = ".pdf";
						break;
					default:
				}
			}
			public function recibirImagenes($rutaImagen:ArrayCollection):void
			{
				arregloImagenes = $rutaImagen;
				if (arregloImagenes == null || arregloImagenes.length == 0) {
					grupCargar.visible= grupCargar.includeInLayout = true;
					grupImagen.visible= grupImagen.includeInLayout = false;
				}
				numeroActual = 0; 
				arregloImagenes = new ArrayCollection();
				
				
				
				var url:URLRequest = new URLRequest("http://" + Destinos.ipUsandose + $rutaImagen[0]);
				var img:Loader = new Loader();
				
				img.load(url);				
				img.contentLoaderInfo.addEventListener(Event.COMPLETE,loaded);
			}
			
			public function recibeUrlDocumento($rutaDocumentoAct:String):void
			{
				
				documentoA.removeAllElements();
				var imagenDisponible:Boolean = true;
				if ($rutaDocumentoAct == null || $rutaDocumentoAct.length == 0) 
				{
					/*if(inEspera)
						iniciaEspera("terminaEspera");
					imagenDisponible = false;*/
					
				}
				
				numeroActual = 0; 
				arregloImagenes = new ArrayCollection();
				
				mostrarPDF($rutaDocumentoAct);
			}
			
			private var ErrorPDF:String;
			private var pdf:HTMLLoader;
			
			private function terminoCrear(event:FlexEvent):void{
				pdf.width = documentoA.width;
				pdf.height = documentoA.height;
			}
			
			private function mostrarPDF(url:String):void{
				
				
				if(HTMLLoader.pdfCapability == HTMLPDFCapability.STATUS_OK)  
				{ 
					grupImagen.visible = grupImagen.includeInLayout = true;
					grupCargar.visible = grupCargar.includeInLayout = false;
					trace("PDF content can be displayed"); 
					var request:URLRequest = new URLRequest(url); 
					pdf = new HTMLLoader();
					pdf.load(request);
					
					documentoA.removeEventListener(FlexEvent.UPDATE_COMPLETE, terminoCrear);
					documentoA.addEventListener(FlexEvent.UPDATE_COMPLETE, terminoCrear);
					var verDoc:HTML = new HTML; 
					verDoc.percentHeight = 100;
					verDoc.percentWidth = 100;
					verDoc.addChild(pdf);
					documentoA.addElement(verDoc);
					/*imagenVisualizaId.addChild(pdf);*/
				} 
				else  
				{ 
					
					switch(HTMLLoader.pdfCapability)
					{
						case 3204:
						{
							ErrorPDF = "Reinstalar Acrobat Reader";
							break;
						}
						case 3201:
						{
							ErrorPDF = "Instalar Acrobat Reader";
							break;
						}
						case 3202:
						{
							ErrorPDF = "Actualizar Acrobat Reader";
							break;
						}
						case 3203:
						{
							ErrorPDF = "Actualizar Acrobat Reader";
							break;
						}
							
						default:
						{
							break;
						}
					}
					
					alertaSingleton.show(ErrorPDF);
					
				}
				
				
				
			}
			
			public function limpiarPantalla():void{
				grupCargar.visible = grupCargar.includeInLayout = true;
				grupImagen.visible = grupImagen.includeInLayout = false;
			}
			
			
		]]>
	</fx:Script>
	<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:Group width="100%" height="100%" >
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#f3f3f4" />
				</s:fill>
			</s:Rect>
			<s:VGroup gap="0" id="grupCargar" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" visible="true" includeInLayout="true">
				<s:VGroup width="100%" height="{hightImagen}" verticalAlign="middle" horizontalAlign="center">
					<mx:Image id="imgCarga" horizontalCenter="0" verticalCenter="0" width="{widthImagen}" height="{heightImagen}" source="{catalogoIconosBotones.getInstance().cargar_pedimento } "
							  click="cargarArchivos(event)" buttonMode="true"/>
				</s:VGroup>  
				<s:Spacer height="{espacio1}" />
				<s:Label styleName="tab_texto_14_Helvetica" id="lblTipo" text=".pdf" color="#888888" fontSize="25" width="100%" maxDisplayedLines="2" textAlign="center"/>
				<s:Spacer height="{espacio2}" />
				<s:Label styleName="tab_texto_14_Helvetica" id="lblMensaje" text="Cargar Contrato" color="#888888" fontSize="25" width="100%" maxDisplayedLines="2" textAlign="center"/>
			</s:VGroup>
		
			<s:VGroup id="grupImagen" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" visible="false" includeInLayout="false">					
				
				<s:VGroup width="100%" height="100%" id="grupoImagenVisualizador" verticalAlign="middle" horizontalAlign="center" >
					
					<s:Group id="grpContenedor" width="80%" height="80%"   verticalCenter="0" horizontalCenter="0" >
						
						<s:Scroller width="100%" height="100%" maxWidth="800" maxHeight="932" id="scrollId2" mouseWheel="scrollId_mouseWheelHandler(event)">
							<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" id="documentoA" >	
								
								
							</s:VGroup>  					
						</s:Scroller>
					</s:Group>  
				</s:VGroup>  
				
				<s:Group width="100%" height="5%">
					<pqNet:botonPqNetLargo  id="btnRecargar"  width="35" right="20" icono="recargarImg" 
											colorBase="0x{catalogoColores.BTN_VERDE_AZUL}" click="cargarArchivos(event)"/>
				</s:Group>
			</s:VGroup>
			
		</s:Group>
		
	</s:HGroup>
</s:Group>
