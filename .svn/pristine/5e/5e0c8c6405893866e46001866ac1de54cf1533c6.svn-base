<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:lay="mx.com.proquifa.proquifanet.rsl.vista.vistas.catalogos.proveedores.comerciales.oferta.*"
		 xmlns:toggleButton="skins.skin.botones.toggleButton.*"
		 xmlns:contenedores="skins.skin.contenedores.*"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:label="skins.skin.label.*" 
		 xmlns:otros="skins.otros.*"
		 xmlns:shaders="skins.skin.shaders.*"
		 width="100%" height="100%"
		 >
	
	<fx:Script>
		<![CDATA[
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.catalogos.proveedores.ConfiguracionPrecioProducto;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.utils.StringUtil;
			
			import skins.catalogos.catalogoIconosBotoneras;
			
			private var _dataProvider:Array;
			private var _currentMonedaVenta:String;
			private var _currentSimboloVenta:String;
			public var isproveedorNacional:Boolean;
			private var _currentNivel:String;
			
			private var _colorBase:String;
			
			[Bindable]
			private var maxIndex:int;
			
			public function get dataProvider():Array
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:Array):void
			{
				txtSearchPrecioLista.text = "";
				if(value.length >1 )
				{
					_dataProvider = value.sort(ordenarDeMenorAMayor);
				}
				else{
					_dataProvider = value;
				}
				configurarPanelListaDePrecios(_dataProvider);
			}
			
			private function configurarPanelListaDePrecios(array:Array):void
			{
				currentIndex = 0;
				btnBack.enabled = false;
				
				grpConfig.dataProvider = new Array();
				
				if(array != null && array.length > 0)
				{
					
					grpConfig.isProveedorNacional = isproveedorNacional;
					grpConfig.currentNivel = _currentNivel;
					
					maxIndex = array.length;
					
					if(maxIndex == 1)
						btnNext.enabled = false;
					else if(maxIndex > 1)
						btnNext.enabled = true;
					
					grpConfig.dataProvider = array;
				}
				else
				{
					btnNext.enabled = false;
					currentIndex = -1;
					maxIndex = 0;
				}
			}
			
			
			
			public function get currentMonedaVenta():String
			{
				return _currentMonedaVenta;
			}
			
			public function set currentMonedaVenta(value:String):void
			{
				_currentMonedaVenta = value;
			}
			
			public function get currentSimboloVenta():String
			{
				return _currentSimboloVenta;
			}
			
			public function set currentSimboloVenta(value:String):void
			{
				_currentSimboloVenta = value;
			}
			
			[Bindable]
			private var currentIndex:int;
			protected function bntControlForwardAndBack_clickHandler(event:MouseEvent):void
			{
				if(event.currentTarget.id == "btnBack")
				{
					if(currentIndex > 0 )
					{
						currentIndex --;
						
						if(currentIndex == 0 && btnBack.enabled)
							btnBack.enabled = false;
						
						if(currentIndex < maxIndex && !btnNext.enabled)
							btnNext.enabled = true;
						
						grpConfig.cambiarIndex( currentIndex);
					}
				}
				else
				{
					if(currentIndex < maxIndex-1 )
					{
						currentIndex ++;
						
						if(currentIndex > 0 && !btnBack.enabled)
							btnBack.enabled = true;
						
						if(currentIndex == (maxIndex -1) && btnNext.enabled)
							btnNext.enabled = false;
						
						grpConfig.cambiarIndex( currentIndex);
					}
				}
			}
			
			protected function txtSearchPrecioLista_changeHandler():void
			{
				
				if(txtSearchPrecioLista.text != null && StringUtil.trim(txtSearchPrecioLista.text).length >0)
				{
					
					var _listaVisual:Array = _dataProvider.filter(buscarCoincidencias);
					
					
					if(_listaVisual.length > 0)
					{
						configurarPanelListaDePrecios(_listaVisual);
					}
					else
					{
						configurarPanelListaDePrecios(null);
					}
				}
				else
				{
					configurarPanelListaDePrecios(_dataProvider);
				}
				
			}
			
			protected function buscarCoincidencias($item:ConfiguracionPrecioProducto,id:uint, array:Array):Boolean
			{
				if( UtilsFormatosNumericos.redondearNEAREST_WithOutSeparator($item.producto.costo).indexOf(txtSearchPrecioLista.text.toUpperCase()) != -1 )
				{
					return true; 
				}
				else
				{
					return false;
				}
			}
			
			protected function ordenarDeMenorAMayor(a:ConfiguracionPrecioProducto,b:ConfiguracionPrecioProducto):int
			{
				
				if(a.producto.costo == b.producto.costo )
				{
					return 0;
				}
				else
				{
					if(a.producto.costo < b.producto.costo)
						return -1;
					else 
						return 1;
				}
			}

			public function get colorBase():String
			{
				return _colorBase;
			}

			[Inspectable(category="Common",enumeration="gris,blanco",defaultValue="gris")]
			public function set colorBase(value:String):void
			{
				_colorBase = value;
				
				if(value == "gris")
				{
					solidColorBase.color = 0xEAEAEA;	
				}
				else
				{
					solidColorBase.color = 0xFFFFFF; 
				}
			}

			public function get currentNivel():String
			{
				return _currentNivel;
			}

			public function set currentNivel(value:String):void
			{
				_currentNivel = value;
				grpConfig.currentNivel = value;
			}

			
		]]>
	</fx:Script>
	
	
	<s:Rect width="100%" height="100%">
		<s:filters>
			<shaders:sombraBevelFilter direccion="left"/>
		</s:filters>
		<s:fill>	
			<s:SolidColor id="solidColorBase" color="#eaeaea"/>	
		</s:fill>
	</s:Rect>
	<contenedores:VGroupConPaddingStandardPqNet horizontalAlign="center" gap="10">
		<s:TextInput width="100%" fontStyle="normal" id="txtSearchPrecioLista" skinClass="skins.textinput.busqueda.skinTextInputBusqueda" prompt="Precio lista" restrict="0-9."
					 change="txtSearchPrecioLista_changeHandler()" enter="txtSearchPrecioLista_changeHandler()"/> 
		<otros:division width="100%"/>
		<lay:grpVerInfoFormulaEnCatProveedores id="grpConfig" width="100%" height="100%"/>
		
		<s:HGroup width="100%" gap="10" horizontalAlign="center" verticalAlign="middle">
			<s:Image id="btnBack" source="{ catalogoIconosBotoneras.getInstance().flechasIzquierdaCatProNormal }" horizontalCenter="0" verticalCenter="0" click="bntControlForwardAndBack_clickHandler(event)"
					 mouseOver="{btnBack.source = catalogoIconosBotoneras.getInstance().flechasIzquierdaCatProDown}" mouseOut="{btnBack.source = catalogoIconosBotoneras.getInstance().flechasIzquierdaCatProNormal}"/>
			<label:Texto_22_GrisCasiNegro text="{currentIndex+1} / {maxIndex}" paddingTop="2"/>
			<s:Image id="btnNext" source="{ catalogoIconosBotoneras.getInstance().flechasDerechaCatProNormal }" horizontalCenter="0" verticalCenter="0" click="bntControlForwardAndBack_clickHandler(event)"
					 mouseOver="{btnNext.source = catalogoIconosBotoneras.getInstance().flechasDerechaCatProDown}" mouseOut="{btnNext.source = catalogoIconosBotoneras.getInstance().flechasDerechaCatProNormal}"/>
		</s:HGroup>
	</contenedores:VGroupConPaddingStandardPqNet>
</s:Group>
