<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="40"
		 >
	
	<fx:Metadata>
		[Event(name="clickBotonera", type="mx.com.proquifa.proquifanet.rsl.vista.eventos.comun.EventoComun")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.eventos.comun.EventoComun;
			import mx.core.IVisualElement;
			
			import spark.components.Group;
			import spark.components.Label;
			import spark.layouts.HorizontalAlign;
			import spark.primitives.Rect;
			
			private var _dataProvider:ArrayCollection;
			private var _widthItem:Number;
			private var _percentWidthItem:int;
			private var maxWidthItem:Number = 292;
			private var _selectedIndex:int = 0;
			private var _styleNameText:String = "";
			private var _selectedObject:Object;
			private var _colorTextSelected:uint = 0xFFFFFF;
			private var _colorTextNormal:uint = 0x040404;
			private var _fontSizeText:Number = 19;
			private var _horizontalAlign:String = HorizontalAlign.RIGHT;
			
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
				drawBotonera();
			}
			
			public function drawBotonera():void {
				hgBotonera.removeAllElements();
				oldItemSelected = null;
				for (var i:int = 0; i < dataProvider.length; i++) 
				{
					var group:Group = new Group();
					
					group.percentWidth = (100/dataProvider.length);
					if (maxWidth)
						group.maxWidth = maxWidthItem;
					group.percentHeight = 100;
					
					var rect:Rect = new Rect();
					rect.fill = scGris;
					rect.stroke = scsGris;
					rect.percentWidth = 100;
					rect.percentHeight = 100;
					group.addElement(rect);
					var label:Label = new Label();
					label.text = dataProvider[i];
					label.styleName = styleNameText;
					label.setStyle("color", colorTextNormal);
					var font:Number = (unscaledWidth/1694) * 19;
					label.setStyle("fontSize", font < 10 ? 10 : font > 19 ? 19 : font);
					label.verticalCenter = 0;
					label.horizontalCenter = 0;
					group.addElement(label);
					
					if (i == selectedIndex ) {
						rect.fill = scVerde;
						label.setStyle("color", colorTextSelected);
						oldItemSelected = group;
					}
					
					group.addEventListener(MouseEvent.MOUSE_DOWN, clickBoton, false, 0 ,true);
					hgBotonera.addElement(group);
				}
				
			}
			
			private var oldItemSelected:IVisualElement;
			protected function clickBoton(event:MouseEvent):void {
				if (oldItemSelected != event.currentTarget) {
					if (oldItemSelected) {
						((oldItemSelected as Group).getElementAt(0) as Rect).fill = scGris;
						((oldItemSelected as Group).getElementAt(1) as Label).setStyle("color", colorTextNormal);
					}
					
					oldItemSelected = event.currentTarget as Group;
					((oldItemSelected as Group).getElementAt(0) as Rect).fill = scVerde;
					((oldItemSelected as Group).getElementAt(1) as Label).setStyle("color", colorTextSelected);
					selectedIndex = hgBotonera.getElementIndex(oldItemSelected as Group);
					
					clickBotonera();
				}
			}
			
			private function clickBotonera():void {
				var object:Object = new Object();
				object.selectedIndex = selectedIndex;
				object.selectedItem = oldItemSelected;
				object.value = dataProvider[selectedIndex];
				_selectedObject = object;
				var evento:EventoComun = new EventoComun(EventoComun.CLICK_BOTONERA);
				evento.current = object;
				dispatchEvent(evento);
			}
			
			public function get selectedIndex():int
			{
				return _selectedIndex;
			}
			
			public function set selectedIndex(value:int):void
			{
				_selectedIndex = value;
			}
			
			public function get percentWidthItem():int
			{
				return _percentWidthItem;
			}
			
			public function set percentWidthItem(value:int):void
			{
				_percentWidthItem = value;
			}
			
			public function get widthItem():Number
			{
				return _widthItem;
			}
			
			public function set widthItem(value:Number):void
			{
				_widthItem = value;
			}
			
			
			private var oldWidth:Number;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				trace("Botonera: " + unscaledWidth);
				if (!oldWidth)
					oldWidth = unscaledWidth;
				if (oldWidth != unscaledWidth ) {
					//if ((oldWidth - 10) < unscaledWidth || unscaledWidth > (oldWidth + 10) ) {
					oldWidth = unscaledWidth;
					drawBotonera();
					//}
				}
			}
			
			public function get selectedObject():Object
			{
				return _selectedObject;
			}
			
			public function get styleNameText():String
			{
				return _styleNameText;
			}
			
			public function set styleNameText(value:String):void
			{
				_styleNameText = value;
			}
			
			public function get colorTextSelected():uint
			{
				return _colorTextSelected;
			}
			
			public function set colorTextSelected(value:uint):void
			{
				_colorTextSelected = value;
			}
			
			public function get colorTextNormal():uint
			{
				return _colorTextNormal;
			}
			
			public function set colorTextNormal(value:uint):void
			{
				_colorTextNormal = value;
			}
			
			public function get fontSizeText():Number
			{
				return _fontSizeText;
			}
			
			public function set fontSizeText(value:Number):void
			{
				_fontSizeText = value;
			}
			
			[Bindable]
			[Inspectable(category="Styles", enumeration="left,right,center")]
			public function get horizontalAlign():String
			{
				return _horizontalAlign;
			}
			
			public function set horizontalAlign(value:String):void
			{
				_horizontalAlign = value;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:SolidColor color="#ECEEF0" id="scGris" />
		<s:SolidColor color="#0B8894" id="scVerde" />
		<s:SolidColorStroke color="#DFE0E2" weight="1" id="scsGris"/>
	</fx:Declarations>
	
	<s:HGroup width="100%" height="100%" id="hgBotonera" gap="0" horizontalAlign="{horizontalAlign}" />
	
</s:Group>