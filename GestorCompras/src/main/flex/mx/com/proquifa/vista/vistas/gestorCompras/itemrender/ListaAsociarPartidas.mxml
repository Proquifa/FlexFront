<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:combo="mx.com.proquifa.proquifanet.rsl.vista.vistas.componentes.comun.combos.*"
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:texto="skins.skin.comun.consultas.panelCtaDetalle.*"
				xmlns:label="skins.skin.label.*"
				xmlns:otros="skins.otros.*"
				autoDrawBackground="false"
				height="82"
				width="100%" xmlns:boton="mx.com.proquifa.vista.vistas.skin.boton.*"
				resize="reajustar_resizeHandler(event)"
				>
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaCompra;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Destinos;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.RutasPdF;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFormatosNumericos;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaListaArribo;
			import mx.com.proquifa.vista.vistas.gestorCompras.VistaListaArrivoMatrizMeteriales;
			import mx.com.proquifa.vista.vistas.gestorCompras.componentes.arribo.GridAsociarPartidaListaArriboLista;
			import mx.core.IToolTip;
			import mx.events.ResizeEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.List;
			import spark.components.supportClasses.GroupBase;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import skins.catalogos.catalogoIconosBotones;
			import skins.skin.toolTip.toolTipCambioprecios;
			
			[Embed(source="/../rsl/src/main/flex/skins/imagenes/iconos/botones/gestorCompras/svg/agregar_todo.svg")]
			[Bindable] public var agregar:Class;	
			public var object:Object = new Object;
			public var objectAsociar:Object = new Object;
			
			private var partida:PartidaCompra;
			private var certificadoPdf:ByteArray = null;
			/*private var _rutaDoc:String;*/
			public var file:File = new File();
			public var filepdf:File = new File();
			[Bindable] public var tipoMoneda:String = "";
			[Bindable] public var montoTotal:Number;
			public var tipoItem:String;
			public var lote:String;
			public var bloquear:Boolean = true;
			public var bloquearArchivoUSP:Boolean;
			public var bloqueoLote:Boolean = false;
			public var bloIniEliminar:Boolean = true;
			public var bloIniAgregar:Boolean = true;
			[Bindable] public static var heightBtnPDF:Number = 30;
			
			
			
			public var rutaPDF:String;
			[Bindable]public var tipoLote:Boolean;
			public var pdfByte:ByteArray;
			public var loteActual:int;
			public var origenCompra:String;
			public var agregoDoc:Boolean;
			public var pub:Boolean;
			public var PezasAnteriores:int = 0;
			public var eliminaTodo:Boolean;
			
			
			override public function set data(value:Object):void{
				super.data = value;
				
				if(value != null){
					
					tipoItem = value.object;
					
					switch(value.object)
					{
						case "agregarPartida":
						{
							tipoLote = value.tipoLote;	
							/*if(bloIniAgregar){*/
							montoTotal = (value.precioUnitario * value.cantidadCompra);
							agregarPDF.visible = agregarPDF.includeInLayout = true;
							editarPDF.visible = editarPDF.includeInLayout = false;
							agregarPartidaGrid.visible = agregarPDF.includeInLayout = true;
							eliminarPartidaGrid.visible = editarPDF.includeInLayout = false;
							
							CargarFactura.visible = editarPDF.includeInLayout = false;
							
							seleccionarOrigen();
							lineaListaArribo.visible = lineaListaArribo.includeInLayout = true;
							
							gridPartidasObject();
							
							agregarPartidaGrid.enabled = false;
							if (!value.asociar)
								agregarPartidaGrid.enabled = true;
							tipoPublicaciones(value.tipo);
							if(!agregoDoc){
								ordenarLote(value);
								seleccionarLote();
								
							}
							habilitarVer();
							break;
						}
						case "eliminarPartida":
						{
							tipoLote = value.tipoLote;
							if(bloIniEliminar){
								
								montoTotal = (value.precioUnitario * value.cantidadCompra);
								agregarPDF.visible = agregarPDF.includeInLayout = false;
								editarPDF.visible = editarPDF.includeInLayout = true;
								agregarPartidaGrid.visible = agregarPDF.includeInLayout = false;
								eliminarPartidaGrid.visible = editarPDF.includeInLayout = true;
								
								CargarFactura.visible = CargarFactura.includeInLayout = false;
								
								seleccionarOrigen();
								lineaListaArribo.visible = lineaListaArribo.includeInLayout = true;
								
								gridPartidasAsociarObject();
								agregarPartidaGrid.enabled = bloquear;
								tipoPublicaciones(value.tipo);
								
								if(!agregoDoc){
									ordenarLote(value);
									seleccionarLote();
									
								}
							}
							habilitarVer();
						
							break;
						}
						case "agregarCargaFactura":
						{
							if(super.data)
								data.numFila = itemIndex;
							CargarFactura.visible = CargarFactura.includeInLayout = true;
							AgregarPartida.visible = AgregarPartida.includeInLayout = false;
							agregarPartidaFactura.visible = agregarPartidaFactura.includeInLayout = true;
							eliminarPartidaFactura.visible = eliminarPartidaFactura.includeInLayout = false;
							lineaCargarFactura.visible = lineaCargarFactura.includeInLayout = true;
							
							activarAgregado(value);
							break;
						}
						case "eliminarCargaFactura":
						{
							if(super.data)
								data.numFila = itemIndex;
							CargarFactura.visible = CargarFactura.includeInLayout = true;
							AgregarPartida.visible = AgregarPartida.includeInLayout = false;
							agregarPartidaFactura.visible = agregarPartidaFactura.includeInLayout = false;
							eliminarPartidaFactura.visible = eliminarPartidaFactura.includeInLayout = true;
							lineaCargarFactura.visible = lineaCargarFactura.includeInLayout = true;
							break;
						}
						default:
						{
							CargarFactura.visible = CargarFactura.includeInLayout = true;
							AgregarPartida.visible = AgregarPartida.includeInLayout = false;
							break;
						}
					}
					
				}
				if(data != null){
					if (data.abierto){
						lineaCargarFactura.visible = false;
						lineaListaArribo.visible = false;
					}else{
						lineaCargarFactura.visible = true;
						lineaListaArribo.visible = true;
					}
					cargaOrigen();
				}
				
				eliminaTodo = true;
			}
			
			
			
			private function cargaOrigen():void{
				if( cmbOrigen.dataProvider != null && cmbOrigen.dataProvider.length > 0 ){
					if( data.origenCompra != null && data.origen==null )
					{
						cmbOrigen.selectedIndex = cmbOrigen.seleccionarValor(data.origenCompra,'valor');
						partida.origen=data.origenCompra;
					}
				}else{
					setTimeout( cargaOrigen, 250 );
				}
			}
			
			/************************Lista de Arribo************************/
			
			protected function numericstepper1_changeHandler(event:Event):void
			{
				
				
				if(tipoItem == "agregarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.cantidadCompra = parseInt(nmsCantidad.textDisplay.text);
					/*partida.totalDePiezasRS = partida.totalDePiezasRS + parseInt(nmsCantidad.textDisplay.text);*/
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'cantidadCompra');
				}
				if(tipoItem == "eliminarPartida"){
					data.cantidadCompra = parseInt(nmsCantidad.textDisplay.text);
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.cantidadCompra = parseInt(nmsCantidad.textDisplay.text);
					/*partida.totalDePiezasRS = partida.totalDePiezasRS - parseInt(nmsCantidad.textDisplay.text);*/
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'cantidadCompra');
					eliminaTodo = false;
				}
				
				data = ObjectUtil.copy(partida) as PartidaCompra;
				
				
			}
			
			protected function SoloquedaUnapieza():void
			{
				
				if(tipoItem == "agregarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.cantidadCompra = parseInt(nmsCantidad.textDisplay.text);
					/*partida.totalDePiezasRS = partida.totalDePiezasRS + parseInt(nmsCantidad.textDisplay.text);*/
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'cantidadCompra');
				}
				if(tipoItem == "eliminarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.cantidadCompra = 1;
					/*partida.totalDePiezasRS = partida.totalDePiezasRS - parseInt(nmsCantidad.textDisplay.text);*/
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'cantidadCompra');
				}
				
			}
			
			protected function eliminaTodaspiezas():void
			{
				
				if(tipoItem == "agregarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.cantidadCompra = parseInt(nmsCantidad.textDisplay.text);
					/*partida.totalDePiezasRS = partida.totalDePiezasRS + parseInt(nmsCantidad.textDisplay.text);*/
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'cantidadCompra');
				}
				if(tipoItem == "eliminarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.cantidadCompra = data.cantidadCompra;;
					/*partida.totalDePiezasRS = partida.totalDePiezasRS - parseInt(nmsCantidad.textDisplay.text);*/
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'cantidadCompra');
				}
				
			}
			
			protected function txt_changeHandler(event:TextOperationEvent):void
			{
				
				lote = txtLote.text;
				if(tipoItem == "agregarPartida"){
					
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra
					partida.lote = txtLote.text;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'lote');
					data.lote = txtLote.text;
					dispatchEvent( new Event("validarBotonGenerarLA",true));
				}
				if(tipoItem == "eliminarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra
					partida.lote = txtLote.text;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'lote');
					data.lote = txtLote.text;
					dispatchEvent( new Event("validarBotonGenerarLA",true));
				}
			}
			public var auxFolio:String;
			
			protected function cmbLote_changeHandler(event:IndexChangeEvent):void
			{
			    var rutaPDF1:String;
				var rutacertificado:String;
				var rutacertificadoActual:String;
				if(cmbLote.selectedItem != undefined)
				{
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.lote = cmbLote.selectedItem.valor;
			
						if(cmbLote.selectedItem.llave == 0)
						{
							tipoLote = false;
							partida.rutaPDF = data.rutaCertificadoActual;
							partida.rutaPDF = data.rutaCertificadoActual;
							partida.tipoLote = false;
							rutaPDF1 = ObjectUtil.copy(data.rutaPDF) as String; 
							rutacertificado = ObjectUtil.copy(data.rutaCertificadoAnterior) as String; 
							rutacertificadoActual = ObjectUtil.copy(data.rutaCertificadoActual) as String; 
							if((rutaPDF1 == null) && (rutaPDF1 == rutacertificado))
								partida.rutaPDF = rutacertificadoActual;
						}
						else if(cmbLote.selectedItem.llave == 1)
						{
							
							tipoLote = true;
							partida.rutaPDF = data.rutaCertificadoAnterior;
							partida.rutaPDF = data.rutaCertificadoAnterior;
							partida.tipoLote = true;
							rutaPDF1 = ObjectUtil.copy(data.rutaPDF) as String; 
							rutacertificado = ObjectUtil.copy(data.rutaCertificadoAnterior) as String; 
							rutacertificadoActual = ObjectUtil.copy(data.rutaCertificadoActual) as String; 
							if((rutaPDF1 == null) && (rutaPDF1 == rutacertificadoActual))
								partida.rutaPDF = rutacertificado;
						}
						
						if(tipoItem == "agregarPartida"){
							/*partida = new PartidaCompra();*/
							/*partida = ObjectUtil.copy(data) as PartidaCompra;*/
							((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'lote');
							((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'tipoLote');
							dispatchEvent( new Event("validarBotonGenerarLA",true));
						}
						else if(tipoItem == "eliminarPartida"){
							/*partida = new PartidaCompra();*/
							/*partida = ObjectUtil.copy(data) as PartidaCompra;*/
							((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'lote');
							((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'tipoLote');
							((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarTipoLote(data.idPartidaCompra,tipoLote);
							dispatchEvent( new Event("validarBotonGenerarLA",true));
						}
						/*if (cmbLote.selectedItem.llave == 1)
							data.tipoLote = true;
						else 
							data.tipoLote = false;
						data.lote = partida.lote;*/
						data = ObjectUtil.copy(partida) as PartidaCompra;
				}
			}
			
			private function selectLote():void
			{
				/*if(cmbLote.selectedItem == null){*/
				
				if(data.tipoLote == false)
				{
					/*cmbLote.selectedIndex = 0;*/
					cmbLote.selectedIndex = 0;
					if(data.rutaPDF == null)
						data.rutaPDF = data.rutaCertificadoActual;
					/*data.rutaPDF = data.rutaPDF
					else*/
					
				}
				else
				{
					cmbLote.selectedIndex=1;
					if(data.rutaPDF == null)
						data.rutaPDF = data.rutaCertificadoAnterior;
					/*data.rutaPDF = data.rutaPDF
					else*/
				}
				/*}*/
			}
			
			private function seleccionarLote():void
			{
				if (cmbLote && cmbLote.dataProvider && cmbLote.dataProvider.length > 0)
				{
					selectLote();
				}
				else
				{
					setTimeout(seleccionarLote,100);
				}
			}
			
			protected function ordenarLote(value:Object):void
			{
				partida = new PartidaCompra();
				partida = ObjectUtil.copy(data) as PartidaCompra
				var lotes:ArrayCollection = new ArrayCollection();
				var loteAnterior:Object = new Object();
				var lote:Object = new Object();
			
				tipoLote = data.tipoLote;
				loteAnterior.valor = data.loteAnterior;
				loteAnterior.llave = 1;
				if(data.loteVigente != null)
					lote.valor = data.loteVigente;
				else
					lote.valor = "";
				lote.llave = 0;	
			
				lotes.addItem(lote);
				
				if(data.loteAnterior!= null)
					lotes.addItem(loteAnterior);
			
				cmbLote.dataProvider = lotes;
				
				if(GridAsociarPartidaListaArriboLista.VieneDe == "DAAD")
				{
					if(VistaListaArribo.proveedor==true && data.tipo != 'Publicaciones')
					{
						txtLote.visible = txtLote.includeInLayout = false;
						cmbLote.visible = cmbLote.includeInLayout = true;
						esferasLote.visible = esferasLote.includeInLayout = true;
						cmbLote.textInput.editable = false;
					}
					else
					{
						txtLote.visible = txtLote.includeInLayout = true;
						cmbLote.visible = cmbLote.includeInLayout = false;
						esferasLote.visible = esferasLote.includeInLayout = false;
						cmbLote.textInput.editable = true;
					}
				}
				else if(GridAsociarPartidaListaArriboLista.VieneDe == "DACD"){
					
					if(VistaListaArrivoMatrizMeteriales.proveedor==true && data.tipo != 'Publicaciones')
					{
						txtLote.visible = txtLote.includeInLayout = false;
						cmbLote.visible = cmbLote.includeInLayout = true;
						esferasLote.visible = esferasLote.includeInLayout = true;
						cmbLote.textInput.editable = false;
					}
					else
					{
						txtLote.visible = txtLote.includeInLayout = true;
						cmbLote.visible = cmbLote.includeInLayout = false;
						esferasLote.visible = esferasLote.includeInLayout = false;
						cmbLote.textInput.editable = true;
					}
					
				}
				
				
				
				((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'lote');
				((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'tipoLote');
				
				if(data.lote == null){
					txtLote.text = "";
				}
				if(data.loteVigente == null && data.loteAnterior == null)
				{
					cmbLote.dataProvider=null;
					cmbLote.enabled = false;
				}else{cmbLote.enabled = true;}
				
				/*}
				bloqueoLote = false;*/
			}
		
			public var rutaActualCer:String;
	         protected function agregardocumento1_clickHandler(valor:String):void
			{
				 
				if(data.rutaPDF != null || data.rutaCertificadoActual != null)
				{
					rutaActualCer = data.rutaPDF;	
				}
				else 
				{
					rutaActualCer = "";
				}
				browseFileSystem(valor);	
			}
			
			public function browseFileSystem(valor:String):void{
				file = new File();
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				file.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				
				var docFilter:FileFilter;
				if (valor == 'pdf')
				{
					docFilter = new FileFilter("Documents", "*.pdf");
					file.addEventListener(Event.COMPLETE,completeHandlerPDF);	
				}
				
				file.browse([docFilter]); 
			}
			public function habilitarVer():void
			{
				if(data.rutaPDF != null || data.rutaCertificadoActual != null){
					
					if(data.certificadoNoDisponible)
					{
						checkCuadrado1.includeInLayout = checkCuadrado1.visible = false;
						checkCuadrado2.includeInLayout = checkCuadrado2.visible = false;
						chekSe1.includeInLayout = chekSe1.visible = true;
						chekSe2.includeInLayout = chekSe2.visible = true;
						ver1.source = catalogoIconosBotones.getInstance().vista_previa_gris;
						ver1.enabled = false;
						cargar1.source = catalogoIconosBotones.getInstance().agregar_inactivo_30;
						cargar1.enabled = false;
						ver2.source = catalogoIconosBotones.getInstance().vista_previa_gris;
						ver2.enabled = false;
						cargar2.source = catalogoIconosBotones.getInstance().agregar_inactivo_30;
						cargar2.enabled = false;
						
					}
					else{
						checkCuadrado1.includeInLayout = checkCuadrado1.visible = true;
						checkCuadrado2.includeInLayout = checkCuadrado2.visible = true;
						chekSe1.includeInLayout = chekSe1.visible = false;
						chekSe2.includeInLayout = chekSe2.visible = false;
						ver1.source = catalogoIconosBotones.getInstance().vista_previa_cuadro;
						ver2.source = catalogoIconosBotones.getInstance().vista_previa_cuadro;
						cargar1.source = catalogoIconosBotones.getInstance().recargar_documento;
						cargar2.source = catalogoIconosBotones.getInstance().recargar_documento;
						cargar1.enabled = true;
						ver1.enabled = true;
						cargar2.enabled = true;
						ver2.enabled = true;
					}
					
				}else{
					
					if(data.certificadoNoDisponible)
					{
						checkCuadrado1.includeInLayout = checkCuadrado1.visible = false;
						checkCuadrado2.includeInLayout = checkCuadrado2.visible = false;
						chekSe1.includeInLayout = chekSe1.visible = true;
						chekSe2.includeInLayout = chekSe2.visible = true;
						ver1.source = catalogoIconosBotones.getInstance().vista_previa_gris;
						ver1.enabled = false;
						cargar1.source = catalogoIconosBotones.getInstance().agregar_inactivo_30;
						/* cargar1.enabled = false;*/
						ver2.source = catalogoIconosBotones.getInstance().vista_previa_gris;
						ver2.enabled = false;
						cargar2.source = catalogoIconosBotones.getInstance().agregar_inactivo_30;
						/*cargar2.enabled = false;*/
						
					}
					else {
						checkCuadrado1.includeInLayout = checkCuadrado1.visible = true;
						checkCuadrado2.includeInLayout = checkCuadrado2.visible = true;
						chekSe1.includeInLayout = chekSe1.visible = false;
						chekSe2.includeInLayout = chekSe2.visible = false;
						ver1.source = catalogoIconosBotones.getInstance().vista_previa_gris;
						ver2.source = catalogoIconosBotones.getInstance().vista_previa_gris;
						cargar1.source = catalogoIconosBotones.getInstance().cargar_archivo;
						cargar2.source = catalogoIconosBotones.getInstance().cargar_archivo;
						cargar1.enabled = true;
						ver1.enabled = true;
						cargar2.enabled = true;
						ver2.enabled = true;
					}
					
				}
				
				
				
				
				
			}
			private function selectHandler(event:Event):void 
			{
				var file:FileReference = FileReference(event.target);
				file.load();
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void 
			{
				trace("ioErrorHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void 
			{
				var file:FileReference = FileReference(event.target);
				trace("progressHandler: name=" + file.name + "bytesLoaded = " + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			private function completeHandlerPDF(event:Event):void 
			{
				var modificado:Boolean;
				trace("completeHandler: " + event);
				agregoDoc = true;
				certificadoPdf = this.file.data;
				/*data.rutaPDF = file.nativePath;*/
				/*filepdf = file;*/
				/*rutaPDF = file.nativePath;*/
				data.rutaPDF = file.nativePath;
				data.certificadoPdf = file.data;
				/*(data as PartidaCompra).certificadoPdf = this.certificadoPdf;*/
				
				if(tipoItem == "agregarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.rutaPDF = data.rutaPDF;
					partida.certificadoPdf = data.certificadoPdf;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'rutaPDF');
				}
				else if(tipoItem == "eliminarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.rutaPDF = data.rutaPDF;
					partida.certificadoPdf = data.certificadoPdf;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'rutaPDF');
				}
				((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarCertificados(data.idPartidaCompra,certificadoPdf);
				/*outerDocument.seteoBytesArray((data as PartidaCompra).idPartidaCompra.toString(),this.certificadoPdf);*/
				agregoDoc = false;
				dispatchEvent( new Event("validarBotonGenerarLA",true));
				habilitarVer();
				
				
				
				if(rutaActualCer != file.nativePath)
				{
					asignarCambioCertificado();
				}
					
			}
			protected function visualizarPDF_clickHandler(event:MouseEvent):void
			{
				if(data.rutaPDF && !data.certificadoPdf){
					var request:URLRequest = new URLRequest(RutasPdF.GENERAL_RUTA + RutasPdF.CERTIFICADOS +  encodeURI(data.rutaPDF));
					navigateToURL(request);
				}else if(data.rutaPDF && data.certificadoPdf){
					var requestLocal:URLRequest = new URLRequest("file://"+  encodeURI(data.rutaPDF));
					navigateToURL(requestLocal);
				}
			}
			
			private function seleccionarOrigen():void
			{
				if (cmbOrigen && cmbOrigen.dataProvider && cmbOrigen.dataProvider.length > 0)
				{
					cmbOrigen.selectedIndex = cmbOrigen.seleccionarValor(data.origen);
				}
				else
				{
					setTimeout(seleccionarOrigen,100);
				}
			}
			
			protected function cmbOrigen_changingHandler(event:IndexChangeEvent):void
			{
				
				if(tipoItem == "agregarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra
					partida.origen = cmbOrigen.selectedItem.valor;
					origenCompra = cmbOrigen.selectedItem.valor;
					
					data.origen = cmbOrigen.selectedItem.valor;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'origen');
					dispatchEvent( new Event("validarBotonGenerarLA",true));
				}
				if(tipoItem == "eliminarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra
					partida.origen = cmbOrigen.selectedItem.valor;
					origenCompra = cmbOrigen.selectedItem.valor;
					data.origen = cmbOrigen.selectedItem.valor;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'origen');
					dispatchEvent( new Event("validarBotonGenerarLA",true));
				}
				//((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarOrigen(data.idPartidaCompra,origenCompra);
			}
			
			protected function agregarPartida(event:MouseEvent):void
			{
				
				var evento:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.AGREGAR_PARTIDAS_ARRIBO_GRID);
				evento.partida = data as PartidaCompra;
				evento.partida.object = "eliminarPartida";
				evento.indiceLista = this.itemIndex;
				dispatchEvent(evento);
			}
			protected function eliminarPartida(event:MouseEvent):void
			{
				PezasAnteriores = data.cantidadCompra;
				if(PezasAnteriores == 1)
					SoloquedaUnapieza();
				if(eliminaTodo)
					eliminaTodaspiezas();
				var evento:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.ELIMINAR_PARTIDAS_ARRIBO_GRID);
				evento.partida = data as PartidaCompra;
				evento.partida.object = "agregarPartida";
				evento.indiceLista = this.itemIndex;
				dispatchEvent(evento);
			}
			
		
			protected function tipoPublicaciones(value:String):void{
				if(value == "Publicaciones"){
					pdfMateriales.visible = pdfMateriales.includeInLayout = false;
					numfila.percentWidth = 4;
					lblSort.percentWidth = 9;
					descripcion.percentWidth = 31;
					monto.percentWidth = 10;
					cant.percentWidth = 10;
					montoT.percentWidth = 10;
					origen.percentWidth = 12;
					grpCmb.percentWidth = 12;
					pdfMateriales.percentWidth = 0;
					accion.percentWidth = 8;
					aux.visible = aux.includeInLayout = true;
					/*grupoAgregarEliminar.percentWidth = 15;*/
				}
				else{
					pdfMateriales.visible = pdfMateriales.includeInLayout = true;
					numfila.percentWidth = 3;
					lblSort.percentWidth = 6;
					descripcion.percentWidth = 25;
					monto.percentWidth = 8;
					cant.percentWidth = 8;
					montoT.percentWidth = 8;
					origen.percentWidth = 12;
					grpCmb.percentWidth = 12;
					pdfMateriales.percentWidth = 10;
					accion.percentWidth = 8;
					aux.visible = aux.includeInLayout = false;
				}
			}
			
			/************************Cargar Factura************************/
			
			[Bindable] private var font14:Number;
			/*override protected function updateDisplayList($width:Number, $height:Number):void
			{
			
			super.updateDisplayList($width,$height);
			
			font14 = (14 / 1148) * ($width);
			
			
			font14 = font14 > 14 ? 14:font14;
			
			}*/
			protected function reajustar_resizeHandler(event:ResizeEvent):void
			{
				font14 = (14 / 1148) * (unscaledWidth);
				
				
				font14 = font14 > 14 ? 14:font14;
			}
			private function activarAgregado(value:Object):void
			{
				agregarPartidaFactura.enabled = false;
				if (value.asociar)
					agregarPartidaFactura.enabled = true;
			}
			protected function agregarPartidaCargarFactura(event:MouseEvent):void
			{
				var evento:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.ASOCIAR_PARTIDAS_GRID);
				evento.partida = data as PartidaCompra;
				evento.partida.numFila = itemIndex;
				evento.partida.object = "eliminarCargaFactura";
				dispatchEvent(evento);
			}
			protected function eliminarPartidaCargarFactura(event:MouseEvent):void
			{
				var evento:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.ELIMINAR_ASOCIAR_PARTIDAS_GRID);
				evento.partida = data as PartidaCompra;
				evento.partida.numFila = itemIndex;
				evento.partida.object = "agregarCargaFactura";
				dispatchEvent(evento);		
			}
			/*******************************************************/
			public function gridPartidasObject():void
			{
				var evt:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.ENVIAR_OBJETO_PARTIDA_COMPRA);
				evt.partida = data as PartidaCompra;
				evt.gridTipo = "gridPartida";
				dispatchEvent(evt);
				
			}
			public function gridPartidasAsociarObject():void
			{
				
				var evt:EventoGestorCompras = new EventoGestorCompras(EventoGestorCompras.ENVIAR_OBJETO_PARTIDA_COMPRA);
				evt.partida = data as PartidaCompra;
				evt.gridTipo = "gridAsociarPartida";
				dispatchEvent(evt);
			}
			private function asignarRuaCertificadoUSP():void
			{
				var conRuta:Boolean;
				if(data.nombreProveedor=='USP'){
					if(!bloquearArchivoUSP){
						/*if((data.rutaCertificadoActual != null) || (data.rutaCertificadoActual != ''))*/
						if(data.rutaCertificadoActual != null){
							if( data.rutaCertificadoActual != ''){
								data.rutaPDF = data.rutaCertificadoActual;
							}
						}
					}
					bloquearArchivoUSP = true;
				}
			}
			
			protected function hgroup1_toolTipShowHandler(event:ToolTipEvent):void
			{
				var myTip:IToolTip;
				myTip = ToolTipManager.currentToolTip;
				var currentWidth:Number = event.currentTarget.width;
				var point:Point = new Point(event.currentTarget.x,event.currentTarget.y);
				var gPoint:Point = (event.currentTarget.parent as GroupBase).localToGlobal(point);
				myTip.x = (gPoint.x + (lblPrecio.width - 78));
				myTip.y = (gPoint.y + (lblPrecio.height + 16));
				
			}
			
			protected function createCustomToolTip($text:String,eve:ToolTipEvent):void
			{
				var customTolTip:toolTipCambioprecios = new toolTipCambioprecios;
				customTolTip.bodyText = $text;	
				eve.toolTip = customTolTip;
			}
			
			protected function enviarCambioMonto(event:MouseEvent):void
			{
				var eve:EventoGestorCompras= new EventoGestorCompras(EventoGestorCompras.OBTENER_ID_ORDENCOMPRA_MODIFICADA);
				eve.indiceAcambiar = itemIndex;
				eve.idOC = data.idPartidaCompra;
				eve.numPiezas = data.cantidadCompra;
				dispatchEvent(eve);
				
			}
			
			
			
			
			
			protected function cambioDecheck(event:MouseEvent,tipoC:String):void
			{
				if(tipoC == "check1")
				{
					checkCuadrado1.includeInLayout = checkCuadrado1.visible = false;
					chekSe1.includeInLayout = chekSe1.visible = true;
					
					data.certificadoNoDisponible = true;
				}
				else if(tipoC == "check2")
				{
					checkCuadrado1.includeInLayout = checkCuadrado1.visible = true;
					chekSe1.includeInLayout = chekSe1.visible = false;
					
					data.certificadoNoDisponible = false;
				}
				else if(tipoC == "check3")
				{
					checkCuadrado2.includeInLayout = checkCuadrado2.visible = false;
					chekSe2.includeInLayout = chekSe2.visible = true;
					data.certificadoNoDisponible = true;
					
				}
				else if(tipoC == "check4")
				{
					checkCuadrado2.includeInLayout = checkCuadrado2.visible = true;
					chekSe2.includeInLayout = chekSe2.visible = false;
					data.certificadoNoDisponible = false;
				}
				
				if(tipoItem == "agregarPartida"){
					
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.certificadoNoDisponible = data.certificadoNoDisponible;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'certificadoNoDisponible');
				}
				
				if(tipoItem == "eliminarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.certificadoNoDisponible = data.certificadoNoDisponible;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'certificadoNoDisponible');
				}
				
				dispatchEvent( new Event("validarBotonGenerarLA",true));
				
				data = ObjectUtil.copy(partida) as PartidaCompra;
				
			}
			
			public function asignarCambioCertificado():void
			{
				data.certificadoModificado = true;
				if(tipoItem == "agregarPartida"){
					
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.certificadoModificado = data.certificadoModificado;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosAgregar(partida,'certificadoModificado');
				}
				
				if(tipoItem == "eliminarPartida"){
					partida = new PartidaCompra();
					partida = ObjectUtil.copy(data) as PartidaCompra;
					partida.certificadoModificado = data.certificadoModificado;
					((owner as List).parentDocument as GridAsociarPartidaListaArriboLista).almacenarDatosQuitar(partida,'certificadoModificado');
				}
				
				data = ObjectUtil.copy(partida) as PartidaCompra;     
			}
			
			
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#FFFFFF" color.selected="#e6e6e6" color.hovered="#e6e6e6"/>
		</s:fill>
	</s:Rect>
	
	<!--Agregar Partidas-->
	<s:HGroup id="AgregarPartida" verticalAlign="middle" horizontalAlign="left" 
			  width="100%" height="100%" gap="0" >
		<label:TituloNovecento_18 id="numfila" fontSize="16" text="{data.numFila}" width="3%" textAlign="center"/>
		<label:Texto_14_Helvetica id="lblSort" text="{data.sortChar}" width="6%" textAlign="center" maxDisplayedLines="3"/>
		<label:Texto_14_Helvetica id="descripcion" toolTip="{data.descripcionProducto}" width="25%" text="{data.descripcionProducto}" textAlign="center" maxDisplayedLines="3"/>
		<label:Texto_14_Helvetica id="monto" text="{data.monedaSimbolo + ' ' +UtilsFormatosNumericos.precisionADosDecimalesConComas(data.precioUnitario)}" width="8%" textAlign="center"/>
		<s:HGroup id="cant" width="8%" height="100%" gap="0" verticalAlign="middle" horizontalAlign="center">
			<s:NumericStepper skinClass="mx.com.proquifa.vista.vistas.skin.boton.skinNumericStepperFlechas" id="nmsCantidad" value="{data.cantidadCompra}" minimum="1" maximum="{data.cantidadOriginalCompra}" styleName="tab_texto_14_HelveticaLight" change="numericstepper1_changeHandler(event)"  />
		</s:HGroup>
		<s:HGroup id="montoT" width="8%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<label:Texto_14_Helvetica text="{data.monedaSimbolo + ' ' +UtilsFormatosNumericos.precisionADosDecimalesConComas(montoTotal)}" textAlign="center"/>
		</s:HGroup>  
		<s:VGroup id="origen" width="12%" horizontalAlign="center" verticalAlign="middle" gap="0">
			<combo:ComboCatalogosBlanco id="cmbOrigen" width="180" height="24" color="#008894"   creationComplete="{cmbOrigen.cargaPaises()}" changing="cmbOrigen_changingHandler(event)"  />
		</s:VGroup>
		<s:HGroup id="grpCmb" width="12%" horizontalAlign="center" verticalAlign="middle">
			
			<s:Group id="esferasLote" >
				<s:Ellipse width="10" height="10" id="orange" visible="{tipoLote}" includeInLayout="{tipoLote}">
					<s:fill>
						<s:SolidColor color="#db9600"/>
					</s:fill>
				</s:Ellipse>
				<s:Ellipse width="10" height="10" id="green" visible="{!tipoLote}" includeInLayout="{!tipoLote}">
					<s:fill>
						<s:SolidColor color="#70a83b"/>
					</s:fill>
				</s:Ellipse>
			</s:Group>  
			
			<combo:ComboCatalogosBlanco id="cmbLote" color="#008894" width="130" height="24" change="cmbLote_changeHandler(event)" />
			<s:TextInput id="txtLote" width="130" text="{data.lote}" color="#008894" styleName="tab_texto_14_HelveticaLight" change="txt_changeHandler(event)" />
		</s:HGroup>
		
		
		<s:HGroup id="pdfMateriales" width="10%" gap="0" verticalAlign="middle">
			<s:VGroup width="100%" id="agregarPDF">
			
				<s:HGroup  width="100%" height="100%" verticalAlign="middle">
					
					<mx:Image id="cargar1" source="{catalogoIconosBotones.getInstance().cargar_archivo}" click="agregardocumento1_clickHandler('pdf')"/>
					<mx:Image id="ver1" source="{catalogoIconosBotones.getInstance().vista_previa_gris}" click="visualizarPDF_clickHandler(event)"/>
				</s:HGroup>  
				
				<s:HGroup id="check1" width="100%" height="100%" verticalAlign="middle" >
					<s:Group id="checkCuadrado1" click="cambioDecheck(event,'check1')" >
						<mx:Image  height="20"  source="{catalogoIconosBotones.getInstance().check_boxVerde}" verticalAlign="middle" width="20" />
					</s:Group>
					<s:Group id="chekSe1" click="cambioDecheck(event,'check2')" includeInLayout="false" visible="false" >
						<mx:Image  height="20"  source="{catalogoIconosBotones.getInstance().check_box_selectVerde}" verticalAlign="middle" width="20" />
					</s:Group>
					
					<label:Texto_14_Helvetica  text="No Disponible" fontSize="12" width="100%" />
				</s:HGroup>
				<!--	</s:Group> -->
			</s:VGroup>
			
			<s:VGroup width="100%" id="editarPDF" >
				<s:HGroup  width="100%" height="100%" gap="0"  verticalAlign="middle">
					<s:HGroup width="100%" verticalAlign="middle" gap="10">
						<mx:Image id="cargar2" source="{catalogoIconosBotones.getInstance().cargar_archivo}" click="agregardocumento1_clickHandler('pdf')"/>
						<mx:Image id="ver2" source="{catalogoIconosBotones.getInstance().vista_previa_gris}" click="visualizarPDF_clickHandler(event)"/>
					</s:HGroup>
					
				</s:HGroup> 
				
				<s:HGroup id="check2" width="100%" height="100%" verticalAlign="middle" >
					<s:Group id="checkCuadrado2" click="cambioDecheck(event,'check3')" >
						<mx:Image  height="20"  source="{catalogoIconosBotones.getInstance().check_boxVerde}" verticalAlign="middle" width="20" />
					</s:Group>
					<s:Group id="chekSe2" click="cambioDecheck(event,'check4')" includeInLayout="false" visible="false" >
						<mx:Image  height="20"  source="{catalogoIconosBotones.getInstance().check_box_selectVerde}" verticalAlign="middle" width="20" />
					</s:Group>
					<label:Texto_14_Helvetica  text="No Disponible" fontSize="12" width="100%" />
				</s:HGroup>
				
			</s:VGroup>
		</s:HGroup>
		<s:VGroup id="aux" width="4%" gap="0" verticalAlign="middle" paddingRight="4" visible="false" includeInLayout="false">
			
		</s:VGroup>
		<s:VGroup id="accion" width="8%" gap="0" verticalAlign="middle" paddingRight="4">
			<s:HGroup id="agregarPartidaGrid" width="100%" height="100%" verticalAlign="middle" click="agregarPartida(event)" paddingLeft="29">
				<mx:Image source="{catalogoIconosBotones.getInstance().agregarFlecha}"  horizontalAlign="center" verticalAlign="middle"/>
			</s:HGroup>
			<s:HGroup id="eliminarPartidaGrid" width="100%" height="100%" verticalAlign="middle" click="eliminarPartida(event)" paddingLeft="29">
				<mx:Image source="{catalogoIconosBotones.getInstance().eliminar}" horizontalAlign="center" verticalAlign="middle"/>
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
	
	
	
	<!--Cargar Factura-->
	<s:HGroup id="CargarFactura" verticalAlign="middle" horizontalAlign="left" 
			  width="100%" height="100%" gap="0" >
		<s:VGroup width="5%"  verticalAlign="middle">
			<label:Texto_14_Helvetica text="{(itemIndex+1)/*data.numFila*/}" width="100%" textAlign="center" fontSize="{font14}" verticalAlign="middle"/>	
		</s:VGroup>
		<s:VGroup width="33%" >
			<label:Texto_14_Helvetica text="{data.descripcionProducto}"  fontSize="{font14}" width="100%" height="100%" textAlign="left" maxDisplayedLines="3" verticalAlign="middle"/>	
		</s:VGroup>
		<s:VGroup width="9%" >
			<label:Texto_14_Helvetica text="{data.cantidadCompra}"  fontSize="{font14}" width="100%" textAlign="center" />	
		</s:VGroup>
		
		<s:VGroup width="11%" horizontalAlign="center" gap="1">
			<!--<s:Group width="100%" height="100%">-->
			<label:Texto_14_Helvetica id="lblPrecio"  text="{data.monedaString + ' ' + UtilsFormatosNumericos.precisionADosDecimalesConComas(data.precioUnitario)}" fontSize="{font14}" textAlign="center" toolTip=" " toolTipCreate="createCustomToolTip('Modificar Costo',event)" toolTipShow="hgroup1_toolTipShowHandler(event)" click="enviarCambioMonto(event)"/>	
			<otros:LineaPunteada color="#990099" width="{lblPrecio.width}" height="1" bottom="0" />
			<!--</s:Group>--> 
		</s:VGroup>
		<s:VGroup width="12%" >
			<label:Texto_14_Helvetica text="{data.monedaString + ' ' + UtilsFormatosNumericos.precisionADosDecimalesConComas(data.precioTotal)}"  fontSize="{font14}" width="100%" textAlign="center"/>	
		</s:VGroup> 
		<s:VGroup width="14%" >
			<label:Texto_14_Helvetica text="{data.estado}" fontSize="{font14}" width="100%" textAlign="center"/>	
		</s:VGroup>
		
		<s:VGroup width="12%" gap="0" horizontalAlign="center" verticalAlign="middle" id="grupoAgregarEliminar">
			<s:HGroup id="agregarPartidaFactura" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" click="agregarPartidaCargarFactura(event)">
				<mx:Image source="{catalogoIconosBotones.getInstance().agregarFlecha}"  horizontalAlign="center" verticalAlign="middle"/>
			</s:HGroup>
			<s:HGroup id="eliminarPartidaFactura" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" click="eliminarPartidaCargarFactura(event)">
				<mx:Image source="{catalogoIconosBotones.getInstance().eliminar}"  horizontalAlign="center" verticalAlign="middle"/>
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
	
	<otros:LineaDivision id="lineaListaArribo" width="100%" height="1" color="#e6e6e6" bottom="0" visible="false" includeInLayout="false" />
	<otros:LineaDivision id="lineaCargarFactura" width="100%" height="1" color="#f9f9f9" bottom="0" visible="false" includeInLayout="false"/>
	
	
</s:ItemRenderer>
