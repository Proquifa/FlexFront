<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:vistas="mx.com.proquifa.vista.vistas.registrarConfirmacion.vistas.*" 
		 xmlns:otros="skins.otros.*"
		 width="100%" height="100%" 
		 resize="calc(event)"		
		 creationComplete="init(event)"
		 >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.PartidaCompra;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.compras.RegistroConfirmacion;
			import mx.com.proquifa.proquifanet.rsl.vista.modelo.comun.Contacto;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.DatosGlobales;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.Query;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.UtilsFecha;
			import mx.com.proquifa.proquifanet.rsl.vista.utils.alertaSingleton;
			import mx.com.proquifa.vista.eventos.EventoGestorCompras;
			import mx.com.proquifa.vista.eventos.registrarConfirmacion.EventoRegistrarConfirmacion;
			import mx.com.proquifa.vista.eventos.tramitarCompra.EventoTramitarComprarMateriales;
			import mx.com.proquifa.vista.vistas.gestorCompras.componentes.popupModificaCosto.popUPModificaPrecio;
			import mx.com.proquifa.vista.vistas.registrarConfirmacion.componentes.PopUpRegistrarConfirmacion;
			import mx.com.proquifa.vista.vistas.registrarConfirmacion.componentes.PopUpSinImpacto;
			import mx.com.proquifa.vista.vistas.registrarConfirmacion.componentes.popUpCambiaPreciosRegistroC;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			import skins.catalogos.catalogoAlertas;
			import skins.catalogos.catalogoIconosBotones;
			[Bindable] public var sizeFont:Number;
			[Bindable] public var tipoSelect:String = "todos";
			[Bindable] public var tipoSelectTiempo:String = "todos";
			[Bindable] public var ocString:String = "";
			[Bindable] public var idProveedor:Number;
			public var valorRegistrada:int;
			public var familiaActual:String;
			public var indiceAcambiar:Number;
			public var importeVista:Number;
			public var precioVista:Number;
			public var numPiezas:int;
			public var indexListaOC:Number = 0;
			public var nacional:Boolean;
			public var listaVacia:ArrayCollection = new ArrayCollection;
			public var currentContactoVacio:Contacto = new Contacto();
			/*public var recargar:Boolean;*/
			
			//////////UNIVERSO DE PARTIDAS 
			[Bindable] public var universo:ArrayCollection;
			
			//////////UNIVERSO DE PARTIDAS FILTRADA POR TIPO (PARCIALES O NO REGISTRADOS) 
			[Bindable] public var universoActual:ArrayCollection;
			
			//////////LISTA A MOSTRAR
			[Bindable] public var listaFiltrada:ArrayCollection;
			
			//////////LISTA PARA BUSQUEDA
			[Bindable] public var lista:ArrayCollection;
			
			protected function calc(event:ResizeEvent):void
			{
				sizeFont = (15 / 2005) * (unscaledWidth);
				sizeFont = sizeFont > 15 ? 15:sizeFont;
				sizeFont = sizeFont < 12 ? 12:sizeFont;
			}
			public function recibirPartidasRC(value:ArrayCollection):void
			{
				/*vistaLista.dataProvider = value;*/
			}
			public function recibirFamiliasPorPartida($familias:ArrayCollection):void
			{
				if(!$familias || $familias.length == 0){
					vistaLista.cmpCoverflow.recibeFamilias(new ArrayCollection());
					return;
				}
				/*if(recargar)*/
				familiaActual = "";
				vistaLista.cmpCoverflow.recibeFamilias($familias);
			}
			public function recibirUniversoPartidas(value:ArrayCollection):void
			{
				universo = value;
				if(universo.length == 0){
					dispatchEvent(new Event("listaVacia"));
				}
			}
			public function recibirPartidasPorFamilia(value:ArrayCollection):void
			{
				universoActual = value;
			}
			
			private function agruparPorTipo(value:ArrayCollection,esRegistrada:int):ArrayCollection
			{
				var lista:ArrayCollection = ObjectUtil.copy(value) as ArrayCollection;
				if(tipoSelect != "todos"){
					var sqlTipo:Query = new Query(lista,["gestionarBool"],true);
					var punteros:Array;
					var partidas:ArrayCollection = new ArrayCollection();
					punteros = sqlTipo.getPunteros([esRegistrada]);
					for (var k:int = 0; k < punteros.length; k++) 
					{
						var partidaTemp:RegistroConfirmacion;
						partidaTemp = ObjectUtil.copy(sqlTipo.universo.getItemAt(punteros[k])) as RegistroConfirmacion;
						partidas.addItem(partidaTemp);
					}
					return partidas;
				}else
					return lista;
			}
			private function agruparPorTiempo(value:ArrayCollection,tiempo:String):ArrayCollection
			{
				var lista:ArrayCollection = ObjectUtil.copy(value) as ArrayCollection;
				var sqlTipo:Query = new Query(lista,["tipoDia"],true);
				var punteros:Array;
				var partidas:ArrayCollection = new ArrayCollection();
				punteros = sqlTipo.getPunteros([tiempo]);
				for (var k:int = 0; k < punteros.length; k++) 
				{
					var partidaTemp:RegistroConfirmacion;
					partidaTemp = ObjectUtil.copy(sqlTipo.universo.getItemAt(punteros[k])) as RegistroConfirmacion;
					partidas.addItem(partidaTemp);
				}
				return partidas;
			}
			
			private function agruparPorFamilia(value:ArrayCollection,familia:String):ArrayCollection
			{
				if(familia == 'publicaciones--'){
					familia = "publicaciones-null-null"
				}
				else if(familia == 'labware--'){
					familia = "labware-null-null"
				}
				else if(familia == 'capacitaciones--'){
					familia = "capacitaciones-null-null"
				}
				
				var lista:ArrayCollection = ObjectUtil.copy(value) as ArrayCollection;
				var sqlPartida:Query = new Query(lista,["familia"],true);
				var partidas:ArrayCollection = new ArrayCollection();
				var punteros:Array;
				punteros = sqlPartida.getPunteros([familia]);
				
				for (var j:int = 0; j < punteros.length; j++) 
				{
					var partidaTemp:RegistroConfirmacion;
					partidaTemp = ObjectUtil.copy(sqlPartida.universo.getItemAt(punteros[j])) as RegistroConfirmacion;
					partidaTemp.tipoPendiente = "normal";
					partidaTemp.cantidadCompra = partidaTemp.totalPiezas;
					partidaTemp.numFila = 0;
					partidas.addItem(partidaTemp);
				}
			
				return partidas;
			}
			
			private function agruparPorOC(value:ArrayCollection):ArrayCollection
			{
				var lista:ArrayCollection = ObjectUtil.copy(value) as ArrayCollection;
				var sqlPartida:Query = new Query(lista,["compra","tipoDia"],true);
				var punteros:Array;
				var partidas:ArrayCollection = new ArrayCollection();
				punteros = sqlPartida.getPunteros(["compra"]);
				
				for (var i:int = 0; i < punteros.length; i++) 
				{
					var punterosOC:Array;
					punterosOC = sqlPartida.getPunteros([punteros[i]]);
					var partidaTemp:RegistroConfirmacion;
					var antigua:int;
					var indice:int;
					
					for (var j:int = 0; j < punterosOC.length; j++) 
					{
						var temp:PartidaCompra = ObjectUtil.copy(sqlPartida.universo.getItemAt(punterosOC[j])) as RegistroConfirmacion;
						var diferencia:int;
						if(temp.fechaEstimadaEntrega){
							diferencia = UtilsFecha.regresaDiferenciaEntreFechasEnDias(new Date,temp.fechaEstimadaEntrega);
							if(j == 0){
								antigua = diferencia
								indice = punterosOC[0];  }
							if(diferencia < antigua){
								indice = punterosOC[j];
								antigua = diferencia;
							}
						}
						
						
					}
					
					partidaTemp = ObjectUtil.copy(sqlPartida.universo.getItemAt(indice)) as RegistroConfirmacion;
					partidaTemp.montoTotal = sqlPartida.getSumarCampo('montoTotal',punterosOC);
					partidaTemp.totalPiezas = sqlPartida.getSumarCampo('totalPiezas',punterosOC);
					partidaTemp.totalProductos = sqlPartida.getPunteros([punteros[i]],"idProducto").length;
					
					partidaTemp.piezasRegular = sqlPartida.getSumarCampo('piezasRegular',punterosOC);
					partidaTemp.piezasProgramado = sqlPartida.getSumarCampo('piezasProgramado',punterosOC);
					partidaTemp.piezasExpress = sqlPartida.getSumarCampo('piezasExpress',punterosOC);
					partidaTemp.piezasEntregaUnica = partidaTemp.piezasRegular + partidaTemp.piezasExpress;
					partidaTemp.piezasFleteNormal = partidaTemp.piezasRegular + partidaTemp.piezasProgramado;
					//piezas
					partidas.addItem(partidaTemp);
				}
				return partidas;
			}
			
			private function obtenerPartidasPorOC(value:ArrayCollection,oc:String):ArrayCollection
			{
				var lista:ArrayCollection = ObjectUtil.copy(value) as ArrayCollection;
				var sqlPartida:Query = new Query(lista,["compra"],true);
				var punteros:Array;
				var partidas:ArrayCollection = new ArrayCollection();
				punteros = sqlPartida.getPunteros([oc]);
				
				for (var i:int = 0; i < punteros.length; i++) 
				{
					var temp:RegistroConfirmacion = ObjectUtil.copy(sqlPartida.universo.getItemAt(punteros[i])) as RegistroConfirmacion;
					temp.tipoPendiente = "normal";
					temp.cantidadCompra = temp.totalPiezas;
					temp.numFila = 0;
					temp.indiceTabla = i+ 1 ;
					partidas.addItem(temp);
					
				}
				return partidas;
			}
			
			protected function init(event:FlexEvent):void
			{
				addEventListener(EventoRegistrarConfirmacion.OBTENER_INDEX_LISTA_OC,indicarindexListaOC);
				addEventListener(EventoRegistrarConfirmacion.OBTENER_ID_ORDENCOMPRA_MODIFICADA,abrirPopUP);
				vistaLista.grpBotoneraFoot.addEventListener(EventoRegistrarConfirmacion.CLIC_BOTONERA_FOOT,verificarBotoneraFoot);
				vistaLista.grpBotoneraHead.addEventListener(EventoRegistrarConfirmacion.CLIC_BOTONERA,verificarBotoneraHead);
				/////////////////  CAMBIO DE NIVEL EN COVERFLOW
				vistaLista.cmpCoverflow.addEventListener(EventoTramitarComprarMateriales.CAMBIA_NIVEL_VISTA_COVERFLOW,cambiarNivel);
				////////////////   CAMBIO DE INDICE EN LA LISTA
				vistaLista.lstOrdenesCompra.addEventListener(IndexChangeEvent.CHANGE,cambioIndice);
				
				vistaGrid.gridPartidas.addEventListener("todosDisponiblesPopUp",abrirPopUp);
				vistaGrid.gridPartidas.addEventListener("todosCambioPopUp",abrirPopUpCambio);
				vistaGrid.addEventListener("registrarConfirmacionPopUp",abrirPopUpAceptar);
				
				addEventListener("activarExito",abrirPopUpExito);
				vistaLista.addEventListener("seleccionarPrimero",seleccionarPrimero);
				
				vistaGrid.gridPartidas.addEventListener("terminarEspera",terminarEspera);
				addEventListener(EventoRegistrarConfirmacion.INICIA_ESPERA,AbrirPopUpEspera);
				
				
				
			}
			
			
			private function verificarBotoneraFoot(event:EventoRegistrarConfirmacion):void
			{
				if(inEspera)
					iniciaEspera(true);
				
				if(event.tipoSelect == 'noRegistradas')
					valorRegistrada = 0;
				
				else if(event.tipoSelect == 'parciales')
					valorRegistrada = 1;
				
				tipoSelect = event.tipoSelect;
				if(tipoSelectTiempo == "todos" ){
					listaFiltrada = agruparPorTipo(universoActual,valorRegistrada);
				}else{
					var listaTemp:ArrayCollection;
					listaTemp = agruparPorTipo(universoActual,valorRegistrada);
					listaFiltrada = agruparPorTiempo(listaTemp,tipoSelectTiempo);
				}
				vistaLista.dataProvider = agruparPorOC(listaFiltrada);
				if(vistaLista.dataProvider.length <= 0)
				{
					
					vistaGrid.gridPartidas.dataProvider = listaVacia;
					vistaGrid.currentContacto = currentContactoVacio;
					vistaGrid.llenarInfo("","","","");
				}
			
				
			}
			
			private function verificarBotoneraHead(event:EventoRegistrarConfirmacion):void
			{
				if(inEspera)
					iniciaEspera(true);
				
				tipoSelectTiempo = event.tipoSelect;
				if(tipoSelectTiempo == "todos"){
					listaFiltrada = agruparPorTipo(universoActual,valorRegistrada);
				}else{
					var listaTemp:ArrayCollection;
					listaTemp = agruparPorTipo(universoActual,valorRegistrada);
					listaFiltrada = agruparPorTiempo(listaTemp,tipoSelectTiempo);
				}
				vistaLista.dataProvider = agruparPorOC(listaFiltrada);
				if(vistaLista.dataProvider.length <= 0)
				{
					
					vistaGrid.gridPartidas.dataProvider = listaVacia;
					vistaGrid.currentContacto = currentContactoVacio;
					vistaGrid.llenarInfo("","","","");
				}
			}
			
			private function cambiarNivel(evt:EventoTramitarComprarMateriales):void
			{
				if(inEspera)
					iniciaEspera(true);
				var familiaSelect:String = evt.familiaSelect.toLowerCase();
				
				if(familiaActual != familiaSelect){
					
					universoActual = agruparPorFamilia(universo,familiaSelect);
					
					var listaTemp:ArrayCollection;
					listaTemp = agruparPorTipo(universoActual,valorRegistrada);
					if(tipoSelectTiempo == "todos" ){
						listaFiltrada = listaTemp
					}
					else{
						listaFiltrada = agruparPorTiempo(listaTemp,tipoSelectTiempo);
					}
					
					vistaLista.dataProvider = agruparPorOC(listaFiltrada);
					familiaActual = familiaSelect;
				}
			}
			
			private function cambioIndice(event:IndexChangeEvent):void
			{
				var tempPartida:RegistroConfirmacion;
				tempPartida = ObjectUtil.copy(vistaLista.lstOrdenesCompra.dataProvider[event.newIndex]) as RegistroConfirmacion;
				vistaGrid.currentContacto = tempPartida.contacto;
				if(tempPartida.gestionarBool == 0)
				{
			        vistaGrid.estadoGestionada = 0;
					vistaGrid.medioPro = tempPartida.medioPagoProveedor;
					vistaGrid.condicionesPro = tempPartida.CPagoProveedor;
				}
					
				else if(tempPartida.gestionarBool == 1){
					if(tempPartida.condicionesPago != "" && tempPartida.condicionesPago != null)
						vistaGrid.estadoGestionada = 1;	
					else{
						vistaGrid.estadoGestionada = 0;
						vistaGrid.medioPro = tempPartida.medioPagoProveedor;
						vistaGrid.condicionesPro = tempPartida.CPagoProveedor;
					}
					
				}
				vistaGrid.llenarInfo(tempPartida.medioPago,tempPartida.condicionesPago,tempPartida.confirma,tempPartida.referencia);
				
				vistaGrid.ocString = tempPartida.compra;
				ocString = tempPartida.compra;
				vistaGrid.indice = ""+(event.newIndex+1);
				
				if(tempPartida.diferenciaDias == 1)
					vistaGrid.dia = "1 DÍA";
				else if(tempPartida.diferenciaDias == 2)
					vistaGrid.dia = "2 DÍAS";
				else if(tempPartida.diferenciaDias == 3)
					vistaGrid.dia = "3 DÍAS";
				else if(tempPartida.diferenciaDias > 3)
					vistaGrid.dia = "3+ DÍAS";
				else
					vistaGrid.dia = "ND";
				
				
				vistaGrid.setDatos(obtenerPartidasPorOC(universo,tempPartida.compra));
			
			}
			
			//////////////////////// POPUP SELECCIONAR TODO ////////////////////////
			private var popUpImpacto:PopUpSinImpacto;
			protected function abrirPopUp(event:Event):void
			{
				if( popUpImpacto == null ){
					popUpImpacto = PopUpSinImpacto(PopUpManager.createPopUp( this, PopUpSinImpacto, true ) );
					PopUpManager.centerPopUp( popUpImpacto );
					popUpImpacto.ordenDespacho = ocString;
					if(vistaGrid.gridPartidas.lstOrdenesCompra.dataProvider.length > 0)
						popUpImpacto.setPrefijo(vistaGrid.gridPartidas.lstOrdenesCompra.dataProvider[0].entregarEn)
					popUpImpacto.addEventListener("cancelarPopUP",cerrarPopUp);
					popUpImpacto.addEventListener("aceptarPopUP",aceptarPopUp);
				}else{
					PopUpManager.addPopUp( popUpImpacto , this, true );
				}
			}
			
			protected function abrirPopUpCambio(event:Event):void
			{
				if( popUpImpacto == null ){
					popUpImpacto = PopUpSinImpacto(PopUpManager.createPopUp( this, PopUpSinImpacto, true ) );
					PopUpManager.centerPopUp( popUpImpacto );
					popUpImpacto.setTipoPopUp("impacto");
					popUpImpacto.ordenDespacho = ocString;
					if(vistaGrid.gridPartidas.lstOrdenesCompra.dataProvider.length > 0)
						popUpImpacto.setPrefijo(vistaGrid.gridPartidas.lstOrdenesCompra.dataProvider[0].entregarEn)
					popUpImpacto.addEventListener("cancelarPopUP",cerrarPopUp);
					popUpImpacto.addEventListener("aceptarPopUPCambio",aceptarPopUpCambio);
				}else{
					PopUpManager.addPopUp( popUpImpacto , this, true );
				}
			}
			
			private function cerrarPopUp(event:Event):void
			{
				PopUpManager.removePopUp( popUpImpacto );
				popUpImpacto = null;
				/*vistaGrid.gridPartidas.seleccionarTodo(false);*/
				/*dispatchEvent( new Event("recargarPendientes",true));*/
			}
			
			private function aceptarPopUp(event:Event):void
			{
				var dateRMT:Date;
				dateRMT = popUpImpacto.dateRmt.selectedDate;
				PopUpManager.removePopUp( popUpImpacto );
				popUpImpacto = null;
				vistaGrid.gridPartidas.seleccionarTodo(true,dateRMT,"disponible");
				/*dispatchEvent( new Event("recargarPendientes",true));*/
			}
			
			private function aceptarPopUpCambio(event:Event):void
			{
				var dateRMT:Date;
				dateRMT = popUpImpacto.dateCambio.selectedDate;
				var dateNuevaFEE:Date = popUpImpacto.dateNuevaFee.selectedDate;
				var justificacion:String= popUpImpacto.txtNotasCambio.text;
				var motivo:String= popUpImpacto.motivo
				var archivo:ByteArray = popUpImpacto.archivo;
				var nombreArchivo:String = popUpImpacto.nombreArchivo;
				var rutaArchivo:String = popUpImpacto.rutaArchivo;
				/*var nombreArchivo:String = popUpImpacto.
				var rutaArchivo:String = popUpImpacto*/
				PopUpManager.removePopUp( popUpImpacto );
				popUpImpacto = null;
				vistaGrid.gridPartidas.seleccionarTodo(true,dateRMT,"cambio",dateNuevaFEE,justificacion,motivo,archivo,nombreArchivo,rutaArchivo);
				/*dispatchEvent( new Event("recargarPendientes",true));*/
			}
			
			//////////////////////// POPUP EXITO Y REGISTRAR ////////////////////////
			private var popUpExito:PopUpRegistrarConfirmacion;
			protected function abrirPopUpAceptar(event:Event):void
			{
				crearPopUpExito(true);
			}
			protected function abrirPopUpExito(event:Event):void
			{
				crearPopUpExito(false);
			}
			private function cerrarPopUpRegistrar(event:Event):void
			{
				PopUpManager.removePopUp( popUpExito );
				popUpExito = null;
				/*dispatchEvent( new Event("recargarPendientes",true));*/
			}
			
			private function aceptarPopUpRegistrar(event:Event):void
			{
				PopUpManager.removePopUp( popUpExito );
				popUpExito = null;
				registrarObtenerPartidas();
				/*dispatchEvent( new Event("recargarPendientes",true));*/
			}
			
			
			
			private function crearPopUpExito(value:Boolean):void
			{
				if( popUpExito == null ){
					popUpExito = PopUpRegistrarConfirmacion(PopUpManager.createPopUp( this, PopUpRegistrarConfirmacion, true ) );
					PopUpManager.centerPopUp( popUpExito );
					popUpExito.ordenDespacho = ocString;
					popUpExito.tipoExito(value);
					popUpExito.addEventListener("cancelarPopUP",cerrarPopUpRegistrar);
					popUpExito.addEventListener("aceptarPopUP",aceptarPopUpRegistrar);
					/*popUpExito.addEventListener("registrarExito",registrarObtenerPartidas);*/
				}else{
					PopUpManager.addPopUp( popUpExito , this, true );
				}
			}
			
			private function registrarObtenerPartidas():void
			{
				
				vistaGrid.registrarConfirmacion();
			}
			
			public function recibirRespuestaRegistrar(value:int):void
			{
			   iniciaEspera(false);
				if(value == 1){
					dispatchEvent( new Event("activarExito",true));
					dispatchEvent( new Event("recargarPendientes",true));
					
					if(nacional)
					{
						var eveRegConfN:EventoRegistrarConfirmacion = new EventoRegistrarConfirmacion(EventoRegistrarConfirmacion.OBTENER_INFO_COMPRA_AGRUPADA_NACIONAL);
						eveRegConfN.empleado = DatosGlobales.getInstance()._usuario;
						eveRegConfN.internacionales = false;
						dispatchEvent(eveRegConfN);
						
						var eveRegGridN:EventoRegistrarConfirmacion = new EventoRegistrarConfirmacion(EventoRegistrarConfirmacion.OBTENER_PARTIDAS_POR_PROVEEDOR_NACIONAL);
						eveRegGridN.idProveedor = idProveedor;
						eveRegGridN.internacionales = false;
						eveRegGridN.empleado = DatosGlobales.getInstance()._usuario;
						dispatchEvent(eveRegGridN);
						
					}
					else
					{
						var eveRegConf:EventoRegistrarConfirmacion = new EventoRegistrarConfirmacion(EventoRegistrarConfirmacion.OBTENER_INFO_COMPRA_AGRUPADA);
						eveRegConf.empleado = DatosGlobales.getInstance()._usuario;
						eveRegConf.internacionales = true;
						dispatchEvent(eveRegConf);
						
						var eveRegGrid:EventoRegistrarConfirmacion = new EventoRegistrarConfirmacion(EventoRegistrarConfirmacion.OBTENER_PARTIDAS_POR_PROVEEDOR);
						eveRegGrid.idProveedor = idProveedor;
						eveRegGrid.internacionales = true;
						eveRegGrid.empleado = DatosGlobales.getInstance()._usuario;
						dispatchEvent(eveRegGrid);
					}
					
				
				}else if(value == -1){
					alertaSingleton.show("No se pudo registrar la confirmación");
				}
			}
			
			
			private function seleccionarPrimero(event:Event):void
			{
				var tempPartida:RegistroConfirmacion;
				tempPartida = ObjectUtil.copy(vistaLista.lstOrdenesCompra.dataProvider[0]) as RegistroConfirmacion;
				vistaGrid.currentContacto = tempPartida.contacto;
				if(tempPartida.gestionarBool == 0)
				{
					vistaGrid.estadoGestionada = 0;
					vistaGrid.medioPro = tempPartida.medioPagoProveedor;
					vistaGrid.condicionesPro = tempPartida.CPagoProveedor;
				}
				else if(tempPartida.gestionarBool == 1){
					if(tempPartida.condicionesPago != "" && tempPartida.condicionesPago != null)
						vistaGrid.estadoGestionada = 1;	
					else{
						vistaGrid.estadoGestionada = 0;
						vistaGrid.medioPro = tempPartida.medioPagoProveedor;
						vistaGrid.condicionesPro = tempPartida.CPagoProveedor;
					}
						
							
				}
					
				vistaGrid.llenarInfo(tempPartida.medioPago,tempPartida.condicionesPago,tempPartida.confirma,tempPartida.referencia);
				vistaGrid.ocString = tempPartida.compra;
				ocString = tempPartida.compra;
				vistaGrid.indice = ""+(0+1);
				
				if(tempPartida.diferenciaDias == 1)
					vistaGrid.dia = "1 DÍA";
				else if(tempPartida.diferenciaDias == 2)
					vistaGrid.dia = "2 DÍAS";
				else if(tempPartida.diferenciaDias == 3)
					vistaGrid.dia = "3 DÍAS";
				else if(tempPartida.diferenciaDias > 3)
					vistaGrid.dia = "3+ DÍAS";
				else
					vistaGrid.dia = "ND";
				
				vistaGrid.setDatos(obtenerPartidasPorOC(universo,tempPartida.compra));
				
			}
			
			private var inEspera:Boolean = false;
			public function iniciaEspera(iniciar:Boolean):void
			{
				if(iniciar)
				{
					alertaSingleton.show(catalogoAlertas.INICIAR_ESPERA,"","","","","","",null,true);
					inEspera = true;
				}
				else
				{
					inEspera = false;
					alertaSingleton.remove(true);
				}
			}
			private function terminarEspera(event:Event):void
			{
				iniciaEspera(false);
			}
			
			private function AbrirPopUpEspera(event:EventoRegistrarConfirmacion):void
			{
				iniciaEspera(true);
			}
			
			public function indicarindexListaOC(evento:EventoRegistrarConfirmacion):void
			{
				indexListaOC = evento.indiceAcambiar;
			}
			
			
			private var popUpCambiaPrecios:popUpCambiaPreciosRegistroC;
			public function abrirPopUP (e:EventoRegistrarConfirmacion): void
			{
				indiceAcambiar = e.indiceAcambiar;
				numPiezas = e.numPiezas;
				
			
				if( popUpCambiaPrecios == null ){
					popUpCambiaPrecios = popUpCambiaPreciosRegistroC(PopUpManager.createPopUp( this, popUpCambiaPreciosRegistroC, true ) );
					PopUpManager.centerPopUp( popUpCambiaPrecios );/*
					popUpHistorial.lstHistorial.dataProvider = listaHistorial;*/
					/*popUpCambiaPrecios.recibirInfo =  vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.descripcionProducto;*/
					//popUpCambiaPrecios.recibirInfo = vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.codigo+' '+ vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.concepto+' '+vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.fabrica;
					popUpCambiaPrecios.recibirInfo = vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.codigo+' '+ vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.concepto;
					popUpCambiaPrecios.recibirMoneda = vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.moneda;
					popUpCambiaPrecios.recibirPrecio = vistaGrid.gridPartidas.lstOrdenesCompra.selectedItem.precioUnitario;
					popUpCambiaPrecios.recibirOcPartida = e.idOC;
					popUpCambiaPrecios.addEventListener("cancelar",cerrarPopUpCambiaPrecios);
					popUpCambiaPrecios.addEventListener(EventoRegistrarConfirmacion.ENVIAR_DATOS_DEL_POPUP,recibeDatosDelPopUp);
					/*popUpExito.addEventListener("registrarExito",registrarObtenerPartidas);*/
				}else{
					PopUpManager.addPopUp( popUpCambiaPrecios , this, true );
				}
			}
			
			public function recibeDatosDelPopUp(evento:EventoRegistrarConfirmacion):void
			{
				importeVista = evento.costoNuevo * numPiezas;
				precioVista = evento.costoNuevo;
				if(nacional)
				{
					var cambiosPartidaN:EventoRegistrarConfirmacion = new EventoRegistrarConfirmacion(EventoRegistrarConfirmacion.RECIBE_DATOS_DEL_POPUP_NACIONAL);
					cambiosPartidaN.tipoCambio = evento.tipoCambio;
					cambiosPartidaN.costoNuevo = evento.costoNuevo;
					cambiosPartidaN.idOC = evento.idOC;
					cambiosPartidaN.internacionales = false;
					dispatchEvent(cambiosPartidaN);  
				}
				else {
					var cambiosPartida:EventoRegistrarConfirmacion = new EventoRegistrarConfirmacion(EventoRegistrarConfirmacion.RECIBE_DATOS_DEL_POPUP);
					cambiosPartida.tipoCambio = evento.tipoCambio;
					cambiosPartida.costoNuevo = evento.costoNuevo;
					cambiosPartida.idOC = evento.idOC;
					cambiosPartida.internacionales = true;
					dispatchEvent(cambiosPartida);  
					
				}
				
			}
			
			
			
			
			public function confirmarCambioDePrecio(value:Boolean):void
			{
				var listaTempo:ArrayCollection = new ArrayCollection;
				if(value)
				{
					vistaGrid.gridPartidas.lstOrdenesCompra.dataProvider[indiceAcambiar].precioUnitario = precioVista;
					vistaGrid.gridPartidas.lstOrdenesCompra.dataProvider[indiceAcambiar].montoTotal = importeVista;
					vistaLista.lstOrdenesCompra.dataProvider[indexListaOC].montoTotal = importeVista;
				
					
					vistaGrid.gridPartidas.mostrarTotales(vistaGrid.gridPartidas.lstOrdenesCompra.dataProvider as ArrayCollection);
					vistaLista.mostrarTotales(vistaLista.lstOrdenesCompra.dataProvider as ArrayCollection);
				
					
				}
			
				
				
			}
			
			/*alertaSingleton.show("Exito");*/
			
			public  function cerrarPopUpCambiaPrecios(event:Event):void
			{
				PopUpManager.removePopUp( popUpCambiaPrecios );
				popUpCambiaPrecios = null;
				
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:HGroup width="100%" height="100%" gap="0" paddingLeft="6" paddingTop="20" paddingRight="20" paddingBottom="20">
			<vistas:VistaRegistrarConfirmacion_OperacionListaCompra width="35%" height="100%" id="vistaLista"/>
			<s:Spacer width="18" maxHeight="20"/>
			<otros:divisionDegradadoVertical height="100%" width="2" />
			<s:Spacer width="20" maxHeight="20"/>
			<vistas:VistaRegistrarConfirmacion_OperacionGrid width="65%" height="100%" id="vistaGrid"/>
		</s:HGroup>  
		
		<s:VGroup width="100%" height="15%" maxHeight="50" verticalAlign="middle" horizontalAlign="center" id="footer">
			<s:HGroup paddingLeft="-14" width="100%" >
				<otros:division width="100%" grueso="1" color="#404040"/>
			</s:HGroup>
			<s:HGroup width="60%" height="100%" gap="0" verticalAlign="middle" horizontalAlign="center">
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Image smoothBitmapContent="true" source="{catalogoIconosBotones.getInstance().programado_azul}" />
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" textAlign="center" text="Entrega Programado"/>
				</s:HGroup>
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Image smoothBitmapContent="true" source="{catalogoIconosBotones.getInstance().unico_azul}" />
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" textAlign="center" text="Entrega Única"/>
				</s:HGroup>
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Image smoothBitmapContent="true" source="{catalogoIconosBotones.getInstance().flete_express_azul}" />
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" textAlign="center" text="Flete Express"/>
				</s:HGroup>
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Image smoothBitmapContent="true" source="{catalogoIconosBotones.getInstance().flete_normal_azul}" />
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" textAlign="center" text="Flete Normal"/>
				</s:HGroup>
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" text="CU" color="#0b8894"/>
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" text="Costo Unitario"/>
				</s:HGroup>
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" text="CT" color="#0b8894"/>
					<s:Label styleName="tab_texto_14_Helvetica" fontSize="{sizeFont}" text="Costo Total"/>
				</s:HGroup>
			</s:HGroup> 
		</s:VGroup>  
	</s:VGroup>  
</s:Group>
