<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2010 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the anchor button on a Spark ComboBox component.  

@see spark.components.ComboBox        
@see spark.skins.spark.ComboBoxSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="19" minHeight="23">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import skins.catalogos.catalogoColores;
			import skins.catalogos.catalogoIconosBotones;
		]]>
	</fx:Script>
	
		<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For dropDownList buttons, the graphics are colorized but the arrow is not. */
		static private const exclusions:Array = ["arrow"];
		
		private var cornerRadius:Number = 0;
		
		/** 
		 * @private
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the symbol fill items that should be colored by the "symbolColor" style. */
		// static private const symbols:Array = ["arrowFill1", "arrowFill2"];
		
		/**
		 * @private 
		 */
		// override public function get symbolItems():Array {return symbols};
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			var cr:Number = getStyle("cornerRadius");
			
			/*  if (cornerRadius != cr)
			{
			cornerRadius = cr;
			fill.bottomRightRadiusX = fill.topRightRadiusX = cornerRadius;
			lowlight.bottomRightRadiusX = lowlight.topRightRadiusX = cornerRadius;
			highlight.bottomRightRadiusX = highlight.topRightRadiusX = cornerRadius;
			border.bottomRightRadiusX = border.topRightRadiusX = cornerRadius;
			}
			
			if (highlightStroke) 
			highlightStroke.bottomRightRadiusX = highlightStroke.topRightRadiusX = cornerRadius;
			if (hldownstroke1)
			hldownstroke1.bottomRightRadiusX = hldownstroke1.topRightRadiusX = cornerRadius;
			if (hldownstroke2)
			hldownstroke2.bottomRightRadiusX = hldownstroke2.topRightRadiusX = cornerRadius;*/
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<!-- layer 1: fill -->
	<!--- @private -->
	<!--<s:Rect id="fill" left="1" right="1" top="1" bottom="1"
			topLeftRadiusX="5"
			topRightRadiusX="5"
			bottomLeftRadiusX="5"
			bottomRightRadiusX="5">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="#353535" 
								 color.over="0xBBBDBD" 
								 color.down="0xAAAAAA" 
								 alpha="0.85" />
				<s:GradientEntry color="#353535" 
								 color.over="0x9FA0A1" 
								 color.down="0x929496" 
								 alpha="0.85" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>-->
	
	<!-- layer 2: fill lowlight -->
	<!--- @private -->
	<!--<s:Rect id="lowlight" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry color="0x000000" ratio="0.0" alpha="0.0627" />
				<s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099" />
				<s:GradientEntry color="0x000000" ratio="0.48001" alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>-->
	
	<!-- layer 3: fill highlight -->
	<!--- @private -->
	<!--<s:Rect id="highlight" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.0"
								 alpha="0.33" 
								 alpha.over="0.22" 
								 alpha.down="0.12"/>
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48"
								 alpha="0.33"
								 alpha.over="0.22"
								 alpha.down="0.12" />
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48001"
								 alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>-->
	
	<!--<s:Rect id="border" left="0"  right="1" top="1" bottom="1" width="18" height="15">
		<s:fill>
			<s:LinearGradient id="bgFill" rotation="90" >
				<s:entries >
					<s:GradientEntry color="white" />
					<s:GradientEntry color="white" />
				</s:entries>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>-->
	
	<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" paddingRight="5">
		<s:Image source="{catalogoIconosBotones.getInstance().triangulo_combo}" verticalAlign="middle" horizontalAlign="center"/>
	</s:VGroup>
</s:SparkSkin>
